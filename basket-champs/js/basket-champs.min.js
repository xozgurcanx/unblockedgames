var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var BasketChamps;
(function (BasketChamps) {
    var AchievementsManager = (function () {
        function AchievementsManager() {
            if (AchievementsManager._instance) {
                throw new Error("Error: Instantiation failed: Use AchievementsManager.getInstance() instead of new");
            }
            else {
                AchievementsManager._instance = this;
            }
        }
        AchievementsManager.getInstance = function () {
            if (AchievementsManager._instance === null) {
                AchievementsManager._instance = new AchievementsManager();
            }
            return AchievementsManager._instance;
        };
        AchievementsManager.prototype.init = function () {
            var achievementsDataString = BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.ACHIEVEMENTS_KEY);
            if (achievementsDataString) {
                this.achievementsData = JSON.parse(achievementsDataString);
            }
            else {
                this.achievementsData = {
                    classification_round: false,
                    tournament_first_round: false,
                    quarter_final_round: false,
                    semifinal_round: false,
                    final_round: false,
                    ten_baskets_in_a_row: false,
                    twentyfive_baskets_in_a_row: false,
                    baskets_in_a_row: 0
                };
            }
        };
        AchievementsManager.prototype.matchEnded = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                try {
                    miniplaySend2API("baskets_in_a_row", this.achievementsData.baskets_in_a_row);
                }
                catch (error) {
                    console.log(error);
                }
            }
            if (BasketChamps.GameVars.getInstance().numMatch === 5 && !this.achievementsData.tournament_first_round) {
                this.achievementsData.tournament_first_round = true;
                if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                    this.setLaggedAchievement("basket_champs_ga004");
                }
                else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                    this.setMinijuegosAchievement("tournament_first_round");
                }
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 6 && !this.achievementsData.quarter_final_round) {
                this.achievementsData.quarter_final_round = true;
                if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                    this.setLaggedAchievement("basket_champs_ga005");
                }
                else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                    this.setMinijuegosAchievement("quarter_final_round");
                }
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 7 && !this.achievementsData.semifinal_round) {
                this.achievementsData.semifinal_round = true;
                if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                    this.setLaggedAchievement("basket_champs_ga006");
                }
                else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                    this.setMinijuegosAchievement("semifinal_round");
                }
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 8 && !this.achievementsData.final_round) {
                this.achievementsData.final_round = true;
                if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                    this.setLaggedAchievement("basket_champs_ga007");
                }
                else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                    this.setMinijuegosAchievement("final_round");
                }
            }
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.ACHIEVEMENTS_KEY, JSON.stringify(this.achievementsData));
        };
        AchievementsManager.prototype.classificationPassed = function () {
            if (!this.achievementsData.classification_round) {
                this.achievementsData.classification_round = true;
                if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                    this.setLaggedAchievement("basket_champs_ga003");
                }
                else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                    this.setMinijuegosAchievement("classification_round");
                }
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.ACHIEVEMENTS_KEY, JSON.stringify(this.achievementsData));
            }
        };
        AchievementsManager.prototype.playerShot = function (basket) {
            if (basket) {
                this.achievementsData.baskets_in_a_row++;
                if (this.achievementsData.baskets_in_a_row >= 10 && !this.achievementsData.ten_baskets_in_a_row) {
                    this.achievementsData.ten_baskets_in_a_row = true;
                    if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                        this.setLaggedAchievement("basket_champs_ga001");
                    }
                    else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                        this.setMinijuegosAchievement("ten_baskets_in_a_row");
                    }
                }
                else if (this.achievementsData.baskets_in_a_row >= 25 && !this.achievementsData.twentyfive_baskets_in_a_row) {
                    this.achievementsData.twentyfive_baskets_in_a_row = true;
                    if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                        this.setLaggedAchievement("basket_champs_ga002");
                    }
                    else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                        this.setMinijuegosAchievement("twentyfive_baskets_in_a_row");
                    }
                }
            }
            else {
                this.achievementsData.baskets_in_a_row = 0;
            }
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.ACHIEVEMENTS_KEY, JSON.stringify(this.achievementsData));
        };
        AchievementsManager.prototype.setLaggedAchievement = function (key) {
            var api_awards = [];
            api_awards.push(key);
            LaggedAPI.Achievements.save(api_awards, function (response) {
                if (response.success) {
                    console.log("lagged achievement saved");
                }
                else {
                    console.log(response.errormsg);
                }
            });
        };
        AchievementsManager.prototype.setMinijuegosAchievement = function (key) {
            try {
                miniplaySend2API(key, 1);
            }
            catch (error) {
                console.log(error);
            }
        };
        return AchievementsManager;
    }());
    AchievementsManager._instance = null;
    BasketChamps.AchievementsManager = AchievementsManager;
})(BasketChamps || (BasketChamps = {}));
window.onload = function () {
    var game = new BasketChamps.Game();
};
var BasketChamps;
(function (BasketChamps) {
    var AudioManager = (function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                AudioManager._instance = this;
            }
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            this.game = game;
            this.loopPlayingKey = null;
            this.audioSprite = this.game.add.audioSprite("audio-sprite");
            var audioStateStr = BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.AUDIO_STATE_KEY);
            if (audioStateStr !== "") {
                this.isMuted = JSON.parse(audioStateStr);
            }
            else {
                this.isMuted = false;
            }
            this.game.sound.mute = this.isMuted;
        };
        AudioManager.prototype.mute = function () {
            this.isMuted = true;
            this.game.sound.mute = true;
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.unmute = function () {
            this.isMuted = false;
            this.game.sound.mute = false;
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.AUDIO_STATE_KEY, JSON.stringify(this.isMuted));
        };
        AudioManager.prototype.playSound = function (key, loop, volume) {
            loop = loop || false;
            this.audioSprite.play(key, volume);
            if (loop) {
                if (this.loopPlayingKey && (this.loopPlayingKey !== key)) {
                    this.stopSound(this.loopPlayingKey, false, true);
                }
                this.loopPlayingKey = key;
            }
        };
        AudioManager.prototype.stopSound = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            if (fade) {
                var sound = this.audioSprite.get(key);
                sound.fadeOut(850);
            }
            else {
                this.audioSprite.stop(key);
            }
            if (loop) {
                this.loopPlayingKey = null;
            }
        };
        return AudioManager;
    }());
    AudioManager._instance = null;
    BasketChamps.AudioManager = AudioManager;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, BasketChamps.GameConstants.GAME_WIDTH, BasketChamps.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            Game.currentInstance = _this;
            _this.state.add("Boot", BasketChamps.Boot, true);
            _this.state.add("PreLoader", BasketChamps.PreLoader, false);
            _this.state.add("SplashState", BasketChamps.SplashState, false);
            _this.state.add("BasketballCourtState", BasketChamps.BasketballCourtState, false);
            _this.state.add("CreditsState", BasketChamps.CreditsState, false);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    BasketChamps.Game = Game;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "1.3";
    GameConstants.ASSETS_PATH = "assets";
    GameConstants.DEVELOPMENT = false;
    GameConstants.SHOW_PHYSICS_BODIES = false;
    GameConstants.DRAG_BALL_WITH_MOUSE = false;
    GameConstants.GAMEPIX = "gamepix";
    GameConstants.LAGGED = "lagged.com";
    GameConstants.MINIJUEGOS = "minijuegos";
    GameConstants.IZZYGAMES = "izzy games";
    GameConstants.KIZI = "kizi";
    GameConstants.NONE = "none";
    GameConstants.SPONSOR = GameConstants.KIZI;
    GameConstants.LINK_MINIJUEGOS = "";
    GameConstants.LINK_MINIJUEGOS_MORE_BASKET_GAMES = "";
    GameConstants.MOV_HOR = false;
    GameConstants.MOV_VER = false;
    GameConstants.GAME_WIDTH = 600;
    GameConstants.GAME_HEIGHT = 375;
    GameConstants.EASY_GAME = false;
    GameConstants.NUM_ROUNDS = 5;
    GameConstants.BALL_ID = "ball";
    GameConstants.TIME_FADE = 500;
    GameConstants.VERT_MOV_SLOW = .3;
    GameConstants.VERT_MOV_FAST = .6;
    GameConstants.HOR_MOV_SLOW = .3;
    GameConstants.HOR_MOV_FAST = .6;
    GameConstants.PIXELS_MOV_VERT = 75;
    GameConstants.PIXELS_MOV_HOR = 30;
    GameConstants.MY_TEAM_ID_KEY = "bc_myTeamID";
    GameConstants.MY_GROUP_ID_KEY = "bc_myGroupID";
    GameConstants.GROUP_LOSES_KEY = "bc_groupLoses";
    GameConstants.GROUP_WINS_KEY = "bc_groupWins";
    GameConstants.NUM_MATCH_KEY = "bc_numMatch";
    GameConstants.OCT_FINAL_KEY = "bc_octFinal";
    GameConstants.CUART_FINAL_KEY = "bc_cuartFinal";
    GameConstants.SEMI_FINAL_KEY = "bc_semiFinal";
    GameConstants.FINAL_KEY = "bc_final";
    GameConstants.MATCH_RESULTS_KEY = "bc_matchResults";
    GameConstants.TRAJECTORY_HELP_KEY = "bc_trajectoryHelp";
    GameConstants.FIRST_SUDDEN_KEY = "bc_firstSuddenDeath";
    GameConstants.AUDIO_STATE_KEY = "bc_audio_state";
    GameConstants.ACHIEVEMENTS_KEY = "bc_achievements";
    GameConstants.RESET_TOURNAMENT = "bc_resetTournament";
    BasketChamps.GameConstants = GameConstants;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var GameVars = (function () {
        function GameVars() {
            if (GameVars._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                GameVars._instance = this;
            }
        }
        GameVars.getInstance = function () {
            if (GameVars._instance === null) {
                GameVars._instance = new GameVars();
            }
            return GameVars._instance;
        };
        GameVars.prototype.init = function (game) {
            this.game = game;
        };
        GameVars.prototype.formatNumber = function (value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        GameVars.prototype.getLocalStorageData = function (keyName) {
            if (this.game.device.ieVersion === 9) {
                return "";
            }
            var value = localStorage.getItem(keyName);
            if (value !== null) {
                return value;
            }
            else {
                return "";
            }
        };
        GameVars.prototype.setLocalStorageData = function (keyName, value) {
            if (this.game.device.ieVersion === 9) {
                return;
            }
            localStorage.setItem(keyName, value);
        };
        Object.defineProperty(GameVars.prototype, "playerPoints", {
            get: function () {
                return this._playerPoints;
            },
            set: function (value) {
                this._playerPoints = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "AIPoints", {
            get: function () {
                return this._AIPoints;
            },
            set: function (value) {
                this._AIPoints = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "round", {
            get: function () {
                return this._round;
            },
            set: function (value) {
                this._round = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "myTeamID", {
            get: function () {
                return this._myTeamID;
            },
            set: function (value) {
                this._myTeamID = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "numMatch", {
            get: function () {
                return this._numMatch;
            },
            set: function (value) {
                this._numMatch = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "myGroupID", {
            get: function () {
                return this._myGroupID;
            },
            set: function (value) {
                this._myGroupID = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "resetTournament", {
            get: function () {
                return this._resetTournament;
            },
            set: function (value) {
                this._resetTournament = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "isPlayerTurn", {
            get: function () {
                return this._isPlayerTurn;
            },
            set: function (value) {
                this._isPlayerTurn = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "matchFinished", {
            get: function () {
                return this._matchFinished;
            },
            set: function (value) {
                this._matchFinished = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "trajectoryHelp", {
            get: function () {
                return this._trajectoryHelp;
            },
            set: function (value) {
                this._trajectoryHelp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "firstSuddenDeath", {
            get: function () {
                return this._firstSuddenDeath;
            },
            set: function (value) {
                this._firstSuddenDeath = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "teamsData", {
            get: function () {
                return this._teamsData;
            },
            set: function (value) {
                this._teamsData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "groupsData", {
            get: function () {
                return this._groupsData;
            },
            set: function (value) {
                this._groupsData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "matchsData", {
            get: function () {
                return this._matchsData;
            },
            set: function (value) {
                this._matchsData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "groupWins", {
            get: function () {
                return this._groupWins;
            },
            set: function (value) {
                this._groupWins = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "groupLoses", {
            get: function () {
                return this._groupLoses;
            },
            set: function (value) {
                this._groupLoses = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "octFinal", {
            get: function () {
                return this._octFinal;
            },
            set: function (value) {
                this._octFinal = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "cuartFinal", {
            get: function () {
                return this._cuartFinal;
            },
            set: function (value) {
                this._cuartFinal = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "semFinal", {
            get: function () {
                return this._semFinal;
            },
            set: function (value) {
                this._semFinal = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "final", {
            get: function () {
                return this._final;
            },
            set: function (value) {
                this._final = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "matchResults", {
            get: function () {
                return this._matchResults;
            },
            set: function (value) {
                this._matchResults = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "currentVerticalMovement", {
            get: function () {
                return this._currentVerticalMovement;
            },
            set: function (value) {
                this._currentVerticalMovement = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "currentHorizontalMovement", {
            get: function () {
                return this._currentHorizontalMovement;
            },
            set: function (value) {
                this._currentHorizontalMovement = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "laggedAdsCounter", {
            get: function () {
                return this._laggedAdsCounter;
            },
            set: function (value) {
                this._laggedAdsCounter = value;
            },
            enumerable: true,
            configurable: true
        });
        GameVars.prototype.playerIDtoGroupID = function () {
            if (GameVars.getInstance().myGroupID === "A") {
                return GameVars.getInstance().myTeamID - 1;
            }
            else if (GameVars.getInstance().myGroupID === "B") {
                return GameVars.getInstance().myTeamID - 7;
            }
            else if (GameVars.getInstance().myGroupID === "C") {
                return GameVars.getInstance().myTeamID - 13;
            }
            else if (GameVars.getInstance().myGroupID === "D") {
                return GameVars.getInstance().myTeamID - 19;
            }
        };
        GameVars.prototype.IDtoGroupID = function (id) {
            if (GameVars.getInstance().myGroupID === "A") {
                return id - 1;
            }
            else if (GameVars.getInstance().myGroupID === "B") {
                return id + 5;
            }
            else if (GameVars.getInstance().myGroupID === "C") {
                return id + 11;
            }
            else if (GameVars.getInstance().myGroupID === "D") {
                return id + 17;
            }
        };
        GameVars.prototype.GroupIDtoID = function (id) {
            if (GameVars.getInstance().myGroupID === "A") {
                return id;
            }
            else if (GameVars.getInstance().myGroupID === "B") {
                return id - 6;
            }
            else if (GameVars.getInstance().myGroupID === "C") {
                return id - 12;
            }
            else if (GameVars.getInstance().myGroupID === "D") {
                return id - 18;
            }
        };
        GameVars.prototype.selectGroupID = function () {
            if (GameVars.getInstance().myGroupID === "A") {
                return 0;
            }
            else if (GameVars.getInstance().myGroupID === "B") {
                return 1;
            }
            else if (GameVars.getInstance().myGroupID === "C") {
                return 2;
            }
            else if (GameVars.getInstance().myGroupID === "D") {
                return 3;
            }
        };
        GameVars.prototype.oponentPlayer = function () {
            if (GameVars.getInstance().numMatch < 5) {
                if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match1[0]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match1[1]);
                }
                else if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match1[1]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match1[0]);
                }
                else if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match2[0]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match2[1]);
                }
                else if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match2[1]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match2[0]);
                }
                else if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match3[0]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match3[1]);
                }
                else if (this.playerIDtoGroupID() + 1 === GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match3[1]) {
                    return this.IDtoGroupID(GameVars.getInstance().matchsData[GameVars.getInstance().numMatch].match3[0]);
                }
            }
            else if (GameVars.getInstance().numMatch === 5) {
                for (var i = 0; i < 16; i++) {
                    if (GameVars.getInstance().octFinal[i] === GameVars.getInstance().myTeamID) {
                        if (i % 2 === 0) {
                            return GameVars.getInstance().octFinal[i + 1] - 1;
                        }
                        else {
                            return GameVars.getInstance().octFinal[i - 1] - 1;
                        }
                    }
                }
            }
            else if (GameVars.getInstance().numMatch === 6) {
                for (var i = 0; i < 8; i++) {
                    if (GameVars.getInstance().cuartFinal[i] === GameVars.getInstance().myTeamID) {
                        if (i % 2 === 0) {
                            return GameVars.getInstance().cuartFinal[i + 1] - 1;
                        }
                        else {
                            return GameVars.getInstance().cuartFinal[i - 1] - 1;
                        }
                    }
                }
            }
            else if (GameVars.getInstance().numMatch === 7) {
                for (var i = 0; i < 4; i++) {
                    if (GameVars.getInstance().semFinal[i] === GameVars.getInstance().myTeamID) {
                        if (i % 2 === 0) {
                            return GameVars.getInstance().semFinal[i + 1] - 1;
                        }
                        else {
                            return GameVars.getInstance().semFinal[i - 1] - 1;
                        }
                    }
                }
            }
            else if (GameVars.getInstance().numMatch === 8) {
                for (var i = 0; i < 2; i++) {
                    if (GameVars.getInstance().final[i] === GameVars.getInstance().myTeamID) {
                        if (i % 2 === 0) {
                            return GameVars.getInstance().final[i + 1] - 1;
                        }
                        else {
                            return GameVars.getInstance().final[i - 1] - 1;
                        }
                    }
                }
            }
        };
        return GameVars;
    }());
    GameVars._instance = null;
    BasketChamps.GameVars = GameVars;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Ball = (function (_super) {
        __extends(Ball, _super);
        function Ball(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "basket_ball0001.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.body.setCircle(_this.width / 2);
            _this.body.restitution = 0.75;
            _this.body.type.dynamic = true;
            _this.anchor.set(0.5);
            _this.initialX = x;
            _this.initialY = y;
            _this.time = 0;
            _this.needReset = false;
            _this.onShot = false;
            _this.onPause = true;
            _this.onTween = false;
            _this.trajectoryReady = true;
            _this.firstShotSudden = false;
            _this.body.gravityScale = 0;
            _this.body.collideWorldBounds = false;
            _this.waitIACount = 0;
            _this.visible = false;
            _this.animations.add("spin", Phaser.Animation.generateFrameNames("basket_ball", 13, 1, ".png", 4));
            _this.body.setBodyContactCallback(BasketChamps.StageContainer.currentInstance.basket.backboard.body, _this.backboardCallback, _this);
            _this.body.setBodyContactCallback(BasketChamps.StageContainer.currentInstance.basket.post.body, _this.backboardCallback, _this);
            if (BasketChamps.GameConstants.DRAG_BALL_WITH_MOUSE) {
                _this.game.input.onDown.add(_this.mouseDragStart, _this);
                _this.game.input.addMoveCallback(_this.mouseDragMove, _this);
                _this.game.input.onUp.add(_this.mouseDragEnd, _this);
            }
            return _this;
        }
        Ball.prototype.update = function () {
            if (this.needReset && !this.onTween && !BasketChamps.MatchManager.currentInstance.onSuddenDeath) {
                this.onTween = true;
                this.tweenBallFinished();
            }
            if (!BasketChamps.GameVars.getInstance().isPlayerTurn) {
                if (!this.onShot && !this.onPause) {
                    var num = 105;
                    if (BasketChamps.MatchManager.currentInstance.lastPoints) {
                        num += 75;
                    }
                    if (this.waitIACount > num) {
                        this.animations.stop();
                        var launchVelocity = BasketChamps.IA.currentInstance.getLaunchVelocity();
                        this.body.velocity.x = launchVelocity.x;
                        this.body.velocity.y = launchVelocity.y;
                        this.body.gravityScale = 1;
                        this.body.angularVelocity = (launchVelocity.x + launchVelocity.y) * -.01;
                        this.onShot = true;
                        this.waitIACount = 0;
                        BasketChamps.AudioManager.getInstance().playSound("shot_01");
                    }
                    else {
                        this.waitIACount++;
                    }
                }
            }
        };
        Ball.prototype.fireBall = function () {
            if (BasketChamps.GameVars.getInstance().isPlayerTurn && this.trajectoryReady) {
                if (!this.onShot && !this.onPause && this.game.input.activePointer.x <= this.initialX) {
                    this.animations.stop();
                    var launchVelocity = this.getLaunchVelocity();
                    this.body.velocity.x = launchVelocity.x;
                    this.body.velocity.y = launchVelocity.y;
                    this.body.gravityScale = 1;
                    this.body.angularVelocity = (launchVelocity.x + launchVelocity.y) * -.01;
                    this.onShot = true;
                    BasketChamps.AudioManager.getInstance().playSound("shot_02");
                }
            }
        };
        Ball.prototype.getLaunchVelocity = function () {
            var mouseX = this.game.input.activePointer.x;
            var mouseY = this.game.input.activePointer.y;
            if (!this.game.device.desktop) {
                mouseY -= 50;
            }
            if (mouseY + 40 > this.initialY) {
                mouseY = this.initialY - 40;
            }
            if (mouseX + 50 > this.initialX) {
                mouseX = this.initialX - 50;
            }
            var dy = -Math.sqrt(2 * (this.game.physics.box2d.gravity.y) * (Math.abs(mouseY - this.initialY)));
            var m = (mouseY - this.initialY) / (mouseX - this.initialX);
            var ang = Math.atan(m);
            var dx = (Math.cos(ang) * dy) / Math.sin(ang);
            dx /= 2;
            this.time = -60 * (2 * (dy / Math.sin(ang)) * Math.sin(ang)) / this.game.physics.box2d.gravity.y;
            return { x: dx, y: dy };
        };
        Ball.prototype.resetBall = function () {
            this.needReset = true;
            this.onShot = false;
            this.trajectoryReady = false;
            BasketChamps.StageContainer.currentInstance.basket.hoop.anuleSensorOne = false;
            BasketChamps.StageContainer.currentInstance.basket.hoop.sensorOnePassed = false;
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                this.initialX = Math.floor((Math.random() * 250) + (250));
                this.initialY = Math.floor((Math.random() * 150) + (100));
                BasketChamps.StageContainer.currentInstance.trajectory.resume();
            }
            else {
                BasketChamps.StageContainer.currentInstance.trajectory.pause();
            }
            BasketChamps.AudioManager.getInstance().playSound("smoke");
        };
        Ball.prototype.tweenBallFinished = function () {
            this.body.velocity.x = 0;
            this.body.velocity.y = 0;
            this.body.angularVelocity = 0;
            this.body.gravityScale = 0;
            this.body.angle = 0;
            this.needReset = false;
            this.onTween = false;
            this.visible = false;
            BasketChamps.MatchManager.currentInstance.turnTab(BasketChamps.GameVars.getInstance().isPlayerTurn);
            if (!this.firstShotSudden) {
                BasketChamps.StageContainer.currentInstance.efectsContainer.finishEfectBall(this.body.x, this.body.y);
            }
            else {
                this.firstShotSudden = false;
            }
            this.game.time.events.add(1000, function () {
                this.body.x = this.initialX;
                this.body.y = this.initialY;
                this.visible = true;
                this.rand = Math.floor((Math.random() * 15) + 15);
                this.play("spin", this.rand, true);
                BasketChamps.MatchManager.currentInstance.changeFlag();
                BasketChamps.StageContainer.currentInstance.efectsContainer.initEfectBall(this.body.x, this.body.y);
                BasketChamps.MatchManager.currentInstance.rebounds = 0;
            }, this);
        };
        Ball.prototype.tweenBallFinished2 = function () {
            if (this.visible) {
                BasketChamps.StageContainer.currentInstance.ballToTop();
            }
            this.trajectoryReady = true;
        };
        Ball.prototype.getOnShot = function () {
            return this.onShot;
        };
        Ball.prototype.pause = function () {
            this.animations.stop();
            this.onPause = true;
        };
        Ball.prototype.resume = function () {
            this.rand = Math.floor((Math.random() * 15) + 15);
            this.play("spin", this.rand, true);
            this.onPause = false;
        };
        Ball.prototype.mouseDragStart = function () {
            this.game.physics.box2d.mouseDragStart(this.game.input.mousePointer);
        };
        Ball.prototype.mouseDragMove = function () {
            this.game.physics.box2d.mouseDragMove(this.game.input.mousePointer);
        };
        Ball.prototype.mouseDragEnd = function () {
            this.game.physics.box2d.mouseDragEnd();
        };
        Ball.prototype.backboardCallback = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (begin) {
                if (BasketChamps.StageContainer.currentInstance.courtWalls.numCount === 0) {
                    BasketChamps.StageContainer.currentInstance.courtWalls.numCount++;
                }
                BasketChamps.MatchManager.currentInstance.rebounds++;
                var vel = Math.sqrt(this.body.velocity.x * this.body.velocity.x + this.body.velocity.y * this.body.velocity.y);
                if (vel > 200) {
                    var worldManifold = new box2d.b2WorldManifold();
                    contact.GetWorldManifold(worldManifold);
                    var globalCollisionPoint = worldManifold.points[0];
                    globalCollisionPoint.SelfMul(-this.game.physics.box2d.ptmRatio);
                    BasketChamps.StageContainer.currentInstance.efectsContainer.newImpact(globalCollisionPoint.x, globalCollisionPoint.y, vel);
                }
            }
        };
        return Ball;
    }(Phaser.Sprite));
    BasketChamps.Ball = Ball;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Backboard = (function (_super) {
        __extends(Backboard, _super);
        function Backboard(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "backboard.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.body.setRectangle(5, 117, 50, 97);
            _this.body.static = true;
            return _this;
        }
        Backboard.prototype.resetBasket = function () {
            var tweenReset = this.game.add.tween(this.body);
            tweenReset.to({ x: 0, y: 0 }, 1000, Phaser.Easing.Quadratic.Out, false);
            tweenReset.start();
        };
        return Backboard;
    }(Phaser.Sprite));
    BasketChamps.Backboard = Backboard;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Basket = (function (_super) {
        __extends(Basket, _super);
        function Basket(game, x, y) {
            var _this = _super.call(this, game, null, "basket", false) || this;
            Basket.currentInstance = _this;
            _this.x = x;
            _this.y = y;
            _this.post = new BasketChamps.Post(_this.game, 0, 0);
            _this.post.anchor.set(0);
            _this.addChild(_this.post);
            _this.backboard = new BasketChamps.Backboard(_this.game, 0, 0);
            _this.backboard.anchor.set(0);
            _this.addChild(_this.backboard);
            _this.hoop = new BasketChamps.Hoop(_this.game, 0, 0);
            _this.hoop.anchor.set(0);
            _this.addChild(_this.hoop);
            return _this;
        }
        Basket.prototype.destroy = function (destroyChildren, soft) {
            Basket.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        Basket.prototype.update = function () {
            _super.prototype.update.call(this);
        };
        return Basket;
    }(Phaser.Group));
    BasketChamps.Basket = Basket;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var BasketNet = (function (_super) {
        __extends(BasketNet, _super);
        function BasketNet(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "net0001.png") || this;
            _this.x = x;
            _this.y = y;
            _this.game.physics.box2d.enable(_this);
            _this.body.static = true;
            _this.sensor = _this.body.setRectangle(5, 40, 32, 0);
            _this.sensor.SetSensor(true);
            _this.body.setFixtureContactCallback(_this.sensor, _this.sensorCallback, _this);
            _this.animations.add("lateral", Phaser.Animation.generateFrameNames("net", 10, 21, ".png", 4));
            _this.animations.add("basket", Phaser.Animation.generateFrameNames("net", 1, 9, ".png", 4));
            return _this;
        }
        BasketNet.prototype.update = function () {
            _super.prototype.update.call(this);
        };
        BasketNet.prototype.sensorCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin && !BasketChamps.StageContainer.currentInstance.basket.hoop.basket) {
                this.play("lateral", 25, false, false);
            }
        };
        BasketNet.prototype.playBasket = function () {
            this.play("basket", 25, false, false);
        };
        return BasketNet;
    }(Phaser.Sprite));
    BasketChamps.BasketNet = BasketNet;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Hoop = (function (_super) {
        __extends(Hoop, _super);
        function Hoop(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "hoop.png") || this;
            _this.sensorOnePassed = false;
            _this.anuleSensorOne = false;
            _this.basket = false;
            _this.numCount = 0;
            _this.game.physics.box2d.enable(_this);
            _this.circleOne = _this.body.setCircle(3, 53, 132);
            _this.circleTwo = _this.body.addCircle(3, 118, 132);
            _this.body.static = true;
            _this.sensorOne = _this.body.addCircle(3, 85, 132);
            _this.sensorOne.SetSensor(true);
            _this.sensorTwo = _this.body.addCircle(3, 85, 148);
            _this.sensorTwo.SetSensor(true);
            _this.body.setFixtureContactCallback(_this.sensorOne, _this.sensorOneCallback, _this);
            _this.body.setFixtureContactCallback(_this.sensorTwo, _this.sensorTwoCallback, _this);
            return _this;
        }
        Hoop.prototype.hoopCallback = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (begin) {
                if (BasketChamps.StageContainer.currentInstance.courtWalls.numCount === 0) {
                    BasketChamps.StageContainer.currentInstance.courtWalls.numCount++;
                }
                BasketChamps.MatchManager.currentInstance.rebounds++;
                var vel = Math.sqrt(BasketChamps.StageContainer.currentInstance.ball.body.velocity.x * BasketChamps.StageContainer.currentInstance.ball.body.velocity.x + BasketChamps.StageContainer.currentInstance.ball.body.velocity.y * BasketChamps.StageContainer.currentInstance.ball.body.velocity.y);
                if (vel > 400) {
                    var worldManifold = new box2d.b2WorldManifold();
                    contact.GetWorldManifold(worldManifold);
                    var globalCollisionPoint = worldManifold.points[0];
                    globalCollisionPoint.SelfMul(-this.game.physics.box2d.ptmRatio);
                    BasketChamps.StageContainer.currentInstance.efectsContainer.newImpact(globalCollisionPoint.x, globalCollisionPoint.y, vel);
                }
                BasketChamps.AudioManager.getInstance().playSound("impacto_aro");
            }
        };
        Hoop.prototype.sensorOneCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                if (!this.anuleSensorOne) {
                    this.sensorOnePassed = true;
                }
            }
        };
        Hoop.prototype.sensorTwoCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin && !this.basket) {
                if (this.sensorOnePassed) {
                    BasketChamps.MatchManager.currentInstance.onBaskedScored();
                    this.basket = true;
                    this.anuleSensorOne = false;
                    this.sensorOnePassed = false;
                }
                else {
                    this.anuleSensorOne = true;
                }
            }
        };
        Hoop.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.basket) {
                if (this.numCount > 50) {
                    BasketChamps.StageContainer.currentInstance.ball.resetBall();
                    BasketChamps.StageContainer.currentInstance.courtWalls.resetRebounds();
                    this.numCount = 0;
                    this.basket = false;
                }
                else {
                    this.numCount++;
                }
            }
        };
        Hoop.prototype.isBasket = function () {
            return this.basket;
        };
        Hoop.prototype.resetBasket = function () {
            this.game.add.tween(this.body)
                .to({ x: 0, y: 0 }, 1000, Phaser.Easing.Quadratic.Out, true);
        };
        return Hoop;
    }(Phaser.Sprite));
    BasketChamps.Hoop = Hoop;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Post = (function (_super) {
        __extends(Post, _super);
        function Post(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "post.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.body.setRectangle(5, 205, 44, 257);
            _this.body.static = true;
            _this.postAux = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "post_mobile.png");
            _this.postAux.visible = false;
            _this.postAux.alpha = 0;
            _this.addChild(_this.postAux);
            _this.wheels = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "caterpillar_wheels0001.png");
            _this.wheels.visible = false;
            _this.wheels.alpha = 0;
            _this.addChild(_this.wheels);
            _this.wheels.animations.add("anim1", Phaser.Animation.generateFrameNames("caterpillar_wheels", 1, 5, ".png", 4));
            _this.wheels.animations.add("anim2", Phaser.Animation.generateFrameNames("caterpillar_wheels", 5, 1, ".png", 4));
            return _this;
        }
        Post.prototype.update = function () {
            _super.prototype.update.call(this);
        };
        Post.prototype.resetBasket = function () {
            var tweenReset = this.game.add.tween(this.body);
            tweenReset.to({ x: 0, y: 0 }, 1000, Phaser.Easing.Quadratic.Out, false);
            tweenReset.start();
        };
        Post.prototype.changeSpritePostVert = function (value) {
            if (value) {
                this.postAux.visible = true;
                this.game.add.tween(this.postAux)
                    .to({ alpha: 1 }, 500, Phaser.Easing.Cubic.In, true);
            }
            else {
                this.game.add.tween(this.postAux)
                    .to({ alpha: 0 }, 500, Phaser.Easing.Cubic.In, true);
                this.postAux.visible = false;
            }
        };
        Post.prototype.changeSpritePostHor = function (value) {
            if (value) {
                this.wheels.visible = true;
                this.game.add.tween(this.wheels)
                    .to({ alpha: 1 }, 500, Phaser.Easing.Cubic.In, true);
                this.body.addLoop([21, 312,
                    58, 320,
                    65, 330,
                    103, 337,
                    78, 366]);
            }
            else {
                this.game.add.tween(this.wheels)
                    .to({ alpha: 0 }, 500, Phaser.Easing.Cubic.In, true);
                this.body.setRectangle(5, 205, 44, 257);
                this.wheels.visible = false;
            }
        };
        return Post;
    }(Phaser.Sprite));
    BasketChamps.Post = Post;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var BasketFront = (function (_super) {
        __extends(BasketFront, _super);
        function BasketFront(game) {
            var _this = _super.call(this, game, 0, 0, "texture_atlas_1", "front.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.body.static = true;
            _this.anchor.set(0);
            _this.sensor = _this.body.setRectangle(5, 100, 40, -20);
            _this.sensor.SetSensor(true);
            _this.body.setFixtureContactCallback(_this.sensor, _this.sensorCallback, _this);
            _this.move_up = 1;
            _this.move_left = 1;
            return _this;
        }
        BasketFront.prototype.update = function () {
            _super.prototype.update.call(this);
            if (BasketChamps.GameConstants.MOV_VER) {
                if (this.y > BasketChamps.GameConstants.PIXELS_MOV_VERT) {
                    this.move_up = -1;
                }
                else if (this.y < 0) {
                    this.move_up = 1;
                }
                this.body.y += this.move_up * BasketChamps.GameVars.getInstance().currentVerticalMovement;
            }
            if (BasketChamps.GameConstants.MOV_HOR) {
                if (this.x > BasketChamps.GameConstants.PIXELS_MOV_HOR) {
                    BasketChamps.StageContainer.currentInstance.basket.post.wheels.play("anim2", 25, true);
                    this.move_left = -1;
                }
                else if (this.x < 0) {
                    BasketChamps.StageContainer.currentInstance.basket.post.wheels.play("anim1", 25, true);
                    this.move_left = 1;
                }
                this.body.x += this.move_left * BasketChamps.GameVars.getInstance().currentHorizontalMovement;
            }
            BasketChamps.StageContainer.currentInstance.basket.hoop.body.x = this.body.x;
            BasketChamps.StageContainer.currentInstance.basket.hoop.body.y = this.body.y;
            BasketChamps.StageContainer.currentInstance.basket.backboard.body.x = this.body.x;
            BasketChamps.StageContainer.currentInstance.basket.backboard.body.y = this.body.y;
            BasketChamps.StageContainer.currentInstance.hoopFront.body.x = this.body.x;
            BasketChamps.StageContainer.currentInstance.hoopFront.body.y = this.body.y;
            BasketChamps.StageContainer.currentInstance.basket.post.body.x = this.body.x;
            BasketChamps.StageContainer.currentInstance.basketNet.body.x = this.body.x + 84;
            BasketChamps.StageContainer.currentInstance.basketNet.body.y = this.body.y + 160;
        };
        BasketFront.prototype.sensorCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                BasketChamps.StageContainer.currentInstance.basketFrontTop();
            }
        };
        BasketFront.prototype.resetBasket = function () {
            var tweenReset = this.game.add.tween(this.body);
            tweenReset.to({ x: 0, y: 0 }, 1000, Phaser.Easing.Quadratic.Out, false);
            tweenReset.start();
        };
        BasketFront.prototype.pause = function () {
            BasketChamps.GameConstants.MOV_HOR = false;
            BasketChamps.GameConstants.MOV_VER = false;
        };
        BasketFront.prototype.resume = function () {
            if (!BasketChamps.HUD.currentInstance.initialCount.onCount
                && BasketChamps.BasketballCourtState.currentInstance.tournamentLayer.visible === false
                && BasketChamps.BasketballCourtState.currentInstance.classificationLayer.visible === false
                && BasketChamps.HUD.currentInstance.finishMatch.visible === false) {
                BasketChamps.MatchManager.currentInstance.startMoveBasket();
            }
        };
        return BasketFront;
    }(Phaser.Sprite));
    BasketChamps.BasketFront = BasketFront;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var CourtWalls = (function (_super) {
        __extends(CourtWalls, _super);
        function CourtWalls(game) {
            var _this = _super.call(this, game, null, "stage-walls") || this;
            _this.numCount = 0;
            _this.wallTouched = false;
            _this.leftWall = new Phaser.Sprite(_this.game, 0, 0);
            _this.leftWall.visible = false;
            _this.rightWall = new Phaser.Sprite(_this.game, 0, 0);
            _this.rightWall.visible = false;
            _this.bottomWall = new Phaser.Sprite(_this.game, 0, 0);
            _this.bottomWall.visible = false;
            _this.game.physics.box2d.enable(_this.leftWall);
            _this.game.physics.box2d.enable(_this.rightWall);
            _this.game.physics.box2d.enable(_this.bottomWall);
            _this.leftWall.body.setRectangle(100, BasketChamps.GameConstants.GAME_HEIGHT * 4, -100, BasketChamps.GameConstants.GAME_HEIGHT / 2);
            _this.rightWall.body.setRectangle(100, BasketChamps.GameConstants.GAME_HEIGHT * 4, BasketChamps.GameConstants.GAME_WIDTH + 100, BasketChamps.GameConstants.GAME_HEIGHT / 2);
            _this.bottomWall.body.setRectangle(BasketChamps.GameConstants.GAME_WIDTH * 2, 300, BasketChamps.GameConstants.GAME_WIDTH / 2, 505);
            _this.leftWall.body.static = true;
            _this.rightWall.body.static = true;
            _this.bottomWall.body.static = true;
            _this.leftWall.body.sensor = true;
            _this.rightWall.body.sensor = true;
            _this.leftWall.body.setBodyContactCallback(BasketChamps.StageContainer.currentInstance.ball.body, _this.sensorCallback, _this);
            _this.rightWall.body.setBodyContactCallback(BasketChamps.StageContainer.currentInstance.ball.body, _this.sensorCallback, _this);
            _this.bottomWall.body.setBodyContactCallback(BasketChamps.StageContainer.currentInstance.ball.body, _this.sensorBottomCallback, _this);
            return _this;
        }
        CourtWalls.prototype.sensorCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin && !BasketChamps.StageContainer.currentInstance.ball.onTween && !this.wallTouched) {
                if (!BasketChamps.StageContainer.currentInstance.basket.hoop.isBasket()) {
                    BasketChamps.MatchManager.currentInstance.onBasketMissed();
                    BasketChamps.StageContainer.currentInstance.ball.resetBall();
                }
                this.numCount = 0;
            }
        };
        CourtWalls.prototype.sensorBottomCallback = function (body1, body2, fixture1, fixture2, begin) {
            if (begin && !BasketChamps.StageContainer.currentInstance.ball.onTween) {
                if (this.numCount >= 1) {
                    if (!BasketChamps.StageContainer.currentInstance.basket.hoop.isBasket()) {
                        this.wallTouched = true;
                        this.game.time.events.add(200, function () {
                            BasketChamps.MatchManager.currentInstance.onBasketMissed();
                            BasketChamps.StageContainer.currentInstance.ball.resetBall();
                            this.wallTouched = false;
                        }, this);
                    }
                    this.numCount = 0;
                }
                else {
                    this.numCount++;
                }
                var impactSoundIndex = 1 + Math.floor(4 * Math.random());
                BasketChamps.AudioManager.getInstance().playSound("impacto_" + impactSoundIndex);
            }
        };
        CourtWalls.prototype.resetRebounds = function () {
            this.numCount = 0;
        };
        return CourtWalls;
    }(Phaser.Group));
    BasketChamps.CourtWalls = CourtWalls;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var EfectsContainer = (function (_super) {
        __extends(EfectsContainer, _super);
        function EfectsContainer(game) {
            var _this = _super.call(this, game, null, "efects-container", false) || this;
            _this.stopConfetti = false;
            _this.efectImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "star_impact.png");
            _this.efectImage.anchor.set(.5);
            _this.efectImage.scale.set(0);
            _this.addChild(_this.efectImage);
            _this.efectBallAppear = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "ball_appear.png");
            _this.efectBallAppear.anchor.set(.5);
            _this.efectBallAppear.scale.set(0);
            _this.addChild(_this.efectBallAppear);
            _this.efectBasket = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "glare.png");
            _this.efectBasket.anchor.set(.5);
            _this.efectBasket.alpha = 0;
            _this.efectBasket.scale.set(0);
            _this.efectBasket.blendMode = PIXI.blendModes.ADD;
            _this.efectBall = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "fx_ball_appear_00003.png");
            _this.efectBall.anchor.set(.5);
            _this.efectBall.alpha = 0;
            _this.efectBallOut = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "explosion_00000.png");
            _this.efectBallOut.anchor.set(.5);
            _this.efectBallOut.alpha = 0;
            _this.efectBall.animations.add("initEfect", Phaser.Animation.generateFrameNames("fx_ball_appear_", 3, 18, ".png", 5));
            _this.efectBall.animations.add("finishEfect", Phaser.Animation.generateFrameNames("fx_ball_appear_", 18, 3, ".png", 5));
            _this.efectBallOut.animations.add("initEfect2", Phaser.Animation.generateFrameNames("explosion_", 0, 16, ".png", 5));
            _this.efectBasket.animations.add("initBasket", Phaser.Animation.generateFrameNames("rays_final_match", 1, 1, ".png", 1));
            _this.efectBall.animations.getAnimation("initEfect").onComplete.add(function () {
                BasketChamps.StageContainer.currentInstance.ball.scale.set(1);
                BasketChamps.StageContainer.currentInstance.ball.visible = true;
                BasketChamps.StageContainer.currentInstance.efectsContainer.efectBall.play("finishEfect", 60, false, false);
                this.game.add.tween(this.efectBall)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 100);
            }, _this);
            _this.efectBall.animations.getAnimation("finishEfect").onComplete.add(function () {
                this.efectBall.alpha = 0;
                BasketChamps.StageContainer.currentInstance.ball.tweenBallFinished2();
                if (this.skullBollean) {
                    BasketChamps.StageContainer.currentInstance.ballFrontEfect();
                }
            }, _this);
            _this.efectBallOut.animations.getAnimation("initEfect2").onComplete.add(function () {
                BasketChamps.StageContainer.currentInstance.ball.scale.set(0);
                BasketChamps.StageContainer.currentInstance.efectsContainer.efectBallOut.play("finishEfect2", 60, false, false);
                this.game.add.tween(this.efectBallOut)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 100);
            }, _this);
            _this.addChild(_this.efectBall);
            _this.addChild(_this.efectBallOut);
            _this.addChild(_this.efectBasket);
            _this.efectSkull = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "skull_sudden_death.png");
            _this.efectSkull.anchor.set(.5);
            _this.efectSkull.scale.set(1.5);
            _this.efectSkull.alpha = 0;
            _this.addChild(_this.efectSkull);
            _this.bck_confetti = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            _this.bck_confetti.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            _this.bck_confetti.alpha = 0;
            _this.add(_this.bck_confetti);
            _this.confetti = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_1", "confetti_0001.png");
            _this.confetti.alpha = 0;
            _this.confetti.anchor.set(0, 1);
            _this.addChild(_this.confetti);
            _this.confetti.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            _this.confetti2 = new Phaser.Sprite(_this.game, 0, -_this.confetti.height, "texture_atlas_1", "confetti_0001.png");
            _this.confetti2.alpha = 0;
            _this.confetti2.anchor.set(0, 1);
            _this.addChild(_this.confetti2);
            _this.confetti2.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            _this.confetti3 = new Phaser.Sprite(_this.game, 0, -_this.confetti.height * 2, "texture_atlas_1", "confetti_0001.png");
            _this.confetti3.alpha = 0;
            _this.confetti3.anchor.set(0, 1);
            _this.addChild(_this.confetti3);
            _this.confetti3.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            _this.confetti4 = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 0, "texture_atlas_1", "confetti_0001.png");
            _this.confetti4.alpha = 0;
            _this.confetti4.anchor.set(0, 1);
            _this.addChild(_this.confetti4);
            _this.confetti4.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            _this.confetti5 = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, -_this.confetti.height, "texture_atlas_1", "confetti_0001.png");
            _this.confetti5.alpha = 0;
            _this.confetti5.anchor.set(0, 1);
            _this.addChild(_this.confetti5);
            _this.confetti5.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            _this.confetti6 = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, -_this.confetti.height * 2, "texture_atlas_1", "confetti_0001.png");
            _this.confetti6.alpha = 0;
            _this.confetti6.anchor.set(0, 1);
            _this.addChild(_this.confetti6);
            _this.confetti6.animations.add("confetti", Phaser.Animation.generateFrameNames("confetti_", 1, 7, ".png", 4));
            return _this;
        }
        EfectsContainer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.confetti.alpha === 1 && !this.stopConfetti) {
                this.confetti.y += 1.5;
                this.confetti2.y += 1.5;
                this.confetti3.y += 1.5;
                this.confetti4.y += 1.5;
                this.confetti5.y += 1.5;
                this.confetti6.y += 1.5;
            }
            if (this.confetti.y > this.confetti.height + BasketChamps.GameConstants.GAME_HEIGHT) {
                this.confetti.y -= this.confetti.height * 3;
                this.confetti4.y -= this.confetti.height * 3;
            }
            if (this.confetti2.y > this.confetti2.height + BasketChamps.GameConstants.GAME_HEIGHT) {
                this.confetti2.y -= this.confetti.height * 3;
                this.confetti5.y -= this.confetti.height * 3;
            }
            if (this.confetti3.y > this.confetti3.height + BasketChamps.GameConstants.GAME_HEIGHT) {
                this.confetti3.y -= this.confetti.height * 3;
                this.confetti6.y -= this.confetti.height * 3;
            }
        };
        EfectsContainer.prototype.pauseConfetti = function () {
            this.stopConfetti = true;
            this.confetti.animations.paused = true;
            this.confetti2.animations.paused = true;
            this.confetti3.animations.paused = true;
            this.confetti4.animations.paused = true;
            this.confetti5.animations.paused = true;
            this.confetti6.animations.paused = true;
        };
        EfectsContainer.prototype.resumeConfetti = function () {
            this.stopConfetti = false;
            this.confetti.animations.paused = false;
            this.confetti2.animations.paused = false;
            this.confetti3.animations.paused = false;
            this.confetti4.animations.paused = false;
            this.confetti5.animations.paused = false;
            this.confetti6.animations.paused = false;
        };
        EfectsContainer.prototype.newImpact = function (valueX, valueY, vel) {
            this.efectImage.x = valueX;
            this.efectImage.y = valueY;
            this.efectImage.alpha = 1;
            this.efectImage.scale.set(vel / 800, vel / 800);
            this.game.add.tween(this.efectImage.scale)
                .to({ x: (vel / 800) * .8, y: (vel / 800) * .8 }, 100, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.efectImage)
                .to({ alpha: 0 }, 100, Phaser.Easing.Cubic.Out, true);
            BasketChamps.AudioManager.getInstance().playSound("impacto_aro");
        };
        EfectsContainer.prototype.initEfectBall = function (ballX, ballY) {
            if (!BasketChamps.GameVars.getInstance().matchFinished) {
                this.efectBall.x = ballX;
                this.efectBall.y = ballY;
                this.efectSkull.x = ballX;
                this.efectSkull.y = ballY;
                this.efectBallAppear.x = ballX;
                this.efectBallAppear.y = ballY;
                this.efectBall.alpha = 1;
                BasketChamps.StageContainer.currentInstance.efectFrontBall();
                BasketChamps.AudioManager.getInstance().playSound("ball_appears");
                this.efectBall.play("initEfect", 60, false, false);
                if (BasketChamps.MatchManager.currentInstance.lastPoints) {
                    this.efectSkull.scale.set(1.5);
                    this.efectSkull.alpha = 0;
                    this.game.time.events.add(100, function () {
                        this.game.add.tween(this.efectSkull)
                            .to({ alpha: 1 }, 600, Phaser.Easing.Cubic.In, true);
                        this.game.add.tween(this.efectSkull.scale)
                            .to({ x: .9, y: .9 }, 600, Phaser.Easing.Cubic.In, true)
                            .onComplete.add(function () {
                            this.game.add.tween(this.efectSkull)
                                .to({ alpha: 0 }, 800, Phaser.Easing.Cubic.In, true)
                                .onComplete.add(function () {
                                BasketChamps.StageContainer.currentInstance.ballFrontEfect();
                            }, this);
                        }, this);
                    }, this);
                }
                this.game.add.tween(this.efectBallAppear.scale)
                    .to({ x: 1, y: 1 }, 50, Phaser.Easing.Cubic.Out, true, 250)
                    .onComplete.add(function () {
                    this.game.add.tween(this.efectBallAppear.scale)
                        .to({ x: 0, y: 0 }, 50, Phaser.Easing.Cubic.In, true);
                }, this);
            }
        };
        EfectsContainer.prototype.finishEfectBall = function (ballX, ballY) {
            if (!BasketChamps.GameVars.getInstance().matchFinished) {
                this.efectBallOut.x = ballX;
                this.efectBallOut.y = ballY;
                this.efectBallOut.alpha = 1;
                BasketChamps.StageContainer.currentInstance.efectFrontBall();
                this.efectBallOut.play("initEfect2", 60, false, false);
            }
        };
        EfectsContainer.prototype.initBasketEfect = function (ballX, ballY) {
            this.efectBasket.x = ballX;
            this.efectBasket.y = ballY;
            this.efectBasket.alpha = 1;
            this.efectBasket.scale.set(3);
            BasketChamps.StageContainer.currentInstance.efectFrontBall();
            this.game.add.tween(this.efectBasket)
                .to({ alpha: 0 }, 600, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.efectBasket.scale)
                .to({ x: 1, y: 1 }, 600, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                BasketChamps.StageContainer.currentInstance.ballFrontEfect();
                this.efectBasket.scale.set(0);
            }, this);
        };
        EfectsContainer.prototype.initConfetti = function (win) {
            this.game.add.tween(this.bck_confetti)
                .to({ alpha: .4 }, 500, Phaser.Easing.Cubic.Out, true);
            if (win) {
                this.confetti.alpha = 1;
                this.confetti.play("confetti", 15, true, false);
                this.confetti2.alpha = 1;
                this.confetti2.play("confetti", 15, true, false);
                this.confetti3.alpha = 1;
                this.confetti3.play("confetti", 15, true, false);
                this.confetti4.alpha = 1;
                this.confetti4.play("confetti", 15, true, false);
                this.confetti5.alpha = 1;
                this.confetti5.play("confetti", 15, true, false);
                this.confetti6.alpha = 1;
                this.confetti6.play("confetti", 15, true, false);
            }
        };
        EfectsContainer.prototype.finishConfetti = function () {
            this.game.add.tween(this)
                .to({ alpha: 0 }, 600, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.bck_confetti.alpha = 0;
                this.confetti.alpha = 0;
                this.confetti.y = 0;
                this.confetti.animations.stop("confetti");
                this.confetti2.alpha = 0;
                this.confetti2.y = -this.confetti.height;
                this.confetti2.animations.stop("confetti");
                this.confetti3.alpha = 0;
                this.confetti3.y = -this.confetti.height * 2;
                this.confetti3.animations.stop("confetti");
                this.confetti4.alpha = 0;
                this.confetti4.y = 0;
                this.confetti4.animations.stop("confetti");
                this.confetti5.alpha = 0;
                this.confetti5.y = -this.confetti.height;
                this.confetti5.animations.stop("confetti");
                this.confetti6.alpha = 0;
                this.confetti6.y = -this.confetti.height * 2;
                this.confetti6.animations.stop("confetti");
                this.alpha = 1;
            }, this);
        };
        return EfectsContainer;
    }(Phaser.Group));
    BasketChamps.EfectsContainer = EfectsContainer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var HoopFront = (function (_super) {
        __extends(HoopFront, _super);
        function HoopFront(game) {
            var _this = _super.call(this, game, 0, 0, "texture_atlas_1", "frontHoop.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.body.setRectangle(1, 1, -1000, -1000);
            _this.body.static = true;
            _this.anchor.set(0);
            _this.move_up = 1;
            _this.move_left = 1;
            return _this;
        }
        HoopFront.prototype.pause = function () {
            BasketChamps.GameConstants.MOV_HOR = false;
            BasketChamps.GameConstants.MOV_VER = false;
        };
        HoopFront.prototype.resume = function () {
        };
        HoopFront.prototype.resetBasket = function () {
            var tweenReset = this.game.add.tween(this.body);
            tweenReset.to({ x: 0, y: 0 }, 1000, Phaser.Easing.Quadratic.Out, false);
            tweenReset.start();
        };
        return HoopFront;
    }(Phaser.Sprite));
    BasketChamps.HoopFront = HoopFront;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var MatchController = (function () {
        function MatchController(game) {
            this.game = game;
            if (this.game.device.desktop) {
                this.game.input.onDown.add(this.fireBall, this);
            }
            else {
                this.game.input.onUp.add(this.fireBall, this);
                if (!this.game.scale.isFullScreen) {
                    this.game.input.onDown.add(this.goFull, this);
                }
            }
        }
        MatchController.prototype.fireBall = function () {
            BasketChamps.MatchManager.currentInstance.fireBall();
        };
        MatchController.prototype.goFull = function () {
            this.game.scale.startFullScreen(true);
            this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
        };
        return MatchController;
    }());
    BasketChamps.MatchController = MatchController;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ReflectionBall = (function (_super) {
        __extends(ReflectionBall, _super);
        function ReflectionBall(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_1", "basket_ball0001.png") || this;
            _this.anchor.set(.5);
            _this.alpha = 0.3;
            return _this;
        }
        ReflectionBall.prototype.update = function () {
            this.x = BasketChamps.StageContainer.currentInstance.ball.x;
            this.y = 370 + (370 - BasketChamps.StageContainer.currentInstance.ball.y) - this.height;
            this.angle = -BasketChamps.StageContainer.currentInstance.ball.angle;
        };
        return ReflectionBall;
    }(Phaser.Image));
    BasketChamps.ReflectionBall = ReflectionBall;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Trajectory = (function (_super) {
        __extends(Trajectory, _super);
        function Trajectory(game) {
            var _this = _super.call(this, game, null, "trajectory", false) || this;
            _this.paused = true;
            _this.onTween = false;
            _this.initialX = BasketChamps.StageContainer.currentInstance.ball.initialX;
            _this.initialY = BasketChamps.StageContainer.currentInstance.ball.initialY;
            _this.visible = false;
            _this.firstTime = true;
            _this.countPoints = 0;
            return _this;
        }
        Trajectory.prototype.getTrajectoryPoint = function (startX, startY, velocityX, velocityY, n) {
            var t = 1 / 60.0;
            var stepVelocityX = t * this.game.physics.box2d.pxm(-velocityX);
            var stepVelocityY = t * this.game.physics.box2d.pxm(-velocityY);
            var stepGravityX = t * t * this.game.physics.box2d.pxm(-this.game.physics.box2d.gravity.x);
            var stepGravityY = t * t * this.game.physics.box2d.pxm(-this.game.physics.box2d.gravity.y);
            startX = this.game.physics.box2d.pxm(-startX);
            startY = this.game.physics.box2d.pxm(-startY);
            var tpx = startX + n * stepVelocityX + 0.5 * (n * n + n) * stepGravityX;
            var tpy = startY + n * stepVelocityY + 0.5 * (n * n + n) * stepGravityY;
            tpx = this.game.physics.box2d.mpx(-tpx);
            tpy = this.game.physics.box2d.mpx(-tpy);
            return { x: tpx, y: tpy };
        };
        Trajectory.prototype.drawLine = function () {
            var mouseX = this.game.input.activePointer.x;
            var mouseY = this.game.input.activePointer.y;
            if (!this.game.device.desktop) {
                mouseY -= 50;
            }
            if (BasketChamps.StageContainer.currentInstance.ball.trajectoryReady && this.visible) {
                this.initialX = BasketChamps.StageContainer.currentInstance.ball.initialX;
                this.initialY = BasketChamps.StageContainer.currentInstance.ball.initialY;
                if (mouseY + 40 > this.initialY) {
                    mouseY = this.initialY - 40;
                }
                if (mouseX + 50 > this.initialX) {
                    mouseX = this.initialX - 50;
                }
                if (!BasketChamps.StageContainer.currentInstance.ball.getOnShot() && !this.paused) {
                    var launchVelocity = BasketChamps.StageContainer.currentInstance.ball.getLaunchVelocity();
                    var time = BasketChamps.StageContainer.currentInstance.ball.time;
                    if (this.firstTime) {
                        this.removeAll();
                        this.points = [];
                        this.firstTime = false;
                        for (var i = time / 20; i <= time + time / 40; i += time / 20) {
                            var trajectoryPoint = this.getTrajectoryPoint(this.initialX, this.initialY, launchVelocity.x, launchVelocity.y, i);
                            if ((trajectoryPoint.x >= mouseX + time / 20 &&
                                this.initialX >= mouseX + time / 20)) {
                                var point = new Phaser.Image(this.game, trajectoryPoint.x, trajectoryPoint.y, "texture_atlas_1", "trajectory-ball-1.png");
                                point.anchor.set(.5);
                                point.alpha = 0;
                                this.points.push(point);
                            }
                            else if (BasketChamps.GameConstants.EASY_GAME || BasketChamps.GameVars.getInstance().trajectoryHelp) {
                                var point = new Phaser.Image(this.game, trajectoryPoint.x, trajectoryPoint.y, "texture_atlas_1", "trajectory-ball-2.png");
                                point.anchor.set(.5);
                                point.alpha = 0;
                                this.points.push(point);
                            }
                        }
                        for (var i = 0; i < this.points.length; i++) {
                            this.addChild(this.points[i]);
                        }
                        this.mousePoint = new Phaser.Sprite(this.game, mouseX, mouseY, "texture_atlas_1", "trajectory-ball-3.png");
                        this.mousePoint.anchor.set(.5);
                        this.mousePoint.alpha = 0;
                        this.addChild(this.mousePoint);
                        this.onTween = true;
                        this.tweenTrajectory();
                    }
                    else {
                        var count = 0;
                        for (var i = time / 20; i <= time + time / 40; i += time / 20) {
                            var trajectoryPoint = this.getTrajectoryPoint(this.initialX, this.initialY, launchVelocity.x, launchVelocity.y, i);
                            if ((trajectoryPoint.x >= mouseX + time / 20 &&
                                this.initialX >= mouseX + time / 20)) {
                                this.points[count].x = trajectoryPoint.x;
                                this.points[count].y = trajectoryPoint.y;
                            }
                            else if (BasketChamps.GameConstants.EASY_GAME || BasketChamps.GameVars.getInstance().trajectoryHelp) {
                                this.points[count].x = trajectoryPoint.x;
                                this.points[count].y = trajectoryPoint.y;
                            }
                            count++;
                        }
                        this.mousePoint.x = mouseX;
                        this.mousePoint.y = mouseY;
                        if (this.countPoints % 5 === 0) {
                            if (this.points[this.countPoints / 5] !== undefined) {
                                this.points[this.countPoints / 5].scale.set(1.2);
                            }
                        }
                        else if (this.countPoints % 5 === 2) {
                            if (this.points[(this.countPoints - 2) / 5] !== undefined) {
                                this.points[(this.countPoints - 2) / 5].scale.set(1);
                            }
                        }
                        this.countPoints++;
                        if (this.countPoints > ((this.points.length - 1) * 5) + 2) {
                            this.countPoints = 0;
                        }
                    }
                }
                else {
                    this.removeAll();
                    this.points = new Array();
                    this.firstTime = true;
                }
            }
        };
        Trajectory.prototype.pause = function () {
            this.paused = true;
        };
        Trajectory.prototype.resume = function () {
            this.paused = false;
        };
        Trajectory.prototype.tweenTrajectory = function () {
            for (var i = 0; i < this.points.length; i++) {
                this.game.add.tween(this.points[i])
                    .to({ alpha: 1 }, 50, Phaser.Easing.Cubic.Out, true, i * 50);
            }
            this.game.add.tween(this.mousePoint)
                .to({ alpha: 1 }, 50, Phaser.Easing.Cubic.Out, true, this.points.length * 50)
                .onComplete.add(function () {
                this.onTween = false;
            }, this);
        };
        return Trajectory;
    }(Phaser.Group));
    BasketChamps.Trajectory = Trajectory;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var StageContainer = (function (_super) {
        __extends(StageContainer, _super);
        function StageContainer(game) {
            var _this = _super.call(this, game, null, "stage-container", false) || this;
            StageContainer.currentInstance = _this;
            _this.ballTop = true;
            _this.efectTop = false;
            _this.game.physics.startSystem(Phaser.Physics.BOX2D);
            _this.game.physics.box2d.frameRate = 1 / 60;
            _this.game.physics.box2d.gravity.y = 700;
            _this.game.physics.box2d.paused = false;
            var box2D = _this.game.physics.box2d;
            box2D.setBoundsToWorld(false, false, false, false);
            var initialX = Math.floor((Math.random() * 300) + (200));
            var initialY = Math.floor((Math.random() * 150) + (100));
            _this.basket = new BasketChamps.Basket(_this.game, 0, 0);
            _this.addChild(_this.basket);
            _this.reflectionBall = new BasketChamps.ReflectionBall(_this.game, initialX, 340);
            _this.addChild(_this.reflectionBall);
            _this.basketFront = new BasketChamps.BasketFront(_this.game);
            _this.addChild(_this.basketFront);
            _this.efectsContainer = new BasketChamps.EfectsContainer(_this.game);
            _this.addChild(_this.efectsContainer);
            _this.ball = new BasketChamps.Ball(_this.game, initialX, initialY);
            _this.addChild(_this.ball);
            _this.basket.hoop.body.setFixtureContactCallback(_this.basket.hoop.circleOne, _this.basket.hoop.hoopCallback, _this.basket.hoop);
            _this.basket.hoop.body.setFixtureContactCallback(_this.basket.hoop.circleTwo, _this.basket.hoop.hoopCallback, _this.basket.hoop);
            _this.basketNet = new BasketChamps.BasketNet(_this.game, 200, 200);
            _this.addChild(_this.basketNet);
            _this.hoopFront = new BasketChamps.HoopFront(_this.game);
            _this.addChild(_this.hoopFront);
            _this.courtWalls = new BasketChamps.CourtWalls(_this.game);
            _this.addChild(_this.courtWalls);
            _this.trajectory = new BasketChamps.Trajectory(_this.game);
            _this.addChild(_this.trajectory);
            return _this;
        }
        StageContainer.prototype.destroy = function (destroyChildren, soft) {
            StageContainer.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        StageContainer.prototype.pause = function () {
            this.game.physics.box2d.paused = true;
            this.trajectory.pause();
            this.ball.pause();
            this.basketFront.pause();
            BasketChamps.HUD.currentInstance.initialCount.pause();
            BasketChamps.BackgroundManager.currentInstance.spectatorsManager.pause();
            if (!BasketChamps.AudioManager.getInstance().isMuted) {
                this.game.sound.volume = .5;
            }
        };
        StageContainer.prototype.resume = function () {
            this.game.physics.box2d.paused = false;
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                this.trajectory.resume();
            }
            this.ball.resume();
            this.basketFront.resume();
            BasketChamps.HUD.currentInstance.initialCount.resume();
            BasketChamps.BackgroundManager.currentInstance.spectatorsManager.resume();
            if (!BasketChamps.AudioManager.getInstance().isMuted) {
                this.game.sound.volume = 1;
            }
        };
        StageContainer.prototype.basketFrontTop = function () {
            if (this.ballTop) {
                this.ballTop = false;
                this.swap(this.ball, this.basketFront);
            }
        };
        StageContainer.prototype.ballToTop = function () {
            if (!this.ballTop) {
                this.ballTop = true;
                this.swap(this.ball, this.basketFront);
            }
        };
        StageContainer.prototype.efectFrontBall = function () {
            if (!this.efectTop) {
                this.efectTop = true;
                this.swap(this.efectsContainer, this.ball);
                this.swap(this.efectsContainer, this.hoopFront);
                this.swap(this.basketNet, this.hoopFront);
            }
        };
        StageContainer.prototype.ballFrontEfect = function () {
            if (this.efectTop) {
                this.efectTop = false;
                this.swap(this.basketNet, this.hoopFront);
                this.swap(this.hoopFront, this.efectsContainer);
                this.swap(this.ball, this.efectsContainer);
            }
        };
        return StageContainer;
    }(Phaser.Group));
    BasketChamps.StageContainer = StageContainer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
            this.load.path = BasketChamps.GameConstants.ASSETS_PATH;
            this.input.maxPointers = 2;
            this.game.stage.disableVisibilityChange = true;
            this.game.stage.backgroundColor = "#01055a";
            if (this.game.device.desktop) {
                this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
                this.game.scale.pageAlignHorizontally = true;
                this.game.onBlur.add(this.mute, this);
                this.game.onFocus.add(this.unmute, this);
                BasketChamps.GameVars.scaleX = 1;
            }
            else {
                this.game.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
                this.game.scale.pageAlignHorizontally = true;
                this.game.scale.pageAlignVertically = true;
                this.game.scale.isLandscape = true;
                var w = window.innerWidth;
                var h = window.innerHeight;
                BasketChamps.GameVars.scaleX = (BasketChamps.GameConstants.GAME_WIDTH / BasketChamps.GameConstants.GAME_HEIGHT) / (w / h);
                this.game.onPause.add(this.mute, this);
                this.game.onResume.add(this.unmute, this);
            }
            if (BasketChamps.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            BasketChamps.GameVars.getInstance().init(this.game);
            BasketChamps.TournamentManager.getInstance().init(this.game);
            BasketChamps.AchievementsManager.getInstance().init();
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.KIZI) {
                var callback_start = function () {
                    console.log("ad start");
                    BasketChamps.Game.currentInstance.paused = true;
                    BasketChamps.Game.currentInstance.sound.mute = true;
                };
                var callback_complete = function () {
                    console.log("ad complete");
                    BasketChamps.Game.currentInstance.paused = false;
                    if (!BasketChamps.AudioManager.getInstance().isMuted) {
                        BasketChamps.Game.currentInstance.sound.mute = false;
                    }
                };
                HTML5API_onAdStart(callback_start);
                HTML5API_onAdComplete(callback_complete);
            }
        };
        Boot.prototype.preload = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                this.load.atlasJSONArray("texture_atlas_minijuegos", "", "");
            }
            this.load.script("webfont", "//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js");
            WebFontConfig = {
                active: function () {
                    Boot.currentInstance.game.time.events.add(Phaser.Timer.SECOND, Boot.currentInstance.startPreloader, Boot.currentInstance);
                },
                google: {
                    families: ["Tillana:800:latin", "Mirza:400:latin", "Jomhuria:400:latin"]
                }
            };
            this.load.crossOrigin = "anonymous";
            this.load.image("basket-champs", "/basket-champs.png");
            this.load.image("", "");
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = BasketChamps.GameConstants.VERSION;
        };
        Boot.prototype.shutdown = function () {
            _super.prototype.shutdown.call(this);
            Boot.currentInstance = null;
        };
        Boot.prototype.startPreloader = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                if (top.location.href.indexOf("") || top.location.href.indexOf("") > -1 || top.location.href.indexOf("localhost") > -1) {
                    this.game.state.start("PreLoader", true, false);
                }
            }
            else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.IZZYGAMES) {
                if (top.location.href.indexOf("") || top.location.href.indexOf("") > -1 || top.location.href.indexOf("") > -1 || top.location.href.indexOf("footchinko.com") > -1 || top.location.href.indexOf("localhost") > -1) {
                    this.game.state.start("PreLoader", true, false);
                }
            }
            else {
                this.game.state.start("PreLoader", true, false);
            }
        };
        Boot.prototype.mute = function () {
            this.game.sound.mute = true;
        };
        Boot.prototype.unmute = function () {
            if (!BasketChamps.AudioManager.getInstance().isMuted) {
                this.game.sound.mute = false;
            }
        };
        return Boot;
    }(Phaser.State));
    BasketChamps.Boot = Boot;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ConfirmationMenu = (function (_super) {
        __extends(ConfirmationMenu, _super);
        function ConfirmationMenu(game, pauseMenu) {
            var _this = _super.call(this, game, null, "confirmation-menu", false) || this;
            _this.pauseMenu = pauseMenu || false;
            if (!_this.pauseMenu) {
                var darkBackground = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
                darkBackground.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
                darkBackground.alpha = 0.7;
                darkBackground.inputEnabled = true;
                darkBackground.events.onInputDown.add(_this.onClickDarkBackground, _this);
                _this.addChild(darkBackground);
            }
            var menuBackground = new Utils.RectangleWithRadius(_this.game, 160, 176, BasketChamps.GameConstants.GAME_WIDTH - 320, 144, 10, "#F4F5E5");
            _this.add(menuBackground);
            var label = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 210, "YOUR PROGRESS WILL BE LOST", { font: "34px Jomhuria", fontWeight: "400" });
            label.addColor("#4D3E44", 0);
            label.anchor.set(.5);
            _this.add(label);
            label = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 232, "CONFIRM?", { font: "24px Jomhuria", fontWeight: "200" });
            label.addColor("#4D3E44", 0);
            label.anchor.set(.5);
            _this.add(label);
            var resetButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 270, "texture_atlas_1", _this.onClickReset, _this);
            resetButton.setFrames("button-new-on.png", "button-new-off.png", "button-new-on.png");
            resetButton.anchor.set(.5);
            _this.add(resetButton);
            label = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 306, "RESET", { font: "24px Jomhuria", fontWeight: "400" });
            label.addColor("#4D3E44", 0);
            label.anchor.set(.5);
            _this.add(label);
            var cancelButton = new Phaser.Button(_this.game, 438, 176, "texture_atlas_1", _this.onClickCancel, _this);
            cancelButton.setFrames("button-cancel-on.png", "button-cancel-off.png", "button-cancel-on.png");
            cancelButton.anchor.set(.5);
            _this.add(cancelButton);
            return _this;
        }
        ConfirmationMenu.prototype.onClickReset = function (b) {
            if (this.pauseMenu) {
                BasketChamps.PauseLayer.currentInstance.newTournament();
            }
            else {
                BasketChamps.SplashState.currentInstance.newTournament();
            }
            b.clearFrames();
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        ConfirmationMenu.prototype.onClickCancel = function (b) {
            if (this.pauseMenu) {
                BasketChamps.PauseLayer.currentInstance.removeConfirmationMenu();
            }
            else {
                BasketChamps.SplashState.currentInstance.removeConfirmationMenu();
            }
            b.clearFrames();
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        ConfirmationMenu.prototype.onClickDarkBackground = function () {
        };
        return ConfirmationMenu;
    }(Phaser.Group));
    BasketChamps.ConfirmationMenu = ConfirmationMenu;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var BackgroundManager = (function (_super) {
        __extends(BackgroundManager, _super);
        function BackgroundManager(game) {
            var _this = _super.call(this, game, null, "background-manager", false) || this;
            BackgroundManager.currentInstance = _this;
            _this.flagPlayer = null;
            _this.teamPlayerName = null;
            _this.teamPlayerName2 = null;
            _this.flagAI = null;
            _this.teamAIName = null;
            _this.teamAIName2 = null;
            _this.framePlayer = null;
            _this.frameAI = null;
            var background = new Phaser.Image(_this.game, 0, 0, "bg");
            _this.addChild(background);
            _this.slotsManager = new BasketChamps.SlotsManager(_this.game, 246, 127);
            _this.addChild(_this.slotsManager);
            _this.backlightsPlayer = new Array();
            var backlightPlayer;
            for (var i = 0; i < 5; i++) {
                backlightPlayer = new Phaser.Image(_this.game, (BasketChamps.GameConstants.GAME_WIDTH / 2) - 85 + i * 57, (BasketChamps.GameConstants.GAME_HEIGHT / 2) + 60, "texture_atlas_2", "backlight.png");
                backlightPlayer.scale.x = .2;
                backlightPlayer.scale.y = .33;
                backlightPlayer.anchor.set(.5);
                backlightPlayer.tint = 0x45FF6F;
                backlightPlayer.visible = false;
                _this.backlightsPlayer.push(backlightPlayer);
                _this.addChild(_this.backlightsPlayer[i]);
            }
            _this.backlightsAI = new Array();
            var backlightAI;
            for (var i = 0; i < 5; i++) {
                backlightAI = new Phaser.Image(_this.game, (BasketChamps.GameConstants.GAME_WIDTH / 2) - 85 + i * 57, (BasketChamps.GameConstants.GAME_HEIGHT / 2) - 40 + 80, "texture_atlas_2", "backlight.png");
                backlightAI.scale.x = .2;
                backlightAI.scale.y = 1.66;
                backlightAI.anchor.set(.5);
                backlightAI.tint = 0xFF55A0;
                backlightAI.visible = false;
                _this.backlightsAI.push(backlightAI);
                _this.addChild(_this.backlightsAI[i]);
            }
            _this.backlight = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "backlight.png");
            _this.backlight.anchor.set(.5);
            _this.addChild(_this.backlight);
            _this.harold = new BasketChamps.Harold(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 35, 185);
            _this.addChild(_this.harold);
            _this.spectatorsManager = new BasketChamps.SpectatorsManager(_this.game, _this.x, _this.y);
            _this.addChild(_this.spectatorsManager);
            _this.scoreBoard = new BasketChamps.ScoreBoard(_this.game);
            _this.add(_this.scoreBoard);
            return _this;
        }
        BackgroundManager.prototype.destroy = function (destroyChildren, soft) {
            BackgroundManager.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        BackgroundManager.prototype.updateScore = function () {
            this.scoreBoard.updateScore();
        };
        BackgroundManager.prototype.onBasketMissed = function () {
            this.spectatorsManager.onBasketMissed();
            this.harold.onBasketMissed();
        };
        BackgroundManager.prototype.onBasketScored = function () {
            this.spectatorsManager.onBasketScored();
            this.harold.onBasketScored();
        };
        BackgroundManager.prototype.winPlayer = function () {
            var _loop_1 = function (i) {
                this_1.backlightsPlayer[i].visible = true;
                this_1.game.add.tween(this_1.backlightsPlayer[i].scale)
                    .to({ y: 1.66 }, 300, Phaser.Easing.Cubic.Out, true, i * 100);
                this_1.game.add.tween(this_1.backlightsPlayer[i])
                    .to({ y: (BasketChamps.GameConstants.GAME_HEIGHT / 2) }, 300, Phaser.Easing.Cubic.Out, true, i * 100)
                    .onComplete.add(function () {
                    this.game.add.tween(this.backlightsPlayer[i].scale)
                        .to({ y: .33 }, 300, Phaser.Easing.Cubic.Out, true, 100);
                    this.game.add.tween(this.backlightsPlayer[i])
                        .to({ y: (BasketChamps.GameConstants.GAME_HEIGHT / 2) + 100 }, 300, Phaser.Easing.Cubic.In, true, 100)
                        .onComplete.add(function () {
                        this.backlightsPlayer[i].visible = false;
                    }, this);
                }, this_1);
            };
            var this_1 = this;
            for (var i = 0; i < 5; i++) {
                _loop_1(i);
            }
        };
        BackgroundManager.prototype.winAI = function () {
            var _loop_2 = function (i) {
                this_2.backlightsAI[i].visible = true;
                this_2.game.add.tween(this_2.backlightsAI[i])
                    .to({ y: (BasketChamps.GameConstants.GAME_HEIGHT / 2) - 40 }, 300, Phaser.Easing.Cubic.Out, true, i * 100)
                    .onComplete.add(function () {
                    this.game.add.tween(this.backlightsAI[i])
                        .to({ y: (BasketChamps.GameConstants.GAME_HEIGHT / 2) - 40 + 80 }, 300, Phaser.Easing.Cubic.In, true, 100)
                        .onComplete.add(function () {
                        this.backlightsAI[i].visible = false;
                    }, this);
                }, this_2);
            };
            var this_2 = this;
            for (var i = 0; i < 5; i++) {
                _loop_2(i);
            }
        };
        BackgroundManager.prototype.matchReady = function () {
            if (this.flagPlayer !== null) {
                this.flagPlayer.destroy();
                this.teamPlayerName.destroy();
                this.teamPlayerName2.destroy();
                this.flagAI.destroy();
                this.teamAIName.destroy();
                this.teamAIName2.destroy();
                this.framePlayer.destroy();
                this.frameAI.destroy();
            }
            this.spectatorsManager.matchReady();
            var flagP = "flag_" + BasketChamps.GameVars.getInstance().myTeamID + ".png";
            this.flagPlayer = new Phaser.Image(this.game, 165, 36, "texture_atlas_1", flagP);
            this.flagPlayer.anchor.set(.5);
            this.addChild(this.flagPlayer);
            this.framePlayer = new Phaser.Image(this.game, 165, 36, "texture_atlas_2", "frame_player.png");
            this.framePlayer.anchor.set(.5);
            this.addChild(this.framePlayer);
            if (BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name2 === null) {
                this.teamPlayerName = new Phaser.Text(this.game, 165, 80, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name, { font: "20px Mirza", fontWeight: "800" });
                this.teamPlayerName.addColor("#8FAABF", 0);
                this.teamPlayerName.anchor.set(.5);
                this.addChild(this.teamPlayerName);
            }
            else {
                this.teamPlayerName = new Phaser.Text(this.game, 165, 77, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name, { font: "20px Mirza", fontWeight: "800" });
                this.teamPlayerName.addColor("#8FAABF", 0);
                this.teamPlayerName.anchor.set(.5);
                this.addChild(this.teamPlayerName);
                this.teamPlayerName2 = new Phaser.Text(this.game, 165, 92, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name2, { font: "20px Mirza", fontWeight: "800" });
                this.teamPlayerName2.addColor("#8FAABF", 0);
                this.teamPlayerName2.anchor.set(.5);
                this.addChild(this.teamPlayerName2);
            }
            var flag2 = "flag_" + (BasketChamps.GameVars.getInstance().oponentPlayer() + 1) + ".png";
            this.flagAI = new Phaser.Image(this.game, 480, 36, "texture_atlas_1", flag2);
            this.flagAI.anchor.set(.5);
            this.flagAI.alpha = .5;
            this.addChild(this.flagAI);
            this.frameAI = new Phaser.Image(this.game, 480, 36, "texture_atlas_2", "frame_AI.png");
            this.frameAI.anchor.set(.5);
            this.frameAI.alpha = 0;
            this.addChild(this.frameAI);
            if (BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name2 === null) {
                this.teamAIName = new Phaser.Text(this.game, 480, 80, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name, { font: "20px Mirza", fontWeight: "800" });
                this.teamAIName.addColor("#8FAABF", 0);
                this.teamAIName.anchor.set(.5);
                this.addChild(this.teamAIName);
            }
            else {
                this.teamAIName = new Phaser.Text(this.game, 480, 77, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name, { font: "20px Mirza", fontWeight: "800" });
                this.teamAIName.addColor("#8FAABF", 0);
                this.teamAIName.anchor.set(.5);
                this.addChild(this.teamAIName);
                this.teamAIName2 = new Phaser.Text(this.game, 480, 92, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name2, { font: "20px Mirza", fontWeight: "800" });
                this.teamAIName2.addColor("#8FAABF", 0);
                this.teamAIName2.anchor.set(.5);
                this.addChild(this.teamAIName2);
            }
        };
        BackgroundManager.prototype.changeFlags = function (playerTurn) {
            if (playerTurn) {
                this.game.add.tween(this.flagPlayer)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.framePlayer)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.flagAI)
                    .to({ alpha: .5 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.frameAI)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
            }
            else {
                this.game.add.tween(this.flagPlayer)
                    .to({ alpha: .5 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.framePlayer)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.flagAI)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.frameAI)
                    .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.Out, true);
            }
        };
        BackgroundManager.prototype.removeFlags = function () {
            this.game.add.tween(this.flagPlayer)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.framePlayer)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.flagAI)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.frameAI)
                .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true);
        };
        return BackgroundManager;
    }(Phaser.Group));
    BasketChamps.BackgroundManager = BackgroundManager;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Harold = (function (_super) {
        __extends(Harold, _super);
        function Harold(game, x, y) {
            var _this = _super.call(this, game, null, "harold", false) || this;
            _this.x = x;
            _this.y = y;
            _this.celebrating = false;
            _this.haroldImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "harold_front.png");
            _this.haroldImage.anchor.set(.5);
            _this.addChild(_this.haroldImage);
            return _this;
        }
        Harold.prototype.update = function () {
            _super.prototype.update.call(this);
            if (!this.celebrating) {
                if (BasketChamps.StageContainer.currentInstance.ball.x + 30 < this.x) {
                    this.haroldImage.frameName = "harold_side.png";
                    this.scale.x = 1;
                }
                else if (BasketChamps.StageContainer.currentInstance.ball.x - 30 > this.x) {
                    this.haroldImage.frameName = "harold_side.png";
                    this.scale.x = -1;
                }
                else {
                    this.haroldImage.frameName = "harold_front.png";
                }
            }
        };
        Harold.prototype.onBasketMissed = function () {
            this.celebrating = true;
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                this.loseTween();
            }
            else {
                this.winTween2();
            }
        };
        Harold.prototype.onBasketScored = function () {
            this.celebrating = true;
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                this.winTween();
            }
            else {
                this.loseTween();
            }
        };
        Harold.prototype.winTween = function () {
            var rand = Math.floor((Math.random() * 50) + 20);
            this.game.add.tween(this.haroldImage.scale)
                .to({ x: 1.1, y: .9 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.haroldImage.frameName = "harold_happy.png";
                this.game.add.tween(this.haroldImage.scale)
                    .to({ x: .8, y: 1 }, 200, Phaser.Easing.Bounce.Out, true);
                this.game.add.tween(this.haroldImage)
                    .to({ y: this.haroldImage.y - rand }, rand * 8, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.haroldImage)
                        .to({ y: this.haroldImage.y + rand }, rand * 8, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        this.haroldImage.frameName = "harold_front.png";
                        this.game.add.tween(this.haroldImage.scale)
                            .to({ x: 1.1, y: .9 }, 150, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.game.add.tween(this.haroldImage.scale)
                                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Bounce.Out, true)
                                .onComplete.add(function () {
                                this.onCelebration = false;
                            }, this);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        Harold.prototype.winTween2 = function () {
            this.game.add.tween(this.haroldImage.scale)
                .to({ x: 1.1, y: .9 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.haroldImage.frameName = "harold_happy.png";
                this.game.add.tween(this.haroldImage.scale)
                    .to({ x: .8, y: 1 }, 200, Phaser.Easing.Bounce.Out, true)
                    .onComplete.add(function () {
                    this.haroldImage.frameName = "harold_front.png";
                    this.game.add.tween(this.haroldImage.scale)
                        .to({ x: 1.1, y: .9 }, 150, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        this.game.add.tween(this.haroldImage.scale)
                            .to({ x: 1, y: 1 }, 150, Phaser.Easing.Bounce.Out, true)
                            .onComplete.add(function () {
                            this.onCelebration = false;
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        Harold.prototype.loseTween = function () {
            this.haroldImage.frameName = "harold_wow.png";
            this.game.add.tween(this.haroldImage)
                .to({ angle: -5 }, 400, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.game.add.tween(this.haroldImage)
                    .to({ angle: 5 }, 400, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.haroldImage)
                        .to({ angle: 0 }, 200, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        this.haroldImage.frameName = "harold_front.png";
                        this.onCelebration = false;
                    }, this);
                }, this);
            }, this);
        };
        return Harold;
    }(Phaser.Group));
    BasketChamps.Harold = Harold;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ScoreBoard = (function (_super) {
        __extends(ScoreBoard, _super);
        function ScoreBoard(game) {
            var _this = _super.call(this, game, null, "scoreboard", false) || this;
            _this.x = 233;
            _this.y = 5;
            _this.playerPointsLabel = new Phaser.BitmapText(_this.game, 40, 60, "digital-display", BasketChamps.GameVars.getInstance().playerPoints.toString(), 110);
            _this.playerPointsLabel.anchor.set(.5);
            _this.add(_this.playerPointsLabel);
            _this.AIPointsLabel = new Phaser.BitmapText(_this.game, 142, 60, "digital-display", BasketChamps.GameVars.getInstance().AIPoints.toString(), 110);
            _this.AIPointsLabel.anchor.set(.5);
            _this.add(_this.AIPointsLabel);
            return _this;
        }
        ScoreBoard.prototype.updateScore = function () {
            var tweenPlayer = this.game.add.tween(this.playerPointsLabel);
            var tweenAI = this.game.add.tween(this.AIPointsLabel);
            if (BasketChamps.GameVars.getInstance().playerPoints !== 0 || BasketChamps.GameVars.getInstance().AIPoints !== 0) {
                tweenPlayer.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenPlayer.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenPlayer.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenPlayer.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenPlayer.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenPlayer.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenAI.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenAI.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenAI.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenAI.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenAI.to({ alpha: 0 }, 100, Phaser.Easing.Bounce.In, false);
                tweenAI.to({ alpha: 1 }, 100, Phaser.Easing.Bounce.Out, false);
                tweenPlayer.onComplete.add(this.changePoints, this);
                tweenPlayer.start();
                tweenAI.start();
            }
            else {
                this.playerPointsLabel.setText(BasketChamps.GameVars.getInstance().playerPoints.toString());
                this.AIPointsLabel.setText(BasketChamps.GameVars.getInstance().AIPoints.toString());
            }
        };
        ScoreBoard.prototype.changePoints = function () {
            this.playerPointsLabel.setText(BasketChamps.GameVars.getInstance().playerPoints.toString());
            this.AIPointsLabel.setText(BasketChamps.GameVars.getInstance().AIPoints.toString());
        };
        return ScoreBoard;
    }(Phaser.Group));
    BasketChamps.ScoreBoard = ScoreBoard;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SlotsManager = (function (_super) {
        __extends(SlotsManager, _super);
        function SlotsManager(game, x, y) {
            var _this = _super.call(this, game, null, "slots-manager", false) || this;
            _this.x = x;
            _this.y = y;
            _this.count = 0;
            _this.slotsPlayer = new Array();
            _this.slotsAI = new Array();
            for (var i = 0; i < 5; i++) {
                var slotPlayer = void 0;
                slotPlayer = new Phaser.Sprite(_this.game, i * 12, 0, "texture_atlas_1", "slot0001.png");
                slotPlayer.anchor.set(.5);
                _this.slotsPlayer.push(slotPlayer);
                _this.addChild(slotPlayer);
                var slotAI = void 0;
                slotAI = new Phaser.Sprite(_this.game, 104 + i * 12, 0, "texture_atlas_1", "slot0001.png");
                slotAI.anchor.set(.5);
                _this.slotsAI.push(slotAI);
                _this.addChild(slotAI);
            }
            return _this;
        }
        SlotsManager.prototype.resetSlots = function () {
            if (this.pulseTween !== undefined) {
                this.pulseTween.stop();
            }
            this.count = 0;
            for (var i = 0; i < 5; i++) {
                this.slotsPlayer[i].alpha = 1;
                this.slotsAI[i].alpha = 1;
                this.slotsPlayer[i].loadTexture("texture_atlas_1", "slot0001.png");
                this.slotsAI[i].loadTexture("texture_atlas_1", "slot0001.png");
            }
        };
        SlotsManager.prototype.startSuddenDeath = function (scored) {
            this.pulseTween.stop();
            this.slotsAI[4].alpha = 1;
            if (scored) {
                this.slotsAI[4].loadTexture("texture_atlas_1", "slot0003.png");
            }
            else {
                this.slotsAI[4].loadTexture("texture_atlas_1", "slot0004.png");
            }
            this.game.time.events.add(50, function () {
                for (var i = 0; i < 5; i++) {
                    this.game.add.tween(this.slotsPlayer[4 - i])
                        .to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, true, 50 * (4 - i));
                    this.game.add.tween(this.slotsAI[4 - i])
                        .to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, true, 50 * (4 - i));
                }
            }, this);
            this.game.time.events.add(500, function () {
                for (var i = 0; i < 5; i++) {
                    this.slotsPlayer[i].loadTexture("texture_atlas_1", "slot0005.png");
                    this.slotsAI[i].loadTexture("texture_atlas_1", "slot0008.png");
                }
            }, this);
        };
        SlotsManager.prototype.finishSuddenDeath = function () {
            this.count++;
            this.game.add.tween(this.slotsPlayer[0])
                .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.pulseTween = this.game.add.tween(this.slotsPlayer[0]);
                this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                this.pulseTween.delay(500);
                this.pulseTween.loop();
                this.pulseTween.start();
            }, this);
            this.game.add.tween(this.slotsAI[0])
                .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true);
        };
        SlotsManager.prototype.updateSlots = function (scored) {
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                if (BasketChamps.GameVars.getInstance().round < 5) {
                    if (this.pulseTween !== undefined) {
                        this.pulseTween.stop();
                    }
                    this.slotsPlayer[BasketChamps.GameVars.getInstance().round].loadTexture("texture_atlas_1", "slot0002.png");
                    this.pulseTween = this.game.add.tween(this.slotsPlayer[BasketChamps.GameVars.getInstance().round]);
                    this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                    this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                    this.pulseTween.delay(500);
                    this.pulseTween.loop();
                    this.pulseTween.start();
                }
                if (BasketChamps.GameVars.getInstance().round > 0) {
                    if (BasketChamps.GameVars.getInstance().round >= 5) {
                        this.pulseTween.stop();
                    }
                    if (scored) {
                        this.slotsAI[BasketChamps.GameVars.getInstance().round - 1].loadTexture("texture_atlas_1", "slot0003.png");
                    }
                    else {
                        this.slotsAI[BasketChamps.GameVars.getInstance().round - 1].loadTexture("texture_atlas_1", "slot0004.png");
                    }
                    this.slotsAI[BasketChamps.GameVars.getInstance().round - 1].alpha = 1;
                }
            }
            else {
                if (this.pulseTween !== undefined) {
                    this.pulseTween.stop();
                }
                this.slotsAI[BasketChamps.GameVars.getInstance().round].loadTexture("texture_atlas_1", "slot0002.png");
                this.pulseTween = this.game.add.tween(this.slotsAI[BasketChamps.GameVars.getInstance().round]);
                this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                this.pulseTween.delay(500);
                this.pulseTween.loop();
                this.pulseTween.start();
                if (scored) {
                    this.slotsPlayer[BasketChamps.GameVars.getInstance().round].loadTexture("texture_atlas_1", "slot0003.png");
                }
                else {
                    this.slotsPlayer[BasketChamps.GameVars.getInstance().round].loadTexture("texture_atlas_1", "slot0004.png");
                }
                this.slotsPlayer[BasketChamps.GameVars.getInstance().round].alpha = 1;
            }
        };
        SlotsManager.prototype.finalRounds = function (scored) {
            if (this.count === 5 && BasketChamps.GameVars.getInstance().isPlayerTurn) {
                this.count = 0;
            }
            if (this.count === 0) {
                this.count++;
                this.pulseTween.stop();
                this.slotsAI[4].alpha = 1;
                if (scored) {
                    this.slotsAI[4].loadTexture("texture_atlas_1", "slot0006.png");
                }
                else {
                    this.slotsAI[4].loadTexture("texture_atlas_1", "slot0007.png");
                }
                this.game.time.events.add(50, function () {
                    for (var i = 0; i < 5; i++) {
                        this.game.add.tween(this.slotsPlayer[4 - i])
                            .to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, true, 50 * (4 - i));
                        this.game.add.tween(this.slotsAI[4 - i])
                            .to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, true, 50 * (4 - i));
                    }
                }, this);
                this.game.time.events.add(500, function () {
                    for (var i = 0; i < 5; i++) {
                        this.slotsPlayer[i].loadTexture("texture_atlas_1", "slot0005.png");
                        this.slotsAI[i].loadTexture("texture_atlas_1", "slot0008.png");
                    }
                    this.game.add.tween(this.slotsPlayer[0])
                        .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        this.pulseTween = this.game.add.tween(this.slotsPlayer[0]);
                        this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                        this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                        this.pulseTween.delay(500);
                        this.pulseTween.loop();
                        this.pulseTween.start();
                    }, this);
                    this.game.add.tween(this.slotsAI[0])
                        .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true);
                }, this);
            }
            else {
                this.pulseTween.stop();
                if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                    this.count++;
                    this.slotsAI[this.count - 2].alpha = 1;
                    if (!BasketChamps.GameVars.getInstance().matchFinished) {
                        this.slotsPlayer[this.count - 1].alpha = 1;
                        this.slotsAI[this.count - 1].alpha = 1;
                        this.slotsPlayer[this.count - 1].loadTexture("texture_atlas_1", "slot0005.png");
                        this.pulseTween = this.game.add.tween(this.slotsPlayer[this.count - 1]);
                        this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                        this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                        this.pulseTween.delay(500);
                        this.pulseTween.loop();
                        this.pulseTween.start();
                    }
                    if (scored) {
                        this.slotsAI[this.count - 2].loadTexture("texture_atlas_1", "slot0006.png");
                    }
                    else {
                        this.slotsAI[this.count - 2].loadTexture("texture_atlas_1", "slot0007.png");
                    }
                }
                else {
                    this.slotsAI[this.count - 1].alpha = 1;
                    this.slotsPlayer[this.count - 1].alpha = 1;
                    this.slotsAI[this.count - 1].loadTexture("texture_atlas_1", "slot0005.png");
                    this.pulseTween = this.game.add.tween(this.slotsAI[this.count - 1]);
                    this.pulseTween.to({ alpha: 0 }, 100, Phaser.Easing.Linear.None, false);
                    this.pulseTween.to({ alpha: 1 }, 100, Phaser.Easing.Linear.None, false, 500);
                    this.pulseTween.delay(500);
                    this.pulseTween.loop();
                    this.pulseTween.start();
                    if (scored) {
                        this.slotsPlayer[this.count - 1].loadTexture("texture_atlas_1", "slot0006.png");
                    }
                    else {
                        this.slotsPlayer[this.count - 1].loadTexture("texture_atlas_1", "slot0007.png");
                    }
                }
            }
        };
        SlotsManager.prototype.pauseTween = function () {
            if (this.pulseTween !== undefined) {
                this.pulseTween.pause();
            }
        };
        SlotsManager.prototype.resumeTween = function () {
            if (this.pulseTween !== undefined) {
                this.pulseTween.resume();
            }
        };
        return SlotsManager;
    }(Phaser.Group));
    BasketChamps.SlotsManager = SlotsManager;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var Spectator = (function (_super) {
        __extends(Spectator, _super);
        function Spectator(game, x, y, myTeam, special) {
            var _this = _super.call(this, game, null, "spectator", false) || this;
            _this.x = x;
            _this.y = y;
            _this.myTeam = myTeam;
            _this.special = special;
            _this.celebration = false;
            _this.onCelebration = false;
            _this.front = false;
            _this.onWave = false;
            _this.onPause = false;
            _this.count = 0;
            _this.countFront = 0;
            _this.rand = Math.floor((Math.random() * 20) + 5);
            _this.headType = Math.floor((Math.random() * 6) + 1);
            var shirtType = Math.floor((Math.random() * 2) + 1);
            var colour;
            var race;
            var sex;
            if (_this.myTeam) {
                colour = BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].colour;
                race = BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].race;
            }
            else {
                colour = BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].colour;
                race = BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].race;
            }
            if (race === "both") {
                var aux = Math.floor((Math.random() * 2));
                if (aux === 0) {
                    race = "white";
                }
                else {
                    race = "black";
                }
            }
            if (_this.headType > 4) {
                sex = "woman";
                shirtType = 1;
            }
            else {
                sex = "man";
            }
            if (special === "caca") {
                _this.bodyS = new Phaser.Image(_this.game, 0, -14, "texture_atlas_1", "caca.png");
            }
            else {
                _this.bodyS = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "body_" + race + "_" + sex + "_" + colour + "_1_" + shirtType + ".png");
            }
            _this.bodyS.anchor.set(.5, 1);
            _this.addChild(_this.bodyS);
            if (special === "duck") {
                _this.bodyS.alpha = 0;
            }
            if (special === "noHead") {
                _this.headS = new Phaser.Image(_this.game, 42, -27, "texture_atlas_1", "spectator_" + race + "_" + _this.headType + "_00001.png");
                _this.headS.anchor.set(.5);
            }
            else if (special === "normal") {
                _this.headS = new Phaser.Image(_this.game, 0, -43, "texture_atlas_1", "spectator_" + race + "_" + _this.headType + "_00001.png");
                _this.headS.anchor.set(.5);
            }
            else if (special === "pigeon") {
                _this.headS = new Phaser.Image(_this.game, 0, -45, "texture_atlas_1", "pigeon" + "_head_1.png");
                _this.headS.anchor.set(.5);
            }
            else if (special === "horse") {
                _this.headS = new Phaser.Image(_this.game, 0, -40, "texture_atlas_1", "horse" + "_head_1.png");
                _this.headS.anchor.set(.75);
            }
            else if (special === "duck") {
                _this.headS = new Phaser.Image(_this.game, 0, -33, "texture_atlas_1", "duck_idle_1.png");
                _this.headS.anchor.set(.6, .5);
            }
            else {
                _this.headS = new Phaser.Image(_this.game, 0, -45, "texture_atlas_1", "pigeon" + "_head_1.png");
                _this.headS.anchor.set(.5);
            }
            if (special === "normal" || special === "noHead") {
                _this.headS.animations.add("idle", Phaser.Animation.generateFrameNames("spectator_" + race + "_" + _this.headType + "_", 1, 1, ".png", 5));
                _this.headS.animations.add("win", Phaser.Animation.generateFrameNames("spectator_" + race + "_" + _this.headType + "_", 3, 3, ".png", 5));
                _this.headS.animations.add("lose", Phaser.Animation.generateFrameNames("spectator_" + race + "_" + _this.headType + "_", 2, 2, ".png", 5));
                _this.headS.animations.add("front", Phaser.Animation.generateFrameNames("spectator_" + race + "_" + _this.headType + "_", 4, 4, ".png", 5));
            }
            else {
                if (special === "pigeon") {
                    _this.headS.animations.add("idle", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("win", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("lose", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("front", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                }
                else if (special === "horse") {
                    _this.headS.animations.add("idle", Phaser.Animation.generateFrameNames("horse" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("win", Phaser.Animation.generateFrameNames("horse" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("lose", Phaser.Animation.generateFrameNames("horse" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("front", Phaser.Animation.generateFrameNames("horse" + "_head_", 1, 1, ".png", 1));
                }
                else if (special === "duck") {
                    _this.headS.animations.add("idle", Phaser.Animation.generateFrameNames("duck_idle_", 1, 1, ".png", 1));
                    _this.headS.animations.add("win", Phaser.Animation.generateFrameNames("duck_happy_", 1, 1, ".png", 1));
                    _this.headS.animations.add("lose", Phaser.Animation.generateFrameNames("duck_angry_", 1, 1, ".png", 1));
                    _this.headS.animations.add("front", Phaser.Animation.generateFrameNames("duck_front_", 1, 1, ".png", 1));
                }
                else {
                    _this.headS.animations.add("idle", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("win", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("lose", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                    _this.headS.animations.add("front", Phaser.Animation.generateFrameNames("pigeon" + "_head_", 1, 1, ".png", 1));
                }
            }
            if (special === "caca") {
                _this.headS.alpha = 0;
            }
            if (special !== "caca" && special !== "duck") {
                _this.bodyS.animations.add("win", Phaser.Animation.generateFrameNames("body_" + race + "_" + sex + "_" + colour + "_", 2, 2, "_" + shirtType + ".png", 1));
                _this.bodyS.animations.add("idle", Phaser.Animation.generateFrameNames("body_" + race + "_" + sex + "_" + colour + "_", 1, 1, "_" + shirtType + ".png", 1));
            }
            _this.addChild(_this.headS);
            return _this;
        }
        Spectator.prototype.update = function () {
            _super.prototype.update.call(this);
            if (!this.onPause && !this.onCelebration) {
                if (!this.celebration && !this.front && !this.onWave) {
                    var rotation = 0;
                    var rand = Math.floor((Math.random() * 1000));
                    if (rand === 1) {
                        this.front = true;
                        this.headS.rotation = 0;
                        rand = Math.random();
                        if (rand < .33) {
                            this.headS.scale.x = -1;
                            this.headS.play("idle");
                        }
                        else if (rand < .66) {
                            this.headS.scale.x = 1;
                            this.headS.play("idle");
                        }
                        else {
                            this.headS.play("front");
                        }
                        return;
                    }
                    if (BasketChamps.StageContainer.currentInstance.ball.x + 15 < this.x) {
                        this.headS.scale.x = 1;
                        if (this.special !== "duck") {
                            this.headS.rotation = rotation - ((BasketChamps.StageContainer.currentInstance.ball.y - this.y) * 0.0001 * this.rand);
                        }
                        this.headS.play("idle");
                    }
                    else if (BasketChamps.StageContainer.currentInstance.ball.x - 15 > this.x) {
                        this.headS.scale.x = -1;
                        if (this.special !== "duck") {
                            this.headS.rotation = -(rotation - ((BasketChamps.StageContainer.currentInstance.ball.y - this.y) * 0.0001 * this.rand));
                        }
                        this.headS.play("idle");
                    }
                    else {
                        this.headS.rotation = 0;
                        this.headS.play("front");
                    }
                }
                else if (this.celebration && !this.onWave) {
                    if (this.count === 0) {
                        this.headS.rotation = 0;
                        this.count++;
                    }
                    else if (this.count > 50) {
                        this.count = 0;
                        this.celebration = false;
                        this.headS.play("idle");
                        if (this.special !== "caca") {
                            this.bodyS.play("idle");
                        }
                    }
                    else {
                        this.count++;
                    }
                }
                else if (this.front) {
                    if (this.countFront < 600) {
                        this.countFront++;
                    }
                    else {
                        this.countFront = 0;
                        this.front = false;
                    }
                }
            }
        };
        Spectator.prototype.pause = function () {
            this.onPause = true;
        };
        Spectator.prototype.resume = function () {
            this.onPause = false;
        };
        Spectator.prototype.onBasketMissed = function () {
            if (!this.front) {
                var rand = Math.random();
                if (rand < .7) {
                    this.celebration = true;
                    var rand2 = Math.floor((Math.random() * 2));
                    if ((BasketChamps.GameVars.getInstance().isPlayerTurn && this.myTeam) || (!BasketChamps.GameVars.getInstance().isPlayerTurn && !this.myTeam)) {
                        this.headS.play("lose");
                        if (rand2 === 0) {
                            this.cryTween();
                        }
                        else {
                            this.cryTween2();
                        }
                    }
                    else {
                        if (rand2 === 0) {
                            this.celebrationTween();
                        }
                        else {
                            this.celebrationTween2();
                        }
                    }
                }
            }
        };
        Spectator.prototype.onBasketScored = function () {
            if (this.special === "caca") {
                if (!BasketChamps.GameVars.getInstance().isPlayerTurn && !this.myTeam) {
                    this.celebrationTween();
                }
            }
            else {
                if (!this.front) {
                    var rand = Math.random();
                    if (rand < .7) {
                        this.celebration = true;
                        var rand2 = Math.floor((Math.random() * 2));
                        if ((BasketChamps.GameVars.getInstance().isPlayerTurn && this.myTeam) || (!BasketChamps.GameVars.getInstance().isPlayerTurn && !this.myTeam)) {
                            if (rand2 === 0) {
                                this.celebrationTween();
                            }
                            else {
                                this.celebrationTween2();
                            }
                        }
                        else {
                            this.headS.play("lose");
                            if (rand2 === 0) {
                                this.cryTween();
                            }
                            else {
                                this.cryTween2();
                            }
                        }
                    }
                }
            }
        };
        Spectator.prototype.celebrationTween = function () {
            if (this.special !== "caca") {
                var aux_1;
                if (this.headS.scale.x === 1) {
                    aux_1 = 1;
                }
                else {
                    aux_1 = -1;
                }
                this.onCelebration = true;
                this.bodyS.play("win");
                this.game.add.tween(this.bodyS)
                    .to({ y: this.bodyS.y + 10 }, 200, Phaser.Easing.Cubic.In, true)
                    .onComplete.add(function () {
                    this.saltoTween(this.bodyS, 1);
                }, this);
                this.headS.play("win");
                if (this.special !== "noHead") {
                    this.game.add.tween(this.headS)
                        .to({ y: this.headS.y + 10 }, 200, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        this.saltoTween(this.headS, aux_1);
                    }, this);
                }
                else {
                    this.game.time.events.add(1300, function () {
                        this.headS.play("idle");
                    }, this);
                }
            }
            else {
                this.cacaTween();
            }
        };
        Spectator.prototype.celebrationTween2 = function () {
            this.celebrationTween();
        };
        Spectator.prototype.saltoTween = function (value, aux) {
            this.game.add.tween(value.scale)
                .to({ x: 1.1 * aux, y: .9 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.game.add.tween(value.scale)
                    .to({ x: .8 * aux, y: 1 }, 200, Phaser.Easing.Bounce.Out, true);
                this.game.add.tween(value)
                    .to({ y: value.y - 30 }, 30 * 8, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(value)
                        .to({ y: value.y + 20 }, 20 * 8, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        value.play("idle");
                        this.game.add.tween(value.scale)
                            .to({ x: 1.1 * aux, y: .9 }, 150, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.game.add.tween(value.scale)
                                .to({ x: 1 * aux, y: 1 }, 150, Phaser.Easing.Bounce.Out, true)
                                .onComplete.add(function () {
                                this.onCelebration = false;
                            }, this);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        Spectator.prototype.cacaTween = function () {
            this.game.add.tween(this.bodyS.scale)
                .to({ x: 1.2, y: .7 }, 200, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.game.add.tween(this.bodyS.scale)
                    .to({ x: .8, y: 1 }, 200, Phaser.Easing.Bounce.Out, true);
                this.game.add.tween(this.bodyS)
                    .to({ y: this.bodyS.y - 50 }, 400, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.bodyS)
                        .to({ y: this.bodyS.y + 50 }, 400, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        this.game.add.tween(this.bodyS.scale)
                            .to({ x: 1.2, y: .7 }, 150, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.game.add.tween(this.bodyS.scale)
                                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Bounce.Out, true);
                        }, this);
                    }, this);
                }, this);
            }, this);
        };
        Spectator.prototype.cryTween = function () {
            var rand = Math.floor((Math.random() * 240) + 40);
            var cryTween = this.game.add.tween(this.headS);
            for (var i = 0; i < 3; i++) {
                cryTween.to({ y: this.headS.y + 2 }, rand, Phaser.Easing.Quadratic.Out, false);
                cryTween.delay(rand / 4);
                cryTween.to({ y: this.headS.y }, rand, Phaser.Easing.Quadratic.Out, false);
            }
            cryTween.start();
        };
        Spectator.prototype.cryTween2 = function () {
            var rand = Math.floor((Math.random() * 400) + 200);
            var cryTween = this.game.add.tween(this.headS);
            cryTween.to({ y: this.headS.y + 2 }, rand, Phaser.Easing.Quadratic.Out, false);
            cryTween.delay(rand / 4);
            cryTween.to({ y: this.headS.y }, rand, Phaser.Easing.Quadratic.Out, false);
            cryTween.start();
        };
        Spectator.prototype.wave = function (value) {
            this.onWave = true;
            var waveTween = this.game.add.tween(this.headS.scale);
            var waveTween2 = this.game.add.tween(this.bodyS.scale);
            if (this.headS.scale.x === 1) {
                waveTween.to({ x: .9, y: 1.1 }, 200, Phaser.Easing.Cubic.In, false);
                waveTween.to({ x: 1, y: 1 }, 200, Phaser.Easing.Cubic.Out, false, 300);
            }
            else {
                waveTween.to({ x: -.9, y: 1.1 }, 200, Phaser.Easing.Cubic.In, false);
                waveTween.to({ x: -1, y: 1 }, 200, Phaser.Easing.Cubic.Out, false, 300);
            }
            waveTween2.to({ x: .9, y: 1.1 }, 200, Phaser.Easing.Cubic.In, false);
            waveTween2.to({ x: 1, y: 1 }, 200, Phaser.Easing.Cubic.Out, false, 300);
            waveTween2.onComplete.add(function () {
                this.headS.play("idle");
                this.bodyS.play("idle");
                this.onWave = false;
            }, this);
            this.game.time.events.add(value * 250, function () {
                this.headS.play("win");
                this.bodyS.play("win");
                waveTween.start();
                waveTween2.start();
            }, this);
        };
        Spectator.prototype.matchWon = function () {
            if (this.myTeam) {
                this.headS.play("win");
                this.bodyS.play("win");
                this.celebrationMatch();
            }
            else {
                this.headS.play("lose");
                this.cryMatch();
            }
        };
        Spectator.prototype.matchLosed = function () {
            if (!this.myTeam) {
                this.headS.play("win");
                this.bodyS.play("win");
                this.celebrationMatch();
            }
            else {
                this.headS.play("lose");
                this.cryMatch();
            }
        };
        Spectator.prototype.celebrationMatch = function () {
            this.onCelebration = true;
        };
        Spectator.prototype.cryMatch = function () {
            this.onCelebration = true;
        };
        return Spectator;
    }(Phaser.Group));
    BasketChamps.Spectator = Spectator;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SpectatorsManager = (function (_super) {
        __extends(SpectatorsManager, _super);
        function SpectatorsManager(game, x, y) {
            var _this = _super.call(this, game, null, "spectators-manager", false) || this;
            _this.x = x;
            _this.y = y;
            _this.seats = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats.png");
            _this.seats.anchor.set(.5);
            _this.addChild(_this.seats);
            _this.seats2 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats_2.png");
            _this.seats2.anchor.set(.5);
            _this.addChild(_this.seats2);
            _this.seats1 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats_1.png");
            _this.seats1.anchor.set(.5);
            _this.addChild(_this.seats1);
            _this.spectators1 = new Array();
            _this.spectators2 = new Array();
            _this.spectators3 = new Array();
            return _this;
        }
        SpectatorsManager.prototype.destroy = function (destroyChildren, soft) {
            BasketChamps.BackgroundManager.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        SpectatorsManager.prototype.pause = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].pause();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].pause();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].pause();
                }
            }
        };
        SpectatorsManager.prototype.resume = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].resume();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].resume();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].resume();
                }
            }
        };
        SpectatorsManager.prototype.onBasketMissed = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].onBasketMissed();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].onBasketMissed();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].onBasketMissed();
                }
            }
            BasketChamps.AudioManager.getInstance().playSound("celebration_3");
        };
        SpectatorsManager.prototype.onBasketScored = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].onBasketScored();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].onBasketScored();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].onBasketScored();
                }
            }
            BasketChamps.AudioManager.getInstance().playSound("celebration_3");
        };
        SpectatorsManager.prototype.onMatchWon = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].matchWon();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].matchWon();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].matchWon();
                }
            }
        };
        SpectatorsManager.prototype.onMatchLosed = function () {
            for (var i = 0; i < this.spectators1.length; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].matchLosed();
                }
            }
            for (var i = 0; i < this.spectators2.length; i++) {
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].matchLosed();
                }
            }
            for (var i = 0; i < this.spectators3.length; i++) {
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].matchWon();
                }
            }
        };
        SpectatorsManager.prototype.matchReady = function () {
            this.specialTypes = ["noHead", "duck", "horse", "pigeon", "caca"];
            this.specialTypes = Phaser.ArrayUtils.shuffle(this.specialTypes);
            for (var i = 0; i < 10; i++) {
                this.remove(this.spectators1[i]);
                this.remove(this.spectators2[i]);
                this.remove(this.spectators3[i]);
            }
            this.remove(this.seats);
            this.remove(this.seats1);
            this.remove(this.seats2);
            this.seats = new Phaser.Image(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats.png");
            this.seats.anchor.set(.5);
            this.addChild(this.seats);
            var num_spec = 0;
            var specials = 0;
            if (BasketChamps.GameVars.getInstance().numMatch < 2) {
                num_spec = 20;
                specials = 5;
            }
            else if (BasketChamps.GameVars.getInstance().numMatch < 5) {
                num_spec = 30;
                specials = 5;
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                num_spec = 40;
                specials = 10;
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                num_spec = 50;
                specials = 15;
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                num_spec = 60;
                specials = 20;
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                num_spec = 80;
                specials = 25;
            }
            this.spectators1 = new Array();
            var count = 0;
            for (var i = 0; i < 10; i++) {
                var rand = Math.floor((Math.random() * 100));
                if (rand < num_spec) {
                    rand = Math.floor((Math.random() * 100));
                    var spectator = void 0;
                    if (rand < 40) {
                        spectator = new BasketChamps.Spectator(this.game, 165 + i * 38, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 30 + 40, false, "normal");
                    }
                    else {
                        spectator = new BasketChamps.Spectator(this.game, 165 + i * 38, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 30 + 40, true, "normal");
                    }
                    this.spectators1.push(spectator);
                    count++;
                }
                else {
                    this.spectators1.push(null);
                    count++;
                }
            }
            for (var i = 0; i < count; i++) {
                if (this.spectators1[i] !== null) {
                    this.add(this.spectators1[i]);
                }
            }
            this.seats2 = new Phaser.Image(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats_2.png");
            this.seats2.anchor.set(.5);
            this.addChild(this.seats2);
            this.spectators2 = new Array();
            count = 0;
            for (var i = 0; i < 10; i++) {
                var rand = Math.floor((Math.random() * 100));
                if (rand < num_spec) {
                    rand = Math.floor((Math.random() * 100));
                    var spectator = void 0;
                    var randSpec = Math.floor((Math.random() * 100));
                    var typeSpec = "normal";
                    if (randSpec < specials) {
                        if (this.specialTypes.length !== 0) {
                            typeSpec = this.specialTypes.pop();
                        }
                    }
                    if (typeSpec === "caca") {
                        typeSpec = "normal";
                        this.specialTypes.push("caca");
                    }
                    if (typeSpec === "duck") {
                        typeSpec = "normal";
                        this.specialTypes.push("duck");
                    }
                    if (rand < 40) {
                        spectator = new BasketChamps.Spectator(this.game, 157 + i * 40, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 55 + 40, false, typeSpec);
                    }
                    else {
                        spectator = new BasketChamps.Spectator(this.game, 157 + i * 40, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 55 + 40, true, typeSpec);
                    }
                    if (typeSpec === "noHead") {
                        i++;
                        this.spectators2.push(null);
                    }
                    this.spectators2.push(spectator);
                    count++;
                }
                else {
                    this.spectators2.push(null);
                    count++;
                }
            }
            for (var i = 0; i < count; i++) {
                if (this.spectators2[i] !== null) {
                    this.add(this.spectators2[i]);
                }
            }
            for (var i = 0; i < count; i++) {
                if (this.spectators2[i] !== null) {
                    if (this.spectators2[i].special !== "normal") {
                        this.bringToTop(this.spectators2[i]);
                    }
                }
            }
            this.seats1 = new Phaser.Image(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_2", "seats_1.png");
            this.seats1.anchor.set(.5);
            this.addChild(this.seats1);
            this.spectators3 = new Array();
            count = 0;
            for (var i = 0; i < 10; i++) {
                var rand = Math.floor((Math.random() * 100));
                if (rand < num_spec) {
                    rand = Math.floor((Math.random() * 100));
                    var spectator = void 0;
                    var randSpec = Math.floor((Math.random() * 100));
                    var typeSpec = "normal";
                    if (randSpec < specials) {
                        if (this.specialTypes.length !== 0) {
                            typeSpec = this.specialTypes.pop();
                        }
                    }
                    if (rand < 40) {
                        spectator = new BasketChamps.Spectator(this.game, 147 + i * 42, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 95 + 40, false, typeSpec);
                    }
                    else {
                        if (typeSpec === "caca") {
                            typeSpec = "normal";
                            this.specialTypes.push("caca");
                        }
                        spectator = new BasketChamps.Spectator(this.game, 147 + i * 42, BasketChamps.GameConstants.GAME_HEIGHT / 2 + 95 + 40, true, typeSpec);
                    }
                    if (typeSpec === "noHead") {
                        i++;
                        this.spectators3.push(null);
                    }
                    this.spectators3.push(spectator);
                    count++;
                }
                else {
                    this.spectators3.push(null);
                    count++;
                }
            }
            for (var i = 0; i < count; i++) {
                if (this.spectators3[i] !== null) {
                    this.add(this.spectators3[i]);
                }
            }
            for (var i = 0; i < count; i++) {
                if (this.spectators3[i] !== null) {
                    if (this.spectators3[i].special !== "normal") {
                        this.bringToTop(this.spectators3[i]);
                    }
                }
            }
        };
        SpectatorsManager.prototype.wave = function () {
            for (var i = 0; i < 10; i++) {
                if (this.spectators1[i] !== null) {
                    this.spectators1[i].wave(i);
                }
                if (this.spectators2[i] !== null) {
                    this.spectators2[i].wave(i);
                }
                if (this.spectators3[i] !== null) {
                    this.spectators3[i].wave(i);
                }
            }
        };
        return SpectatorsManager;
    }(Phaser.Group));
    BasketChamps.SpectatorsManager = SpectatorsManager;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var BasketballCourtState = (function (_super) {
        __extends(BasketballCourtState, _super);
        function BasketballCourtState() {
            return _super.apply(this, arguments) || this;
        }
        BasketballCourtState.prototype.init = function () {
            BasketballCourtState.currentInstance = this;
            _super.prototype.init.call(this);
        };
        BasketballCourtState.prototype.shutdown = function () {
            BasketballCourtState.currentInstance = null;
            this.matchManager.destroy();
            this.stageContainer.destroy();
            _super.prototype.shutdown.call(this);
        };
        BasketballCourtState.prototype.create = function () {
            this.onPause = false;
            this.matchManager = new BasketChamps.MatchManager();
            this.ia = new BasketChamps.IA(this.game);
            this.matchController = new BasketChamps.MatchController(this.game);
            this.backgroundManager = new BasketChamps.BackgroundManager(this.game);
            this.hud = new BasketChamps.HUD(this.game);
            this.stageContainer = new BasketChamps.StageContainer(this.game);
            this.gui = new BasketChamps.GUI(this.game);
            this.tournamentLayer = new BasketChamps.TournamentLayer(this.game);
            this.classificationLayer = new BasketChamps.ClassificationLayer(this.game);
            this.selectTeamLayer = new BasketChamps.SelectTeamLayer(this.game);
            this.gameOverLayer = new BasketChamps.GameOverLayer(this.game);
            this.tournamentWonLayer = new BasketChamps.TournamentWonLayer(this.game);
            this.eventsLayer = new BasketChamps.EventsLayer(this.game);
            this.add.existing(this.backgroundManager);
            this.add.existing(this.stageContainer);
            var walkthroughButton = this.add.button(532, 358, "texture_atlas_1", this.onClickWalthrough, this);
            walkthroughButton.setFrames("button-walkthrough-on.png", "button-walkthrough-off.png", "button-walkthrough-on.png");
            walkthroughButton.anchor.set(.5);
            this.add.existing(this.hud);
            this.add.existing(this.selectTeamLayer);
            this.add.existing(this.classificationLayer);
            this.add.existing(this.tournamentLayer);
            this.add.existing(this.gui);
            this.add.existing(this.eventsLayer);
            this.add.existing(this.gameOverLayer);
            this.add.existing(this.tournamentWonLayer);
            this.game.camera.flash(0x000000, BasketChamps.GameConstants.TIME_FADE, false);
        };
        BasketballCourtState.prototype.update = function () {
            _super.prototype.update.call(this);
            this.matchManager.update();
            BasketChamps.StageContainer.currentInstance.trajectory.drawLine();
        };
        BasketballCourtState.prototype.render = function () {
            _super.prototype.render.call(this);
            if (BasketChamps.GameConstants.SHOW_PHYSICS_BODIES) {
                this.game.debug.box2dWorld();
            }
        };
        BasketballCourtState.prototype.pause = function () {
            this.onPause = true;
        };
        BasketballCourtState.prototype.resume = function () {
            this.onPause = false;
        };
        BasketballCourtState.prototype.onBasketScored = function () {
            this.backgroundManager.updateScore();
        };
        BasketballCourtState.prototype.onBasketMissed = function () {
        };
        BasketballCourtState.prototype.goBack = function () {
            this.game.state.start("SplashState", true, false);
            this.game.camera.fade(0x000000, BasketChamps.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("SplashState", true, false);
            }, this);
        };
        BasketballCourtState.prototype.nextGame = function () {
            this.game.camera.fade(0x000000, BasketChamps.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BasketballCourtState", true, false);
            }, this);
            BasketChamps.StageContainer.currentInstance.resume();
        };
        
        return BasketballCourtState;
    }(Phaser.State));
    BasketChamps.BasketballCourtState = BasketballCourtState;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ClassificationBackground = (function (_super) {
        __extends(ClassificationBackground, _super);
        function ClassificationBackground(game, x, y) {
            var _this = _super.call(this, game, null, "classification-background", false) || this;
            _this.x = x;
            _this.y = y;
            var cornerBmd = game.add.bitmapData(10, 10);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, 10, 0, Math.PI);
            cornerBmd.ctx.fillStyle = "#ffffff";
            cornerBmd.ctx.fill();
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = "#ffffff";
            reusableBmd.ctx.fill();
            var corner;
            var rectangle;
            _this.sprites = new Array();
            corner = new Phaser.Sprite(game, 35, 30, cornerBmd);
            corner.tint = 0x54778c;
            corner.alpha = 1;
            corner.angle = 180;
            _this.sprites.push(corner);
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 520, 30, cornerBmd);
            corner.tint = 0x54778c;
            corner.alpha = 1;
            corner.angle = 270;
            _this.sprites.push(corner);
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 35, 20, reusableBmd);
            rectangle.scale.setTo(485 / 100, 10 / 100);
            rectangle.tint = 0x54778c;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 30, reusableBmd);
            rectangle.scale.setTo(505 / 100, 20 / 100);
            rectangle.tint = 0x54778c;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 50, reusableBmd);
            rectangle.scale.setTo(505 / 100, 35 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 85, reusableBmd);
            rectangle.scale.setTo(505 / 100, 44 / 100);
            rectangle.tint = 0xa1dbdb;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 129, reusableBmd);
            rectangle.scale.setTo(505 / 100, 44 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 173, reusableBmd);
            rectangle.scale.setTo(505 / 100, 44 / 100);
            rectangle.tint = 0xa1dbdb;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 217, reusableBmd);
            rectangle.scale.setTo(505 / 100, 44 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 35, 266, reusableBmd);
            rectangle.scale.setTo(495 / 100, 44 / 100);
            rectangle.tint = 0xa1dbdb;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 35, 310, reusableBmd);
            rectangle.scale.setTo(495 / 100, 44 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            corner = new Phaser.Sprite(game, 45, 354, cornerBmd);
            corner.tint = 0xddf1f1;
            corner.alpha = 1;
            corner.angle = 90;
            _this.sprites.push(corner);
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 520, 354, cornerBmd);
            corner.tint = 0xddf1f1;
            corner.alpha = 1;
            corner.angle = 0;
            _this.sprites.push(corner);
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 45, 354, reusableBmd);
            rectangle.scale.setTo(475 / 100, 10 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.sprites.push(rectangle);
            _this.add(rectangle);
            return _this;
        }
        return ClassificationBackground;
    }(Phaser.Group));
    BasketChamps.ClassificationBackground = ClassificationBackground;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ClassificationLayer = (function (_super) {
        __extends(ClassificationLayer, _super);
        function ClassificationLayer(game) {
            var _this = _super.call(this, game, null, "classification-layer", false) || this;
            _this.playOut = false;
            _this.teamPos = 0;
            _this.x = BasketChamps.GameConstants.GAME_WIDTH / 2;
            _this.y = BasketChamps.GameConstants.GAME_HEIGHT / 2;
            _this.background = new Phaser.Sprite(_this.game, -_this.x, -_this.y, _this.game.cache.getBitmapData("black_square"));
            _this.background.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            _this.background.alpha = 0.7;
            _this.background.inputEnabled = true;
            _this.background.events.onInputDown.add(_this.onClickBackground, _this);
            _this.add(_this.background);
            _this.classificationBackground = new BasketChamps.ClassificationBackground(_this.game, -_this.x, -_this.y);
            _this.addChild(_this.classificationBackground);
            _this.teamLabel = new Phaser.Text(_this.game, 80 - _this.x, 75 - _this.y, "TEAM", { font: "25px Jomhuria", fontWeight: "400" });
            _this.teamLabel.anchor.set(.5);
            _this.teamLabel.addColor("#6f9da8", 0);
            _this.add(_this.teamLabel);
            _this.wonLabel = new Phaser.Text(_this.game, 197 - _this.x, 75 - _this.y, "WON", { font: "25px Jomhuria", fontWeight: "400" });
            _this.wonLabel.anchor.set(.5);
            _this.wonLabel.addColor("#6f9da8", 0);
            _this.add(_this.wonLabel);
            _this.lostLabel = new Phaser.Text(_this.game, 322 - _this.x, 75 - _this.y, "LOST", { font: "25px Jomhuria", fontWeight: "400" });
            _this.lostLabel.anchor.set(.5);
            _this.lostLabel.addColor("#6f9da8", 0);
            _this.add(_this.lostLabel);
            _this.pointsLabel = new Phaser.Text(_this.game, 444 - _this.x, 75 - _this.y, "POINTS", { font: "25px Jomhuria", fontWeight: "400" });
            _this.pointsLabel.anchor.set(.5);
            _this.pointsLabel.addColor("#6f9da8", 0);
            _this.add(_this.pointsLabel);
            _this.matchs_results = new Array();
            var match_result;
            for (var i = 0; i < 5; i++) {
                match_result = new Phaser.Sprite(_this.game, 425 + i * 22 - _this.x, 35 - _this.y, "texture_atlas_1", "match_pending.png");
                match_result.anchor.set(.5);
                _this.addChild(match_result);
                _this.matchs_results.push(match_result);
            }
            _this.classificationTeams = new Array();
            _this.booleanGroup = false;
            if (BasketChamps.GameVars.getInstance().myGroupID !== "X") {
                _this.setGroup();
                _this.booleanGroup = true;
            }
            _this.classificactionBadge = new Phaser.Image(_this.game, 90 - _this.x, 35 - _this.y, "texture_atlas_1", "badge_classification.png");
            _this.classificactionBadge.anchor.set(.5);
            _this.addChild(_this.classificactionBadge);
            _this.playButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 55 - _this.x, 345 - _this.y, "texture_atlas_1", _this.onPlayClicked, _this);
            _this.playButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.playButton.anchor.set(.5);
            _this.playButton.visible = true;
            _this.add(_this.playButton);
            _this.lastPos = new Phaser.Image(_this.game, 18 - _this.x, 310 - _this.y, "texture_atlas_1", "skull_icon.png");
            _this.lastPos.anchor.set(.5);
            _this.addChild(_this.lastPos);
            _this.visible = false;
            return _this;
        }
        ClassificationLayer.prototype.playVisible = function () {
            this.playButton.visible = true;
            this.game.add.tween(this.playButton.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true)
                .onComplete.add(function () {
                if (this.pulseTween !== undefined) {
                    this.pulseTween.stop();
                }
                this.pulseTween = this.game.add.tween(this.playButton.scale);
                this.pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                this.pulseTween.delay(50);
                this.pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                this.pulseTween.loop();
                this.pulseTween.start();
            }, this);
        };
        ClassificationLayer.prototype.onPlayClicked = function () {
            if (!this.playOut) {
                this.playOut = true;
                if (BasketChamps.GameVars.getInstance().numMatch < 5) {
                    if (this.pulseTween !== undefined) {
                        this.pulseTween.stop();
                    }
                    this.game.add.tween(this.playButton.scale)
                        .to({ x: 0, y: 0 }, 650, Phaser.Easing.Elastic.In, true)
                        .onComplete.add(function () {
                        this.game.add.tween(this.background)
                            .to({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true, 300)
                            .onComplete.add(function () {
                            BasketChamps.MatchManager.currentInstance.matchReady();
                            this.game.add.tween(this)
                                .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true);
                            this.game.add.tween(this.scale)
                                .to({ x: 0, y: 0 }, 500, Phaser.Easing.Cubic.Out, true)
                                .onComplete.add(function () {
                                this.visible = false;
                                this.scale.set(1);
                                this.alpha = 1;
                                this.background.alpha = .7;
                                this.playButton.scale.set(1);
                            }, this);
                        }, this);
                    }, this);
                    BasketChamps.AudioManager.getInstance().playSound("loop_fase_grupos", true);
                }
                else if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                    this.changeVisible();
                }
            }
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        ClassificationLayer.prototype.changeVisible = function () {
            if (this.pulseTween !== undefined) {
                this.pulseTween.stop();
            }
            this.game.add.tween(this.playButton.scale)
                .to({ x: 0, y: 0 }, 500, Phaser.Easing.Elastic.In, true);
            BasketChamps.GameVars.getInstance().octFinal = BasketChamps.TournamentManager.getInstance().octFinal();
            var teamsSort = [];
            for (var i = 0; i < 6; i++) {
                teamsSort.push({ wins: BasketChamps.GameVars.getInstance().groupWins[i], id: i });
            }
            teamsSort.sort(function (n1, n2) {
                if (n1.wins < n2.wins) {
                    return 1;
                }
                if (n1.wins > n1.wins) {
                    return -1;
                }
                return 0;
            });
            var pass = false;
            for (var i = 0; i < 4 && !pass; i++) {
                if (BasketChamps.GameVars.getInstance().IDtoGroupID(teamsSort[i].id + 1) + 1 === BasketChamps.GameVars.getInstance().myTeamID) {
                    pass = true;
                }
            }
            if (pass) {
                BasketChamps.AchievementsManager.getInstance().classificationPassed();
                var delay = 500;
                for (var i = 0; i < 6; i++) {
                    if (this.teamPos === i) {
                        this.classificationTeams[i].moveFlag(delay);
                    }
                    else {
                        this.game.add.tween(this.classificationTeams[i])
                            .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
                    }
                }
                for (var i = 0; i < 3; i++) {
                    this.game.add.tween(this.classificationBackground.sprites[i])
                        .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
                }
                for (var i = 0; i < 5; i++) {
                    this.game.add.tween(this.matchs_results[i])
                        .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true);
                }
                this.game.add.tween(this.group)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true);
                this.game.add.tween(this.wonLabel)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                this.game.add.tween(this.teamLabel)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                this.game.add.tween(this.lostLabel)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                this.game.add.tween(this.pointsLabel)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                this.game.add.tween(this.lastPos)
                    .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                this.game.time.events.add(delay * 3, function () {
                    BasketChamps.TournamentManager.getInstance().showRound2(teamsSort);
                    this.visible = false;
                }, this);
            }
            else {
                this.game.add.tween(this.scale)
                    .to({ x: 0, y: 0 }, 1000, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function () {
                    this.visible = false;
                    this.scale.set(1);
                    BasketChamps.AudioManager.getInstance().playSound("end_match", true);
                    BasketChamps.BasketballCourtState.currentInstance.gameOverLayer.showGameOver();
                    BasketChamps.BackgroundManager.currentInstance.spectatorsManager.pause();
                }, this);
            }
        };
        ClassificationLayer.prototype.onClickBackground = function () {
        };
        ClassificationLayer.prototype.showClassification = function (win) {
            if (win !== 3) {
                BasketChamps.AudioManager.getInstance().playSound("loop_menus", true);
            }
            for (var i = 0; i < 6; i++) {
                this.remove(this.classificationTeams[i]);
            }
            this.classificationTeams = new Array();
            if (BasketChamps.GameVars.getInstance().numMatch > 5) {
                BasketChamps.BasketballCourtState.currentInstance.tournamentLayer.showTournament();
                return;
            }
            if (win !== 3) {
                this.alpha = 0;
                this.visible = true;
                this.game.add.tween(this)
                    .to({ alpha: 1 }, 800, Phaser.Easing.Cubic.Out, true);
            }
            else {
                this.visible = true;
            }
            this.playOut = false;
            if (BasketChamps.GameVars.getInstance().numMatch > 0) {
                if (win === 1) {
                    BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().playerIDtoGroupID()]--;
                }
                else if (win === 2) {
                    BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().playerIDtoGroupID()]--;
                }
            }
            var teamsSort = [];
            for (var i = 0; i < 6; i++) {
                teamsSort.push({ points: BasketChamps.GameVars.getInstance().groupWins[i] * 2 + BasketChamps.GameVars.getInstance().groupLoses[i], id: i });
            }
            teamsSort.sort(function (n1, n2) {
                if (n1.points < n2.points) {
                    return 1;
                }
                if (n1.points > n1.points) {
                    return -1;
                }
                return 0;
            });
            for (var i = 0; i < 6; i++) {
                var team = new BasketChamps.ClassificationTeam(this.game, teamsSort[i].id, i % 2 === 0, -this.x, 107 + 44 * i - this.y, i);
                if (this.isMyTeam(teamsSort[i].id)) {
                    this.teamPos = i;
                }
                this.classificationTeams.push(team);
            }
            for (var i = 0; i < 6; i++) {
                this.add(this.classificationTeams[i]);
            }
            if (BasketChamps.GameVars.getInstance().numMatch > 0 && win !== 3) {
                this.playButton.visible = false;
                this.playButton.scale.set(0);
                if (win === 1) {
                    this.classificationTeams[this.teamPos].sumPoints(true, this.teamPos);
                }
                else {
                    this.classificationTeams[this.teamPos].sumPoints(false, this.teamPos);
                }
            }
            if (win === 3) {
                for (var i = 0; i < 5; i++) {
                    if (BasketChamps.GameVars.getInstance().matchResults[i] === 1) {
                        this.matchs_results[i].loadTexture("texture_atlas_1", "match_won.png");
                    }
                    else if (BasketChamps.GameVars.getInstance().matchResults[i] === -1) {
                        this.matchs_results[i].loadTexture("texture_atlas_1", "match_lost.png");
                    }
                }
            }
            if (this.pulseTween !== undefined) {
                this.pulseTween.stop();
            }
            this.pulseTween = this.game.add.tween(this.playButton.scale);
            this.pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
            this.pulseTween.delay(50);
            this.pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
            this.pulseTween.loop();
            this.pulseTween.start();
            this.bringToTop(this.playButton);
            this.bringToTop(this.lastPos);
        };
        ClassificationLayer.prototype.isMyTeam = function (value) {
            if (BasketChamps.GameVars.getInstance().myGroupID === "A" && BasketChamps.GameVars.getInstance().myTeamID === BasketChamps.GameVars.getInstance().groupsData[0].teams[value]) {
                return true;
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "B" && BasketChamps.GameVars.getInstance().myTeamID === BasketChamps.GameVars.getInstance().groupsData[1].teams[value]) {
                return true;
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "C" && BasketChamps.GameVars.getInstance().myTeamID === BasketChamps.GameVars.getInstance().groupsData[2].teams[value]) {
                return true;
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "D" && BasketChamps.GameVars.getInstance().myTeamID === BasketChamps.GameVars.getInstance().groupsData[3].teams[value]) {
                return true;
            }
            return false;
        };
        ClassificationLayer.prototype.setGroup = function () {
            var nameGroup = "GROUP PHASE - GROUP " + BasketChamps.GameVars.getInstance().myGroupID;
            this.group = new Phaser.Text(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10 - this.x, 38 - this.y, nameGroup, { font: "35px Jomhuria", fontWeight: "400" });
            this.group.addColor("#ffffff", 0);
            this.group.anchor.set(.5);
            this.add(this.group);
        };
        ClassificationLayer.prototype.changeMatchResults = function (win) {
            var num = BasketChamps.GameVars.getInstance().numMatch - 1;
            if (win) {
                this.matchs_results[num].loadTexture("texture_atlas_1", "match_won.png");
            }
            else {
                this.matchs_results[num].loadTexture("texture_atlas_1", "match_lost.png");
            }
            this.matchs_results[num].scale.set(1.2);
            this.game.add.tween(this.matchs_results[num].scale)
                .to({ x: 1, y: 1 }, 200, Phaser.Easing.Elastic.Out, true);
        };
        return ClassificationLayer;
    }(Phaser.Group));
    BasketChamps.ClassificationLayer = ClassificationLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var ClassificationTeam = (function (_super) {
        __extends(ClassificationTeam, _super);
        function ClassificationTeam(game, teamId, b, x, y, pos) {
            var _this = _super.call(this, game, null, "classification-team", false) || this;
            _this.x = x;
            _this.y = y;
            _this.pos = pos;
            if (pos > 3) {
                _this.y += 5;
            }
            _this.teamId = teamId;
            if (BasketChamps.GameVars.getInstance().myGroupID === "A") {
                _this.id = BasketChamps.GameVars.getInstance().groupsData[0].teams[teamId];
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "B") {
                _this.id = BasketChamps.GameVars.getInstance().groupsData[1].teams[teamId];
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "C") {
                _this.id = BasketChamps.GameVars.getInstance().groupsData[2].teams[teamId];
            }
            else if (BasketChamps.GameVars.getInstance().myGroupID === "D") {
                _this.id = BasketChamps.GameVars.getInstance().groupsData[3].teams[teamId];
            }
            if (_this.id === BasketChamps.GameVars.getInstance().myTeamID) {
                if (pos > 3) {
                    _this.bck = new Phaser.Sprite(_this.game, 25 + 252.5 + 5, 0, _this.game.cache.getBitmapData("green2_square"));
                    _this.bck.scale.set(495 / 16, 44 / 16);
                }
                else {
                    _this.bck = new Phaser.Sprite(_this.game, 25 + 252.5, 0, _this.game.cache.getBitmapData("green2_square"));
                    _this.bck.scale.set(505 / 16, 44 / 16);
                }
                _this.bck.anchor.set(.5);
                _this.add(_this.bck);
                _this.raysPoints = new Phaser.Image(_this.game, 444, 0, "texture_atlas_1", "rays_final_match.png");
                _this.raysPoints.anchor.set(.5);
                _this.raysPoints.scale.set(.35);
                _this.raysPoints.visible = false;
                _this.add(_this.raysPoints);
            }
            var name = "flag_" + _this.id + ".png";
            _this.flag = new Phaser.Sprite(_this.game, 80, 0, "texture_atlas_1", name);
            if (_this.id === BasketChamps.GameVars.getInstance().myTeamID) {
                _this.flag.scale.set(.65);
                _this.wonLabel = new Phaser.Text(_this.game, 197, 3, BasketChamps.GameVars.getInstance().groupWins[teamId].toString(), { font: "50px Jomhuria", fontWeight: "400" });
                _this.wonLabel.addColor("#15212a", 0);
                _this.lostLabel = new Phaser.Text(_this.game, 322, 3, BasketChamps.GameVars.getInstance().groupLoses[teamId].toString(), { font: "50px Jomhuria", fontWeight: "400" });
                _this.lostLabel.addColor("#15212a", 0);
                _this.pointsLabel = new Phaser.Text(_this.game, 444, 3, (BasketChamps.GameVars.getInstance().groupWins[teamId] * 2 + BasketChamps.GameVars.getInstance().groupLoses[teamId]).toString(), { font: "50px Jomhuria", fontWeight: "400" });
                _this.pointsLabel.addColor("#15212a", 0);
            }
            else {
                _this.flag.scale.set(.5);
                _this.flag.alpha = .7;
                _this.wonLabel = new Phaser.Text(_this.game, 197, 3, BasketChamps.GameVars.getInstance().groupWins[teamId].toString(), { font: "40px Jomhuria", fontWeight: "400" });
                _this.wonLabel.addColor("#557a8b", 0);
                _this.lostLabel = new Phaser.Text(_this.game, 322, 3, BasketChamps.GameVars.getInstance().groupLoses[teamId].toString(), { font: "40px Jomhuria", fontWeight: "400" });
                _this.lostLabel.addColor("#557a8b", 0);
                _this.pointsLabel = new Phaser.Text(_this.game, 444, 3, (BasketChamps.GameVars.getInstance().groupWins[teamId] * 2 + BasketChamps.GameVars.getInstance().groupLoses[teamId]).toString(), { font: "40px Jomhuria", fontWeight: "400" });
                _this.pointsLabel.addColor("#557a8b", 0);
            }
            _this.flag.anchor.set(.5);
            _this.add(_this.flag);
            _this.wonLabel.anchor.set(.5);
            _this.add(_this.wonLabel);
            _this.lostLabel.anchor.set(.5);
            _this.add(_this.lostLabel);
            _this.pointsLabel.anchor.set(.5);
            _this.add(_this.pointsLabel);
            return _this;
        }
        ClassificationTeam.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.raysPoints !== undefined && this.raysPoints.visible) {
                this.raysPoints.angle += 1;
            }
        };
        ClassificationTeam.prototype.moveFlag = function (delay) {
            this.game.add.tween(this.bck)
                .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
            this.game.add.tween(this.wonLabel)
                .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
            this.game.add.tween(this.lostLabel)
                .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
            this.game.add.tween(this.pointsLabel)
                .to({ alpha: 0 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
            this.game.add.tween(this.flag)
                .to({ x: 75 - this.x - BasketChamps.GameConstants.GAME_WIDTH / 2, y: 81 - this.y - BasketChamps.GameConstants.GAME_HEIGHT / 2 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
        };
        ClassificationTeam.prototype.sumPoints = function (win, teamPos) {
            this.raysPoints.visible = true;
            if (win) {
                this.wonLabel.setText((BasketChamps.GameVars.getInstance().groupWins[this.teamId] + 1).toString());
            }
            else {
                this.lostLabel.setText((BasketChamps.GameVars.getInstance().groupLoses[this.teamId] + 1).toString());
            }
            this.game.time.events.add(1000, function () {
                if (win) {
                    this.game.add.tween(this.pointsLabel.scale)
                        .to({ y: 0 }, 300, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        BasketChamps.AudioManager.getInstance().playSound("point_1");
                        this.pointsLabel.setText((BasketChamps.GameVars.getInstance().groupWins[this.teamId] * 2 + BasketChamps.GameVars.getInstance().groupLoses[this.teamId] + 1).toString());
                        this.game.add.tween(this.pointsLabel.scale)
                            .to({ y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                    }, this);
                    this.game.time.events.add(1000, function () {
                        this.game.add.tween(this.pointsLabel.scale)
                            .to({ y: 0 }, 300, Phaser.Easing.Cubic.In, true)
                            .onComplete.add(function () {
                            BasketChamps.AudioManager.getInstance().playSound("point_2");
                            this.pointsLabel.setText((BasketChamps.GameVars.getInstance().groupWins[this.teamId] * 2 + BasketChamps.GameVars.getInstance().groupLoses[this.teamId] + 2).toString());
                            this.game.add.tween(this.pointsLabel.scale)
                                .to({ y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                        }, this);
                        this.game.time.events.add(1200, function () {
                            BasketChamps.GameVars.getInstance().groupWins[this.teamId]++;
                            this.moveClassification(win, teamPos);
                            this.raysPoints.visible = false;
                        }, this);
                    }, this);
                }
                else {
                    BasketChamps.GameVars.getInstance().groupLoses[this.teamId]++;
                    this.game.add.tween(this.pointsLabel.scale)
                        .to({ y: 0 }, 300, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        BasketChamps.AudioManager.getInstance().playSound("point_1");
                        this.pointsLabel.setText((BasketChamps.GameVars.getInstance().groupWins[this.teamId] * 2 + BasketChamps.GameVars.getInstance().groupLoses[this.teamId]).toString());
                        this.game.add.tween(this.pointsLabel.scale)
                            .to({ y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                    }, this);
                    this.game.time.events.add(1200, function () {
                        this.moveClassification(win, teamPos);
                        this.raysPoints.visible = false;
                    }, this);
                }
            }, this);
        };
        ClassificationTeam.prototype.moveClassification = function (win, teamPos) {
            var teamsSort = [];
            for (var i = 0; i < 6; i++) {
                teamsSort.push({ points: BasketChamps.GameVars.getInstance().groupWins[i] * 2 + BasketChamps.GameVars.getInstance().groupLoses[i], id: i });
            }
            teamsSort.sort(function (n1, n2) {
                if (n1.points < n2.points) {
                    return 1;
                }
                if (n1.points > n1.points) {
                    return -1;
                }
                return 0;
            });
            var newPos;
            for (var i = 0; i < 6; i++) {
                if (teamsSort[i].id === this.teamId) {
                    newPos = i;
                }
            }
            if (newPos !== teamPos) {
                this.moveMyTeam(win, newPos);
                for (var i = newPos; i < teamPos; i++) {
                    BasketChamps.BasketballCourtState.currentInstance.classificationLayer.classificationTeams[i].changePosition();
                }
            }
            else {
                BasketChamps.BasketballCourtState.currentInstance.classificationLayer.changeMatchResults(win);
                BasketChamps.BasketballCourtState.currentInstance.classificationLayer.playVisible();
            }
        };
        ClassificationTeam.prototype.changePosition = function () {
            var num = this.y + 44;
            if (this.pos === 3) {
                num += 5;
            }
            this.game.add.tween(this)
                .to({ y: num }, 300, Phaser.Easing.Cubic.In, true, 1000);
        };
        ClassificationTeam.prototype.moveMyTeam = function (win, newPos) {
            var delay = 300;
            var scal = 1.1;
            this.game.add.tween(this.flag.scale)
                .to({ x: .65 * scal, y: .65 * scal }, delay, Phaser.Easing.Cubic.In, true);
            this.game.add.tween(this.bck.scale)
                .to({ x: (505 * (scal - 0.05)) / 16, y: (44 * scal) / 16 }, delay, Phaser.Easing.Cubic.In, true);
            this.game.add.tween(this.wonLabel.scale)
                .to({ x: scal, y: scal }, delay, Phaser.Easing.Cubic.In, true);
            this.game.add.tween(this.lostLabel.scale)
                .to({ x: scal, y: scal }, delay, Phaser.Easing.Cubic.In, true);
            this.game.add.tween(this.pointsLabel.scale)
                .to({ x: scal, y: scal }, delay, Phaser.Easing.Cubic.In, true)
                .onComplete.add(function () {
                this.game.add.tween(this)
                    .to({ y: 107 + 44 * newPos - BasketChamps.GameConstants.GAME_HEIGHT / 2 }, 600, Phaser.Easing.Cubic.Out, true, 300)
                    .onComplete.add(function () {
                    this.game.add.tween(this.flag.scale)
                        .to({ x: .65, y: .65 }, delay, Phaser.Easing.Cubic.Out, true);
                    if (newPos <= 3) {
                        this.game.add.tween(this.bck.scale)
                            .to({ x: 505 / 16, y: 44 / 16 }, delay, Phaser.Easing.Cubic.Out, true);
                    }
                    else {
                        this.game.add.tween(this.bck.scale)
                            .to({ x: 495 / 16, y: 44 / 16 }, delay, Phaser.Easing.Cubic.Out, true);
                        this.game.add.tween(this)
                            .to({ y: this.y + 5 }, 600, Phaser.Easing.Cubic.Out, true);
                    }
                    this.game.add.tween(this.wonLabel.scale)
                        .to({ x: 1, y: 1 }, delay, Phaser.Easing.Cubic.Out, true);
                    this.game.add.tween(this.lostLabel.scale)
                        .to({ x: 1, y: 1 }, delay, Phaser.Easing.Cubic.Out, true);
                    this.game.add.tween(this.pointsLabel.scale)
                        .to({ x: 1, y: 1 }, delay, Phaser.Easing.Cubic.Out, true)
                        .onComplete.add(function () {
                        BasketChamps.BasketballCourtState.currentInstance.classificationLayer.changeMatchResults(win);
                        BasketChamps.BasketballCourtState.currentInstance.classificationLayer.playVisible();
                    }, this);
                }, this);
                if (newPos <= 3 && this.pos > 3) {
                    this.game.add.tween(this.bck)
                        .to({ x: this.bck.x - 5 }, 600, Phaser.Easing.Cubic.Out, true, 300);
                }
            }, this);
        };
        return ClassificationTeam;
    }(Phaser.Group));
    BasketChamps.ClassificationTeam = ClassificationTeam;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var EventsLayer = (function (_super) {
        __extends(EventsLayer, _super);
        function EventsLayer(game) {
            var _this = _super.call(this, game, null, "events-layer", false) || this;
            EventsLayer.currentInstance = _this;
            _this.doge = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH + 150, BasketChamps.GameConstants.GAME_HEIGHT, "texture_atlas_1", "doge.png");
            _this.doge.anchor.set(1);
            _this.addChild(_this.doge);
            _this.doge_text = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 130, BasketChamps.GameConstants.GAME_HEIGHT - 130, "texture_atlas_1", "doge_text_1.png");
            _this.doge_text.anchor.set(.5);
            _this.doge_text.alpha = 0;
            _this.addChild(_this.doge_text);
            _this.snoop = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 100, BasketChamps.GameConstants.GAME_HEIGHT + 250, "texture_atlas_1", "snoop_0001.png");
            _this.snoop.anchor.set(.5, 1);
            _this.addChild(_this.snoop);
            _this.snoop.animations.add("anim1", Phaser.Animation.generateFrameNames("snoop_", 1, 30, ".png", 4));
            _this.snoop.animations.add("anim2", Phaser.Animation.generateFrameNames("snoop_", 30, 1, ".png", 4));
            _this.snoop.animations.add("anim3", Phaser.Animation.generateFrameNames("snoop_", 1, 30, ".png", 4));
            _this.snoop.animations.add("anim4", Phaser.Animation.generateFrameNames("snoop_", 30, 15, ".png", 4));
            _this.snoop.animations.getAnimation("anim1").onComplete.add(function () {
                EventsLayer.currentInstance.snoop.play("anim2", 25, false, false);
            }, _this);
            _this.snoop.animations.getAnimation("anim2").onComplete.add(function () {
                EventsLayer.currentInstance.snoop.play("anim3", 25, false, false);
            }, _this);
            _this.snoop.animations.getAnimation("anim3").onComplete.add(function () {
                EventsLayer.currentInstance.snoop.play("anim4", 25, false, false);
            }, _this);
            _this.snoop.animations.getAnimation("anim4").onComplete.add(function () {
                BasketChamps.StageContainer.currentInstance.efectsContainer.pauseConfetti();
                this.game.time.events.add(1500, function () {
                    BasketChamps.StageContainer.currentInstance.efectsContainer.resumeConfetti();
                    this.game.add.tween(this.snoop)
                        .to({ y: BasketChamps.GameConstants.GAME_HEIGHT + 250 }, 200, Phaser.Easing.Linear.None, true)
                        .onComplete.add(function () {
                        this.visible = false;
                    }, this);
                }, this);
            }, _this);
            _this.visible = false;
            return _this;
        }
        EventsLayer.prototype.destroy = function () {
            EventsLayer.currentInstance = null;
        };
        EventsLayer.prototype.showDoge = function () {
            var rand = Math.floor((Math.random() * 6) + 1);
            this.doge_text.loadTexture("texture_atlas_1", "doge_text_" + rand + ".png");
            this.visible = true;
            BasketChamps.AudioManager.getInstance().playSound("doge_2");
            this.game.add.tween(this.doge)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH + 20 }, 500, Phaser.Easing.Linear.None, true)
                .onComplete.add(function () {
                this.game.add.tween(this.doge_text)
                    .to({ alpha: 1 }, 200, Phaser.Easing.Cubic.Out, true, 200);
                this.game.time.events.add(1200, function () {
                    this.game.add.tween(this.doge_text)
                        .to({ alpha: 0 }, 200, Phaser.Easing.Cubic.Out, true);
                    this.game.add.tween(this.doge)
                        .to({ angle: 0 }, 500, Phaser.Easing.Back.In, true);
                    this.game.add.tween(this.doge)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH + 150, y: BasketChamps.GameConstants.GAME_HEIGHT }, 500, Phaser.Easing.Back.In, true)
                        .onComplete.add(function () {
                        this.visible = false;
                    }, this);
                }, this);
            }, this);
            this.game.add.tween(this.doge)
                .to({ angle: -10 }, 500, Phaser.Easing.Linear.None, true);
        };
        EventsLayer.prototype.showSnoop = function () {
            if (BasketChamps.GameVars.getInstance().numMatch < 8) {
                BasketChamps.AudioManager.getInstance().playSound("snoop", true);
                this.game.time.events.add(1400, function () {
                    this.visible = true;
                    this.game.add.tween(this.snoop)
                        .to({ y: BasketChamps.GameConstants.GAME_HEIGHT }, 200, Phaser.Easing.Linear.None, true)
                        .onComplete.add(function () {
                        this.snoop.play("anim1", 25, false, false);
                    }, this);
                }, this);
            }
        };
        return EventsLayer;
    }(Phaser.Group));
    BasketChamps.EventsLayer = EventsLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var GameOverLayer = (function (_super) {
        __extends(GameOverLayer, _super);
        function GameOverLayer(game) {
            var _this = _super.call(this, game, null, "gameover-layer", false) || this;
            _this.background = new Phaser.Image(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            _this.background.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            _this.background.alpha = 0;
            _this.background.inputEnabled = true;
            _this.background.events.onInputDown.add(_this.onClickBackground, _this);
            _this.add(_this.background);
            _this.laurel1 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 100, BasketChamps.GameConstants.GAME_HEIGHT / 2 - 30, "texture_atlas_1", "laurel.png");
            _this.laurel1.anchor.set(.5);
            _this.laurel1.scale.set(0);
            _this.add(_this.laurel1);
            _this.laurel2 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 100, BasketChamps.GameConstants.GAME_HEIGHT / 2 - 30, "texture_atlas_1", "laurel.png");
            _this.laurel2.anchor.set(.5);
            _this.laurel2.scale.set(0);
            _this.add(_this.laurel2);
            _this.fish = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, "texture_atlas_1", "gameover_fish.png");
            _this.fish.anchor.set(.5);
            _this.fish.scale.set(0);
            _this.add(_this.fish);
            _this.gameTitle = new Phaser.Image(_this.game, -200, 100, "texture_atlas_1", "gameover_game.png");
            _this.gameTitle.anchor.set(.5);
            _this.add(_this.gameTitle);
            _this.overTitle = new Phaser.Image(_this.game, 800, 280, "texture_atlas_1", "gameover_over.png");
            _this.overTitle.anchor.set(.5);
            _this.add(_this.overTitle);
            _this.exitButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 200, 320, "texture_atlas_1", _this.onExitClicked, _this);
            _this.exitButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.exitButton.anchor.set(.5);
            _this.exitButton.scale.set(0);
            _this.exitButton.visible = true;
            _this.add(_this.exitButton);
            _this.visible = false;
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                var moreGamesButtons = new MinijuegosMoreGamesButton(_this.game, 60, 315);
                _this.add(moreGamesButtons);
            }
            return _this;
        }
        GameOverLayer.prototype.onExitClicked = function () {
            BasketChamps.BasketballCourtState.currentInstance.goBack();
            BasketChamps.MatchManager.currentInstance.resetBasket();
            this.visible = false;
        };
        GameOverLayer.prototype.onClickBackground = function () {
        };
        GameOverLayer.prototype.showGameOver = function () {
            BasketChamps.TournamentManager.getInstance().deleteLocalStorage();
            BasketChamps.AudioManager.getInstance().playSound("fx_gameover", true);
            this.game.add.tween(this.background)
                .to({ alpha: .7 }, 500, Phaser.Easing.Cubic.Out, true, 200)
                .onComplete.add(function () {
                this.game.add.tween(this.gameTitle)
                    .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 }, 1000, Phaser.Easing.Elastic.Out, true, 100);
                this.game.add.tween(this.overTitle)
                    .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 }, 1000, Phaser.Easing.Elastic.Out, true, 100);
                this.game.add.tween(this.fish.scale)
                    .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                this.game.add.tween(this.laurel1.scale)
                    .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                this.game.add.tween(this.laurel2.scale)
                    .to({ x: -1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 100);
                this.game.add.tween(this.exitButton.scale)
                    .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 700)
                    .onComplete.add(function () {
                    var pulseTween = this.game.add.tween(this.exitButton.scale);
                    pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                    pulseTween.delay(50);
                    pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                    pulseTween.loop();
                    pulseTween.start();
                }, this);
            }, this);
            this.visible = true;
        };
        return GameOverLayer;
    }(Phaser.Group));
    BasketChamps.GameOverLayer = GameOverLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var CheatMenu = (function (_super) {
        __extends(CheatMenu, _super);
        function CheatMenu(game) {
            var _this = _super.call(this, game, null, "cheat-menu", false) || this;
            _this.cheatBackground = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            _this.cheatBackground.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            _this.cheatBackground.alpha = 0.3;
            _this.cheatBackground.inputEnabled = true;
            _this.cheatBackground.events.onInputDown.add(_this.onClickCheatBackground, _this);
            _this.addChild(_this.cheatBackground);
            _this.cheatMenuBackground = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2, _this.game.cache.getBitmapData("white_square"));
            _this.cheatMenuBackground.scale.set((BasketChamps.GameConstants.GAME_WIDTH - 100) / 16, (BasketChamps.GameConstants.GAME_HEIGHT - 100) / 16);
            _this.cheatMenuBackground.alpha = .9;
            _this.cheatMenuBackground.anchor.set(.5);
            _this.addChild(_this.cheatMenuBackground);
            _this.buttonResume = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT - 100, "texture_atlas_1", _this.onResumeClicked, _this);
            _this.buttonResume.setFrames("button-resume-on.png", "button-resume-off.png", "button-resume-on.png", "button-resume-off.png");
            _this.buttonResume.anchor.set(.5);
            _this.addChild(_this.buttonResume);
            _this.buttonPhysics = new Phaser.Button(_this.game, 100, 100, "texture_atlas_1", _this.onPhysicsClicked, _this);
            if (BasketChamps.GameConstants.SHOW_PHYSICS_BODIES) {
                _this.buttonPhysics.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
            else {
                _this.buttonPhysics.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            _this.buttonPhysics.anchor.set(.5);
            _this.addChild(_this.buttonPhysics);
            _this.textPhysics = new Phaser.Text(_this.game, 100, 130, "PHYSICS", { font: "10px" });
            _this.textPhysics.anchor.set(.5);
            _this.addChild(_this.textPhysics);
            _this.buttonEasy = new Phaser.Button(_this.game, 180, 100, "texture_atlas_1", _this.onEasyClicked, _this);
            if (BasketChamps.GameConstants.EASY_GAME) {
                _this.buttonEasy.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
            else {
                _this.buttonEasy.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            _this.buttonEasy.anchor.set(.5);
            _this.addChild(_this.buttonEasy);
            _this.textEasy = new Phaser.Text(_this.game, 180, 130, "EASY MODE", { font: "10px" });
            _this.textEasy.anchor.set(.5);
            _this.addChild(_this.textEasy);
            _this.buttonWin = new Phaser.Button(_this.game, 260, 100, "texture_atlas_1", _this.onWinClicked, _this);
            _this.buttonWin.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            _this.buttonWin.anchor.set(.5);
            _this.addChild(_this.buttonWin);
            _this.textWin = new Phaser.Text(_this.game, 260, 130, "WIN GAME", { font: "10px" });
            _this.textWin.anchor.set(.5);
            _this.addChild(_this.textWin);
            _this.buttonLose = new Phaser.Button(_this.game, 340, 100, "texture_atlas_1", _this.onLoseClicked, _this);
            _this.buttonLose.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            _this.buttonLose.anchor.set(.5);
            _this.addChild(_this.buttonLose);
            _this.textLose = new Phaser.Text(_this.game, 340, 130, "LOSE GAME", { font: "10px" });
            _this.textLose.anchor.set(.5);
            _this.addChild(_this.textLose);
            _this.buttonMovVert = new Phaser.Button(_this.game, 420, 100, "texture_atlas_1", _this.onMovVertClicked, _this);
            if (BasketChamps.GameConstants.MOV_VER) {
                _this.buttonMovVert.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
            else {
                _this.buttonMovVert.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            _this.buttonMovVert.anchor.set(.5);
            _this.addChild(_this.buttonMovVert);
            _this.textMovVert = new Phaser.Text(_this.game, 420, 130, "MOVE VERT", { font: "10px" });
            _this.textMovVert.anchor.set(.5);
            _this.addChild(_this.textMovVert);
            _this.buttonMovHor = new Phaser.Button(_this.game, 500, 100, "texture_atlas_1", _this.onMovHorClicked, _this);
            if (BasketChamps.GameConstants.MOV_HOR) {
                _this.buttonMovHor.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
            else {
                _this.buttonMovHor.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            _this.buttonMovHor.anchor.set(.5);
            _this.addChild(_this.buttonMovHor);
            _this.textMovHor = new Phaser.Text(_this.game, 500, 130, "MOVE HOR", { font: "10px" });
            _this.textMovHor.anchor.set(.5);
            _this.addChild(_this.textMovHor);
            _this.buttonSuddenDeath = new Phaser.Button(_this.game, 100, 180, "texture_atlas_1", _this.onSuddenDeathClicked, _this);
            _this.buttonSuddenDeath.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            _this.buttonSuddenDeath.anchor.set(.5);
            _this.addChild(_this.buttonSuddenDeath);
            _this.textSuddenDeath = new Phaser.Text(_this.game, 100, 210, "SUDDEN DEATH", { font: "10px" });
            _this.textSuddenDeath.anchor.set(.5);
            _this.addChild(_this.textSuddenDeath);
            return _this;
        }
        CheatMenu.prototype.onResumeClicked = function () {
            this.visible = false;
            BasketChamps.GUI.currentInstance.onResumeClicked();
        };
        CheatMenu.prototype.onPhysicsClicked = function () {
            if (BasketChamps.GameConstants.SHOW_PHYSICS_BODIES) {
                BasketChamps.GameConstants.SHOW_PHYSICS_BODIES = false;
                this.game.debug.reset();
                this.buttonPhysics.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            else {
                BasketChamps.GameConstants.SHOW_PHYSICS_BODIES = true;
                this.game.debug.reset();
                this.buttonPhysics.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
        };
        CheatMenu.prototype.onEasyClicked = function () {
            if (BasketChamps.GameConstants.EASY_GAME) {
                BasketChamps.GameConstants.EASY_GAME = false;
                this.buttonEasy.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            else {
                BasketChamps.GameConstants.EASY_GAME = true;
                this.buttonEasy.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
        };
        CheatMenu.prototype.onWinClicked = function () {
            this.visible = false;
            BasketChamps.GUI.currentInstance.onResumeClicked();
            BasketChamps.GameVars.getInstance().playerPoints += 100;
            BasketChamps.MatchManager.currentInstance.showWinner(true);
        };
        CheatMenu.prototype.onLoseClicked = function () {
            this.visible = false;
            BasketChamps.GUI.currentInstance.onResumeClicked();
            BasketChamps.GameVars.getInstance().AIPoints += 100;
            BasketChamps.MatchManager.currentInstance.showWinner(true);
        };
        CheatMenu.prototype.onMovVertClicked = function () {
            if (BasketChamps.GameConstants.MOV_VER) {
                BasketChamps.MatchManager.currentInstance.stopMovVert();
                this.buttonMovVert.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            else {
                BasketChamps.MatchManager.currentInstance.startMovVert();
                this.buttonMovVert.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
        };
        CheatMenu.prototype.onMovHorClicked = function () {
            if (BasketChamps.GameConstants.MOV_HOR) {
                BasketChamps.MatchManager.currentInstance.stopMovHor();
                this.buttonMovHor.setFrames("button-physics-on.png", "button-physics-off.png", "button-physics-on.png", "button-physics-off.png");
            }
            else {
                BasketChamps.MatchManager.currentInstance.startMovHor();
                this.buttonMovHor.setFrames("button-physics-off.png", "button-physics-on.png", "button-physics-off.png", "button-physics-on.png");
            }
        };
        CheatMenu.prototype.onSuddenDeathClicked = function () {
            BasketChamps.MatchManager.currentInstance.startSuddenDeath();
            this.visible = false;
            BasketChamps.GUI.currentInstance.onResumeClicked();
        };
        CheatMenu.prototype.onClickCheatBackground = function () {
        };
        return CheatMenu;
    }(Phaser.Group));
    BasketChamps.CheatMenu = CheatMenu;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui", false) || this;
            GUI.currentInstance = _this;
            _this.optionsClicked = false;
            _this.buttonOptions = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 33, 30, "texture_atlas_1", _this.onOptionsClicked, _this);
            _this.buttonOptions.setFrames("btn_pause_on.png", "btn_pause.png", "btn_pause_on.png", "btn_pause.png");
            _this.buttonOptions.anchor.set(.5);
            _this.buttonOptions.scale.set(.8);
            _this.addChild(_this.buttonOptions);
            if (BasketChamps.GameConstants.DEVELOPMENT) {
                _this.buttonCheat = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 30, 80, "texture_atlas_1", _this.onCheatClicked, _this);
                _this.buttonCheat.setFrames("button-cheat-menu-on.png", "button-cheat-menu-off.png", "button-cheat-menu-on.png", "button-cheat-menu-off.png");
                _this.buttonCheat.anchor.set(.5);
                _this.buttonCheat.scale.set(.8);
                _this.addChild(_this.buttonCheat);
            }
            _this.turnTab = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 20, 355, "texture_atlas_1", "tab_your_turn.png");
            _this.turnTab.visible = false;
            _this.turnTab.anchor.set(.5);
            _this.turnTab.alpha = 0;
            _this.addChild(_this.turnTab);
            _this.pauseLayer = new BasketChamps.PauseLayer(_this.game);
            _this.addChild(_this.pauseLayer);
            _this.pauseLayer.visible = false;
            _this.cheatMenu = new BasketChamps.CheatMenu(_this.game);
            _this.addChild(_this.cheatMenu);
            _this.cheatMenu.visible = false;
            _this.suddenDeath = new BasketChamps.SuddenDeath(_this.game);
            _this.addChild(_this.suddenDeath);
            _this.suddenDeath.visible = false;
            _this.visible = false;
            return _this;
        }
        GUI.prototype.matchReady = function () {
            this.visible = true;
        };
        GUI.prototype.onMatchEnd = function () {
            this.visible = false;
        };
        GUI.prototype.destroy = function (destroyChildren, soft) {
            GUI.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        GUI.prototype.startTurnTab = function () {
            this.turnTab.visible = true;
            this.game.add.tween(this.turnTab)
                .to({ alpha: 1 }, 500, Phaser.Easing.Cubic.Out, true, 500);
        };
        GUI.prototype.stopTurnTab = function () {
            this.turnTab.visible = true;
            this.game.add.tween(this.turnTab)
                .to({ alpha: 0 }, 500, Phaser.Easing.Cubic.Out, true, 500);
        };
        GUI.prototype.changeTurnTab = function (value) {
            this.game.add.tween(this.turnTab.scale)
                .to({ y: .1 }, 500, Phaser.Easing.Elastic.In, true, 300)
                .onComplete.add(function () {
                if (value) {
                    this.turnTab.loadTexture("texture_atlas_1", "tab_your_turn.png");
                }
                else {
                    this.turnTab.loadTexture("texture_atlas_1", "tab_rivals_turn.png");
                }
                this.game.add.tween(this.turnTab.scale)
                    .to({ y: 1 }, 500, Phaser.Easing.Elastic.Out, true);
            }, this);
        };
        GUI.prototype.onOptionsClicked = function () {
            this.buttonOptions.visible = false;
            this.pauseLayer.visible = true;
            BasketChamps.StageContainer.currentInstance.pause();
            BasketChamps.BackgroundManager.currentInstance.slotsManager.pauseTween();
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        GUI.prototype.onResumeClicked = function () {
            this.buttonOptions.visible = true;
            if (BasketChamps.GameConstants.DEVELOPMENT) {
                this.buttonCheat.visible = true;
            }
            BasketChamps.StageContainer.currentInstance.resume();
            BasketChamps.BackgroundManager.currentInstance.slotsManager.resumeTween();
        };
        GUI.prototype.onCheatClicked = function () {
            this.buttonCheat.visible = false;
            this.cheatMenu.visible = true;
            BasketChamps.StageContainer.currentInstance.pause();
        };
        GUI.prototype.showSuddenDeath = function () {
            this.suddenDeath.visible = true;
            this.visible = true;
            BasketChamps.StageContainer.currentInstance.pause();
            this.suddenDeath.showSuddenDeath();
            BasketChamps.BackgroundManager.currentInstance.spectatorsManager.pause();
        };
        return GUI;
    }(Phaser.Group));
    BasketChamps.GUI = GUI;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var PauseLayer = (function (_super) {
        __extends(PauseLayer, _super);
        function PauseLayer(game) {
            var _this = _super.call(this, game, null, "pause-layer", false) || this;
            PauseLayer.currentInstance = _this;
            var pauseBackground = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            pauseBackground.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            pauseBackground.alpha = 0.7;
            pauseBackground.inputEnabled = true;
            pauseBackground.events.onInputDown.add(_this.onClickPauseBackground, _this);
            _this.addChild(pauseBackground);
            _this.buttonsContainer = new Phaser.Group(_this.game);
            _this.add(_this.buttonsContainer);
            var buttonResume = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 25, 180, "texture_atlas_1", _this.onResumeClicked, _this);
            buttonResume.setFrames("button-resume-on.png", "button-resume-off.png", "button-resume-on.png", "button-resume-off.png");
            buttonResume.anchor.set(.5);
            _this.buttonsContainer.addChild(buttonResume);
            var buttonNew = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 20, 250, "texture_atlas_1", _this.onNewClicked, _this);
            buttonNew.setFrames("button-new-on.png", "button-new-off.png", "button-new-on.png", "button-new-off.png");
            buttonNew.anchor.set(.5);
            _this.buttonsContainer.addChild(buttonNew);
            var textNew1 = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 10, 250 - 10, "RESET", { font: "30px Jomhuria", fontWeight: "400" });
            textNew1.addColor("#ffffff", 0);
            textNew1.anchor.set(0, .5);
            _this.buttonsContainer.add(textNew1);
            var textNew2 = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 10, 250 + 10, "TOURNAMENT", { font: "30px Jomhuria", fontWeight: "400" });
            textNew2.addColor("#ffffff", 0);
            textNew2.anchor.set(0, .5);
            _this.buttonsContainer.add(textNew2);
            var buttonExit = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 20, 310, "texture_atlas_1", _this.onExitClicked, _this);
            buttonExit.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png", "button-exit-off.png");
            buttonExit.anchor.set(.5);
            _this.buttonsContainer.addChild(buttonExit);
            var textExit = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 10, 310, "EXIT", { font: "30px Jomhuria", fontWeight: "400" });
            textExit.addColor("#ffffff", 0);
            textExit.anchor.set(0, .5);
            _this.buttonsContainer.add(textExit);
            _this.audioButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 32, 35, "texture_atlas_1", _this.onAudioClicked, _this);
            if (BasketChamps.AudioManager.getInstance().isMuted) {
                _this.audioButton.setFrames("music_off_button_on.png", "music_off_button_off.png", "music_off_button_on.png", "music_off_button_off.png");
            }
            else {
                _this.audioButton.setFrames("music_on_button_on.png", "music_on_button_off.png", "music_on_button_on.png", "music_on_button_off.png");
            }
            _this.audioButton.anchor.set(.5);
            _this.buttonsContainer.addChild(_this.audioButton);
            return _this;
        }
        PauseLayer.prototype.onResumeClicked = function () {
            this.visible = false;
            BasketChamps.GUI.currentInstance.onResumeClicked();
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        PauseLayer.prototype.onNewClicked = function () {
            this.buttonsContainer.visible = false;
            this.confirmationMenu = new BasketChamps.ConfirmationMenu(this.game, true);
            this.add(this.confirmationMenu);
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        PauseLayer.prototype.removeConfirmationMenu = function () {
            this.buttonsContainer.visible = true;
            this.confirmationMenu.destroy();
        };
        PauseLayer.prototype.newTournament = function () {
            BasketChamps.TournamentManager.getInstance().deleteLocalStorage();
            BasketChamps.BasketballCourtState.currentInstance.nextGame();
        };
        PauseLayer.prototype.onExitClicked = function () {
            BasketChamps.BasketballCourtState.currentInstance.goBack();
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        PauseLayer.prototype.onAudioClicked = function () {
            if (BasketChamps.AudioManager.getInstance().isMuted) {
                BasketChamps.AudioManager.getInstance().unmute();
                this.audioButton.setFrames("music_on_button_on.png", "music_on_button_off.png", "music_on_button_on.png");
            }
            else {
                BasketChamps.AudioManager.getInstance().mute();
                this.audioButton.setFrames("music_off_button_on.png", "music_off_button_off.png", "music_off_button_on.png");
            }
        };
        PauseLayer.prototype.onClickPauseBackground = function () {
        };
        return PauseLayer;
    }(Phaser.Group));
    BasketChamps.PauseLayer = PauseLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SuddenDeath = (function (_super) {
        __extends(SuddenDeath, _super);
        function SuddenDeath(game) {
            var _this = _super.call(this, game, null, "sudden-death", false) || this;
            _this.background = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            _this.background.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            _this.background.anchor.set(0);
            _this.background.alpha = 0;
            _this.background.inputEnabled = true;
            _this.background.events.onInputDown.add(_this.onClickBackground, _this);
            _this.addChild(_this.background);
            _this.sudden = new Phaser.Sprite(_this.game, -100, 100, "texture_atlas_1", "sudden.png");
            _this.sudden.anchor.set(.5);
            _this.sudden.scale.set(.25);
            _this.addChild(_this.sudden);
            _this.death_h = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "texture_atlas_1", "h_death.png");
            _this.death_h.anchor.set(.5);
            _this.death_h.scale.set(0);
            _this.addChild(_this.death_h);
            _this.death_t = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "texture_atlas_1", "t_death.png");
            _this.death_t.anchor.set(.5);
            _this.death_t.scale.set(0);
            _this.addChild(_this.death_t);
            _this.death_a = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "texture_atlas_1", "a_death.png");
            _this.death_a.anchor.set(.5);
            _this.death_a.scale.set(0);
            _this.addChild(_this.death_a);
            _this.death_e = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "texture_atlas_1", "e_death.png");
            _this.death_e.anchor.set(.5);
            _this.death_e.scale.set(0);
            _this.addChild(_this.death_e);
            _this.death_d = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "texture_atlas_1", "d_death.png");
            _this.death_d.anchor.set(.5);
            _this.death_d.scale.set(0);
            _this.addChild(_this.death_d);
            _this.instructionSudden1 = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 250, "texture_atlas_1", "instructions_sudden_death_1.png");
            _this.instructionSudden1.anchor.set(.5);
            _this.instructionSudden1.visible = false;
            _this.addChild(_this.instructionSudden1);
            _this.instructionSudden2 = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 250, "texture_atlas_1", "instructions_sudden_death_2.png");
            _this.instructionSudden2.anchor.set(.5);
            _this.instructionSudden2.visible = false;
            _this.addChild(_this.instructionSudden2);
            _this.playButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 330, "texture_atlas_1", _this.onPlayClicked, _this);
            _this.playButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.playButton.anchor.set(.5);
            _this.playButton.alpha = 0;
            _this.addChild(_this.playButton);
            return _this;
        }
        SuddenDeath.prototype.resetSuddenDeath = function () {
            this.sudden.position.set(-100, 100);
            this.sudden.scale.set(.25);
            this.death_d.position.set(BasketChamps.GameConstants.GAME_WIDTH / 2, 160);
            this.death_e.position.set(BasketChamps.GameConstants.GAME_WIDTH / 2, 160);
            this.death_a.position.set(BasketChamps.GameConstants.GAME_WIDTH / 2, 160);
            this.death_t.position.set(BasketChamps.GameConstants.GAME_WIDTH / 2, 160);
            this.death_h.position.set(BasketChamps.GameConstants.GAME_WIDTH / 2, 160);
        };
        SuddenDeath.prototype.showSuddenDeath = function () {
            if (BasketChamps.GameVars.getInstance().firstSuddenDeath) {
                this.game.add.tween(this.background)
                    .to({ alpha: .7 }, 1000, Phaser.Easing.Cubic.In, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.sudden)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 70 }, 600, Phaser.Easing.Elastic.Out, true);
                    this.game.add.tween(this.sudden.scale)
                        .to({ x: 1, y: 1 }, 400, Phaser.Easing.Cubic.Out, true);
                    this.game.time.events.add(600, function () {
                        this.showDeath();
                    }, this);
                }, this);
            }
            else {
                this.game.time.events.add(250, function () {
                    this.game.add.tween(this.sudden)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 70 }, 600, Phaser.Easing.Elastic.Out, true);
                    this.game.add.tween(this.sudden.scale)
                        .to({ x: 1, y: 1 }, 400, Phaser.Easing.Cubic.Out, true);
                    this.game.time.events.add(600, function () {
                        this.showDeath();
                    }, this);
                }, this);
            }
            BasketChamps.AudioManager.getInstance().playSound("loop_sudden_death", true);
        };
        SuddenDeath.prototype.showDeath = function () {
            this.game.add.tween(this.death_d.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Elastic.Out, true);
            this.game.add.tween(this.death_d)
                .to({ x: 300, y: 150 }, 150, Phaser.Easing.Elastic.Out, true);
            this.game.add.tween(this.death_e.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Elastic.Out, true, 200);
            this.game.add.tween(this.death_e)
                .to({ x: 300, y: 150 }, 150, Phaser.Easing.Elastic.Out, true, 200);
            this.game.add.tween(this.death_a.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Elastic.Out, true, 400);
            this.game.add.tween(this.death_a)
                .to({ x: 300, y: 150 }, 150, Phaser.Easing.Elastic.Out, true, 400);
            this.game.add.tween(this.death_t.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Elastic.Out, true, 600);
            this.game.add.tween(this.death_t)
                .to({ x: 300, y: 150 }, 150, Phaser.Easing.Elastic.Out, true, 600);
            this.game.add.tween(this.death_h.scale)
                .to({ x: 1, y: 1 }, 150, Phaser.Easing.Elastic.Out, true, 800);
            this.game.add.tween(this.death_h)
                .to({ x: 300, y: 150 }, 150, Phaser.Easing.Elastic.Out, true, 800)
                .onComplete.add(function () {
                if (BasketChamps.GameVars.getInstance().firstSuddenDeath) {
                    this.instructionSudden1.visible = true;
                    this.game.time.events.add(300, function () {
                        this.instructionSudden2.visible = true;
                    }, this);
                    this.game.add.tween(this.playButton)
                        .to({ alpha: 1 }, 150, Phaser.Easing.Cubic.Out, true, 1300)
                        .onComplete.add(function () {
                        var pulseTween = this.game.add.tween(this.playButton.scale);
                        pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                        pulseTween.delay(50);
                        pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                        pulseTween.loop();
                        pulseTween.start();
                    }, this);
                }
                else {
                    this.game.time.events.add(800, function () {
                        this.hideDeath();
                    }, this);
                }
            }, this);
        };
        SuddenDeath.prototype.hideDeath = function () {
            this.game.add.tween(this.death_d.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.death_d.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_d)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_e.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.death_e.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_e)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_a.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.death_a.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_a)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_t.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.death_t.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_t)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_h.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.death_h.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.death_h)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.sudden.scale)
                .to({ x: 1.2, y: 1.2 }, 200, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.sudden.scale)
                .to({ x: 0, y: 0 }, 200, Phaser.Easing.Cubic.Out, true, 200);
            this.game.add.tween(this.sudden)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2, y: 120 }, 200, Phaser.Easing.Cubic.Out, true, 200)
                .onComplete.add(function () {
                if (BasketChamps.GameVars.getInstance().firstSuddenDeath) {
                    this.game.add.tween(this.background)
                        .to({ alpha: 0 }, 1000, Phaser.Easing.Cubic.In, true)
                        .onComplete.add(function () {
                        this.hideSuddenDeath();
                    }, this);
                }
                else {
                    this.hideSuddenDeath();
                }
            }, this);
        };
        SuddenDeath.prototype.hideSuddenDeath = function () {
            this.visible = false;
            BasketChamps.MatchManager.currentInstance.hideSuddenDeath();
            this.resetSuddenDeath();
        };
        SuddenDeath.prototype.onPlayClicked = function () {
            if (this.playButton.alpha !== 0) {
                this.hideDeath();
                this.playButton.alpha = 0;
                this.instructionSudden1.visible = false;
                this.instructionSudden2.visible = false;
                BasketChamps.AudioManager.getInstance().playSound("click");
            }
        };
        SuddenDeath.prototype.onClickBackground = function () {
        };
        return SuddenDeath;
    }(Phaser.Group));
    BasketChamps.SuddenDeath = SuddenDeath;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var FinishMatch = (function (_super) {
        __extends(FinishMatch, _super);
        function FinishMatch(game) {
            var _this = _super.call(this, game, null, "finish-match", false) || this;
            _this.leavingScene = false;
            _this.buttonNext = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 200, 320, "texture_atlas_1", _this.onNextClicked, _this);
            _this.buttonNext.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.buttonNext.visible = false;
            _this.buttonNext.anchor.set(.5);
            _this.buttonNext.scale.set(0);
            _this.add(_this.buttonNext);
            _this.winnerImage = new Phaser.Image(_this.game, -250, 160, "texture_atlas_1", "victory_msg_01.png");
            _this.winnerImage.anchor.set(.5);
            _this.add(_this.winnerImage);
            _this.winnerImage2 = new Phaser.Image(_this.game, 850, 160, "texture_atlas_1", "victory_msg_02.png");
            _this.winnerImage2.anchor.set(.5);
            _this.add(_this.winnerImage2);
            _this.loserImage = new Phaser.Image(_this.game, -250, 160, "texture_atlas_1", "you_lose.png");
            _this.loserImage.anchor.set(.5);
            _this.add(_this.loserImage);
            _this.loserImage2 = new Phaser.Image(_this.game, 850, 230, "texture_atlas_1", "competition_continues.png");
            _this.loserImage2.anchor.set(.5);
            _this.add(_this.loserImage2);
            _this.visible = false;
            _this.win = false;
            return _this;
        }
        FinishMatch.prototype.onNextClicked = function () {
            if (this.leavingScene) {
                return;
            }
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.KIZI) {
                HTML5API_levelEnded();
                if (HTML5API_isMidrollPending()) {
                    HTML5API_displayMidroll();
                }
            }
            this.leavingScene = true;
            this.pulseTween.stop();
            this.game.add.tween(this.buttonNext.scale)
                .to({ x: 0, y: 0 }, 650, Phaser.Easing.Elastic.In, true);
            BasketChamps.StageContainer.currentInstance.efectsContainer.finishConfetti();
            if (this.win) {
                this.game.add.tween(this.winnerImage)
                    .to({ x: -250 }, 500, Phaser.Easing.Back.In, true);
                this.game.add.tween(this.winnerImage2)
                    .to({ x: 850 }, 500, Phaser.Easing.Back.In, true)
                    .onComplete.add(function () {
                    this.game.time.events.add(500, function () {
                        this.leavingScene = false;
                        this.visible = false;
                        BasketChamps.TournamentManager.getInstance().nextMatch(this.win);
                        BasketChamps.TournamentManager.getInstance().removeFlags();
                    }, this);
                }, this);
            }
            else {
                this.game.add.tween(this.loserImage)
                    .to({ x: -250 }, 500, Phaser.Easing.Back.In, true);
                this.game.add.tween(this.loserImage2)
                    .to({ x: 850 }, 500, Phaser.Easing.Back.In, true)
                    .onComplete.add(function () {
                    this.game.time.events.add(500, function () {
                        this.leavingScene = false;
                        this.visible = false;
                        BasketChamps.TournamentManager.getInstance().nextMatch(this.win);
                        BasketChamps.TournamentManager.getInstance().removeFlags();
                    }, this);
                }, this);
            }
        };
        FinishMatch.prototype.showWinner = function (value, buttonTime) {
            this.game.time.events.add(500, function () {
                this.visible = true;
                this.buttonNext.visible = true;
                this.game.add.tween(this.buttonNext.scale)
                    .to({ x: 1, y: 1 }, 650, Phaser.Easing.Elastic.Out, true, buttonTime)
                    .onComplete.add(function () {
                    this.showAPI();
                    if (this.pulseTween !== undefined) {
                        this.pulseTween.stop();
                    }
                    this.pulseTween = this.game.add.tween(this.buttonNext.scale);
                    this.pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                    this.pulseTween.delay(50);
                    this.pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                    this.pulseTween.loop();
                    this.pulseTween.start();
                }, this);
                if (value === "winner") {
                    if (BasketChamps.GameVars.getInstance().numMatch < 5) {
                        this.winnerImage.frameName = "win.png";
                        this.winnerImage2.frameName = "competition_continues_2.png";
                    }
                    else if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                        this.winnerImage.frameName = "victory_msg_01.png";
                        this.winnerImage2.frameName = "tournament_phase.png";
                    }
                    else {
                        BasketChamps.GameVars.getInstance().resetTournament = false;
                        BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT, JSON.stringify(BasketChamps.GameVars.getInstance().resetTournament));
                        this.winnerImage.frameName = "victory_msg_01.png";
                        this.winnerImage2.frameName = "victory_msg_02.png";
                    }
                    this.winnerImage.visible = true;
                    this.winnerImage2.visible = true;
                    this.loserImage.visible = false;
                    this.loserImage2.visible = false;
                    this.win = true;
                    this.game.add.tween(this.winnerImage)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 + 20 }, 1000, Phaser.Easing.Elastic.Out, true);
                    this.game.add.tween(this.winnerImage2)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 + 20 }, 1000, Phaser.Easing.Elastic.Out, true);
                }
                else {
                    this.winnerImage.visible = false;
                    this.winnerImage2.visible = false;
                    this.loserImage.visible = true;
                    this.loserImage2.visible = true;
                    this.win = false;
                    this.game.add.tween(this.loserImage)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 + 20 }, 1000, Phaser.Easing.Elastic.Out, true);
                    this.game.add.tween(this.loserImage2)
                        .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 + 20 }, 1000, Phaser.Easing.Elastic.Out, true);
                }
            }, this);
        };
        FinishMatch.prototype.showAPI = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.GAMEPIX) {
                GamePix.game.ping("level_complete", { score: 0, level: 0, achievements: {} });
            }
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                if (BasketChamps.GameVars.getInstance().laggedAdsCounter % 3 === 0) {
                    LaggedAPI.APIAds.show("interstitial", "basket-champs", "basket-champs-game.jpg", function (response) {
                        if (response.success) {
                            console.log("ad done");
                            BasketChamps.Game.currentInstance.sound.mute = false;
                        }
                        else {
                            console.log("ad error, continue");
                            BasketChamps.Game.currentInstance.sound.mute = false;
                        }
                    });
                }
                BasketChamps.GameVars.getInstance().laggedAdsCounter++;
            }
        };
        return FinishMatch;
    }(Phaser.Group));
    BasketChamps.FinishMatch = FinishMatch;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud", false) || this;
            HUD.currentInstance = _this;
            _this.initialCount = new BasketChamps.InitialCount(_this.game);
            _this.add(_this.initialCount);
            _this.finishMatch = new BasketChamps.FinishMatch(_this.game);
            _this.add(_this.finishMatch);
            if (BasketChamps.GameConstants.DEVELOPMENT) {
                _this.fps = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 150, BasketChamps.GameConstants.GAME_HEIGHT - 25, "FPS: " + _this.game.time.fps.toString(), { font: "15px" });
                _this.fps.anchor.set(.5);
                _this.addChild(_this.fps);
            }
            var kiziLogo = new Phaser.Image(_this.game, 2, 332, "texture_atlas_1", "");
            kiziLogo.scale.x = BasketChamps.GameVars.scaleX;
            _this.add(kiziLogo);
            return _this;
        }
        HUD.prototype.destroy = function (destroyChildren, soft) {
            HUD.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        HUD.prototype.update = function () {
            _super.prototype.update.call(this);
            if (BasketChamps.GameConstants.DEVELOPMENT) {
                this.fps.text = "FPS: " + this.game.time.fps.toString();
            }
        };
        HUD.prototype.matchReady = function () {
            this.game.time.events.add(1250, function () {
                this.initialCount.matchReady();
            }, this);
            this.teamNamesContainer = new BasketChamps.TeamNamesContainer(this.game);
            this.add(this.teamNamesContainer);
            this.teamNamesContainer.showNames();
        };
        HUD.prototype.removeTeamNames = function () {
            this.teamNamesContainer.destroy();
        };
        return HUD;
    }(Phaser.Group));
    BasketChamps.HUD = HUD;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var InitialCount = (function (_super) {
        __extends(InitialCount, _super);
        function InitialCount(game) {
            var _this = _super.call(this, game, null, "initial-count", false) || this;
            _this.onCount = false;
            _this.x = BasketChamps.GameConstants.GAME_WIDTH / 2 + 22;
            _this.y = BasketChamps.GameConstants.GAME_HEIGHT / 2;
            _this.number1 = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "number_1.png");
            _this.number1.anchor.set(.5);
            _this.number1.scale.set(0);
            _this.add(_this.number1);
            _this.number2 = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "number_2.png");
            _this.number2.anchor.set(.5);
            _this.number2.scale.set(0);
            _this.add(_this.number2);
            _this.number3 = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "number_3.png");
            _this.number3.anchor.set(.5);
            _this.number3.scale.set(0);
            _this.add(_this.number3);
            _this.showNumber1 = [];
            _this.showNumber2 = [];
            _this.showNumber3 = [];
            _this.startTweens();
            return _this;
        }
        InitialCount.prototype.matchReady = function () {
            this.startTweens();
            this.onCount = true;
            this.showNumber3[0].to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 500);
            this.showNumber3[0].onComplete.add(function () {
                this.showNumber3[1].to({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber3[2].to({ x: -.2 }, 250, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber3[2].onComplete.add(function () {
                    this.showNumber3[3].to({ x: 0 }, 250, Phaser.Easing.Cubic.Out, true);
                }, this);
                this.showNumber3[4].to({ angle: 360 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber3[4].onComplete.add(this.onNumber3Shown, this);
            }, this);
        };
        InitialCount.prototype.onNumber3Shown = function () {
            BasketChamps.MatchManager.currentInstance.changeFlag();
            this.showNumber2[0].to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true);
            this.showNumber2[0].onComplete.add(function () {
                this.showNumber2[1].to({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber2[2].to({ x: -.2 }, 250, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber2[2].onComplete.add(function () {
                    this.showNumber2[3].to({ x: 0 }, 250, Phaser.Easing.Cubic.Out, true);
                }, this);
                this.showNumber2[4].to({ angle: 360 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber2[4].onComplete.add(this.onNumber2Shown, this);
            }, this);
        };
        InitialCount.prototype.onNumber2Shown = function () {
            this.showNumber1[0].to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true);
            this.showNumber1[0].onComplete.add(function () {
                this.showNumber1[1].to({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber1[2].to({ x: -.2 }, 250, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber1[2].onComplete.add(function () {
                    this.showNumber1[3].to({ x: 0 }, 250, Phaser.Easing.Cubic.Out, true);
                }, this);
                this.showNumber1[4].to({ angle: 360 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.showNumber1[4].onComplete.add(this.onNumber1Shown, this);
            }, this);
        };
        InitialCount.prototype.onNumber1Shown = function () {
            this.onCount = false;
            BasketChamps.GameVars.getInstance().matchFinished = false;
            BasketChamps.MatchManager.currentInstance.startTurnTab();
            BasketChamps.MatchManager.currentInstance.countReady();
        };
        InitialCount.prototype.pause = function () {
            for (var i = 0; i < 5; i++) {
                this.showNumber1[i].pause();
                this.showNumber2[i].pause();
                this.showNumber3[i].pause();
            }
        };
        InitialCount.prototype.resume = function () {
            for (var i = 0; i < 5; i++) {
                this.showNumber1[i].resume();
                this.showNumber2[i].resume();
                this.showNumber3[i].resume();
            }
        };
        InitialCount.prototype.startTweens = function () {
            this.showNumber3[0] = this.game.add.tween(this.number3.scale);
            this.showNumber3[1] = this.game.add.tween(this.number3.scale);
            this.showNumber3[2] = this.game.add.tween(this.number3.scale);
            this.showNumber3[3] = this.game.add.tween(this.number3.scale);
            this.showNumber3[4] = this.game.add.tween(this.number3);
            this.showNumber2[0] = this.game.add.tween(this.number2.scale);
            this.showNumber2[1] = this.game.add.tween(this.number2.scale);
            this.showNumber2[2] = this.game.add.tween(this.number2.scale);
            this.showNumber2[3] = this.game.add.tween(this.number2.scale);
            this.showNumber2[4] = this.game.add.tween(this.number2);
            this.showNumber1[0] = this.game.add.tween(this.number1.scale);
            this.showNumber1[1] = this.game.add.tween(this.number1.scale);
            this.showNumber1[2] = this.game.add.tween(this.number1.scale);
            this.showNumber1[3] = this.game.add.tween(this.number1.scale);
            this.showNumber1[4] = this.game.add.tween(this.number1);
        };
        return InitialCount;
    }(Phaser.Group));
    BasketChamps.InitialCount = InitialCount;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TeamNamesContainer = (function (_super) {
        __extends(TeamNamesContainer, _super);
        function TeamNamesContainer(game) {
            var _this = _super.call(this, game, null, "team-names-container", false) || this;
            _this.strip = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, 330, _this.game.cache.getBitmapData("black_square"));
            _this.strip.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, 60 / 16);
            _this.strip.anchor.set(.5);
            _this.strip.alpha = .8;
            _this.strip.scale.y = 0;
            _this.add(_this.strip);
            if (BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name2 === undefined) {
                _this.teamPlayerName = new Phaser.Text(_this.game, 140, 334, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamPlayerName.addColor("#079e10", 0);
                _this.teamPlayerName.anchor.set(.5);
                _this.teamPlayerName.alpha = 0;
                _this.addChild(_this.teamPlayerName);
            }
            else {
                _this.teamPlayerName = new Phaser.Text(_this.game, 140, 318, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamPlayerName.addColor("#079e10", 0);
                _this.teamPlayerName.anchor.set(.5);
                _this.teamPlayerName.alpha = 0;
                _this.addChild(_this.teamPlayerName);
                _this.teamPlayerName2 = new Phaser.Text(_this.game, 140, 347, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().myTeamID - 1].name2, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamPlayerName2.addColor("#079e10", 0);
                _this.teamPlayerName2.anchor.set(.5);
                _this.teamPlayerName2.alpha = 0;
                _this.addChild(_this.teamPlayerName2);
            }
            if (BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name2 === undefined) {
                _this.teamAIName = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 105, 334, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamAIName.addColor("#ff053a", 0);
                _this.teamAIName.anchor.set(.5);
                _this.teamAIName.alpha = 0;
                _this.addChild(_this.teamAIName);
            }
            else {
                _this.teamAIName = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 105, 318, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamAIName.addColor("#ff053a", 0);
                _this.teamAIName.anchor.set(.5);
                _this.teamAIName.alpha = 0;
                _this.addChild(_this.teamAIName);
                _this.teamAIName2 = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 105, 347, BasketChamps.GameVars.getInstance().teamsData[BasketChamps.GameVars.getInstance().oponentPlayer()].name2, { font: "50px Jomhuria", fontWeight: "400" });
                _this.teamAIName2.addColor("#ff053a", 0);
                _this.teamAIName2.anchor.set(.5);
                _this.teamAIName2.alpha = 0;
                _this.addChild(_this.teamAIName2);
            }
            _this.vsLabel = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 30, 330, "texture_atlas_1", "vs.png");
            _this.vsLabel.anchor.set(.5);
            _this.vsLabel.alpha = 0;
            _this.addChild(_this.vsLabel);
            return _this;
        }
        TeamNamesContainer.prototype.showNames = function () {
            this.game.time.events.add(800, function () {
                this.game.add.tween(this.strip.scale)
                    .to({ y: 60 / 16 }, 800, Phaser.Easing.Elastic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.vsLabel)
                        .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.In, true);
                    this.game.add.tween(this.teamPlayerName)
                        .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.In, true);
                    this.game.add.tween(this.teamAIName)
                        .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.In, true);
                    if (this.teamPlayerName2 !== undefined) {
                        this.game.add.tween(this.teamPlayerName2)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.In, true);
                    }
                    if (this.teamAIName2 !== undefined) {
                        this.game.add.tween(this.teamAIName2)
                            .to({ alpha: 1 }, 300, Phaser.Easing.Cubic.In, true);
                    }
                }, this);
            }, this);
        };
        return TeamNamesContainer;
    }(Phaser.Group));
    BasketChamps.TeamNamesContainer = TeamNamesContainer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var IA = (function () {
        function IA(game) {
            IA.currentInstance = this;
            this.game = game;
        }
        IA.prototype.getLaunchVelocity = function () {
            var dx = BasketChamps.StageContainer.currentInstance.ball.initialX - (BasketChamps.StageContainer.currentInstance.basket.hoop.body.x + 86);
            var dy = BasketChamps.StageContainer.currentInstance.ball.initialY - (BasketChamps.StageContainer.currentInstance.basket.hoop.body.y + 127);
            if (BasketChamps.StageContainer.currentInstance.basketFront.move_up === -1) {
                dy += 50;
            }
            var rand = Math.floor(Math.random() * 100);
            var rand2 = Math.floor(Math.random() * 2);
            if (rand2 === 0) {
                rand2 = -1;
            }
            if (rand < 100 - (BasketChamps.GameVars.getInstance().numMatch * 8)) {
                dy += rand2 * Math.floor((Math.random() * 50) + 20);
                dx += Math.floor((Math.random() * 50) + 20);
            }
            var vMin = Math.sqrt(this.game.physics.box2d.gravity.y * (dy + Math.sqrt(dx * dx + dy * dy)));
            var inclinationAngle = Math.atan((dy + Math.sqrt(dx * dx + dy * dy)) / dx);
            var angle = inclinationAngle * (180 / Math.PI);
            if (BasketChamps.StageContainer.currentInstance.ball.initialX < 300 && BasketChamps.StageContainer.currentInstance.ball.initialY > (BasketChamps.StageContainer.currentInstance.basket.hoop.body.y + 127)) {
                angle += 300 / (BasketChamps.StageContainer.currentInstance.ball.initialX - (BasketChamps.StageContainer.currentInstance.basket.hoop.body.y + 127));
            }
            var velocity = this.game.physics.arcade.velocityFromAngle(angle, vMin);
            if (BasketChamps.StageContainer.currentInstance.ball.initialX < 300 && BasketChamps.StageContainer.currentInstance.ball.initialY > (BasketChamps.StageContainer.currentInstance.basket.hoop.body.y + 127)) {
                velocity.y += 300 / (BasketChamps.StageContainer.currentInstance.ball.initialX - (BasketChamps.StageContainer.currentInstance.basket.hoop.body.y + 127));
            }
            return { x: -velocity.x, y: -velocity.y };
        };
        return IA;
    }());
    BasketChamps.IA = IA;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var MatchManager = (function () {
        function MatchManager() {
            MatchManager.currentInstance = this;
            HTML5API_levelStarted();
            BasketChamps.GameVars.getInstance().playerPoints = 0;
            BasketChamps.GameVars.getInstance().AIPoints = 0;
            BasketChamps.GameVars.getInstance().round = 0;
            BasketChamps.GameVars.getInstance().isPlayerTurn = true;
            if (BasketChamps.GameVars.getInstance().getLocalStorageData("bc_trajectoryHelp") === "3") {
                BasketChamps.GameVars.getInstance().trajectoryHelp = false;
            }
            else {
                BasketChamps.GameVars.getInstance().trajectoryHelp = true;
            }
            this.count = 0;
            this.lastPoints = false;
            this.onSuddenDeath = false;
            this.scoredSuddenDeath = false;
            this.rebounds = 0;
        }
        MatchManager.prototype.destroy = function () {
            MatchManager.currentInstance = null;
        };
        MatchManager.prototype.update = function () {
            if (this.count > 30) {
                this.showWinner(this.scoredSuddenDeath);
            }
            else if (this.count > 0) {
                this.count++;
            }
        };
        MatchManager.prototype.changeFlag = function () {
            if (!BasketChamps.GameVars.getInstance().matchFinished) {
                BasketChamps.BackgroundManager.currentInstance.changeFlags(BasketChamps.GameVars.getInstance().isPlayerTurn);
            }
        };
        MatchManager.prototype.turnTab = function (value) {
            BasketChamps.GUI.currentInstance.changeTurnTab(value);
        };
        MatchManager.prototype.startTurnTab = function () {
            BasketChamps.GUI.currentInstance.startTurnTab();
        };
        MatchManager.prototype.onBasketMissed = function () {
            if (BasketChamps.GameVars.getInstance().round !== BasketChamps.GameConstants.NUM_ROUNDS || BasketChamps.GameVars.getInstance().isPlayerTurn) {
                BasketChamps.BackgroundManager.currentInstance.onBasketMissed();
            }
            if (!BasketChamps.GameVars.getInstance().isPlayerTurn) {
                BasketChamps.GameVars.getInstance().round++;
                if (BasketChamps.GameVars.getInstance().round === BasketChamps.GameConstants.NUM_ROUNDS) {
                    this.showWinner(false);
                }
            }
            else {
                BasketChamps.AchievementsManager.getInstance().playerShot(false);
            }
            BasketChamps.GameVars.getInstance().isPlayerTurn = !BasketChamps.GameVars.getInstance().isPlayerTurn;
            BasketChamps.BasketballCourtState.currentInstance.onBasketMissed();
            BasketChamps.StageContainer.currentInstance.game.time.events.add(1000, function () {
                if (!this.lastPoints) {
                    MatchManager.currentInstance.updateSlots(false);
                }
                else if (!this.onSuddenDeath) {
                    BasketChamps.BackgroundManager.currentInstance.slotsManager.finalRounds(false);
                }
            }, this);
        };
        MatchManager.prototype.onBaskedScored = function () {
            BasketChamps.StageContainer.currentInstance.basketNet.playBasket();
            BasketChamps.StageContainer.currentInstance.efectsContainer.initBasketEfect(BasketChamps.StageContainer.currentInstance.ball.x, BasketChamps.StageContainer.currentInstance.ball.y);
            if (BasketChamps.GameVars.getInstance().round !== BasketChamps.GameConstants.NUM_ROUNDS || BasketChamps.GameVars.getInstance().isPlayerTurn) {
                BasketChamps.BackgroundManager.currentInstance.onBasketScored();
            }
            if (BasketChamps.GameVars.getInstance().isPlayerTurn) {
                BasketChamps.AudioManager.getInstance().playSound("basket_2");
                BasketChamps.AchievementsManager.getInstance().playerShot(true);
                if (this.rebounds >= 3) {
                    BasketChamps.EventsLayer.currentInstance.showDoge();
                }
                BasketChamps.BackgroundManager.currentInstance.winPlayer();
                BasketChamps.GameVars.getInstance().playerPoints++;
                if (!BasketChamps.TournamentManager.getInstance().noEasyMode()) {
                    BasketChamps.TournamentManager.getInstance().changeEasyMode();
                }
            }
            else {
                BasketChamps.AudioManager.getInstance().playSound("basket");
                BasketChamps.GameVars.getInstance().AIPoints++;
                BasketChamps.GameVars.getInstance().round++;
                BasketChamps.BackgroundManager.currentInstance.winAI();
                if (BasketChamps.GameVars.getInstance().round === BasketChamps.GameConstants.NUM_ROUNDS) {
                    this.showWinner(true);
                }
            }
            BasketChamps.BasketballCourtState.currentInstance.onBasketScored();
            BasketChamps.GameVars.getInstance().isPlayerTurn = !BasketChamps.GameVars.getInstance().isPlayerTurn;
            BasketChamps.StageContainer.currentInstance.courtWalls.resetRebounds();
            BasketChamps.StageContainer.currentInstance.game.time.events.add(1000, function () {
                if (!this.lastPoints) {
                    MatchManager.currentInstance.updateSlots(true);
                }
                else if (!this.onSuddenDeath) {
                    BasketChamps.BackgroundManager.currentInstance.slotsManager.finalRounds(true);
                }
            }, this);
        };
        MatchManager.prototype.fireBall = function () {
            BasketChamps.StageContainer.currentInstance.ball.fireBall();
        };
        MatchManager.prototype.countReady = function () {
            BasketChamps.HUD.currentInstance.removeTeamNames();
            if (BasketChamps.GameVars.getInstance().numMatch >= 5) {
                BasketChamps.GameVars.getInstance().resetTournament = true;
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT, JSON.stringify(BasketChamps.GameVars.getInstance().resetTournament));
            }
            BasketChamps.StageContainer.currentInstance.game.time.events.add(200, function () {
                BasketChamps.StageContainer.currentInstance.efectsContainer.initEfectBall(BasketChamps.StageContainer.currentInstance.ball.body.x, BasketChamps.StageContainer.currentInstance.ball.body.y);
                MatchManager.currentInstance.rebounds = 0;
            }, this);
            var num = 1000;
            if (this.lastPoints) {
                num = 1200;
            }
            BasketChamps.StageContainer.currentInstance.game.time.events.add(num, function () {
                BasketChamps.StageContainer.currentInstance.trajectory.visible = true;
                BasketChamps.StageContainer.currentInstance.ball.resume();
                BasketChamps.StageContainer.currentInstance.trajectory.resume();
                BasketChamps.StageContainer.currentInstance.courtWalls.resetRebounds();
                BasketChamps.StageContainer.currentInstance.reflectionBall.visible = true;
                this.startMoveBasket();
                if (BasketChamps.GameVars.getInstance().numMatch >= 5) {
                    BasketChamps.BackgroundManager.currentInstance.spectatorsManager.wave();
                }
                MatchManager.currentInstance.updateSlots(true);
            }, this);
        };
        MatchManager.prototype.showWinner = function (scored) {
            if (this.count > 30 || !scored) {
                this.count = 0;
                if (BasketChamps.GameVars.getInstance().playerPoints > BasketChamps.GameVars.getInstance().AIPoints) {
                    BasketChamps.GUI.currentInstance.stopTurnTab();
                    BasketChamps.AchievementsManager.getInstance().matchEnded();
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        BasketChamps.BasketballCourtState.currentInstance.tournamentWonLayer.showWinner();
                    }
                    else {
                        if ((BasketChamps.GameVars.getInstance().playerPoints === 5 && BasketChamps.GameVars.getInstance().AIPoints === 0) || BasketChamps.GameVars.getInstance().playerPoints >= 9) {
                            BasketChamps.HUD.currentInstance.finishMatch.showWinner("winner", 8000);
                            BasketChamps.AudioManager.getInstance().playSound("end_match", true);
                            BasketChamps.EventsLayer.currentInstance.showSnoop();
                        }
                        else {
                            BasketChamps.HUD.currentInstance.finishMatch.showWinner("winner", 1000);
                            BasketChamps.AudioManager.getInstance().playSound("end_match", true);
                        }
                        BasketChamps.StageContainer.currentInstance.efectsContainer.initConfetti(true);
                        BasketChamps.AudioManager.getInstance().playSound("celebration_2");
                        BasketChamps.BackgroundManager.currentInstance.spectatorsManager.onMatchWon();
                        BasketChamps.TournamentManager.getInstance().matchResults();
                    }
                    if (BasketChamps.GameVars.getInstance().numMatch <= 5) {
                        BasketChamps.GameVars.getInstance().matchResults[BasketChamps.GameVars.getInstance().numMatch - 1] = 1;
                        BasketChamps.TournamentManager.getInstance().setResultsMatchs();
                    }
                    BasketChamps.StageContainer.currentInstance.efectsContainer.finishEfectBall(BasketChamps.StageContainer.currentInstance.ball.body.x, BasketChamps.StageContainer.currentInstance.ball.body.y);
                    BasketChamps.StageContainer.currentInstance.ball.visible = false;
                    BasketChamps.StageContainer.currentInstance.reflectionBall.visible = false;
                    BasketChamps.StageContainer.currentInstance.trajectory.visible = false;
                    BasketChamps.GameVars.getInstance().matchFinished = true;
                    this.resetBasket();
                }
                else if (BasketChamps.GameVars.getInstance().playerPoints < BasketChamps.GameVars.getInstance().AIPoints) {
                    BasketChamps.GUI.currentInstance.stopTurnTab();
                    if (BasketChamps.GameVars.getInstance().numMatch < 5) {
                        BasketChamps.HUD.currentInstance.finishMatch.showWinner("loser", 1000);
                        BasketChamps.StageContainer.currentInstance.efectsContainer.initConfetti(false);
                        BasketChamps.AudioManager.getInstance().playSound("end_match", true);
                        BasketChamps.BackgroundManager.currentInstance.spectatorsManager.onMatchLosed();
                        BasketChamps.TournamentManager.getInstance().matchResults();
                        BasketChamps.GameVars.getInstance().matchResults[BasketChamps.GameVars.getInstance().numMatch - 1] = -1;
                        BasketChamps.TournamentManager.getInstance().setResultsMatchs();
                    }
                    else {
                        BasketChamps.AudioManager.getInstance().playSound("end_match", true);
                        BasketChamps.BasketballCourtState.currentInstance.gameOverLayer.showGameOver();
                        BasketChamps.BackgroundManager.currentInstance.spectatorsManager.pause();
                    }
                    BasketChamps.StageContainer.currentInstance.efectsContainer.finishEfectBall(BasketChamps.StageContainer.currentInstance.ball.body.x, BasketChamps.StageContainer.currentInstance.ball.body.y);
                    BasketChamps.StageContainer.currentInstance.ball.visible = false;
                    BasketChamps.StageContainer.currentInstance.reflectionBall.visible = false;
                    BasketChamps.StageContainer.currentInstance.trajectory.visible = false;
                    BasketChamps.GameVars.getInstance().matchFinished = true;
                    this.resetBasket();
                }
                else {
                    if (!this.lastPoints) {
                        this.lastPoints = true;
                        this.onSuddenDeath = true;
                        BasketChamps.BackgroundManager.currentInstance.slotsManager.startSuddenDeath(scored);
                        BasketChamps.StageContainer.currentInstance.efectsContainer.finishEfectBall(BasketChamps.StageContainer.currentInstance.ball.body.x, BasketChamps.StageContainer.currentInstance.ball.body.y);
                        BasketChamps.StageContainer.currentInstance.ball.visible = false;
                        BasketChamps.StageContainer.currentInstance.reflectionBall.visible = false;
                        BasketChamps.StageContainer.currentInstance.trajectory.visible = false;
                        BasketChamps.StageContainer.currentInstance.game.time.events.add(200, function () {
                            BasketChamps.GUI.currentInstance.showSuddenDeath();
                            BasketChamps.StageContainer.currentInstance.ball.firstShotSudden = true;
                        }, this);
                    }
                    BasketChamps.GameVars.getInstance().round--;
                }
            }
            else if (this.count === 0) {
                this.count++;
                this.scoredSuddenDeath = scored;
            }
            BasketChamps.GUI.currentInstance.onMatchEnd();
        };
        MatchManager.prototype.matchReady = function () {
            if (BasketChamps.GameVars.getInstance().numMatch === 0) {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(false);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(false);
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 1) {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(true);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(false);
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 2) {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(false);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(true);
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 3) {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(true);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(false);
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 4) {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(false);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(true);
            }
            else {
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostVert(true);
                BasketChamps.StageContainer.currentInstance.basket.post.changeSpritePostHor(true);
            }
            BasketChamps.HUD.currentInstance.matchReady();
            BasketChamps.GUI.currentInstance.matchReady();
            BasketChamps.BackgroundManager.currentInstance.matchReady();
            this.newMatch();
        };
        MatchManager.prototype.showClassification = function (win) {
            BasketChamps.BasketballCourtState.currentInstance.classificationLayer.showClassification(win);
        };
        MatchManager.prototype.newMatch = function () {
            this.lastPoints = false;
            BasketChamps.GameVars.getInstance().playerPoints = 0;
            BasketChamps.GameVars.getInstance().AIPoints = 0;
            BasketChamps.GameVars.getInstance().round = 0;
            BasketChamps.GameVars.getInstance().isPlayerTurn = true;
            BasketChamps.BackgroundManager.currentInstance.slotsManager.resetSlots();
            BasketChamps.BackgroundManager.currentInstance.scoreBoard.updateScore();
        };
        MatchManager.prototype.stopMovHor = function () {
            BasketChamps.GameConstants.MOV_HOR = false;
            BasketChamps.StageContainer.currentInstance.basket.post.wheels.animations.stop();
        };
        MatchManager.prototype.stopMovVert = function () {
            BasketChamps.GameConstants.MOV_VER = false;
        };
        MatchManager.prototype.startMovHor = function () {
            BasketChamps.GameConstants.MOV_HOR = true;
            BasketChamps.StageContainer.currentInstance.basket.post.wheels.play("anim1", 25, true);
        };
        MatchManager.prototype.startMovVert = function () {
            BasketChamps.GameConstants.MOV_VER = true;
        };
        MatchManager.prototype.resetBasket = function () {
            this.stopMovHor();
            this.stopMovVert();
            BasketChamps.StageContainer.currentInstance.basket.backboard.resetBasket();
            BasketChamps.StageContainer.currentInstance.basket.hoop.resetBasket();
            BasketChamps.StageContainer.currentInstance.basketFront.resetBasket();
            BasketChamps.StageContainer.currentInstance.basket.post.resetBasket();
            BasketChamps.StageContainer.currentInstance.hoopFront.resetBasket();
        };
        MatchManager.prototype.startMoveBasket = function () {
            if (BasketChamps.GameVars.getInstance().numMatch === 0) {
                this.resetBasket();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 1) {
                BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_SLOW;
                this.startMovVert();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 2) {
                BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_SLOW;
                this.startMovHor();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 3) {
                BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_FAST;
                this.startMovVert();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 4) {
                BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_FAST;
                this.startMovHor();
            }
            else {
                if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                    BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_SLOW;
                    BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_SLOW;
                }
                else if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                    BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_SLOW;
                    BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_FAST;
                }
                else if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                    BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_FAST;
                    BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_SLOW;
                }
                else if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                    BasketChamps.GameVars.getInstance().currentHorizontalMovement = BasketChamps.GameConstants.HOR_MOV_FAST;
                    BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_FAST;
                }
                this.startMovVert();
                this.startMovHor();
            }
        };
        MatchManager.prototype.updateSlots = function (scored) {
            BasketChamps.BackgroundManager.currentInstance.slotsManager.updateSlots(scored);
        };
        MatchManager.prototype.hideSuddenDeath = function () {
            this.startMoveBasket();
            BasketChamps.BackgroundManager.currentInstance.spectatorsManager.resume();
            BasketChamps.StageContainer.currentInstance.resume();
            BasketChamps.BackgroundManager.currentInstance.slotsManager.finishSuddenDeath();
            BasketChamps.StageContainer.currentInstance.reflectionBall.visible = true;
            BasketChamps.StageContainer.currentInstance.trajectory.visible = true;
            this.onSuddenDeath = false;
            if (BasketChamps.TournamentManager.getInstance().firstSuddenDeath) {
                BasketChamps.GameVars.getInstance().setLocalStorageData("bc_firstSuddenDeath", "1");
                BasketChamps.GameVars.getInstance().firstSuddenDeath = BasketChamps.TournamentManager.getInstance().firstSuddenDeath();
            }
        };
        MatchManager.prototype.startSuddenDeath = function () {
            BasketChamps.GameVars.getInstance().round = 4;
        };
        return MatchManager;
    }());
    BasketChamps.MatchManager = MatchManager;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SelectTeamLayer = (function (_super) {
        __extends(SelectTeamLayer, _super);
        function SelectTeamLayer(game) {
            var _this = _super.call(this, game, null, "select-team-layer", false) || this;
            var background = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black_square"));
            background.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            background.alpha = 0.7;
            background.inputEnabled = true;
            background.events.onInputDown.add(_this.onClickBackground, _this);
            _this.add(background);
            _this.tournamentBackground = new BasketChamps.TournamentBackground(_this.game);
            _this.addChild(_this.tournamentBackground);
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = "#ffffff";
            reusableBmd.ctx.fill();
            _this.groupTitle = new Phaser.Text(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10, 38, "SELECT YOUR TEAM", { font: "35px Jomhuria", fontWeight: "400" });
            _this.groupTitle.addColor("#ffffff", 0);
            _this.groupTitle.anchor.set(.5);
            _this.add(_this.groupTitle);
            _this.groupA = new Phaser.Text(_this.game, 90, 75, "GROUP A", { font: "25px Jomhuria", fontWeight: "400" });
            _this.groupA.anchor.set(.5);
            _this.groupA.addColor("#6f9da8", 0);
            _this.add(_this.groupA);
            _this.groupB = new Phaser.Text(_this.game, 217, 75, "GROUP B", { font: "25px Jomhuria", fontWeight: "400" });
            _this.groupB.anchor.set(.5);
            _this.groupB.addColor("#6f9da8", 0);
            _this.add(_this.groupB);
            _this.groupC = new Phaser.Text(_this.game, 342, 75, "GROUP C", { font: "25px Jomhuria", fontWeight: "400" });
            _this.groupC.anchor.set(.5);
            _this.groupC.addColor("#6f9da8", 0);
            _this.add(_this.groupC);
            _this.groupD = new Phaser.Text(_this.game, 464, 75, "GROUP D", { font: "25px Jomhuria", fontWeight: "400" });
            _this.groupD.anchor.set(.5);
            _this.groupD.addColor("#6f9da8", 0);
            _this.add(_this.groupD);
            _this.teamsButtons = new Array();
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 6; j++) {
                    var team = new BasketChamps.TeamGroup(_this.game, (j + i * 6), (i * 124) + 95, (j * 42) + 110);
                    _this.teamsButtons.push(team);
                }
            }
            for (var i = 0; i < 24; i++) {
                _this.add(_this.teamsButtons[i]);
            }
            _this.playButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH - 55, 345, "texture_atlas_1", _this.onPlayClicked, _this);
            _this.playButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.playButton.anchor.set(.5);
            _this.playButton.scale.set(0);
            _this.playButton.visible = false;
            _this.add(_this.playButton);
            if (BasketChamps.GameVars.getInstance().myTeamID !== 0) {
                BasketChamps.MatchManager.currentInstance.showClassification(3);
                _this.visible = false;
            }
            var separator1 = new Phaser.Sprite(_this.game, 153, 50, reusableBmd);
            separator1.scale.setTo(2 / 100, 309 / 100);
            separator1.tint = 0x54778c;
            separator1.alpha = .3;
            _this.add(separator1);
            var separator2 = new Phaser.Sprite(_this.game, 153 + 124, 50, reusableBmd);
            separator2.scale.setTo(2 / 100, 309 / 100);
            separator2.tint = 0x54778c;
            separator2.alpha = .3;
            _this.add(separator2);
            var separator3 = new Phaser.Sprite(_this.game, 153 + 124 * 2, 50, reusableBmd);
            separator3.scale.setTo(2 / 100, 309 / 100);
            separator3.tint = 0x54778c;
            separator3.alpha = .3;
            _this.add(separator3);
            BasketChamps.AudioManager.getInstance().playSound("loop_menus", true);
            return _this;
        }
        SelectTeamLayer.prototype.highlightGroup = function (value, black) {
            if (black) {
                if (value === 0) {
                    this.groupA.addColor("#15212a", 0);
                }
                else if (value === 1) {
                    this.groupB.addColor("#15212a", 0);
                }
                else if (value === 2) {
                    this.groupC.addColor("#15212a", 0);
                }
                else if (value === 3) {
                    this.groupD.addColor("#15212a", 0);
                }
            }
            else {
                if (value === 0) {
                    this.groupA.addColor("#6f9da8", 0);
                }
                else if (value === 1) {
                    this.groupB.addColor("#6f9da8", 0);
                }
                else if (value === 2) {
                    this.groupC.addColor("#6f9da8", 0);
                }
                else if (value === 3) {
                    this.groupD.addColor("#6f9da8", 0);
                }
            }
        };
        SelectTeamLayer.prototype.showPlay = function () {
            BasketChamps.TournamentManager.getInstance().selectMyTeam(this.teamId);
            BasketChamps.MatchManager.currentInstance.showClassification(3);
            this.visible = false;
        };
        SelectTeamLayer.prototype.onPlayClicked = function () {
            BasketChamps.TournamentManager.getInstance().selectMyTeam(this.teamId);
            BasketChamps.MatchManager.currentInstance.showClassification(3);
            this.visible = false;
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        SelectTeamLayer.prototype.onClickBackground = function () {
        };
        SelectTeamLayer.prototype.refreshButtons = function () {
            for (var i = 0; i < 24; i++) {
                this.teamsButtons[i].refreshButton();
            }
        };
        SelectTeamLayer.prototype.setTeamId = function (value) {
            this.teamId = value;
        };
        SelectTeamLayer.prototype.getTeamId = function () {
            return this.teamId;
        };
        return SelectTeamLayer;
    }(Phaser.Group));
    BasketChamps.SelectTeamLayer = SelectTeamLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TeamGroup = (function (_super) {
        __extends(TeamGroup, _super);
        function TeamGroup(game, teamId, x, y) {
            var _this = _super.call(this, game, null, "team-group", false) || this;
            _this.x = x;
            _this.y = y;
            _this.teamId = teamId;
            _this.button = new Phaser.Button(_this.game, -3, 0, "texture_atlas_1", _this.onTeamClicked, _this);
            _this.button.setFrames("button-team-on.png", "button-team-off.png", "button-team-on.png", "button-team-off.png");
            _this.button.anchor.set(.5);
            _this.button.alpha = .2;
            _this.add(_this.button);
            if (!BasketChamps.GameVars.getInstance().teamsData[teamId].name2) {
                _this.teamLabel = new Phaser.Text(_this.game, -5, 3, BasketChamps.GameVars.getInstance().teamsData[teamId].name, { font: "20px Jomhuria", fontWeight: "400" });
                _this.teamLabel.addColor("#6f9da8", 0);
                _this.teamLabel.anchor.set(0, .5);
                _this.add(_this.teamLabel);
            }
            else {
                _this.teamLabel = new Phaser.Text(_this.game, -5, -4, BasketChamps.GameVars.getInstance().teamsData[teamId].name, { font: "20px Jomhuria", fontWeight: "400" });
                _this.teamLabel.addColor("#6f9da8", 0);
                _this.teamLabel.anchor.set(0, .5);
                _this.add(_this.teamLabel);
                _this.teamLabel2 = new Phaser.Text(_this.game, -5, 10, BasketChamps.GameVars.getInstance().teamsData[teamId].name2, { font: "20px Jomhuria", fontWeight: "400" });
                _this.teamLabel2.addColor("#6f9da8", 0);
                _this.teamLabel2.anchor.set(0, .5);
                _this.add(_this.teamLabel2);
            }
            var id = teamId + 1;
            var name = "flag_" + id + ".png";
            _this.flag = new Phaser.Sprite(_this.game, -35, 0, "texture_atlas_1", name);
            _this.flag.anchor.set(.5);
            _this.flag.scale.set(.55);
            _this.flag.alpha = 0.7;
            _this.add(_this.flag);
            _this.light = new Phaser.Sprite(_this.game, -35, 0, "texture_atlas_2", "frame_player.png");
            _this.light.anchor.set(.5);
            _this.light.scale.set(.55);
            _this.light.visible = false;
            _this.add(_this.light);
            _this.button.onInputOver.add(_this.over, _this);
            _this.button.onInputOut.add(_this.out, _this);
            return _this;
        }
        TeamGroup.prototype.over = function () {
            this.flag.alpha = 1;
            if (BasketChamps.GameVars.getInstance().teamsData[this.teamId].name2 == null) {
                this.teamLabel.addColor("#15212a", 0);
            }
            else {
                this.teamLabel.addColor("#15212a", 0);
                this.teamLabel2.addColor("#15212a", 0);
            }
            BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.highlightGroup(Math.floor(this.teamId / 6), true);
        };
        TeamGroup.prototype.out = function () {
            if (this.teamId + 1 !== BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.getTeamId()) {
                this.flag.alpha = .7;
                if (BasketChamps.GameVars.getInstance().teamsData[this.teamId].name2 == null) {
                    this.teamLabel.addColor("#6f9da8", 0);
                }
                else {
                    this.teamLabel.addColor("#6f9da8", 0);
                    this.teamLabel2.addColor("#6f9da8", 0);
                }
                BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.highlightGroup(Math.floor(this.teamId / 6), false);
            }
        };
        TeamGroup.prototype.onTeamClicked = function () {
            BasketChamps.AudioManager.getInstance().playSound("click");
            BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.setTeamId(this.teamId + 1);
            BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.refreshButtons();
            BasketChamps.BasketballCourtState.currentInstance.selectTeamLayer.showPlay();
            this.game.add.tween(this.flag.scale)
                .to({ x: .6, y: .6 }, 400, Phaser.Easing.Elastic.Out, true);
            this.game.add.tween(this.light.scale)
                .to({ x: .6, y: .6 }, 400, Phaser.Easing.Elastic.Out, true);
            this.light.visible = true;
            this.flag.alpha = 1;
            this.button.alpha = .6;
            if (BasketChamps.GameVars.getInstance().teamsData[this.teamId].name2 == null) {
                this.teamLabel.addColor("#15212a", 0);
            }
            else {
                this.teamLabel.addColor("#15212a", 0);
                this.teamLabel2.addColor("#15212a", 0);
            }
            this.button.setFrames("button-team-on2.png", "button-team-on2.png", "button-team-on2.png", "button-team-on2.png");
        };
        TeamGroup.prototype.refreshButton = function () {
            this.flag.scale.set(.55);
            this.light.scale.set(.55);
            this.light.visible = false;
            this.flag.alpha = .7;
            this.button.alpha = .2;
            if (!BasketChamps.GameVars.getInstance().teamsData[this.teamId].name2) {
                this.teamLabel.addColor("#6f9da8", 0);
            }
            else {
                this.teamLabel.addColor("#6f9da8", 0);
                this.teamLabel2.addColor("#6f9da8", 0);
            }
            if (this.game.device.desktop) {
                this.button.setFrames("button-team-on.png", "button-team-off.png", "button-team-on.png", "button-team-off.png");
            }
            else {
                this.button.setFrames("button-team-off.png", "button-team-off.png", "button-team-off.png", "button-team-off.png");
            }
        };
        return TeamGroup;
    }(Phaser.Group));
    BasketChamps.TeamGroup = TeamGroup;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TournamentBackground = (function (_super) {
        __extends(TournamentBackground, _super);
        function TournamentBackground(game) {
            var _this = _super.call(this, game, null, "tournament-background", false) || this;
            var cornerBmd = game.add.bitmapData(10, 10);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, 10, 0, Math.PI);
            cornerBmd.ctx.fillStyle = "#ffffff";
            cornerBmd.ctx.fill();
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = "#ffffff";
            reusableBmd.ctx.fill();
            var corner;
            var rectangle;
            corner = new Phaser.Sprite(game, 35, 30, cornerBmd);
            corner.tint = 0x54778c;
            corner.alpha = 1;
            corner.angle = 180;
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 520, 30, cornerBmd);
            corner.tint = 0x54778c;
            corner.alpha = 1;
            corner.angle = 270;
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 35, 20, reusableBmd);
            rectangle.scale.setTo(485 / 100, 10 / 100);
            rectangle.tint = 0x54778c;
            rectangle.alpha = 1;
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 30, reusableBmd);
            rectangle.scale.setTo(505 / 100, 20 / 100);
            rectangle.tint = 0x54778c;
            rectangle.alpha = 1;
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 25, 50, reusableBmd);
            rectangle.scale.setTo(505 / 100, 299 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.add(rectangle);
            corner = new Phaser.Sprite(game, 35, 349, cornerBmd);
            corner.tint = 0xddf1f1;
            corner.alpha = 1;
            corner.angle = 90;
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 520, 349, cornerBmd);
            corner.tint = 0xddf1f1;
            corner.alpha = 1;
            corner.angle = 0;
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 35, 349, reusableBmd);
            rectangle.scale.setTo(485 / 100, 10 / 100);
            rectangle.tint = 0xddf1f1;
            rectangle.alpha = 1;
            _this.add(rectangle);
            return _this;
        }
        return TournamentBackground;
    }(Phaser.Group));
    BasketChamps.TournamentBackground = TournamentBackground;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TournamentLayer = (function (_super) {
        __extends(TournamentLayer, _super);
        function TournamentLayer(game) {
            var _this = _super.call(this, game, null, "tournament-layer", false) || this;
            _this.red = 0xFF043A;
            _this.green = 0x00D200;
            _this.gray = 0xAFC6CB;
            _this.flagsAlpha = 0.75;
            _this.visible = false;
            _this.pivot.set(BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT / 2);
            _this.x = BasketChamps.GameConstants.GAME_WIDTH / 2;
            _this.y = BasketChamps.GameConstants.GAME_HEIGHT / 2;
            _this.playClicked = false;
            return _this;
        }
        TournamentLayer.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.visible) {
                this.rays.angle += 1;
            }
        };
        TournamentLayer.prototype.updateTournament = function () {
            this.removeAll();
            this.background = new Phaser.Sprite(this.game, 0, 0, this.game.cache.getBitmapData("black_square"));
            this.background.scale.set(BasketChamps.GameConstants.GAME_WIDTH / 16, BasketChamps.GameConstants.GAME_HEIGHT / 16);
            this.background.alpha = 0.7;
            this.background.inputEnabled = true;
            this.background.events.onInputDown.add(this.onClickBackground, this);
            this.add(this.background);
            this.tournamentBackground = new BasketChamps.TournamentBackground(this.game);
            this.addChild(this.tournamentBackground);
            this.classificactionBadge = new Phaser.Image(this.game, 90, 35, "texture_atlas_1", "badge_classification.png");
            this.classificactionBadge.anchor.set(.5);
            this.addChild(this.classificactionBadge);
            if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                this.group = new Phaser.Text(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10, 38, "TOURNAMENT - K.O. PHASE", { font: "35px Jomhuria", fontWeight: "400" });
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                this.group = new Phaser.Text(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10, 38, "TOURNAMENT - QUARTERFINALS", { font: "30px Jomhuria", fontWeight: "400" });
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                this.group = new Phaser.Text(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10, 38, "TOURNAMENT - SEMIFINALS", { font: "30px Jomhuria", fontWeight: "400" });
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                this.group = new Phaser.Text(this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 10, 38, "TOURNAMENT - FINAL", { font: "35px Jomhuria", fontWeight: "400" });
            }
            this.group.addColor("#ffffff", 0);
            this.group.anchor.set(.5);
            this.add(this.group);
            this.playButton = new Phaser.Button(this.game, BasketChamps.GameConstants.GAME_WIDTH - 55, 345, "texture_atlas_1", this.onPlayClicked, this);
            this.playButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            this.playButton.anchor.set(.5);
            this.playButton.scale.set(0);
            this.playButton.visible = false;
            this.add(this.playButton);
            this.drawOct();
            this.drawCuart();
            this.drawSem();
            this.drawFinal();
            this.rays = new Phaser.Sprite(this.game, 280, 213, "texture_atlas_1", "rays_final_match.png");
            this.rays.anchor.set(.5);
            this.rays.scale.set(0);
            this.addChild(this.rays);
            if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                this.animateAll();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                this.animateLineOct();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                this.animateLineCuart();
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                this.animateLineSem();
            }
            else {
                this.game.time.events.add(500, function () {
                    this.playVisible();
                }, this);
            }
            this.vsText = new Phaser.Text(this.game, 280, 213, "VS", { font: "35px Jomhuria", fontWeight: "400" });
            this.vsText.addColor("#54778c", 0);
            this.vsText.anchor.set(.5);
            this.vsText.scale.set(0);
            this.add(this.vsText);
        };
        TournamentLayer.prototype.animateAll = function () {
            var delay = 500;
            this.group.alpha = 0;
            var framePlayer = new Phaser.Sprite(this.game, 75, 81, "texture_atlas_2", "frame_player.png");
            framePlayer.anchor.set(.5);
            framePlayer.scale.set(.65);
            framePlayer.alpha = 0;
            this.addChild(framePlayer);
            this.game.add.tween(this.group)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(framePlayer)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay);
            for (var i = 0; i < 8; i++) {
                if (i !== 0) {
                    this.tournamentTeamsOct1[i].alpha = 0;
                    this.game.add.tween(this.tournamentTeamsOct1[i])
                        .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay);
                }
                this.tournamentTeamsOct2[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsOct2[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay);
            }
            for (var i = 0; i < 4; i++) {
                this.tournamentTeamsCuart1[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsCuart1[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
                this.tournamentTeamsCuart2[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsCuart2[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2);
            }
            for (var i = 0; i < 2; i++) {
                this.tournamentTeamsSem1[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsSem1[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2.5);
                this.tournamentTeamsSem2[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsSem2[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay * 2.5);
                this.tournamentTeamsFinal[i].alpha = 0;
                this.game.add.tween(this.tournamentTeamsFinal[i])
                    .to({ alpha: .8 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3);
            }
            this.linesOct1.alpha = 0;
            this.game.add.tween(this.linesOct1)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5);
            this.linesOct2.alpha = 0;
            this.game.add.tween(this.linesOct2)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5);
            this.linesCuart1.alpha = 0;
            this.game.add.tween(this.linesCuart1)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5);
            this.linesCuart2.alpha = 0;
            this.game.add.tween(this.linesCuart2)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5);
            this.linesSem1.alpha = 0;
            this.game.add.tween(this.linesSem1)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5);
            this.linesSem2.alpha = 0;
            this.game.add.tween(this.linesSem2)
                .to({ alpha: 1 }, delay, Phaser.Easing.Cubic.Out, true, delay * 3.5)
                .onComplete.add(function () {
                this.playVisible();
            }, this);
        };
        TournamentLayer.prototype.playVisible = function () {
            this.playButton.visible = true;
            this.playClicked = false;
            this.game.add.tween(this.playButton.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true)
                .onComplete.add(function () {
                this.pulseTween = this.game.add.tween(this.playButton.scale);
                this.pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                this.pulseTween.delay(50);
                this.pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                this.pulseTween.loop();
                this.pulseTween.start();
            }, this);
        };
        TournamentLayer.prototype.onPlayClicked = function () {
            if (!this.playClicked) {
                this.playClicked = true;
                if (this.pulseTween !== undefined) {
                    this.pulseTween.stop();
                }
                this.game.add.tween(this.playButton.scale)
                    .to({ x: 0, y: 0 }, 650, Phaser.Easing.Elastic.In, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.background)
                        .to({ alpha: 0 }, 500, Phaser.Easing.Linear.None, true, 300)
                        .onComplete.add(function () {
                        BasketChamps.MatchManager.currentInstance.matchReady();
                        this.game.add.tween(this)
                            .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true);
                        this.game.add.tween(this.scale)
                            .to({ x: 0, y: 0 }, 500, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            this.visible = false;
                            this.scale.set(1);
                            this.alpha = 1;
                            this.background.alpha = .7;
                            this.playButton.scale.set(1);
                        }, this);
                    }, this);
                }, this);
                BasketChamps.AudioManager.getInstance().playSound("loop_torneo", true);
                BasketChamps.AudioManager.getInstance().playSound("click");
            }
        };
        TournamentLayer.prototype.onClickBackground = function () {
        };
        TournamentLayer.prototype.showTournament = function () {
            this.visible = true;
            this.updateTournament();
        };
        TournamentLayer.prototype.drawOct = function () {
            this.tournamentTeamsOct1 = new Array();
            this.tournamentTeamsOct2 = new Array();
            this.linesOct1 = new Phaser.Graphics(this.game, 0, 0);
            this.linesOct1.lineStyle(1, this.gray);
            this.linesOct2 = new Phaser.Graphics(this.game, 0, 0);
            this.linesOct2.lineStyle(1, this.gray);
            var num = 0;
            for (var i = 0; i < 8; i++) {
                if (i % 2 === 0 && i !== 0) {
                    num += 14;
                }
                var flag = "flag_" + BasketChamps.GameVars.getInstance().octFinal[i] + ".png";
                var team = new Phaser.Sprite(this.game, 75, 85 + num + 30 * i, "texture_atlas_1", flag);
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 5) {
                    team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 5);
                }
                else if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                    team.scale.set(.65);
                    team.y -= 4;
                }
                this.tournamentTeamsOct1.push(team);
                if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[i / 2] || BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[((i - 1) / 2)]) {
                    if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                        if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                            this.linesOct1.lineStyle(1, this.gray);
                            this.linesOct1.beginFill(this.gray, 1);
                        }
                        else {
                            this.linesOct1.lineStyle(1, this.green);
                            this.linesOct1.beginFill(this.green, 1);
                        }
                    }
                    else {
                        this.linesOct1.lineStyle(1, this.red);
                        this.linesOct1.beginFill(this.red, 1);
                    }
                    this.linesOct1.drawRect(75 + 20, 84 + 30 * i + num, 13, 2);
                    this.linesOct1.endFill();
                    this.linesOct1.lineStyle(1, this.gray);
                    this.linesOct1.beginFill(this.gray, 1);
                }
                else {
                    this.linesOct1.beginFill(this.gray, 1);
                    this.linesOct1.drawRect(75 + 20, 84 + 30 * i + num, 13, 2);
                }
                if (i % 2 === 0) {
                    if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[i / 2] || BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[((i - 1) / 2)]) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                                this.linesOct1.lineStyle(1, this.gray);
                                this.linesOct1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesOct1.lineStyle(1, this.green);
                                this.linesOct1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesOct1.lineStyle(1, this.red);
                            this.linesOct1.beginFill(this.red, 1);
                        }
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * i + num, 2, 15);
                        this.linesOct1.lineStyle(1, this.gray);
                        this.linesOct1.endFill();
                        this.linesOct1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * i + num, 2, 15);
                    }
                }
                else {
                    if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[i / 2] || BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().cuartFinal[((i - 1) / 2)]) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                                this.linesOct1.lineStyle(1, this.gray);
                                this.linesOct1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesOct1.lineStyle(1, this.green);
                                this.linesOct1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesOct1.lineStyle(1, this.red);
                            this.linesOct1.beginFill(this.red, 1);
                        }
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * i + num - 15, 2, 17);
                        this.linesOct1.lineStyle(1, this.gray);
                    }
                    else {
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * i + num - 15, 2, 17);
                    }
                    if (BasketChamps.GameVars.getInstance().numMatch > 5) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().octFinal[i - 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                                this.linesOct1.lineStyle(1, this.gray);
                                this.linesOct1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesOct1.lineStyle(1, this.green);
                                this.linesOct1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesOct1.lineStyle(1, this.red);
                            this.linesOct1.beginFill(this.red, 1);
                        }
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * (i - 1) + num + 15, 12, 2);
                        this.linesOct1.lineStyle(1, this.gray);
                        this.linesOct1.endFill();
                        this.linesOct1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesOct1.drawRect(75 + 20 + 13, 84 + 30 * (i - 1) + num + 15, 12, 2);
                    }
                }
                this.linesOct1.endFill();
            }
            this.add(this.linesOct1);
            for (var i = 0; i < 8; i++) {
                this.add(this.tournamentTeamsOct1[i]);
            }
            num = 0;
            for (var i = 0; i < 8; i++) {
                if (i % 2 === 0 && i !== 0) {
                    num += 14;
                }
                var aux = BasketChamps.GameVars.getInstance().octFinal[i + 8];
                var flag = "flag_" + aux + ".png";
                var team = new Phaser.Sprite(this.game, 480, 85 + num + 30 * i, "texture_atlas_1", flag);
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 5) {
                    team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 5);
                }
                else if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().myTeamID) {
                    team.scale.set(.65);
                }
                this.tournamentTeamsOct2.push(team);
                if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[(i + 8) / 2] || BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[((i + 8 - 1) / 2)]) {
                    if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().myTeamID) {
                        this.linesOct2.lineStyle(0, this.green);
                        this.linesOct2.beginFill(this.green, 0);
                    }
                    else {
                        this.linesOct2.lineStyle(1, this.red);
                        this.linesOct2.beginFill(this.red, 1);
                    }
                    this.linesOct2.drawRect(480 - 19 - 14, 84 + num + 30 * i, 13, 2);
                    this.linesOct2.endFill();
                    this.linesOct2.lineStyle(1, this.gray);
                    this.linesOct2.beginFill(this.gray, 1);
                }
                else {
                    this.linesOct2.beginFill(this.gray, 1);
                    this.linesOct2.drawRect(480 - 19 - 14, 84 + num + 30 * i, 13, 2);
                }
                if (i % 2 === 0) {
                    if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[(i + 8) / 2] || BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[((i + 8 - 1) / 2)]) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesOct2.lineStyle(0, this.green);
                            this.linesOct2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesOct2.lineStyle(1, this.red);
                            this.linesOct2.beginFill(this.red, 1);
                        }
                        this.linesOct2.drawRect(480 - 19 - 14, 84 + num + 30 * i, 2, 15);
                        this.linesOct2.lineStyle(1, this.gray);
                        this.linesOct2.endFill();
                        this.linesOct2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesOct2.drawRect(480 - 19 - 14, 84 + num + 30 * i, 2, 15);
                    }
                }
                else {
                    if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[(i + 8) / 2] || BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().cuartFinal[((i + 8 - 1) / 2)]) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesOct2.lineStyle(0, this.green);
                            this.linesOct2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesOct2.lineStyle(1, this.red);
                            this.linesOct2.beginFill(this.red, 1);
                        }
                        this.linesOct2.drawRect(480 - 19 - 14, 84 + num - 15 + 30 * i, 2, 15);
                        this.linesOct2.lineStyle(1, this.gray);
                    }
                    else {
                        this.linesOct2.drawRect(480 - 19 - 14, 84 + num - 15 + 30 * i, 2, 15);
                    }
                    if (BasketChamps.GameVars.getInstance().numMatch > 5) {
                        if (BasketChamps.GameVars.getInstance().octFinal[i + 8] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().octFinal[i + 8 - 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesOct2.lineStyle(0, this.green);
                            this.linesOct2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesOct2.lineStyle(1, this.red);
                            this.linesOct2.beginFill(this.red, 1);
                        }
                        this.linesOct2.drawRect(480 - 19 - 14 - 13, 84 + num + 15 + 30 * (i - 1), 15, 2);
                        this.linesOct2.lineStyle(1, this.gray);
                        this.linesOct2.endFill();
                        this.linesOct2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesOct2.drawRect(480 - 19 - 14 - 13, 84 + num + 15 + 30 * (i - 1), 15, 2);
                    }
                }
                this.linesOct2.endFill();
            }
            this.add(this.linesOct2);
            for (var i = 0; i < 8; i++) {
                this.add(this.tournamentTeamsOct2[i]);
            }
        };
        TournamentLayer.prototype.drawCuart = function () {
            this.tournamentTeamsCuart1 = new Array();
            this.tournamentTeamsCuart2 = new Array();
            this.linesCuart1 = new Phaser.Graphics(this.game, 0, 0);
            this.linesCuart1.lineStyle(1, this.gray);
            this.linesCuart2 = new Phaser.Graphics(this.game, 0, 0);
            this.linesCuart2.lineStyle(1, this.gray);
            for (var i = 0; i < 4; i++) {
                var flag = "flag_" + BasketChamps.GameVars.getInstance().cuartFinal[i] + ".png";
                var team = void 0;
                if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID && BasketChamps.GameVars.getInstance().numMatch === 6) {
                    team = new Phaser.Sprite(this.game, 140, 103 + 72 * i, "texture_atlas_1", "flag_0.png");
                    team.alpha = this.flagsAlpha;
                }
                else {
                    team = new Phaser.Sprite(this.game, 140, 103 + 72 * i, "texture_atlas_1", flag);
                }
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 6) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6) {
                        team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 6);
                    }
                    else {
                        team.alpha = this.flagsAlpha;
                    }
                }
                else if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID && BasketChamps.GameVars.getInstance().numMatch !== 6) {
                    team.scale.set(.65);
                }
                this.tournamentTeamsCuart1.push(team);
                if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[i / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[((i - 1) / 2)])) {
                    if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                        if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                            this.linesCuart1.lineStyle(1, this.gray);
                            this.linesCuart1.beginFill(this.gray, 1);
                        }
                        else {
                            this.linesCuart1.lineStyle(1, this.green);
                            this.linesCuart1.beginFill(this.green, 1);
                        }
                    }
                    else {
                        this.linesCuart1.lineStyle(1, this.red);
                        this.linesCuart1.beginFill(this.red, 1);
                    }
                    this.linesCuart1.drawRect(159, 102 + 72 * i, 12, 2);
                    this.linesCuart1.endFill();
                    this.linesCuart1.lineStyle(1, this.gray);
                    this.linesCuart1.beginFill(this.gray, 1);
                }
                else {
                    this.linesCuart1.beginFill(this.gray, 1);
                    this.linesCuart1.drawRect(159, 102 + 72 * i, 12, 2);
                }
                if (i % 2 === 0) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[i / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[((i - 1) / 2)])) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                                this.linesCuart1.lineStyle(1, this.gray);
                                this.linesCuart1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesCuart1.lineStyle(1, this.green);
                                this.linesCuart1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesCuart1.lineStyle(1, this.red);
                            this.linesCuart1.beginFill(this.red, 1);
                        }
                        this.linesCuart1.drawRect(159 + 12, 102 + 72 * i, 2, 37);
                        this.linesCuart1.lineStyle(1, this.gray);
                        this.linesCuart1.endFill();
                        this.linesCuart1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesCuart1.drawRect(159 + 12, 102 + 72 * i, 2, 37);
                    }
                }
                else {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[i / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().semFinal[((i - 1) / 2)])) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                                this.linesCuart1.lineStyle(1, this.gray);
                                this.linesCuart1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesCuart1.lineStyle(1, this.green);
                                this.linesCuart1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesCuart1.lineStyle(1, this.red);
                            this.linesCuart1.beginFill(this.red, 1);
                        }
                        this.linesCuart1.drawRect(159 + 12, 102 + 72 * i - 34, 2, 36);
                        this.linesCuart1.lineStyle(1, this.gray);
                    }
                    else {
                        this.linesCuart1.drawRect(159 + 12, 102 + 72 * i - 34, 2, 36);
                    }
                    if (BasketChamps.GameVars.getInstance().numMatch > 6) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().cuartFinal[i - 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                            if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                                this.linesCuart1.lineStyle(1, this.gray);
                                this.linesCuart1.beginFill(this.gray, 1);
                            }
                            else {
                                this.linesCuart1.lineStyle(1, this.green);
                                this.linesCuart1.beginFill(this.green, 1);
                            }
                        }
                        else {
                            this.linesCuart1.lineStyle(1, this.red);
                            this.linesCuart1.beginFill(this.red, 1);
                        }
                        this.linesCuart1.drawRect(159 + 12, 102 + 36 + 72 * (i - 1), 16, 2);
                        this.linesCuart1.lineStyle(1, this.gray);
                        this.linesCuart1.endFill();
                        this.linesCuart1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesCuart1.drawRect(159 + 12, 102 + 36 + 72 * (i - 1), 16, 2);
                    }
                }
                this.linesCuart1.endFill();
            }
            this.add(this.linesCuart1);
            for (var i = 0; i < 4; i++) {
                this.add(this.tournamentTeamsCuart1[i]);
            }
            for (var i = 0; i < 4; i++) {
                var flag = "flag_" + BasketChamps.GameVars.getInstance().cuartFinal[i + 4] + ".png";
                var team = new Phaser.Sprite(this.game, 415, 103 + 72 * i, "texture_atlas_1", flag);
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 6) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6) {
                        team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 6);
                    }
                    else {
                        team.alpha = this.flagsAlpha;
                    }
                }
                else if (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().myTeamID) {
                    team.scale.set(.65);
                }
                this.tournamentTeamsCuart2.push(team);
                if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[(i + 4) / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[((i + 4 - 1) / 2)])) {
                    if (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().myTeamID) {
                        this.linesCuart2.lineStyle(0, this.green);
                        this.linesCuart2.beginFill(this.green, 0);
                    }
                    else {
                        this.linesCuart2.lineStyle(1, this.red);
                        this.linesCuart2.beginFill(this.red, 1);
                    }
                    this.linesCuart2.drawRect(415 - 34, 102 + 72 * i, 13, 2);
                    this.linesCuart2.endFill();
                    this.linesCuart2.lineStyle(1, this.gray);
                    this.linesCuart2.beginFill(this.gray, 1);
                }
                else {
                    this.linesCuart2.beginFill(this.gray, 1);
                    this.linesCuart2.drawRect(415 - 34, 102 + 72 * i, 13, 2);
                }
                if (i % 2 === 0) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[(i + 4) / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[((i + 4 - 1) / 2)])) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesCuart2.lineStyle(0, this.green);
                            this.linesCuart2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesCuart2.lineStyle(1, this.red);
                            this.linesCuart2.beginFill(this.red, 1);
                        }
                        this.linesCuart2.drawRect(415 - 35, 102 + 72 * i, 2, 37);
                        this.linesCuart2.lineStyle(1, this.gray);
                        this.linesCuart2.endFill();
                        this.linesCuart2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesCuart2.drawRect(415 - 35, 102 + 72 * i, 2, 37);
                    }
                }
                else {
                    if (BasketChamps.GameVars.getInstance().numMatch > 6 && (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[(i + 4) / 2] || BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().semFinal[((i + 4 - 1) / 2)])) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesCuart2.lineStyle(0, this.green);
                            this.linesCuart2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesCuart2.lineStyle(1, this.red);
                            this.linesCuart2.beginFill(this.red, 1);
                        }
                        this.linesCuart2.drawRect(415 - 35, 104 + 72 * i - 36, 2, 36);
                        this.linesCuart2.lineStyle(1, this.gray);
                    }
                    else {
                        this.linesCuart2.drawRect(415 - 35, 104 + 72 * i - 36, 2, 36);
                    }
                    if (BasketChamps.GameVars.getInstance().numMatch > 6) {
                        if (BasketChamps.GameVars.getInstance().cuartFinal[i + 4] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().cuartFinal[i + 4 - 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                            this.linesCuart2.lineStyle(0, this.green);
                            this.linesCuart2.beginFill(this.green, 0);
                        }
                        else {
                            this.linesCuart2.lineStyle(1, this.red);
                            this.linesCuart2.beginFill(this.red, 1);
                        }
                        this.linesCuart2.drawRect(415 - 35 - 13, 102 + 36 + 72 * (i - 1), 15, 2);
                        this.linesCuart2.lineStyle(1, this.gray);
                        this.linesCuart2.endFill();
                        this.linesCuart2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesCuart2.drawRect(415 - 35 - 13, 102 + 36 + 72 * (i - 1), 15, 2);
                    }
                }
                this.linesCuart2.endFill();
            }
            this.add(this.linesCuart2);
            for (var i = 0; i < 4; i++) {
                this.add(this.tournamentTeamsCuart2[i]);
            }
        };
        TournamentLayer.prototype.drawSem = function () {
            this.tournamentTeamsSem1 = new Array();
            this.tournamentTeamsSem2 = new Array();
            this.linesSem1 = new Phaser.Graphics(this.game, 0, 0);
            this.linesSem1.lineStyle(1, this.gray);
            this.linesSem2 = new Phaser.Graphics(this.game, 0, 0);
            this.linesSem2.lineStyle(1, this.gray);
            if (BasketChamps.GameVars.getInstance().numMatch > 7 && BasketChamps.GameVars.getInstance().semFinal[0] === BasketChamps.GameVars.getInstance().final[0]) {
                if (BasketChamps.GameVars.getInstance().semFinal[0] === BasketChamps.GameVars.getInstance().myTeamID) {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem1.lineStyle(1, this.gray);
                        this.linesSem1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem1.lineStyle(1, this.green);
                        this.linesSem1.beginFill(this.green, 1);
                    }
                }
                else {
                    this.linesSem1.lineStyle(1, this.red);
                    this.linesSem1.beginFill(this.red, 1);
                }
                this.linesSem1.drawRect(208 + 19, 139, 13, 2);
                this.linesSem1.drawRect(208 + 19 + 13, 139, 2, 45);
                this.linesSem1.lineStyle(1, this.gray);
                this.linesSem1.endFill();
                this.linesSem1.beginFill(this.gray, 1);
            }
            else {
                this.linesSem1.beginFill(this.gray, 1);
                this.linesSem1.drawRect(208 + 19, 139, 13, 2);
                this.linesSem1.drawRect(208 + 19 + 13, 139, 2, 45);
                this.linesSem1.endFill();
            }
            if (BasketChamps.GameVars.getInstance().numMatch > 7 && BasketChamps.GameVars.getInstance().semFinal[1] === BasketChamps.GameVars.getInstance().final[0]) {
                if (BasketChamps.GameVars.getInstance().semFinal[1] === BasketChamps.GameVars.getInstance().myTeamID) {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem1.lineStyle(1, this.gray);
                        this.linesSem1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem1.lineStyle(1, this.green);
                        this.linesSem1.beginFill(this.green, 1);
                    }
                }
                else {
                    this.linesSem1.lineStyle(1, this.red);
                    this.linesSem1.beginFill(this.red, 1);
                }
                this.linesSem1.drawRect(208 + 19, 139 + 142, 13, 2);
                this.linesSem1.drawRect(208 + 19 + 13, 139 + 46, 2, 98);
                this.linesSem1.lineStyle(1, this.gray);
                this.linesSem1.endFill();
                this.linesSem1.beginFill(this.gray, 1);
            }
            else {
                this.linesSem1.beginFill(this.gray, 1);
                this.linesSem1.drawRect(208 + 19, 139 + 142, 13, 2);
                this.linesSem1.drawRect(208 + 19 + 13, 139 + 46, 2, 98);
                this.linesSem1.endFill();
            }
            if (BasketChamps.GameVars.getInstance().numMatch > 7) {
                if (BasketChamps.GameVars.getInstance().semFinal[0] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().semFinal[1] === BasketChamps.GameVars.getInstance().myTeamID) {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem1.lineStyle(1, this.gray);
                        this.linesSem1.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem1.lineStyle(1, this.green);
                        this.linesSem1.beginFill(this.green, 1);
                    }
                }
                else {
                    this.linesSem1.lineStyle(1, this.red);
                    this.linesSem1.beginFill(this.red, 1);
                }
                this.linesSem1.lineStyle(1, this.gray);
                this.linesSem1.beginFill(this.gray, 1);
                this.linesSem1.drawRect(218 + 22, 183, 14, 2);
                this.linesSem1.endFill();
            }
            else {
                this.linesSem1.lineStyle(1, this.gray);
                this.linesSem1.beginFill(this.gray, 1);
                this.linesSem1.drawRect(218 + 22, 183, 14, 2);
                this.linesSem1.endFill();
            }
            this.add(this.linesSem1);
            if (BasketChamps.GameVars.getInstance().numMatch > 7 && BasketChamps.GameVars.getInstance().semFinal[2] === BasketChamps.GameVars.getInstance().final[1]) {
                if (BasketChamps.GameVars.getInstance().semFinal[2] === BasketChamps.GameVars.getInstance().myTeamID) {
                    this.linesSem2.lineStyle(0, this.green);
                    this.linesSem2.beginFill(this.green, 0);
                }
                else {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem2.lineStyle(1, this.gray);
                        this.linesSem2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem2.lineStyle(1, this.red);
                        this.linesSem2.beginFill(this.red, 1);
                    }
                }
                this.linesSem2.drawRect(350 - 19 - 13, 139, 13, 2);
                this.linesSem2.drawRect(350 - 19 - 13, 139, 2, 98);
                this.linesSem2.lineStyle(1, this.gray);
                this.linesSem2.endFill();
                this.linesSem2.beginFill(this.gray, 1);
            }
            else {
                this.linesSem2.beginFill(this.gray, 1);
                this.linesSem2.drawRect(350 - 19 - 13, 139, 13, 2);
                this.linesSem2.drawRect(350 - 19 - 13, 139, 2, 98);
                this.linesSem2.endFill();
            }
            if (BasketChamps.GameVars.getInstance().numMatch > 7 && BasketChamps.GameVars.getInstance().semFinal[3] === BasketChamps.GameVars.getInstance().final[1]) {
                if (BasketChamps.GameVars.getInstance().semFinal[3] === BasketChamps.GameVars.getInstance().myTeamID) {
                    this.linesSem2.lineStyle(0, this.green);
                    this.linesSem2.beginFill(this.green, 0);
                }
                else {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem2.lineStyle(1, this.gray);
                        this.linesSem2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem2.lineStyle(1, this.red);
                        this.linesSem2.beginFill(this.red, 1);
                    }
                }
                this.linesSem2.drawRect(350 - 19 - 13, 139 + 142, 13, 2);
                this.linesSem2.drawRect(350 - 19 - 13, 139 + 142 - 43, 2, 45);
                this.linesSem2.lineStyle(1, this.gray);
                this.linesSem2.endFill();
                this.linesSem2.beginFill(this.gray, 1);
            }
            else {
                this.linesSem2.beginFill(this.gray, 1);
                this.linesSem2.drawRect(350 - 19 - 13, 139 + 142, 13, 2);
                this.linesSem2.drawRect(350 - 19 - 13, 139 + 142 - 43, 2, 45);
                this.linesSem2.endFill();
            }
            if (BasketChamps.GameVars.getInstance().numMatch > 7) {
                if (BasketChamps.GameVars.getInstance().semFinal[2] === BasketChamps.GameVars.getInstance().myTeamID || BasketChamps.GameVars.getInstance().semFinal[3] === BasketChamps.GameVars.getInstance().myTeamID) {
                    this.linesSem2.lineStyle(0, this.green);
                    this.linesSem2.beginFill(this.green, 0);
                }
                else {
                    if (BasketChamps.GameVars.getInstance().numMatch === 8) {
                        this.linesSem2.lineStyle(1, this.gray);
                        this.linesSem2.beginFill(this.gray, 1);
                    }
                    else {
                        this.linesSem2.lineStyle(1, this.red);
                        this.linesSem2.beginFill(this.red, 1);
                    }
                }
                ;
                this.linesSem2.drawRect(218 + 22 + 52 + 14, 238, 14, 2);
                this.linesSem2.endFill();
            }
            else {
                this.linesSem2.lineStyle(1, this.gray);
                this.linesSem2.beginFill(this.gray, 1);
                this.linesSem2.drawRect(218 + 22 + 52 + 14, 238, 14, 2);
                this.linesSem2.endFill();
            }
            this.add(this.linesSem2);
            for (var i = 0; i < 2; i++) {
                var flag = "flag_" + BasketChamps.GameVars.getInstance().semFinal[i] + ".png";
                var team = void 0;
                if (BasketChamps.GameVars.getInstance().semFinal[i] === BasketChamps.GameVars.getInstance().myTeamID && BasketChamps.GameVars.getInstance().numMatch === 7) {
                    team = new Phaser.Sprite(this.game, 208, 140 + 142 * i, "texture_atlas_1", "flag_0.png");
                    team.alpha = this.flagsAlpha;
                }
                else {
                    team = new Phaser.Sprite(this.game, 208, 140 + 142 * i, "texture_atlas_1", flag);
                }
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 7) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 7) {
                        team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 7);
                    }
                    else {
                        team.alpha = this.flagsAlpha;
                    }
                }
                else if (BasketChamps.GameVars.getInstance().semFinal[i] === BasketChamps.GameVars.getInstance().myTeamID && BasketChamps.GameVars.getInstance().numMatch !== 7) {
                    team.scale.set(.65);
                }
                this.tournamentTeamsSem1.push(team);
            }
            for (var i = 0; i < 2; i++) {
                this.add(this.tournamentTeamsSem1[i]);
            }
            for (var i = 0; i < 2; i++) {
                var flag = "flag_" + BasketChamps.GameVars.getInstance().semFinal[i + 2] + ".png";
                var team = new Phaser.Sprite(this.game, 350, 140 + 142 * i, "texture_atlas_1", flag);
                team.anchor.set(.5);
                team.scale.set(.5);
                if (BasketChamps.GameVars.getInstance().numMatch !== 7) {
                    if (BasketChamps.GameVars.getInstance().numMatch > 7) {
                        team.alpha = this.flagsAlpha - .15 * (BasketChamps.GameVars.getInstance().numMatch - 7);
                    }
                    else {
                        team.alpha = this.flagsAlpha;
                    }
                }
                else if (BasketChamps.GameVars.getInstance().semFinal[i + 2] === BasketChamps.GameVars.getInstance().myTeamID) {
                    team.scale.set(.65);
                }
                this.tournamentTeamsSem2.push(team);
            }
            for (var i = 0; i < 2; i++) {
                this.add(this.tournamentTeamsSem2[i]);
            }
        };
        TournamentLayer.prototype.drawFinal = function () {
            this.tournamentTeamsFinal = new Array();
            var flag = "flag_" + BasketChamps.GameVars.getInstance().final[0] + ".png";
            var team1;
            if (BasketChamps.GameVars.getInstance().final[0] === BasketChamps.GameVars.getInstance().myTeamID && BasketChamps.GameVars.getInstance().numMatch === 8) {
                team1 = new Phaser.Sprite(this.game, 280, 183, "texture_atlas_1", "flag_0.png");
                team1.alpha = this.flagsAlpha;
            }
            else {
                team1 = new Phaser.Sprite(this.game, 280, 183, "texture_atlas_1", flag);
            }
            team1.anchor.set(.5);
            team1.scale.set(.65);
            if (BasketChamps.GameVars.getInstance().numMatch !== 8) {
                team1.alpha = this.flagsAlpha;
            }
            this.tournamentTeamsFinal.push(team1);
            flag = "flag_" + BasketChamps.GameVars.getInstance().final[1] + ".png";
            var team2 = new Phaser.Sprite(this.game, 280, 237, "texture_atlas_1", "flag_0.png");
            team2.alpha = this.flagsAlpha;
            team2.anchor.set(.5);
            team2.scale.set(.65);
            if (BasketChamps.GameVars.getInstance().numMatch !== 8) {
                team2.alpha = this.flagsAlpha;
            }
            this.tournamentTeamsFinal.push(team2);
            for (var i = 0; i < 2; i++) {
                this.add(this.tournamentTeamsFinal[i]);
            }
        };
        TournamentLayer.prototype.animateLineOct = function () {
            var linePlayer1;
            var linePlayer2;
            var linePlayer3;
            var flag;
            linePlayer1 = new Phaser.Graphics(this.game, 75 + 20, 84);
            linePlayer1.lineStyle(1, this.green);
            linePlayer1.pivot.set(0, .5);
            linePlayer1.scale.set(0, 1);
            linePlayer1.beginFill(this.green, 1);
            linePlayer1.drawRect(0, 0, 13, 2);
            linePlayer1.endFill();
            linePlayer2 = new Phaser.Graphics(this.game, 75 + 20 + 13, 84);
            linePlayer2.lineStyle(1, this.green);
            linePlayer2.pivot.set(.5, 1);
            linePlayer2.scale.set(1, 0);
            linePlayer2.beginFill(this.green, 1);
            linePlayer2.drawRect(0, 0, 2, 15);
            linePlayer2.endFill();
            linePlayer3 = new Phaser.Graphics(this.game, 75 + 20 + 13, 84 + 15);
            linePlayer3.lineStyle(1, this.green);
            linePlayer3.pivot.set(0, .5);
            linePlayer3.scale.set(0, 1);
            linePlayer3.beginFill(this.green, 1);
            linePlayer3.drawRect(0, 0, 12, 2);
            linePlayer3.endFill();
            var name = "flag_" + BasketChamps.GameVars.getInstance().myTeamID + ".png";
            flag = new Phaser.Sprite(this.game, 140, 103, "texture_atlas_1", name);
            flag.anchor.set(.5);
            flag.scale.set(0);
            var framePlayer = new Phaser.Sprite(this.game, 140, 103, "texture_atlas_2", "frame_player.png");
            framePlayer.anchor.set(.5);
            framePlayer.scale.set(0);
            var tweenA = this.game.add.tween(linePlayer1.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None, true, 500);
            var tweenB = this.game.add.tween(linePlayer2.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None);
            var tweenC = this.game.add.tween(linePlayer3.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None);
            var tweenD = this.game.add.tween(flag.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out);
            this.game.add.tween(framePlayer.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out, true, 1300);
            this.game.time.events.add(2500, function () {
                this.playVisible();
            }, this);
            tweenA.chain(tweenB);
            tweenB.chain(tweenC);
            tweenC.chain(tweenD);
            this.add(linePlayer1);
            this.add(linePlayer2);
            this.add(linePlayer3);
            this.add(flag);
            this.add(framePlayer);
        };
        TournamentLayer.prototype.animateLineCuart = function () {
            var linePlayer1;
            var linePlayer2;
            var linePlayer3;
            var flag;
            linePlayer1 = new Phaser.Graphics(this.game, 159, 102);
            linePlayer1.lineStyle(1, this.green);
            linePlayer1.pivot.set(0, .5);
            linePlayer1.scale.set(0, 1);
            linePlayer1.beginFill(this.green, 1);
            linePlayer1.drawRect(0, 0, 13, 2);
            linePlayer1.endFill();
            linePlayer2 = new Phaser.Graphics(this.game, 159 + 12, 102);
            linePlayer2.lineStyle(1, this.green);
            linePlayer2.pivot.set(.5, 1);
            linePlayer2.scale.set(1, 0);
            linePlayer2.beginFill(this.green, 1);
            linePlayer2.drawRect(0, 0, 2, 37);
            linePlayer2.endFill();
            linePlayer3 = new Phaser.Graphics(this.game, 159 + 12, 102 + 36);
            linePlayer3.lineStyle(1, this.green);
            linePlayer3.pivot.set(0, .5);
            linePlayer3.scale.set(0, 1);
            linePlayer3.beginFill(this.green, 1);
            linePlayer3.drawRect(0, 0, 16, 2);
            linePlayer3.endFill();
            var name = "flag_" + BasketChamps.GameVars.getInstance().myTeamID + ".png";
            flag = new Phaser.Sprite(this.game, 208, 140, "texture_atlas_1", name);
            flag.anchor.set(.5);
            flag.scale.set(0);
            var framePlayer = new Phaser.Sprite(this.game, 208, 140, "texture_atlas_2", "frame_player.png");
            framePlayer.anchor.set(.5);
            framePlayer.scale.set(0);
            var tweenA = this.game.add.tween(linePlayer1.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None, true, 500);
            var tweenB = this.game.add.tween(linePlayer2.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Linear.None);
            var tweenC = this.game.add.tween(linePlayer3.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None);
            var tweenD = this.game.add.tween(flag.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out);
            this.game.add.tween(framePlayer.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out, true, 1600);
            this.game.time.events.add(2500, function () {
                this.playVisible();
            }, this);
            tweenA.chain(tweenB);
            tweenB.chain(tweenC);
            tweenC.chain(tweenD);
            this.add(linePlayer1);
            this.add(linePlayer2);
            this.add(linePlayer3);
            this.add(flag);
            this.add(framePlayer);
        };
        TournamentLayer.prototype.animateLineSem = function () {
            var linePlayer1;
            var linePlayer2;
            var linePlayer3;
            var lineAI1;
            var lineAI2;
            var lineAI3;
            var flag;
            var flag2;
            var name = "flag_" + BasketChamps.GameVars.getInstance().myTeamID + ".png";
            flag = new Phaser.Sprite(this.game, 280, 183, "texture_atlas_1", name);
            flag.anchor.set(.5);
            flag.scale.set(0);
            var framePlayer = new Phaser.Sprite(this.game, 280, 183, "texture_atlas_2", "frame_player.png");
            framePlayer.anchor.set(.5);
            framePlayer.scale.set(0);
            var name2 = "flag_" + BasketChamps.GameVars.getInstance().final[1] + ".png";
            flag2 = new Phaser.Sprite(this.game, 280, 237, "texture_atlas_1", name2);
            flag2.anchor.set(.5);
            flag2.scale.set(0);
            linePlayer1 = new Phaser.Graphics(this.game, 208 + 19, 139);
            linePlayer1.lineStyle(1, this.green);
            linePlayer1.pivot.set(0, .5);
            linePlayer1.scale.set(0, 1);
            linePlayer1.beginFill(this.green, 1);
            linePlayer1.drawRect(0, 0, 13, 2);
            linePlayer1.endFill();
            linePlayer2 = new Phaser.Graphics(this.game, 208 + 19 + 13, 139);
            linePlayer2.lineStyle(1, this.green);
            linePlayer2.pivot.set(.5, 1);
            linePlayer2.scale.set(1, 0);
            linePlayer2.beginFill(this.green, 1);
            linePlayer2.drawRect(0, 0, 2, 45);
            linePlayer2.endFill();
            linePlayer3 = new Phaser.Graphics(this.game, 218 + 22, 183);
            linePlayer3.lineStyle(1, this.green);
            linePlayer3.pivot.set(0, .5);
            linePlayer3.scale.set(0, 1);
            linePlayer3.beginFill(this.green, 1);
            linePlayer3.drawRect(0, 0, 14, 2);
            linePlayer3.endFill();
            if (BasketChamps.GameVars.getInstance().final[1] === BasketChamps.GameVars.getInstance().semFinal[3]) {
                lineAI1 = new Phaser.Graphics(this.game, 350 - 19, 139 + 142);
                lineAI1.lineStyle(1, this.red);
                lineAI1.pivot.set(0, .5);
                lineAI1.scale.set(0, 1);
                lineAI1.beginFill(this.red, 1);
                lineAI1.drawRect(0, 0, 13, 2);
                lineAI1.endFill();
                lineAI2 = new Phaser.Graphics(this.game, 350 - 19 - 13, 139 + 142 + 2);
                lineAI2.lineStyle(1, this.red);
                lineAI2.pivot.set(.5, 1);
                lineAI2.scale.set(1, 0);
                lineAI2.beginFill(this.red, 1);
                lineAI2.drawRect(0, 0, 2, 45);
                lineAI2.endFill();
            }
            else {
                lineAI1 = new Phaser.Graphics(this.game, 350 - 19, 139);
                lineAI1.lineStyle(1, this.red);
                lineAI1.pivot.set(0, .5);
                lineAI1.scale.set(0, 1);
                lineAI1.beginFill(this.red, 1);
                lineAI1.drawRect(0, 0, 13, 2);
                lineAI1.endFill();
                lineAI2 = new Phaser.Graphics(this.game, 350 - 19 - 13, 140);
                lineAI2.lineStyle(1, this.red);
                lineAI2.pivot.set(.5, 1);
                lineAI2.scale.set(1, 0);
                lineAI2.beginFill(this.red, 1);
                lineAI2.drawRect(0, 0, 2, 99);
                lineAI2.endFill();
            }
            lineAI3 = new Phaser.Graphics(this.game, 218 + 22 + 52 + 14 + 14, 238);
            lineAI3.lineStyle(1, this.red);
            lineAI3.pivot.set(0, .5);
            lineAI3.scale.set(0, 1);
            lineAI3.beginFill(this.red, 1);
            lineAI3.drawRect(0, 0, 14, 2);
            lineAI3.endFill();
            var tweenA = this.game.add.tween(linePlayer1.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None, true, 500);
            var tweenB = this.game.add.tween(linePlayer2.scale)
                .to({ x: 1, y: 1 }, 750, Phaser.Easing.Linear.None);
            var tweenC = this.game.add.tween(linePlayer3.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Linear.None);
            var tweenD = this.game.add.tween(flag.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out);
            this.game.add.tween(framePlayer.scale)
                .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out, true, 1850);
            tweenA.chain(tweenB);
            tweenB.chain(tweenC);
            tweenC.chain(tweenD);
            this.game.time.events.add(2500, function () {
                var tweenA2 = this.game.add.tween(lineAI1.scale)
                    .to({ x: -1, y: 1 }, 250, Phaser.Easing.Linear.None, true);
                var tweenB2;
                if (BasketChamps.GameVars.getInstance().final[1] === BasketChamps.GameVars.getInstance().semFinal[3]) {
                    tweenB2 = this.game.add.tween(lineAI2.scale)
                        .to({ x: 1, y: -1 }, 750, Phaser.Easing.Linear.None);
                }
                else {
                    tweenB2 = this.game.add.tween(lineAI2.scale)
                        .to({ x: 1, y: 1 }, 750, Phaser.Easing.Linear.None);
                }
                var tweenC2 = this.game.add.tween(lineAI3.scale)
                    .to({ x: -1, y: 1 }, 250, Phaser.Easing.Linear.None);
                var tweenD2 = this.game.add.tween(flag2.scale)
                    .to({ x: .65, y: .65 }, 800, Phaser.Easing.Elastic.Out);
                tweenA2.chain(tweenB2);
                tweenB2.chain(tweenC2);
                tweenC2.chain(tweenD2);
                this.game.time.events.add(2500, function () {
                    this.game.add.tween(this.vsText.scale)
                        .to({ x: 1, y: 1 }, 400, Phaser.Easing.Elastic.Out, true);
                    this.game.add.tween(this.rays.scale)
                        .to({ x: 1, y: 1 }, 400, Phaser.Easing.Elastic.Out, true)
                        .onComplete.add(function () {
                        this.playVisible();
                    }, this);
                }, this);
            }, this);
            this.add(linePlayer1);
            this.add(linePlayer2);
            this.add(linePlayer3);
            this.add(flag);
            this.add(framePlayer);
            this.add(lineAI1);
            this.add(lineAI2);
            this.add(lineAI3);
            this.add(flag2);
        };
        return TournamentLayer;
    }(Phaser.Group));
    BasketChamps.TournamentLayer = TournamentLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TournamentWonLayer = (function (_super) {
        __extends(TournamentWonLayer, _super);
        function TournamentWonLayer(game) {
            var _this = _super.call(this, game, null, "tournament-won-layer", false) || this;
            TournamentWonLayer.currentInstance = _this;
            _this.laurel1 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 - 100, BasketChamps.GameConstants.GAME_HEIGHT / 2 - 30, "texture_atlas_1", "laurel.png");
            _this.laurel1.anchor.set(.5);
            _this.laurel1.scale.set(0);
            _this.add(_this.laurel1);
            _this.laurel2 = new Phaser.Image(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 100, BasketChamps.GameConstants.GAME_HEIGHT / 2 - 30, "texture_atlas_1", "laurel.png");
            _this.laurel2.anchor.set(.5);
            _this.laurel2.scale.set(0);
            _this.add(_this.laurel2);
            _this.exitButton = new Phaser.Button(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2 + 200, 320, "texture_atlas_1", _this.onExitClicked, _this);
            _this.exitButton.setFrames("btn_ok_on.png", "btn_ok.png", "btn_ok_on.png", "btn_ok.png");
            _this.exitButton.anchor.set(.5);
            _this.exitButton.scale.set(0);
            _this.exitButton.visible = true;
            _this.add(_this.exitButton);
            _this.snoop = new Phaser.Sprite(_this.game, BasketChamps.GameConstants.GAME_WIDTH / 2, BasketChamps.GameConstants.GAME_HEIGHT + 300, "texture_atlas_1", "snoop_0001.png");
            _this.snoop.anchor.set(.5, 1);
            _this.snoop.scale.set(1.3);
            _this.addChild(_this.snoop);
            _this.snoop.animations.add("anim1", Phaser.Animation.generateFrameNames("snoop_", 1, 30, ".png", 4));
            _this.snoop.animations.add("anim2", Phaser.Animation.generateFrameNames("snoop_", 30, 1, ".png", 4));
            _this.snoop.animations.getAnimation("anim1").onComplete.add(function () {
                TournamentWonLayer.currentInstance.snoop.play("anim2", 25, false, false);
            }, _this);
            _this.snoop.animations.getAnimation("anim2").onComplete.add(function () {
                TournamentWonLayer.currentInstance.snoop.play("anim1", 25, false, false);
            }, _this);
            _this.congratulations = new Phaser.Image(_this.game, -250, 270, "texture_atlas_1", "congrats.png");
            _this.congratulations.anchor.set(.5);
            _this.add(_this.congratulations);
            _this.visible = false;
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                var moreGamesButtons = new MinijuegosMoreGamesButton(_this.game, 60, 315);
                _this.add(moreGamesButtons);
            }
            return _this;
        }
        TournamentWonLayer.prototype.onExitClicked = function () {
            BasketChamps.StageContainer.currentInstance.efectsContainer.finishConfetti();
            BasketChamps.TournamentManager.getInstance().deleteLocalStorage();
            BasketChamps.BasketballCourtState.currentInstance.goBack();
            this.visible = false;
        };
        TournamentWonLayer.prototype.onClickBackground = function () {
        };
        TournamentWonLayer.prototype.showWinner = function () {
            BasketChamps.StageContainer.currentInstance.efectsContainer.initConfetti(true);
            BasketChamps.AudioManager.getInstance().playSound("snoop", true);
            BasketChamps.AudioManager.getInstance().playSound("celebration_2");
            this.game.add.tween(this.congratulations)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 }, 500, Phaser.Easing.Elastic.Out, true, 400);
            this.game.add.tween(this.laurel1.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 400);
            this.game.add.tween(this.laurel2.scale)
                .to({ x: -1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 400);
            this.game.add.tween(this.exitButton.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 1000)
                .onComplete.add(function () {
                var pulseTween = this.game.add.tween(this.exitButton.scale);
                pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                pulseTween.delay(50);
                pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                pulseTween.loop();
                pulseTween.start();
            }, this);
            this.game.add.tween(this.snoop)
                .to({ y: BasketChamps.GameConstants.GAME_HEIGHT }, 200, Phaser.Easing.Linear.None, true, 400)
                .onComplete.add(function () {
                this.snoop.play("anim1", 25, false, false);
            }, this);
            this.visible = true;
        };
        return TournamentWonLayer;
    }(Phaser.Group));
    BasketChamps.TournamentWonLayer = TournamentWonLayer;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var CreditsBackground = (function (_super) {
        __extends(CreditsBackground, _super);
        function CreditsBackground(game, x, y) {
            var _this = _super.call(this, game, null, "credits-background", false) || this;
            _this.x = x;
            _this.y = y;
            var cornerBmd = game.add.bitmapData(20, 20);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, 20, 0, Math.PI);
            cornerBmd.ctx.fillStyle = "#ffffff";
            cornerBmd.ctx.fill();
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = "#ffffff";
            reusableBmd.ctx.fill();
            var corner;
            var rectangle;
            corner = new Phaser.Sprite(game, 50, 50, cornerBmd);
            corner.tint = 0xffffff;
            corner.alpha = .8;
            corner.angle = 180;
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 545, 50, cornerBmd);
            corner.tint = 0xffffff;
            corner.alpha = .8;
            corner.angle = 270;
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 50, 30, reusableBmd);
            rectangle.scale.setTo(495 / 100, 20 / 100);
            rectangle.tint = 0xffffff;
            rectangle.alpha = .8;
            _this.add(rectangle);
            rectangle = new Phaser.Sprite(game, 30, 50, reusableBmd);
            rectangle.scale.setTo(535 / 100, 280 / 100);
            rectangle.tint = 0xffffff;
            rectangle.alpha = .8;
            _this.add(rectangle);
            corner = new Phaser.Sprite(game, 50, 330, cornerBmd);
            corner.tint = 0xffffff;
            corner.alpha = .8;
            corner.angle = 90;
            _this.addChild(corner);
            corner = new Phaser.Sprite(game, 545, 330, cornerBmd);
            corner.tint = 0xffffff;
            corner.alpha = .8;
            corner.angle = 0;
            _this.addChild(corner);
            rectangle = new Phaser.Sprite(game, 50, 330, reusableBmd);
            rectangle.scale.setTo(495 / 100, 20 / 100);
            rectangle.tint = 0xffffff;
            rectangle.alpha = .8;
            _this.add(rectangle);
            return _this;
        }
        return CreditsBackground;
    }(Phaser.Group));
    BasketChamps.CreditsBackground = CreditsBackground;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var CreditsState = (function (_super) {
        __extends(CreditsState, _super);
        function CreditsState() {
            return _super.apply(this, arguments) || this;
        }
        CreditsState.prototype.init = function () {
            CreditsState.currentInstance = this;
        };
        CreditsState.prototype.shutdown = function () {
            CreditsState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        CreditsState.prototype.create = function () {
            this.leavingScene = false;
            this.add.image(0, 0, "bg");
            this.add.image(0, 0, "texture_atlas_2", "seats.png");
            this.add.image(0, 0, "texture_atlas_2", "seats_2.png");
            this.add.image(0, 0, "texture_atlas_2", "seats_1.png");
            this.add.image(0, 0, "texture_atlas_1", "post.png");
            this.add.image(0, 0, "texture_atlas_1", "backboard.png");
            this.add.image(0, 0, "texture_atlas_1", "hoop.png");
            this.add.image(0, 0, "texture_atlas_1", "front.png");
            this.add.image(50, 135, "texture_atlas_1", "net0001.png");
            this.add.image(0, 0, "texture_atlas_1", "frontHoop.png");
            this.add.bitmapText(250, 7, "digital-display", "5", 110);
            this.add.bitmapText(355, 7, "digital-display", "0", 110);
            var creditBackground = new BasketChamps.CreditsBackground(this.game, 0, 0);
            this.add.existing(creditBackground);
            var text;
            text = new Phaser.Text(this.game, 100, 40, "", { font: "60px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            this.add.image(270, 43, "texture_atlas_1", "ravalmatic_horizontal.png");
            text = new Phaser.Text(this.game, 100, 90, " ", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 120, "", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            var image = new Phaser.Image(this.game, 430, 135, "texture_atlas_1", "banana.png");
            image.anchor.set(.5);
            image.scale.set(.6);
            image.angle = 5;
            this.add.existing(image);
            var pulseTween = this.game.add.tween(image.scale);
            pulseTween.to({ x: .63, y: 0.57 }, 300, Phaser.Easing.Linear.None, false);
            pulseTween.delay(250);
            pulseTween.to({ x: 0.57, y: .63 }, 700, Phaser.Easing.Elastic.Out);
            pulseTween.loop();
            pulseTween.start();
            text = new Phaser.Text(this.game, 100, 150, " ", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 180, " ", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 210, " ", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 240, "", { font: "40px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 280, " ", { font: "30px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 300, " ", { font: "30px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            text = new Phaser.Text(this.game, 100, 320, " ", { font: "30px Jomhuria", fontWeight: "400", fill: "#152c32" });
            this.add.existing(text);
            this.backButton = new Phaser.Button(this.game, 35, 35, "texture_atlas_1", this.onBackClicked, this);
            this.backButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            this.backButton.anchor.set(.5);
            this.add.existing(this.backButton);
            var versionLabel = this.add.text(525, 40, "v" + BasketChamps.GameConstants.VERSION, { font: "25px  Jomhuria", fill: "#152c32" });
            this.add.existing(versionLabel);
            BasketChamps.AudioManager.getInstance().stopSound("splash", true);
        };
        CreditsState.prototype.onBackClicked = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.add.tween(this.backButton.scale)
                .to({ x: 0, y: 0 }, 500, Phaser.Easing.Back.In, true)
                .onComplete.add(function () {
                this.game.camera.fade(0x000000, BasketChamps.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    BasketChamps.AudioManager.getInstance().playSound("splash", true);
                    this.game.state.start("SplashState", true, false);
                }, this);
            }, this);
        };
        return CreditsState;
    }(Phaser.State));
    BasketChamps.CreditsState = CreditsState;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.ready = false;
            HTML5API_preloaderStarted();
        };
        PreLoader.prototype.preload = function () {
            this.generateBitmapData();
            this.composeScene();
            this.load.atlasJSONArray("texture_atlas_1", "/texture_atlas_1.png", "/texture_atlas_1.json");
            this.load.atlasJSONArray("texture_atlas_2", "/texture_atlas_2.png", "/texture_atlas_2.json");
            this.load.image("bg", "/bg.jpg");
            this.load.image("bg-splash", "/bg-splash.jpg");
            this.load.audiosprite("audio-sprite", ["/audio/audiosprite.mp3", "/audio/audiosprite.ogg"], "/audio/audiosprite.json");
            this.load.bitmapFont("digital-display", "/fonts/digital-display.png", "/fonts/digital-display.xml");
            this.load.json("tournament-data", "/config/tournament-data.json");
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        PreLoader.prototype.shutdown = function () {
            PreLoader.currentInstance = null;
            HTML5API_preloaderEnded();
            _super.prototype.shutdown.call(this);
        };
        PreLoader.prototype.create = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                LaggedAPI.init("basket_champs_init", "lagdevaF3001");
            }
            this.load.onFileComplete.remove(this.updateLoadedPercentage, this);
            BasketChamps.TournamentManager.getInstance().processJSONData();
            BasketChamps.AudioManager.getInstance().init(this.game);
            this.game.time.events.add(750, function () {
                this.game.state.start("BasketballCourtState", true, false);
            }, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / 100 * 14.45;
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(16, 128, "gradient_preloader", true);
            var grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#70a1a5");
            grd.addColorStop(1, "#50475b");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 128, "sky_gradient_background", true);
            grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#7ec0ee");
            grd.addColorStop(1, "#ffffff");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 16, "green_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#2a8d1f";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "green2_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#6fd987";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "yellow_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#ffff00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "black_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#15212E";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "white_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#ffffff";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "blue_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#0000FF";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "blue2_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#b9ecfe";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "blue3_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#d8f4fe";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "dark_gradient", true);
            for (var i = 0; i < 16; i++) {
                for (var j = 0; j < 128; j++) {
                    bmd.setPixel32(i, j, 53, 44, 59, j < 30 ? 255 : 255 * (127 - j) / 97);
                }
            }
            bmd = this.game.add.bitmapData(16, 128, "bright_gradient", true);
            for (var i = 0; i < 16; i++) {
                for (var j = 0; j < 128; j++) {
                    bmd.setPixel32(i, j, 27, 168, 213, j < 30 ? 255 : 255 * (127 - j) / 97);
                }
            }
            bmd = this.game.add.bitmapData(16, 16, "sky_blue_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#1BA8D5";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "purple_square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#551a8b";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "dark-square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#00495C";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "preload-bar", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#fc8e00";
            bmd.ctx.fill();
        };
        PreLoader.prototype.composeScene = function () {
            var gameLogo = this.add.image(BasketChamps.GameConstants.GAME_WIDTH / 2, 65, "basket-champs");
            gameLogo.anchor.x = .5;
            var kiziLogo = this.add.image(BasketChamps.GameConstants.GAME_WIDTH / 2, 250, "");
            kiziLogo.anchor.x = .5;
            kiziLogo.scale.x = BasketChamps.GameVars.scaleX;
            var loadingText = this.add.text(BasketChamps.GameConstants.GAME_WIDTH / 2, 160, "loading...", { font: "25px Mirza", fontWeight: "400" });
            loadingText.addColor("#FFFFFF", 0);
            loadingText.anchor.x = .5;
            var preloadBarCapsuleShadow = this.add.sprite(BasketChamps.GameConstants.GAME_WIDTH / 2 + 2, 200 + 2, this.game.cache.getBitmapData("black_square"));
            preloadBarCapsuleShadow.scale.set(14.65, .85);
            preloadBarCapsuleShadow.anchor.set(.5);
            preloadBarCapsuleShadow.alpha = .45;
            var preloadBarCapsule = this.add.sprite(BasketChamps.GameConstants.GAME_WIDTH / 2, 200, this.game.cache.getBitmapData("white_square"));
            preloadBarCapsule.scale.setTo(14.65, .85);
            preloadBarCapsule.anchor.set(.5);
            this.preloadBar = this.add.sprite(BasketChamps.GameConstants.GAME_WIDTH / 2 - 116, 200, this.game.cache.getBitmapData("preload-bar"));
            this.preloadBar.scale.setTo(0, .6);
            this.preloadBar.anchor.set(0, .5);
        };
        return PreLoader;
    }(Phaser.State));
    BasketChamps.PreLoader = PreLoader;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SplashController = (function () {
        function SplashController(game) {
            SplashController.currentInstance = this;
            this.game = game;
            if (!this.game.device.desktop && BasketChamps.GameConstants.SPONSOR !== BasketChamps.GameConstants.GAMEPIX) {
                if (!this.game.scale.isFullScreen) {
                    this.game.input.onDown.add(this.goFull, this);
                }
            }
        }
        SplashController.prototype.goFull = function () {
            this.game.scale.startFullScreen(true);
            this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.EXACT_FIT;
        };
        return SplashController;
    }());
    BasketChamps.SplashController = SplashController;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        SplashState.prototype.create = function () {
            this.splashController = new BasketChamps.SplashController(this.game);
            this.leavingScene = false;
            this.add.image(0, 0, "bg-splash");
            this.labelsContainer = this.add.group();
            this.labelsContainer.visible = false;
            if (BasketChamps.GameVars.getInstance().resetTournament === true) {
                BasketChamps.TournamentManager.getInstance().backToGroupFase();
            }
            if (BasketChamps.GameVars.getInstance().myTeamID === 0) {
                this.playButton = this.add.button(BasketChamps.GameConstants.GAME_WIDTH / 2, 340, "texture_atlas_1", this.onPlayClicked, this);
                this.playButton.setFrames("btn_play_over.png", "btn_play.png", "btn_play_over.png");
                this.continueButton = null;
            }
            else {
                this.playButton = this.add.button(258, 350, "texture_atlas_1", this.onPlayClicked, this);
                this.playButton.setFrames("button-new-on.png", "button-new-off.png", "button-new-on.png");
                var textNew1 = this.add.text(280, 342, "RESET", { font: "25px Jomhuria", fontWeight: "400" });
                textNew1.addColor("#504048", 0);
                textNew1.anchor.set(0, .5);
                this.labelsContainer.add(textNew1);
                var textNew2 = this.add.text(280, 358, "TOURNAMENT", { font: "25px Jomhuria", fontWeight: "400" });
                textNew2.addColor("#504048", 0);
                textNew2.anchor.set(0, .5);
                this.labelsContainer.add(textNew2);
                this.continueButton = this.add.button(BasketChamps.GameConstants.GAME_WIDTH / 2, 295, "texture_atlas_1", this.onContinueClicked, this);
                this.continueButton.setFrames("btn_continue_over.png", "btn_continue.png", "btn_continue_over.png");
                this.continueButton.anchor.set(.5);
                this.continueButton.scale.set(0);
            }
            this.playButton.anchor.set(.5);
            this.playButton.scale.set(0);
            this.audioButton = new Phaser.Button(this.game, BasketChamps.GameConstants.GAME_WIDTH - 32, -35, "texture_atlas_1", this.onAudioClicked, this);
            if (BasketChamps.AudioManager.getInstance().isMuted) {
                this.audioButton.setFrames("music_off_button_on.png", "music_off_button_off.png", "music_off_button_on.png");
            }
            else {
                this.audioButton.setFrames("music_on_button_on.png", "music_on_button_off.png", "music_on_button_on.png");
            }
            this.audioButton.anchor.set(.5);
            this.add.existing(this.audioButton);
            this.creditButton = new Phaser.Button(this.game, 35, -35, "texture_atlas_1", this.onCreditsClicked, this);
            this.creditButton.setFrames("btn_info_over.png", "btn_info.png", "btn_info_over.png");
            this.creditButton.anchor.set(.5);
            this.add.existing(this.creditButton);
            this.champsTitle = new Phaser.Image(this.game, 650, 35, "texture_atlas_1", "title_champs.png");
            this.champsTitle.anchor.set(.5);
            this.add.existing(this.champsTitle);
            this.basketTitle = new Phaser.Image(this.game, -50, 35, "texture_atlas_1", "title_basket.png");
            this.basketTitle.anchor.set(.5);
            this.add.existing(this.basketTitle);
            this.add.image(0, 0, "texture_atlas_1", "patch_splash.png");
            var copyRightLabel = this.add.text(18, BasketChamps.GameConstants.GAME_HEIGHT - 14, "" , { font: "10px  Arial", fill: "#eeeeee" });
            copyRightLabel.alpha = .75;
            this.labelsContainer.add(copyRightLabel);
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                this.sponsorLogo = this.add.image(20, 335, "logo-lagged");
                this.sponsorLogo.visible = false;
            }
            else if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                this.sponsorLogo = this.add.button(66, 330, "texture_atlas_minijuegos", this.onLogoClicked, this);
                this.sponsorLogo.setFrames("button-logo-minijuegos-on.png", "button-logo-minijuegos-off.png", "button-logo-minijuegos-on.png");
                this.sponsorLogo.anchor.set(.5);
                this.sponsorLogo.inputEnabled = true;
                this.sponsorLogo.visible = false;
                this.sponsorLogo.events.onInputDown.add(this.onLogoClicked, this);
            }
            else {
                this.sponsorLogo = null;
            }
            this.game.add.tween(this.basketTitle)
                .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 }, 650, Phaser.Easing.Elastic.Out, true, 1000)
                .onComplete.add(function () {
                this.game.add.tween(this.champsTitle)
                    .to({ x: BasketChamps.GameConstants.GAME_WIDTH / 2 }, 650, Phaser.Easing.Elastic.Out, true)
                    .onComplete.add(this.showButtons, this);
            }, this);
            this.game.camera.flash(0x000000, BasketChamps.GameConstants.TIME_FADE, false);
            BasketChamps.AudioManager.getInstance().playSound("splash", true);
        };
        SplashState.prototype.showButtons = function () {
            if (BasketChamps.GameVars.getInstance().myTeamID === 0) {
                this.game.add.tween(this.playButton.scale)
                    .to({ x: 1, y: 1 }, 650, Phaser.Easing.Elastic.Out, true, 300)
                    .onComplete.add(function () {
                    var pulseTween = this.game.add.tween(this.playButton.scale);
                    pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                    pulseTween.delay(50);
                    pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                    pulseTween.loop();
                    pulseTween.start();
                    this.labelsContainer.visible = true;
                    if (this.sponsorLogo) {
                        this.sponsorLogo.visible = true;
                    }
                    if (this.moreGamesButtons) {
                        this.moreGamesButtons.visible = true;
                    }
                }, this);
            }
            else {
                this.game.add.tween(this.playButton.scale)
                    .to({ x: .7, y: .7 }, 650, Phaser.Easing.Elastic.Out, true, 300);
                this.game.add.tween(this.continueButton.scale)
                    .to({ x: 1, y: 1 }, 650, Phaser.Easing.Elastic.Out, true, 300)
                    .onComplete.add(function () {
                    var pulseTween = this.game.add.tween(this.continueButton.scale);
                    pulseTween.to({ x: 1.05, y: .95 }, 400, Phaser.Easing.Linear.None, false);
                    pulseTween.delay(50);
                    pulseTween.to({ x: .95, y: 1.05 }, 800, Phaser.Easing.Elastic.Out);
                    pulseTween.loop();
                    pulseTween.start();
                    this.labelsContainer.visible = true;
                    if (this.sponsorLogo) {
                        this.sponsorLogo.visible = true;
                    }
                    if (this.moreGamesButtons) {
                        this.moreGamesButtons.visible = true;
                    }
                }, this);
            }
            this.game.add.tween(this.audioButton)
                .to({ y: 35 }, 650, Phaser.Easing.Cubic.Out, true, 1000);
            this.game.add.tween(this.creditButton)
                .to({ y: 35 }, 650, Phaser.Easing.Cubic.Out, true, 1000);
        };
        SplashState.prototype.onPlayClicked = function () {
            if (BasketChamps.GameVars.getInstance().myTeamID === 0) {
                this.newTournament();
            }
            else {
                this.playButton.visible = false;
                this.continueButton.visible = false;
                this.audioButton.visible = false;
                this.labelsContainer.visible = false;
                this.creditButton.visible = false;
                this.confirmationMenu = new BasketChamps.ConfirmationMenu(this.game);
                this.add.existing(this.confirmationMenu);
            }
            BasketChamps.AudioManager.getInstance().playSound("click");
            BasketChamps.AudioManager.getInstance().stopSound("splash");
        };
        SplashState.prototype.removeConfirmationMenu = function () {
            this.playButton.visible = true;
            this.continueButton.visible = true;
            this.audioButton.visible = true;
            this.labelsContainer.visible = true;
            this.creditButton.visible = true;
            this.confirmationMenu.destroy();
        };
        SplashState.prototype.onContinueClicked = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.continueButton.bringToTop();
            this.game.add.tween(this.continueButton.scale)
                .to({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
            this.game.add.tween(this.continueButton.scale)
                .to({ x: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
            this.game.add.tween(this.continueButton)
                .to({ angle: 360 }, 500, Phaser.Easing.Cubic.Out, true, 100)
                .onComplete.add(this.goToBasketballCourt, this);
            BasketChamps.AudioManager.getInstance().playSound("click");
        };
        SplashState.prototype.newTournament = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.playButton.bringToTop();
            BasketChamps.TournamentManager.getInstance().deleteLocalStorage();
            if (this.playButton.visible) {
                this.game.add.tween(this.playButton.scale)
                    .to({ y: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.game.add.tween(this.playButton.scale)
                    .to({ x: 0 }, 500, Phaser.Easing.Cubic.Out, true, 100);
                this.game.add.tween(this.playButton)
                    .to({ angle: 360 }, 500, Phaser.Easing.Cubic.Out, true, 100)
                    .onComplete.add(this.goToBasketballCourt, this);
            }
            else {
                this.goToBasketballCourt();
            }
        };
        SplashState.prototype.goToBasketballCourt = function () {
            this.playButton.visible = false;
            if (this.continueButton) {
                this.continueButton.visible = false;
            }
            this.game.camera.fade(0x000000, BasketChamps.GameConstants.TIME_FADE, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("BasketballCourtState", true, false);
            }, this);
        };
        SplashState.prototype.onCreditsClicked = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.add.tween(this.creditButton.scale)
                .to({ x: 0, y: 0 }, 500, Phaser.Easing.Back.In, true)
                .onComplete.add(function () {
                this.game.camera.fade(0x000000, BasketChamps.GameConstants.TIME_FADE, true);
                this.game.camera.onFadeComplete.add(function () {
                    this.game.state.start("CreditsState", true, false);
                }, this);
            }, this);
        };
        SplashState.prototype.onAudioClicked = function () {
            if (BasketChamps.AudioManager.getInstance().isMuted) {
                BasketChamps.AudioManager.getInstance().unmute();
                this.audioButton.setFrames("music_on_button_on.png", "music_on_button_off.png", "music_on_button_on.png");
            }
            else {
                BasketChamps.AudioManager.getInstance().mute();
                this.audioButton.setFrames("music_off_button_on.png", "music_off_button_off.png", "music_off_button_on.png");
            }
        };
        SplashState.prototype.onLogoClicked = function () {
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.MINIJUEGOS) {
                var win = window.open(BasketChamps.GameConstants.LINK_MINIJUEGOS, "_blank");
                win.focus();
            }
        };
        return SplashState;
    }(Phaser.State));
    BasketChamps.SplashState = SplashState;
})(BasketChamps || (BasketChamps = {}));
var BasketChamps;
(function (BasketChamps) {
    var TournamentManager = (function () {
        function TournamentManager() {
            if (TournamentManager._instance) {
                throw new Error("Error: Instantiation failed: Use TournamentModel.getInstance() instead of new.");
            }
            TournamentManager._instance = this;
        }
        TournamentManager.getInstance = function () {
            if (TournamentManager._instance === null) {
                TournamentManager._instance = new TournamentManager();
            }
            return TournamentManager._instance;
        };
        TournamentManager.prototype.init = function (game) {
            this.game = game;
            if (this.noEasyMode()) {
                BasketChamps.GameVars.getInstance().trajectoryHelp = false;
            }
            BasketChamps.GameVars.getInstance().myTeamID = this.myTeam();
            BasketChamps.GameVars.getInstance().numMatch = this.numMatch();
            BasketChamps.GameVars.getInstance().myGroupID = this.myGroup();
            BasketChamps.GameVars.getInstance().groupWins = this.groupWins();
            BasketChamps.GameVars.getInstance().groupLoses = this.groupLoses();
            BasketChamps.GameVars.getInstance().octFinal = this.octFinal();
            BasketChamps.GameVars.getInstance().cuartFinal = this.cuartFinal();
            BasketChamps.GameVars.getInstance().semFinal = this.semFinal();
            BasketChamps.GameVars.getInstance().final = this.final();
            BasketChamps.GameVars.getInstance().matchFinished = false;
            BasketChamps.GameVars.getInstance().firstSuddenDeath = this.firstSuddenDeath();
            BasketChamps.GameVars.getInstance().matchResults = this.getResultsMatchs();
            BasketChamps.GameVars.getInstance().resetTournament = this.resetTournament();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT, JSON.stringify(BasketChamps.GameVars.getInstance().resetTournament));
            if (BasketChamps.GameConstants.SPONSOR === BasketChamps.GameConstants.LAGGED) {
                BasketChamps.GameVars.getInstance().laggedAdsCounter = 0;
            }
            else {
                BasketChamps.GameVars.getInstance().laggedAdsCounter = null;
            }
            BasketChamps.GameVars.getInstance().currentVerticalMovement = BasketChamps.GameConstants.VERT_MOV_SLOW;
        };
        TournamentManager.prototype.removeFlags = function () {
            BasketChamps.BackgroundManager.currentInstance.removeFlags();
        };
        TournamentManager.prototype.resetTournament = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT) === "") {
                return false;
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT));
            }
        };
        TournamentManager.prototype.getResultsMatchs = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MATCH_RESULTS_KEY) === "") {
                return [0, 0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MATCH_RESULTS_KEY));
            }
        };
        TournamentManager.prototype.setResultsMatchs = function () {
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.MATCH_RESULTS_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().matchResults));
        };
        TournamentManager.prototype.changeEasyMode = function () {
            var trajectoryHelp = BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.TRAJECTORY_HELP_KEY);
            var numHelps = parseInt(trajectoryHelp);
            if (trajectoryHelp === "") {
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.TRAJECTORY_HELP_KEY, "1");
            }
            else if (numHelps < 2) {
                numHelps++;
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.TRAJECTORY_HELP_KEY, numHelps.toString());
            }
            else if (numHelps === 2) {
                numHelps++;
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.TRAJECTORY_HELP_KEY, numHelps.toString());
                BasketChamps.GameVars.getInstance().trajectoryHelp = false;
            }
        };
        TournamentManager.prototype.firstSuddenDeath = function () {
            var firstSuddenDeath = BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.FIRST_SUDDEN_KEY);
            if (firstSuddenDeath === "") {
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.FIRST_SUDDEN_KEY, "0");
                return true;
            }
            else if (firstSuddenDeath === "0") {
                return true;
            }
            return false;
        };
        TournamentManager.prototype.noEasyMode = function () {
            var trajectoryHelp = BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.TRAJECTORY_HELP_KEY);
            var numHelps = parseInt(trajectoryHelp);
            return numHelps === 3;
        };
        TournamentManager.prototype.myTeam = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MY_TEAM_ID_KEY) === "") {
                return 0;
            }
            else {
                return parseInt(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MY_TEAM_ID_KEY));
            }
        };
        TournamentManager.prototype.numMatch = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.NUM_MATCH_KEY) === "") {
                return 0;
            }
            else {
                return parseInt(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.NUM_MATCH_KEY));
            }
        };
        TournamentManager.prototype.myGroup = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MY_GROUP_ID_KEY) === "") {
                return "X";
            }
            else {
                return BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.MY_GROUP_ID_KEY);
            }
        };
        TournamentManager.prototype.groupWins = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.GROUP_WINS_KEY) === "") {
                return [0, 0, 0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.GROUP_WINS_KEY));
            }
        };
        TournamentManager.prototype.groupLoses = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.GROUP_LOSES_KEY) === "") {
                return [0, 0, 0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.GROUP_LOSES_KEY));
            }
        };
        TournamentManager.prototype.octFinal = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.OCT_FINAL_KEY) === "") {
                return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.OCT_FINAL_KEY));
            }
        };
        TournamentManager.prototype.cuartFinal = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.CUART_FINAL_KEY) === "") {
                return [0, 0, 0, 0, 0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.CUART_FINAL_KEY));
            }
        };
        TournamentManager.prototype.semFinal = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.SEMI_FINAL_KEY) === "") {
                return [0, 0, 0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.SEMI_FINAL_KEY));
            }
        };
        TournamentManager.prototype.final = function () {
            if (BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.FINAL_KEY) === "") {
                return [0, 0];
            }
            else {
                return JSON.parse(BasketChamps.GameVars.getInstance().getLocalStorageData(BasketChamps.GameConstants.FINAL_KEY));
            }
        };
        TournamentManager.prototype.selectMyTeam = function (value) {
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.MY_TEAM_ID_KEY, value);
            BasketChamps.GameVars.getInstance().myTeamID = value;
            var group;
            if (value <= 6) {
                group = "A";
            }
            else if (value <= 12) {
                group = "B";
            }
            else if (value <= 18) {
                group = "C";
            }
            else {
                group = "D";
            }
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.MY_GROUP_ID_KEY, group);
            BasketChamps.GameVars.getInstance().myGroupID = group;
            BasketChamps.BasketballCourtState.currentInstance.classificationLayer.setGroup();
            var wins = [0, 0, 0, 0, 0, 0];
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.GROUP_WINS_KEY, JSON.stringify(wins));
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.GROUP_LOSES_KEY, JSON.stringify(wins));
        };
        TournamentManager.prototype.processJSONData = function () {
            BasketChamps.GameVars.getInstance().teamsData = this.game.cache.getJSON("tournament-data").teams;
            BasketChamps.GameVars.getInstance().groupsData = this.game.cache.getJSON("tournament-data").groups;
            BasketChamps.GameVars.getInstance().matchsData = this.game.cache.getJSON("tournament-data").matchs;
        };
        TournamentManager.prototype.backToGroupFase = function () {
            BasketChamps.GameVars.getInstance().numMatch = 5;
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.NUM_MATCH_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().numMatch));
            localStorage.removeItem(BasketChamps.GameConstants.CUART_FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.SEMI_FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.RESET_TOURNAMENT);
            BasketChamps.GameVars.getInstance().cuartFinal = this.cuartFinal();
            BasketChamps.GameVars.getInstance().semFinal = this.semFinal();
            BasketChamps.GameVars.getInstance().final = this.final();
            BasketChamps.GameVars.getInstance().resetTournament = this.resetTournament();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT, JSON.stringify(BasketChamps.GameVars.getInstance().resetTournament));
        };
        TournamentManager.prototype.deleteLocalStorage = function () {
            localStorage.removeItem(BasketChamps.GameConstants.MY_TEAM_ID_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.MY_GROUP_ID_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.GROUP_LOSES_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.GROUP_WINS_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.NUM_MATCH_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.OCT_FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.CUART_FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.SEMI_FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.FINAL_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.MATCH_RESULTS_KEY);
            localStorage.removeItem(BasketChamps.GameConstants.RESET_TOURNAMENT);
            BasketChamps.GameVars.getInstance().myTeamID = this.myTeam();
            BasketChamps.GameVars.getInstance().numMatch = this.numMatch();
            BasketChamps.GameVars.getInstance().myGroupID = this.myGroup();
            BasketChamps.GameVars.getInstance().groupWins = this.groupWins();
            BasketChamps.GameVars.getInstance().groupLoses = this.groupLoses();
            BasketChamps.GameVars.getInstance().octFinal = this.octFinal();
            BasketChamps.GameVars.getInstance().cuartFinal = this.cuartFinal();
            BasketChamps.GameVars.getInstance().semFinal = this.semFinal();
            BasketChamps.GameVars.getInstance().final = this.final();
            BasketChamps.GameVars.getInstance().matchResults = this.getResultsMatchs();
            BasketChamps.GameVars.getInstance().resetTournament = this.resetTournament();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.RESET_TOURNAMENT, JSON.stringify(BasketChamps.GameVars.getInstance().resetTournament));
        };
        TournamentManager.prototype.nextMatch = function (win) {
            BasketChamps.MatchManager.currentInstance.newMatch();
            if (win) {
                BasketChamps.MatchManager.currentInstance.showClassification(1);
            }
            else {
                BasketChamps.MatchManager.currentInstance.showClassification(2);
            }
            BasketChamps.StageContainer.currentInstance.ball.resetBall();
            BasketChamps.StageContainer.currentInstance.ball.pause();
        };
        TournamentManager.prototype.matchResults = function () {
            var won = BasketChamps.GameVars.getInstance().playerPoints - BasketChamps.GameVars.getInstance().AIPoints > 0;
            var rand;
            if (BasketChamps.GameVars.getInstance().numMatch < 5) {
                var numMatch = BasketChamps.GameVars.getInstance().numMatch;
                if ((BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[numMatch].match1[0]) &&
                    (BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[numMatch].match1[1])) {
                    rand = Math.floor((Math.random() * 100));
                    if (rand < 50) {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match1[0] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match1[1] - 1]++;
                    }
                    else {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match1[1] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match1[0] - 1]++;
                    }
                }
                if ((BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[0]) &&
                    (BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[1])) {
                    rand = Math.floor((Math.random() * 100));
                    if (rand < 50) {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[0] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[1] - 1]++;
                    }
                    else {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[1] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match2[0] - 1]++;
                    }
                }
                if ((BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[0]) &&
                    (BasketChamps.GameVars.getInstance().playerIDtoGroupID() + 1 !== BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[1])) {
                    rand = Math.floor((Math.random() * 100));
                    if (rand < 50) {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[0] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[1] - 1]++;
                    }
                    else {
                        BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[1] - 1]++;
                        BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().matchsData[BasketChamps.GameVars.getInstance().numMatch].match3[0] - 1]++;
                    }
                }
                if (won) {
                    BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().playerIDtoGroupID()]++;
                    BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().GroupIDtoID(BasketChamps.GameVars.getInstance().oponentPlayer())]++;
                }
                else {
                    BasketChamps.GameVars.getInstance().groupLoses[BasketChamps.GameVars.getInstance().playerIDtoGroupID()]++;
                    BasketChamps.GameVars.getInstance().groupWins[BasketChamps.GameVars.getInstance().GroupIDtoID(BasketChamps.GameVars.getInstance().oponentPlayer())]++;
                }
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.GROUP_LOSES_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().groupLoses));
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.GROUP_WINS_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().groupWins));
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 5) {
                for (var i = 0; i < 8; i++) {
                    if (BasketChamps.GameVars.getInstance().octFinal[i * 2] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().cuartFinal[i] = BasketChamps.GameVars.getInstance().octFinal[i * 2];
                    }
                    else if (BasketChamps.GameVars.getInstance().octFinal[(i * 2) + 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().cuartFinal[i] = BasketChamps.GameVars.getInstance().octFinal[(i * 2) + 1];
                    }
                    else {
                        rand = Math.floor((Math.random() * 100));
                        if (rand < 50) {
                            BasketChamps.GameVars.getInstance().cuartFinal[i] = BasketChamps.GameVars.getInstance().octFinal[i * 2];
                        }
                        else {
                            BasketChamps.GameVars.getInstance().cuartFinal[i] = BasketChamps.GameVars.getInstance().octFinal[(i * 2) + 1];
                        }
                    }
                }
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.CUART_FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().cuartFinal));
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 6) {
                for (var i = 0; i < 4; i++) {
                    if (BasketChamps.GameVars.getInstance().cuartFinal[i * 2] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().semFinal[i] = BasketChamps.GameVars.getInstance().cuartFinal[i * 2];
                    }
                    else if (BasketChamps.GameVars.getInstance().cuartFinal[(i * 2) + 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().semFinal[i] = BasketChamps.GameVars.getInstance().cuartFinal[(i * 2) + 1];
                    }
                    else {
                        rand = Math.floor((Math.random() * 100));
                        if (rand < 50) {
                            BasketChamps.GameVars.getInstance().semFinal[i] = BasketChamps.GameVars.getInstance().cuartFinal[i * 2];
                        }
                        else {
                            BasketChamps.GameVars.getInstance().semFinal[i] = BasketChamps.GameVars.getInstance().cuartFinal[(i * 2) + 1];
                        }
                    }
                }
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.SEMI_FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().semFinal));
            }
            else if (BasketChamps.GameVars.getInstance().numMatch === 7) {
                for (var i = 0; i < 2; i++) {
                    if (BasketChamps.GameVars.getInstance().semFinal[i * 2] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().final[i] = BasketChamps.GameVars.getInstance().semFinal[i * 2];
                    }
                    else if (BasketChamps.GameVars.getInstance().semFinal[(i * 2) + 1] === BasketChamps.GameVars.getInstance().myTeamID) {
                        BasketChamps.GameVars.getInstance().final[i] = BasketChamps.GameVars.getInstance().semFinal[(i * 2) + 1];
                    }
                    else {
                        rand = Math.floor((Math.random() * 100));
                        if (rand < 50) {
                            BasketChamps.GameVars.getInstance().final[i] = BasketChamps.GameVars.getInstance().semFinal[i * 2];
                        }
                        else {
                            BasketChamps.GameVars.getInstance().final[i] = BasketChamps.GameVars.getInstance().semFinal[(i * 2) + 1];
                        }
                    }
                }
                BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().final));
            }
            BasketChamps.GameVars.getInstance().numMatch++;
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.NUM_MATCH_KEY, BasketChamps.GameVars.getInstance().numMatch.toString());
        };
        TournamentManager.prototype.showRound2 = function (teamsSort) {
            this.groupWinners(teamsSort);
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.OCT_FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().octFinal));
            BasketChamps.GameVars.getInstance().cuartFinal = this.cuartFinal();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.CUART_FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().cuartFinal));
            BasketChamps.GameVars.getInstance().semFinal = this.semFinal();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.SEMI_FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().semFinal));
            BasketChamps.GameVars.getInstance().final = this.final();
            BasketChamps.GameVars.getInstance().setLocalStorageData(BasketChamps.GameConstants.FINAL_KEY, JSON.stringify(BasketChamps.GameVars.getInstance().final));
            BasketChamps.BasketballCourtState.currentInstance.tournamentLayer.showTournament();
        };
        TournamentManager.prototype.groupWinners = function (teamsSort) {
            var winners = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (var i = 0; i < 4; i++) {
                if (BasketChamps.GameVars.getInstance().IDtoGroupID(teamsSort[i].id + 1) + 1 === BasketChamps.GameVars.getInstance().myTeamID) {
                    var aux = winners[0];
                    winners[i * 4] = aux;
                    winners[0] = BasketChamps.GameVars.getInstance().IDtoGroupID(teamsSort[i].id + 1) + 1;
                }
                else {
                    winners[i * 4] = BasketChamps.GameVars.getInstance().IDtoGroupID(teamsSort[i].id + 1) + 1;
                }
            }
            var round = 1;
            if (BasketChamps.GameVars.getInstance().myGroupID !== "A") {
                var rands = Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5]);
                rands = rands.slice(1, 5);
                for (var i = 0; i < 4; i++) {
                    winners[(i * 4) + round] = rands[i] + 1;
                }
                round++;
            }
            if (BasketChamps.GameVars.getInstance().myGroupID !== "B") {
                var rands = Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5]);
                rands = rands.slice(1, 5);
                for (var i = 0; i < 4; i++) {
                    winners[(i * 4) + round] = (rands[i] + 1) + 6;
                }
                round++;
            }
            if (BasketChamps.GameVars.getInstance().myGroupID !== "C") {
                var rands = Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5]);
                rands = rands.slice(1, 5);
                for (var i = 0; i < 4; i++) {
                    winners[(i * 4) + round] = (rands[i] + 1) + 12;
                }
                round++;
            }
            if (BasketChamps.GameVars.getInstance().myGroupID !== "D") {
                var rands = Phaser.ArrayUtils.shuffle([0, 1, 2, 3, 4, 5]);
                rands = rands.slice(1, 5);
                for (var i = 0; i < 4; i++) {
                    winners[(i * 4) + round] = (rands[i] + 1) + 18;
                }
                round++;
            }
            BasketChamps.GameVars.getInstance().octFinal = winners;
        };
        return TournamentManager;
    }());
    TournamentManager._instance = null;
    BasketChamps.TournamentManager = TournamentManager;
})(BasketChamps || (BasketChamps = {}));
var Fabrique;
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster = (function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, "cacheBuster", {
                    value: null
                });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return "";
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += "?v=" + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    }
                    else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin));
        Plugins.CacheBuster = CacheBuster;
    })(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {}));
})(Fabrique || (Fabrique = {}));
var Utils;
(function (Utils) {
    var RectangleWithRadius = (function (_super) {
        __extends(RectangleWithRadius, _super);
        function RectangleWithRadius(game, x, y, width, height, r, color, alpha, configuration, blendMode) {
            var _this = _super.call(this, game, null, "rectangle_with_radius", false) || this;
            if (typeof configuration === "undefined") {
                configuration = RectangleWithRadius.NORMAL_CONFIGURATION;
            }
            if (typeof blendMode === "undefined") {
                blendMode = 0;
            }
            if (typeof alpha === "undefined") {
                alpha = 1;
            }
            var deltaY = 0;
            if (configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                deltaY = -r;
            }
            var reusableBmd = game.add.bitmapData(100, 100);
            reusableBmd.ctx.beginPath();
            reusableBmd.ctx.rect(0, 0, 100, 100);
            reusableBmd.ctx.fillStyle = color;
            reusableBmd.ctx.fill();
            var rectangle = new Phaser.Sprite(game, x + r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo((width - 2 * r) / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100 + deltaY);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x + width - r, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                rectangle = new Phaser.Sprite(game, x + r, y + height - r + deltaY, reusableBmd);
                rectangle.scale.setTo((width - 2 * r) / 100, r / 100);
                rectangle.alpha = alpha;
                rectangle.blendMode = blendMode;
                _this.add(rectangle);
            }
            rectangle = new Phaser.Sprite(game, x, y + r + deltaY, reusableBmd);
            rectangle.scale.setTo(r / 100, (height - 2 * r) / 100);
            rectangle.alpha = alpha;
            rectangle.blendMode = blendMode;
            _this.add(rectangle);
            var cornerBmd = game.add.bitmapData(r, r);
            cornerBmd.ctx.beginPath();
            cornerBmd.ctx.arc(0, 0, r, 0, Math.PI);
            cornerBmd.ctx.fillStyle = color;
            cornerBmd.ctx.fill();
            var corner;
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.TOP_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 180;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 270;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            if (configuration === RectangleWithRadius.NORMAL_CONFIGURATION || configuration === RectangleWithRadius.BOTTOM_CONFIGURATION) {
                corner = new Phaser.Sprite(game, x + r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 90;
                corner.blendMode = blendMode;
                _this.add(corner);
                corner = new Phaser.Sprite(game, x + width - r, y + height - r + deltaY, cornerBmd);
                corner.alpha = alpha;
                corner.angle = 0;
                corner.blendMode = blendMode;
                _this.add(corner);
            }
            return _this;
        }
        return RectangleWithRadius;
    }(Phaser.Group));
    RectangleWithRadius.TOP_CONFIGURATION = "top";
    RectangleWithRadius.BOTTOM_CONFIGURATION = "botton";
    RectangleWithRadius.NORMAL_CONFIGURATION = "normal";
    Utils.RectangleWithRadius = RectangleWithRadius;
})(Utils || (Utils = {}));