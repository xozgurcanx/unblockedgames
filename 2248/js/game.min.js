var resolution = 2;
var resolution = 2;
var isPrivate = false;
var gamePaused = false;
var taille = 108;
var auto_camera = true;
var vect_shop = [];
var tuto_activated = false;
var spawner_nbr_object_requested = [
  [5],
  [7, 10, 12],
  [10, 15, 10],
  [15, 10, 15, 12],
  [20, 25],
  [20, 25, 22, 25],
  [25, 20, 25],
  [30, 25, 30],
  [25, 25, 25, 25, 5],
  [30, 25, 35],
  [40, 35, 30],
  [35, 40, 30],
  [45, 40],
  [30, 35, 40, 42],
  [30, 25, 35],
  [50, 45],
  [45, 50, 45],
  [50, 40, 30, 20],
  [45],
  [35, 40, 50, 55],
  [55, 50, 30],
  [50, 60, 50],
  [40, 55, 50, 60],
  [60, 55, 55, 50],
  [40, 30, 35],
  [65, 60],
  [60, 50],
  [60, 65, 60],
  [70, 70, 65, 60],
  [70, 75, 80, 75]
];
var vect_coef = [
  2,
  4,
  8,
  16,
  32,
  64,
  128,
  256,
  512,
  1024,
  2048,
  4096,
  8192,
  16384,
  32768,
  65536,
  131072,
  262144,
  524288
];
var Music = {
  enableMisic: true,
  music: null,
  sounds: null
};
var sauvegarde = [];
var level;
var nombre_levels = 30;
var money;
var langFont = 'px "Arial"';

function Save_setItem(name, value) {
  if (!isPrivate) localStorage.setItem(name, value);
}

function Save_getItem(name, pardefaut) {
  if (!isPrivate) return localStorage.getItem(name);
  else return pardefaut;
}

function save_lire(str1) {
  sauvegarde = [];
  var str = str1.split(",");
  var ligne = 0;
  var taille;
  var ii = 0;
  while (ii < str.length) {
    sauvegarde[ii] = {
      numetoile: 0
    };
    sauvegarde[ii].numetoile = +str[ii++];
  }
}

function save_ecrit() {
  var str = "";
  for (var i = 0; i < nombre_levels; i++) {
    str += "" + sauvegarde[i].numetoile;
    if (i < nombre_levels - 1) str += ",";
  }
  Save_setItem("NumbersGame_sauvegarde", str);
}
NumbersGame = {};
NumbersGame.Boot = function(game) {};
NumbersGame.Boot.prototype = {
  preload: function() {
    this.game.load.image(
      "preloadSprite",
      "assets/loading_bar" + resolution + ".png"
    );
    this.game.load.image(
      "preloadSprite1",
      "assets/load_bar" + resolution + ".png"
    );
    game.load.atlasXML("sprites", "assets/sprites.png", "assets/sprites.xml");
    game.load.image("rotate", "assets/rotate" + resolution + ".png");
    game.load.image("bg_Play3", "assets/bgPlay3" + resolution + ".png");
  },
  create: function() {
    this.input.maxPointers = 1;
    if (
      this.game.device.desktop ||
      (this.is_touch_device() &&
        (this.game.device.windows ||
          this.game.device.macOS ||
          (this.game.device.linux && this.game.device.silk === false)))
    ) {
      this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
      this.scale.pageAlignHorizontally = true;
      this.scale.pageAlignVertically = true;
    } else {
      this.scale.scaleMode = Phaser.ScaleManager.EXACT_FIT;
      this.scale.forceOrientation(false, true);
    }
    this.game.scale.enterPortrait.add(this.enterPortrait, this);
    this.game.scale.enterLandscape.add(this.enterLandscape, this);
    this.scale.setScreenSize(true);
    this.game.state.start("preload");
  },
  is_touch_device: function() {
    return (
      "ontouchstart" in window ||
      navigator.MaxTouchPoints > 0 ||
      navigator.msMaxTouchPoints > 0
    );
  },
  enterPortrait: function() {
    game.paused = true;
    this.rescale();
  },
  enterLandscape: function() {
    game.paused = false;
    this.rescale();
  },
  rescale: function() {
    var _game = this.game;
    setTimeout(function() {
      _game.scale.refresh();
      setTimeout(function() {
        _game.scale.refresh();
      }, 400);
    }, 400);
  }
};
text = {
  texteTuto1: "Match 3 or more jewels\n of the same\ncolor to collect them",
  texteTuto2:
    "you should complete all \nthe objectives before you\n run out of moves",
  textCongratulations: "Congratulations",
  youwin: "you win",
  score: "score",
  txtPause: "GAME PAUSED",
  txtgameover: "AWESOME!",
  txtlevel: "level",
  txtShop: "You have: ",
  levelsSelection: "level selection",
  texteShop: "you can buy boosters here\n to help yourself to win",
  textepower_up0: "use this booster\n to remove the column you select",
  textepower_up1: "use this booster\n to remove any line you select",
  textepower_up2: "use this booster\n to remove all the jewels around",
  textepower_up3: "use this booster\n to add more moves"
};
NumbersGame.Preload = function(game) {
  this.emitter = null;
  this.emitter1 = null;
};
NumbersGame.Preload.prototype = {
  preload: function() {
    game.add.sprite(0 * resolution, 0 * resolution, "bg_Play3");
    var progressBar1 = game.add.sprite(
      0 * resolution,
      240 * resolution,
      "preloadSprite"
    );
    var progressBar = game.add.sprite(
      0 * resolution,
      240 * resolution,
      "preloadSprite1"
    );
    progressBar.x = (320 * resolution - progressBar.width) / 2;
    progressBar1.x = progressBar.x;
    progressBar1.y = progressBar.y;
    game.load.setPreloadSprite(progressBar);
    game.load.image("rotate", "assets/rotate" + resolution + ".png");
    game.load.image("bg_Play1", "assets/bgPlay1" + resolution + ".png");
    game.load.image("bg_Play2", "assets/bgPlay2" + resolution + ".png");
    game.load.image("bg_Play4", "assets/bgPlay4" + resolution + ".png");
    game.load.image("bg_Tuto1", "assets/bgTuto1" + resolution + ".png");
    game.load.image("bg_Tuto2", "assets/bgTuto2" + resolution + ".png");
    game.load.image("bg_Tuto3", "assets/bgTuto3" + resolution + ".png");
    game.load.image("pausebg01", "assets/pausebg01" + resolution + ".png");
    game.load.audio("song17", [
      "assets/music/song17.ogg",
      "assets/music/song17.mp3"
    ]);
    game.load.audio("sounds", [
      "assets/music/sounds.ogg",
      "assets/music/sounds.mp3"
    ]);
    this.ready = false;
  },
  create: function() {
    tuto_activated = true;
    document.body.style.backgroundImage = "url('assets/bgPlay32.png')";
    if (game.device.localStorage) {
      this.TestPrivate();
      var str = Save_getItem("NumbersGame_sauvegarde", null);
      level = Save_getItem("NumbersGame_level", 0);
      if (str == null || str == "null" || level == null || level == "null") {
        sauvegarde = [];
        for (var i = 0; i < nombre_levels; i++) {
          sauvegarde[i] = {
            numetoile: 0
          };
        }
        save_ecrit();
        Save_setItem("NumbersGame_level", 0);
        level = 0;
        Save_setItem("NumbersGame_money", 0);
        money = 0;
      } else {
        save_lire(str);
        money = +Save_getItem("NumbersGame_money", 0);
      }
    }
  },
  TestPrivate: function() {
    var testKey = "qeTest",
      storage = window.sessionStorage;
    try {
      storage.setItem(testKey, "1");
      storage.removeItem(testKey);
    } catch (error) {
      if (
        error.code === DOMException.QUOTA_EXCEEDED_ERR &&
        storage.length === 0
      ) {
        isPrivate = true;
      } else {
        isPrivate = false;
      }
    }
  },
  update: function() {
    if (
      game.cache.isSoundDecoded("song17") &&
      game.cache.isSoundDecoded("sounds") &&
      this.ready == false
    ) {
      this.ready = true;
      game.onPause.add(function() {
        gamePaused = true;
        Music.music.pause();
      }, this);
      game.onResume.add(function() {
        gamePaused = false;
        if (Music.enableMisic) Music.music.resume();
      }, this);
      this.game.state.start("menu");
      play.numLevel = parseInt(level) + 1;
      Music.music = this.game.add.audio("song17", 0);
      Music.sounds = this.game.add.audio("sounds", 0.5);
      Music.sounds.addMarker("button", 0, 0.06594104308390022);
      Music.sounds.addMarker("collect", 2, 0.0903854875283447);
      Music.sounds.addMarker("start", 4, 1.5154421768707484);
      Music.sounds.addMarker("result", 7, 0.349977324263039);
      Music.sounds.addMarker("pause", 9, 0.259773242630386);
      Music.sounds.addMarker("resume", 11, 0.26013605442177);
      Music.sounds.addMarker("level_up", 13, 2.384625850340136);
      Music.music.play();
      Music.music.onStop.add(function() {
        if (gamePaused) return;
        if (Music.enableMisic) Music.music.play();
      }, this);
    }
  }
};
var Bouton = function(
  game,
  x,
  y,
  key,
  callback,
  callbackContext,
  overFrame,
  outFrame,
  downFrame
) {
  Phaser.Button.call(
    this,
    game,
    x,
    y,
    key,
    callback,
    callbackContext,
    overFrame,
    outFrame,
    downFrame
  );
  this.anchor.setTo(0.5, 0.5);
  this.onInputDown.add(function() {
    if (Music.enableMisic) Music.sounds.play("button");
    this.game.add
      .tween(this.scale)
      .to(
        {
          x: 1.1,
          y: 0.9
        },
        200,
        Phaser.Easing.Quadratic.Out,
        true,
        0
      )
      .to(
        {
          x: 1,
          y: 1
        },
        500,
        Phaser.Easing.Elastic.Out,
        true
      );
    if (this.txt) {
      game.world.bringToTop(this.txt);
      this.game.add
        .tween(this.txt.scale)
        .to(
          {
            x: 1.2,
            y: 0.8
          },
          200,
          Phaser.Easing.Quadratic.Out,
          true,
          0
        )
        .to(
          {
            x: 1,
            y: 1
          },
          500,
          Phaser.Easing.Elastic.Out,
          true
        );
    }
  }, this);
  this.onInputUp.add(function() {
    this.scale.setTo(1, 1);
    if (this.txt) {
      game.world.bringToTop(this.txt);
      this.txt.scale.setTo(1, 1);
    }
  }, this);
  this.onInputOut.add(function() {
    this.scale.setTo(1, 1);
    if (this.txt) {
      game.world.bringToTop(this.txt);
      this.txt.scale.setTo(1, 1);
    }
  }, this);
};
Bouton.prototype = Object.create(Phaser.Button.prototype);
Bouton.prototype.constructor = Bouton;
NumbersGame.Menu = function(game) {
  this.musicbnt = null;
  this.bnt_play = null;
  this.bnt_credits = null;
  this.shopbnt = null;
  this.logo = null;
  this.emitter = null;
  this.emitter1 = null;
  this.bg_menu = null;
  this.changer = null;
};
NumbersGame.Menu.prototype = {
  create: function() {
    this.bg_menu = game.add.sprite(0, 0, "bg_Play3");
    this.bg_menu.count = 1;
    this.changer = new Bouton(
      this.game,
      45,
      840,
      "sprites",
      function() {
        this.bg_menu.count += 1;
        if (this.bg_menu.count >= 5) this.bg_menu.count = 1;
        this.bg_menu.loadTexture("bg_Play" + this.bg_menu.count);
      },
      this
    );
    this.changer.frameName = "changer2.png";
    this.game.world.add(this.changer);
    this.logo = game.add.sprite(160 * resolution, 150 * resolution, "sprites");
    this.logo.frameName = "logo2.png";
    this.logo.anchor.setTo(0.5, 0.5);
    this.logo.scale.setTo(0, 0);
    game.add.tween(this.logo.scale).to(
      {
        x: 1,
        y: 1
      },
      1e3,
      Phaser.Easing.Elastic.Out,
      true
    );
    this.bnt_play = new Bouton(
      this.game,
      0,
      0,
      "sprites",
      this.actionPlay,
      this
    );
    this.bnt_play.frameName = "play_bnt" + resolution + ".png";
    this.bnt_play.anchor.setTo(0.5, 0.5);
    this.bnt_play.scale.setTo(0, 0);
    this.bnt_play.x = 160 * resolution;
    this.bnt_play.y = 270 * resolution;
    this.world.add(this.bnt_play);
    this.musicbnt = new Bouton(
      this.game,
      160 * resolution,
      350 * resolution,
      "sprites",
      this.actionMusic,
      this
    );
    this.musicbnt.frameName = "sound_menu_bnt" + resolution + ".png";
    this.musicbnt.scale.setTo(0, 0);
    this.world.add(this.musicbnt);
    game.add
      .tween(this.bnt_play.scale)
      .to(
        {
          x: 1,
          y: 1
        },
        1e3,
        Phaser.Easing.Quadratic.Out,
        false,
        1200
      )
      .to(
        {
          x: 0.9,
          y: 0.9
        },
        400,
        Phaser.Easing.Bounce.Out
      )
      .loop()
      .start();
    game.add
      .tween(this.musicbnt.scale)
      .to(
        {
          x: 1,
          y: 1
        },
        1e3,
        Phaser.Easing.Quadratic.Out,
        false,
        1200
      )
      .to(
        {
          x: 0.9,
          y: 0.9
        },
        400,
        Phaser.Easing.Bounce.Out
      )
      .loop()
      .start();
    if (Music.enableMisic) {
      this.musicbnt.frameName = "sound_bnt" + resolution + ".png";
    } else {
      this.musicbnt.frameName = "sound_mute_bnt" + resolution + ".png";
    }
    game.time.events.add(
      0,
      function() {
        this.analytics_call();
      },
      this
    );
  },
  analytics_call: function() {
    if (typeof analytics === "undefined" || typeof analytics === undefined) {
      game.time.events.add(
        3e3,
        function() {
          this.analytics_call();
        },
        this
      );
    } else analytics.menu();
  },
  actionMusic: function() {
    Music.enableMisic = !Music.enableMisic;
    if (Music.enableMisic) {
      this.musicbnt.frameName = "sound_bnt" + resolution + ".png";
      Music.music.resume();
    } else {
      this.musicbnt.frameName = "sound_mute_bnt" + resolution + ".png";
      Music.music.pause();
    }
  },
  actionPlay: function() {
    var BG_noire = game.add.sprite(0, 0, "pausebg01");
    BG_noire.alpha = 0;
    BG_noire.y = game.camera.y;
    var tween1 = this.add.tween(BG_noire).to(
      {
        alpha: 1
      },
      1e3,
      Phaser.Easing.Linear.None
    );
    this.valeur = "menu";
    tween1.onComplete.add(this.next_state, this);
    tween1.start();
  },
  next_state: function() {
    this.game.state.start("play", true);
  },
  update: function() {}
};
NumbersGame.Play = function(game) {
  this.numLevel = null;
  this.gameOver = false;
  this.next_level = null;
  this.bnt_pause = null;
  this.sound_bnt = null;
  this.bnt_replay = null;
  this.bgPause = null;
  this.start = null;
  this.groupPause = null;
  this.groupNexLevel = null;
  this.textPause = null;
  this.timerEndLevel = null;
  this.timerEndLevelAndLose = null;
  this.istimerEndLevel = null;
  this.istimerEndLevelAndLose = null;
  this.stateMusic = null;
  this.groupe_object = null;
  this.onclick = null;
  this.debut_swip = null;
  this.nbr_move = null;
  this.score = null;
  this.score_texte = null;
  this.bg_tuto = null;
  this.tuto = null;
  this.hand_tuto = null;
  this.num_tuto = null;
  this.vect_object_selectionne = null;
  this.mat_objects = null;
  this.mat_delete = null;
  this.deplacer = null;
  this.destruction = null;
  this.repositionnement = null;
  this.taille_grille_y = null;
  this.taille_grille_x = null;
  this.nbr_object_to_die = null;
  this.nbr_object_repositionner = null;
  this.groupe_lines = null;
  this.bg_play = null;
  this.max_coef = null;
  this.minutes = null;
  this.secondes = null;
  this.bonus_time = null;
  this.bonus_timer = null;
  this.txt_time_game = null;
  this.txt_TIMER = null;
};
NumbersGame.Play.prototype = {
  create: function() {
    this.initAtributs();
    this.bg_play = game.add.sprite(0, 0, "bg_Play1");
    this.bg_play.count = 1;
    if (this.numLevel > nombre_levels) {
      this.createCongratulations();
      return;
    }
    game.add.sprite(
      21 * resolution,
      0 * resolution,
      "sprites",
      "container_time2.png"
    );
    this.minutes = 0;
    this.secondes = 0;
    this.bonus_time = 1;
    this.bonus_timer = 1e3;
    this.txt_time_game = game.add.text(
      102 * resolution,
      10,
      this.minutes + "0:0" + this.secondes,
      {
        font: 30 + langFont,
        align: "center",
        fill: "#ffffff",
        stroke: "#ffffff",
        strokeThickness: 0
      }
    );
    this.txt_time_game.updateText();
    this.txt_time_game.x = 90 - this.txt_time_game.width / 2;
    this.game.world.add(this.txt_time_game);
    this.groupe_lines = game.add.group();
    this.groupe_object = game.add.group();
    this.mat_objects = [];
    for (var i = 0; i < this.taille_grille_y; i++) {
      this.mat_objects[i] = [];
      for (var j = 0; j < this.taille_grille_x; j++) {
        var object = game.add.sprite(j * taille, i * taille, "sprites");
        object.anchor.setTo(0.5, 0.5);
        object.x += taille / 2 + 50;
        object.y += taille / 2 + 60 - 1e3;
        object.selectionne = false;
        object.alive = true;
        object.line = null;
        object.coef =
          vect_coef[Math.floor(Math.random() * (this.max_coef - 0.1))];
        object.frameName = "" + object.coef + ".png";
        object.inputEnabled = true;
        object.events.onInputDown.add(this.click_on_object, object);
        object.events.onInputUp.add(this.click_up_object, object);
        this.mat_objects[i][j] = object;
        this.groupe_object.add(object);
        if (tuto_activated) this.mat_objects[i][j].Allowed = false;
      }
    }
    if (Music.enableMisic) Music.sounds.play("start", 0.1);
    var delais = 0;
    for (var i = this.taille_grille_y - 1; i >= 0; i--) {
      for (var j = 0; j < this.taille_grille_x; j++) {
        game.add.tween(this.mat_objects[i][j]).to(
          {
            y: this.mat_objects[i][j].y + 1e3
          },
          700,
          Phaser.Easing.Quadratic.Out,
          true,
          delais
        );
      }
      delais += 180;
    }
    this.createButtonsPlay();
    this.createPause();
    if (tuto_activated) {
      this.num_tuto = 1;
      this.mat_objects[2][1].coef = 2;
      this.mat_objects[2][1].frameName =
        "" + this.mat_objects[2][1].coef + ".png";
      this.mat_objects[2][1].Allowed = true;
      this.mat_objects[2][2].coef = 2;
      this.mat_objects[2][2].frameName =
        "" + this.mat_objects[2][2].coef + ".png";
      this.mat_objects[2][2].Allowed = true;
      game.time.events.add(
        2e3,
        function() {
          this.bg_tuto = game.add.sprite(0, 0, "bg_Tuto1");
          this.hand_tuto = game.add.sprite(130, 400, "sprites");
          this.hand_tuto.frameName = "hand_tuto" + resolution + ".png";
          this.hand_tuto.move_tween = game.add
            .tween(this.hand_tuto)
            .to(
              {
                x: this.hand_tuto.x + 240
              },
              800,
              Phaser.Easing.Quadratic.Out
            )
            .to(
              {
                x: this.hand_tuto.x
              },
              200,
              Phaser.Easing.Quadratic.Out
            );
          this.hand_tuto.move_tween.loop();
          this.hand_tuto.move_tween.start();
        },
        this
      );
    }
  },
  next_tuto: function() {
    this.num_tuto += 1;
    if (this.num_tuto == 2) {
      this.mat_objects[3][0].coef = 2;
      this.mat_objects[3][0].frameName =
        "" + this.mat_objects[3][0].coef + ".png";
      this.mat_objects[3][0].Allowed = true;
      this.mat_objects[3][1].coef = 2;
      this.mat_objects[3][1].frameName =
        "" + this.mat_objects[3][1].coef + ".png";
      this.mat_objects[3][1].Allowed = true;
      this.mat_objects[3][2].coef = 4;
      this.mat_objects[3][2].frameName =
        "" + this.mat_objects[3][2].coef + ".png";
      this.mat_objects[3][2].Allowed = true;
      this.mat_objects[3][3].coef = 8;
      this.mat_objects[3][3].frameName =
        "" + this.mat_objects[3][3].coef + ".png";
      this.mat_objects[3][3].Allowed = true;
      this.bg_tuto.loadTexture("bg_Tuto2");
      this.hand_tuto.move_tween.pendingDelete = true;
      this.hand_tuto.y += 100;
      this.hand_tuto.x = 80;
      this.hand_tuto.move_tween = game.add
        .tween(this.hand_tuto)
        .to(
          {
            x: this.hand_tuto.x + 360
          },
          1e3,
          Phaser.Easing.Quadratic.Out
        )
        .to(
          {
            x: this.hand_tuto.x
          },
          300,
          Phaser.Easing.Quadratic.Out
        );
      this.hand_tuto.move_tween.loop();
      this.hand_tuto.move_tween.start();
    } else if (this.num_tuto == 3) {
      this.mat_objects[4][0].coef = 4;
      this.mat_objects[4][0].frameName =
        "" + this.mat_objects[4][0].coef + ".png";
      this.mat_objects[4][0].Allowed = true;
      this.mat_objects[4][1].coef = 4;
      this.mat_objects[4][1].frameName =
        "" + this.mat_objects[4][1].coef + ".png";
      this.mat_objects[4][1].Allowed = true;
      this.mat_objects[4][2].coef = 8;
      this.mat_objects[4][2].frameName =
        "" + this.mat_objects[4][2].coef + ".png";
      this.mat_objects[4][2].Allowed = true;
      this.mat_objects[4][3].coef = 16;
      this.mat_objects[4][3].frameName =
        "" + this.mat_objects[4][3].coef + ".png";
      this.mat_objects[4][3].Allowed = true;
      this.bg_tuto.loadTexture("bg_Tuto3");
      this.hand_tuto.move_tween.pendingDelete = true;
      this.hand_tuto.y += 100;
      this.hand_tuto.x = 80;
      this.hand_tuto.move_tween = game.add
        .tween(this.hand_tuto)
        .to(
          {
            x: this.hand_tuto.x + 360
          },
          1e3,
          Phaser.Easing.Quadratic.Out
        )
        .to(
          {
            x: this.hand_tuto.x
          },
          300,
          Phaser.Easing.Quadratic.Out
        );
      this.hand_tuto.move_tween.loop();
      this.hand_tuto.move_tween.start();
    } else if (this.num_tuto == 4) {
      tuto_activated = false;
      this.bg_tuto.destroy();
      this.hand_tuto.destroy();
    }
  },
  click_on_object: function() {
    if (
      play.gameOver ||
      play.pausePlay ||
      play.istimerEndLevel ||
      play.istimerEndLevelAndLose ||
      play.tuto_isactivated
    )
      return;
    if (
      play.onclick ||
      play.vect_object_selectionne.length != 0 ||
      play.destruction ||
      play.repositionnement
    )
      return;
    if (tuto_activated && !this.Allowed) return;
    this.selectionne = true;
    play.onclick = true;
    play.vect_object_selectionne.push(this);
    play.vect_object_selectionne[
      play.vect_object_selectionne.length - 1
    ].scale.setTo(1.3, 1.3);
    if (Music.enableMisic) Music.sounds.play("collect");
  },
  click_up_object: function() {
    if (
      play.gameOver ||
      play.pausePlay ||
      play.istimerEndLevel ||
      play.istimerEndLevelAndLose ||
      play.tuto_isactivated
    )
      return;
    if (play.destruction || !play.onclick || play.repositionnement) return;
    play.onclick = false;
    play.vect_object_selectionne[
      play.vect_object_selectionne.length - 1
    ].scale.setTo(1, 1);
    if (play.vect_object_selectionne.length >= 2) {
      if (tuto_activated) play.next_tuto();
      play.verification_after_create();
    } else {
      play.vect_object_selectionne[0].selectionne = false;
      play.vect_object_selectionne = [];
    }
  },
  selectionnement: function() {
    for (var k = 0; k < this.groupe_object.length; k++) {
      if (this.groupe_object.getAt(k).alive) {
        if (
          Phaser.Rectangle.containsPoint(
            this.groupe_object.getAt(k).getBounds(),
            game.input.activePointer
          )
        ) {
          if (this.groupe_object.getAt(k).selectionne) {
            this.vect_object_selectionne[
              this.vect_object_selectionne.length - 1
            ].scale.setTo(1, 1);
            var a = this.vect_object_selectionne.indexOf(
              this.groupe_object.getAt(k)
            );
            if (this.vect_object_selectionne[a].line != null) {
              this.vect_object_selectionne[a].line.destroy();
              this.vect_object_selectionne[a].line = null;
            }
            while (a + 1 < this.vect_object_selectionne.length) {
              this.vect_object_selectionne[a + 1].selectionne = false;
              if (this.vect_object_selectionne[a + 1].line != null) {
                this.vect_object_selectionne[a + 1].line.destroy();
                this.vect_object_selectionne[a + 1].line = null;
              }
              this.vect_object_selectionne.splice(a + 1, 1);
            }
            this.vect_object_selectionne[
              this.vect_object_selectionne.length - 1
            ].scale.setTo(1.3, 1.3);
          } else if (tuto_activated && !this.groupe_object.getAt(k).Allowed)
            return;
          else if (
            Math.abs(
              this.groupe_object.getAt(k).x -
                this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].x
            ) <= taille &&
            Math.abs(
              this.groupe_object.getAt(k).y -
                this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].y
            ) <= taille
          ) {
            if (
              (this.vect_object_selectionne.length == 1 &&
                this.vect_object_selectionne[0].coef ==
                  this.groupe_object.getAt(k).coef) ||
              (this.vect_object_selectionne.length > 1 &&
                (this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].coef == this.groupe_object.getAt(k).coef ||
                  this.vect_object_selectionne[
                    this.vect_object_selectionne.length - 1
                  ].coef *
                    2 ==
                    this.groupe_object.getAt(k).coef))
            ) {
              this.vect_object_selectionne[
                this.vect_object_selectionne.length - 1
              ].line = game.add.sprite(
                this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].x,
                this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].y,
                "sprites",
                "line" +
                  this.vect_object_selectionne[
                    this.vect_object_selectionne.length - 1
                  ].coef +
                  ".png"
              );
              this.vect_object_selectionne[
                this.vect_object_selectionne.length - 1
              ].line.anchor.setTo(0, 0.5);
              this.vect_object_selectionne[
                this.vect_object_selectionne.length - 1
              ].line.angle =
                (Math.atan2(
                  this.groupe_object.getAt(k).y -
                    this.vect_object_selectionne[
                      this.vect_object_selectionne.length - 1
                    ].y,
                  this.groupe_object.getAt(k).x -
                    this.vect_object_selectionne[
                      this.vect_object_selectionne.length - 1
                    ].x
                ) *
                  180) /
                Math.PI;
              this.groupe_lines.add(
                this.vect_object_selectionne[
                  this.vect_object_selectionne.length - 1
                ].line
              );
              this.groupe_object.getAt(k).selectionne = true;
              this.vect_object_selectionne[
                this.vect_object_selectionne.length - 1
              ].scale.setTo(1, 1);
              this.vect_object_selectionne.push(this.groupe_object.getAt(k));
              this.vect_object_selectionne[
                this.vect_object_selectionne.length - 1
              ].scale.setTo(1.3, 1.3);
              if (Music.enableMisic) Music.sounds.play("collect");
            }
          }
        }
      }
    }
  },
  initAtributs: function() {
    this.stateMusic = Music.enableMisic;
    this.timerEndLevel = null;
    this.timerEndLevelAndLose = null;
    this.istimerEndLevel = false;
    this.istimerEndLevelAndLose = false;
    this.gameOver = false;
    this.pausePlay = false;
    this.gameOver = false;
    this.groupe_object = null;
    this.onclick = false;
    this.debut_swip = {};
    play.vect_object_selectionne = [];
    this.score = 0;
    this.deplacer = false;
    this.nbr_object_to_die = 0;
    this.destruction = false;
    this.taille_grille_y = 7;
    this.taille_grille_x = 5;
    this.dernier_deplacement = 0;
    this.nbr_object_repositionner = 0;
    this.repositionnement = false;
    play.max_coef = 3;
  },
  createButtonsPlay: function() {
    this.bnt_pause = new Bouton(
      this.game,
      550,
      25,
      "sprites",
      this.funcPause,
      this
    );
    this.bnt_pause.frameName = "pause" + resolution + ".png";
    this.game.world.add(this.bnt_pause);
    this.show_bnt = new Bouton(
      this.game,
      320,
      835,
      "sprites",
      function() {
        if (tuto_activated) return;
        var obj = this.move_available();
        if (obj)
          game.add
            .tween(obj.scale)
            .to(
              {
                x: 1.2,
                y: 1.2
              },
              250,
              Phaser.Easing.Quadratic.Out,
              true
            )
            .to(
              {
                x: 1,
                y: 1
              },
              250,
              Phaser.Easing.Quadratic.Out,
              true
            );
      },
      this
    );
    this.show_bnt.frameName = "show_bnt" + resolution + ".png";
    this.game.world.add(this.show_bnt);
    this.changer = new Bouton(
      this.game,
      45,
      840,
      "sprites",
      function() {
        if (tuto_activated) return;
        this.bg_play.count += 1;
        if (this.bg_play.count >= 5) this.bg_play.count = 1;
        this.bg_play.loadTexture("bg_Play" + this.bg_play.count);
      },
      this
    );
    this.changer.frameName = "changer" + resolution + ".png";
    this.game.world.add(this.changer);
    game.add.sprite(
      113 * resolution,
      0 * resolution,
      "sprites",
      "container_score2.png"
    );
    this.score_texte = game.add.text(320, 10, "" + this.score, {
      font: 30 + langFont,
      align: "center",
      fill: "#ffffff",
      stroke: "#ffffff",
      strokeThickness: 0
    });
    this.score_texte.updateText();
    this.score_texte.x = 320 - this.score_texte.width / 2;
    this.game.world.add(this.score_texte);
  },
  game_over: function() {
    if (Music.enableMisic) Music.sounds.play("level_up");
    this.gameOver = true;
    this.groupPause.forEach(function(obj) {
      obj.visible = true;
    }, this);
    this.resumebtn.visible = false;
    this.sound_bnt.visible = false;
    this.bnt_replay.frameName = "play_bnt" + resolution + ".png";
    this.bnt_replay.x = 160 * resolution;
    this.bnt_replay.y = 240 * resolution;
    this.textPause.setText(text.txtgameover);
    this.textPause.x = 100 * resolution;
    this.textPause.y = 60 * resolution;
    this.groupPause.add(
      game.add.text(105 * resolution, 120 * resolution, "TOTAL SCORE", {
        font: 32 + langFont,
        align: "center",
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 5
      })
    );
    var textgameoverscore = game.add.text(
      150 * resolution,
      155 * resolution,
      "" + play.score,
      {
        font: 32 + langFont,
        align: "center",
        fill: "#ffffff",
        stroke: "#000000",
        strokeThickness: 5
      }
    );
    textgameoverscore.updateText();
    textgameoverscore.x = 160 * resolution - textgameoverscore.width / 2;
    this.groupPause.add(textgameoverscore);
    game.world.bringToTop(this.groupPause);
    if (enableAds && Ctr > adFreq) {
      adSense.showAdvertising({
        callback: function() {
          game.paused = false;
        }
      });
      Ctr = 0;
      adTimer = 0;
    }
    analytics.score(play.score);
    community.submitScore({
      score: play.score,
      callback: function() {
        if (enableAds && Ctr > adFreq) {
          adSense.showAdvertising({
            callback: function() {
              game.paused = false;
            }
          });
          Ctr = 0;
          adTimer = 0;
        }
      }
    });
  },
  createPause: function() {
    this.bgPause = new Phaser.Sprite(
      this.game,
      0 * resolution,
      0 * resolution,
      "bg_Play3"
    );
    this.resumebtn = new Bouton(
      this.game,
      230 * resolution,
      260 * resolution,
      "sprites",
      this.funcResume,
      this
    );
    this.resumebtn.frameName = "resume_bnt" + resolution + ".png";
    this.sound_bnt = new Bouton(
      this.game,
      155 * resolution,
      260 * resolution,
      "sprites",
      this.actionMusic,
      this
    );
    this.sound_bnt.frameName = "sound_pause_bnt" + resolution + ".png";
    this.bnt_replay = new Bouton(
      this.game,
      80 * resolution,
      260 * resolution,
      "sprites",
      this.funReplay,
      this
    );
    this.bnt_replay.frameName = "reply_bnt" + resolution + ".png";
    this.groupPause = this.game.add.group();
    this.groupPause.add(this.bgPause);
    this.groupPause.add(this.resumebtn);
    this.groupPause.add(this.sound_bnt);
    this.groupPause.add(this.bnt_replay);
    this.textPause = game.add.text(73 * resolution, 180 * resolution, "", {
      font: 45 + langFont,
      align: "center",
      fill: "#ffffff",
      stroke: "#000000",
      strokeThickness: 7
    });
    this.groupPause.add(this.textPause);
    this.groupPause.forEach(function(obj) {
      obj.visible = false;
    }, this);
    game.world.bringToTop(play.groupPause);
    if (Music.enableMisic) {
      this.sound_bnt.frameName = "sound_pause_bnt2.png";
    } else {
      this.sound_bnt.frameName = "sound_mute_pause_bnt2.png";
    }
  },
  actionMusic: function() {
    this.stateMusic = !this.stateMusic;
    if (this.stateMusic) {
      this.sound_bnt.frameName = "sound_pause_bnt2.png";
    } else {
      this.sound_bnt.frameName = "sound_mute_pause_bnt2.png";
    }
  },
  createCongratulations: function() {
    this.add.sprite(this.game, 0, 0, "pausebg01").alpha = 0.7;
    this.gameOver = true;
    this.numLevel = nombre_levels;
    level = sauvegarde.length - 1;
    Save_setItem("NumbersGame_level", sauvegarde.length - 1);
    this.game.add.sprite(
      65 * resolution,
      160 * resolution,
      "sprites"
    ).frameName =
      "bgPause" + resolution + ".png";
    var b = new Bouton(
      this.game,
      155 * resolution,
      350 * resolution,
      "sprites",
      function() {
        this.game.state.start("menu");
      },
      this,
      1,
      1
    );
    b.frameName = "resumebnt" + resolution + ".png";
    var tt = new Phaser.BitmapText(
      this.game,
      80 * resolution,
      200 * resolution,
      "fontRS02",
      text.textCongratulations,
      20 * resolution
    );
    tt.align = "center";
    var ff = new Phaser.BitmapText(
      this.game,
      135 * resolution,
      170 * resolution,
      "fontb01",
      "level 30",
      15 * resolution
    );
    ff.align = "center";
    this.world.add(ff);
    this.world.add(tt);
    this.world.add(b);
  },
  createNextLevel: function() {
    this.gameOver = true;
    this.bnt_pause.visible = false;
    var bgwin = new Phaser.Sprite(
      this.game,
      52 * resolution,
      155 * resolution,
      "sprites"
    );
    bgwin.frameName = "bgwin" + resolution + ".png";
    this.next_level = new Bouton(
      this.game,
      155 * resolution,
      370 * resolution,
      "sprites",
      this.funcnextlevel,
      this
    );
    this.next_level.frameName = "resumebnt" + resolution + ".png";
    this.groupNexLevel = this.game.add.group();
    this.bnt_replay.x = 210 * resolution;
    this.bnt_replay.y = 370 * resolution;
    this.groupNexLevel.add(bgwin);
    this.groupNexLevel.add(this.next_level);
    this.groupNexLevel.add(this.menubntt);
    this.groupNexLevel.add(this.bnt_replay);
    var textyouwinLevel = new Phaser.BitmapText(
      this.game,
      135 * resolution,
      170 * resolution,
      "fontb01",
      text.txtlevel + " " + this.numLevel,
      15 * resolution
    );
    this.groupNexLevel.add(textyouwinLevel);
    this.initial_money = +Save_getItem("NumbersGame_money", 0);
    Save_setItem("NumbersGame_money", money);
    this.textmoney = new Phaser.BitmapText(
      this.game,
      100 * resolution,
      320 * resolution,
      "fontb01",
      "" + this.initial_money,
      15 * resolution
    );
    this.textmoney.align = "center";
    this.textmoney.updateText();
    this.textmoney.x = 100 * resolution - this.textmoney.textWidth / 2;
    this.groupNexLevel.add(this.textmoney);
    this.count_start = true;
    var tt = new Phaser.BitmapText(
      this.game,
      120 * resolution,
      230 * resolution,
      "fontRS02",
      text.youwin,
      18 * resolution
    );
    this.groupNexLevel.add(tt);
    this.groupNexLevel.forEach(function(obj) {
      obj.visible = true;
    }, this);
    this.groupNexLevel.y = -800;
    var tween1 = this.add.tween(this.groupNexLevel).to(
      {
        y: -50
      },
      500,
      Phaser.Easing.Back.Out
    );
    tween1.start();
    game.world.bringToTop(this.groupNexLevel);
  },
  funcnextlevel: function() {
    if (this.numLevel <= nombre_levels) {
      this.numLevel++;
    }
    this.add
      .tween(this.groupNexLevel)
      .to(
        {
          y: 1e3
        },
        500,
        Phaser.Easing.Back.In,
        true
      )
      .onComplete.add(function() {
        this.game.state.start("play");
      }, this);
  },
  cacherPause: function() {
    this.bnt_pause.visible = false;
    this.groupPause.forEach(function(obj) {
      obj.visible = true;
    }, this);
  },
  funcPause: function() {
    if (
      this.istimerEndLevel ||
      this.istimerEndLevelAndLose ||
      this.gameOver ||
      tuto_activated
    )
      return;
    if (Music.enableMisic) Music.sounds.play("pause");
    if (this.stateMusic) {
      Music.enableMisic = false;
      Music.music.pause();
    }
    this.cacherPause();
    this.pausePlay = true;
  },
  funcResume: function() {
    if (enableAds && Ctr > adFreq) {
      game.paused = true;
      adSense.showAdvertising({
        callback: function() {
          game.paused = false;
        }
      });
      Ctr = 0;
      adTimer = 0;
    }
    this.afficherPause();
  },
  afficherPause: function() {
    if (this.stateMusic) {
      Music.enableMisic = true;
      Music.music.resume();
      if (Music.enableMisic) Music.sounds.play("resume");
    }
    this.bnt_pause.visible = true;
    this.groupPause.forEach(function(obj) {
      obj.visible = false;
    }, this);
    this.pausePlay = false;
  },
  funReplay: function() {
    if (enableAds && Ctr > adFreq) {
      game.paused = true;
      adSense.showAdvertising({
        callback: function() {
          game.paused = false;
        }
      });
      Ctr = 0;
      adTimer = 0;
    }
    if (this.stateMusic && this.pausePlay) {
      Music.enableMisic = true;
      Music.music.resume();
    }
    this.game.state.start("play", true);
  },
  funcBack: function() {
    if (enableAds && Ctr > adFreq) {
      game.paused = true;
      adSense.showAdvertising({
        callback: function() {
          game.paused = false;
        }
      });
      Ctr = 0;
      adTimer = 0;
    }
    if (this.stateMusic) {
      Music.enableMisic = true;
      Music.music.resume();
    }
    this.game.state.start("map_levels", true);
  },
  Fin_level: function() {
    play.createNextLevel();
    if (this.numLevel > level) {
      level = this.numLevel;
      Save_setItem("NumbersGame_level", level);
    }
    if (this.nbr_star > sauvegarde[this.numLevel - 1].numetoile) {
      sauvegarde[this.numLevel - 1].numetoile = this.nbr_star;
      save_ecrit();
    }
  },
  TestElapsedMusic: function() {
    if (game.time.elapsed > 300) {
      if (this.stateMusic) {
        Music.enableMisic = false;
        Music.music.pause();
      }
      return;
    } else if (!this.pausePlay) {
      if (this.stateMusic) {
        Music.enableMisic = true;
        Music.music.resume();
      }
    }
  },
  update: function() {
    if (this.gameOver) return;
    if (this.istimerEndLevel) {
      this.timerEndLevel -= this.game.time.elapsed;
      if (this.timerEndLevel < 0) {
        this.istimerEndLevel = false;
        this.Fin_level();
      }
      return;
    }
    if (this.istimerEndLevelAndLose) {
      this.timerEndLevelAndLose -= this.game.time.elapsed;
      if (this.timerEndLevelAndLose < 0) {
        this.game_over();
        this.istimerEndLevelAndLose = false;
      }
      return;
    }
    if (this.onclick) {
      this.selectionnement();
    }
    if (this.destruction && this.nbr_object_to_die == 0) {
      this.repositionner();
    }
    if (this.repositionnement && this.nbr_object_repositionner == 0) {
      this.repositionnement = false;
      this.reinitialiser_mat_objects();
      if (!this.move_available()) {
        this.istimerEndLevelAndLose = true;
        this.timerEndLevelAndLose = 2e3;
      }
    }
    for (k = 0; k < this.groupe_object.length; k++) {
      if (
        this.groupe_object.getAt(k).alive &&
        !this.groupe_object.getAt(k).visible
      ) {
        if (this.groupe_object.getAt(k).y >= 40) {
          this.groupe_object.getAt(k).visible = true;
        }
      }
    }
    if (this.bonus_timer >= 0) {
      this.bonus_timer -= this.game.time.elapsed;
    }
    if (this.bonus_timer < 0) {
      if (this.bonus_time % 60 == 0) {
        this.minutes++;
        this.secondes = 0;
        if (this.minutes < 10)
          this.txt_time_game.setText("0" + this.minutes + ":0" + this.secondes);
        else this.txt_time_game.setText(this.minutes + ":0" + this.secondes);
      } else {
        this.secondes++;
        if (this.secondes < 10 && this.minutes < 10)
          this.txt_time_game.setText("0" + this.minutes + ":0" + this.secondes);
        else if (this.secondes < 10)
          this.txt_time_game.setText(this.minutes + ":0" + this.secondes);
        else if (this.minutes < 10)
          this.txt_time_game.setText("0" + this.minutes + ":" + this.secondes);
        else this.txt_time_game.setText(this.minutes + ":" + this.secondes);
      }
      this.txt_time_game.updateText();
      this.txt_time_game.x = 90 - this.txt_time_game.width / 2;
      this.bonus_time++;
      this.bonus_timer = 1e3;

      if (adTimer > adFreqIngame && !play.pausePlay) {
        adTimer = 0;
        this.showAds();
      }
    }
  },
  showAds: function() {
    game.paused = true;
    adSense.showAdvertising({
      callback: function() {
        game.paused = false;
      }
    });
  },
  initialisation: function() {
    this.opposite = null;
    for (var i = 0; i < this.groupe_object.length; i++) {
      if (
        this.groupe_object.getAt(i).alive &&
        this.groupe_object.getAt(i).selectionne
      ) {
        this.groupe_object.getAt(i).selectionne = false;
      }
    }
    this.deplacer = false;
  },
  reinitialiser_mat_objects: function() {
    for (var i = 0; i < this.groupe_object.length; i++) {
      if (this.groupe_object.getAt(i).alive) {
        this.mat_objects[
          Math.round(
            Math.abs(this.groupe_object.getAt(i).y - 60 - taille / 2) / taille
          )
        ][
          Math.round(
            Math.abs(this.groupe_object.getAt(i).x - 50 - taille / 2) / taille
          )
        ] = this.groupe_object.getAt(i);
      }
    }
  },
  move_available: function() {
    var is_available = false;
    for (var i = 0; i < this.taille_grille_y; i++) {
      for (var j = 0; j < this.taille_grille_x; j++) {
        if (
          i > 0 &&
          this.mat_objects[i][j].coef == this.mat_objects[i - 1][j].coef
        ) {
          is_available = true;
        }
        if (
          i > 0 &&
          j < this.taille_grille_x - 1 &&
          this.mat_objects[i][j].coef == this.mat_objects[i - 1][j + 1].coef
        ) {
          is_available = true;
        }
        if (
          j < this.taille_grille_x - 1 &&
          this.mat_objects[i][j].coef == this.mat_objects[i][j + 1].coef
        ) {
          is_available = true;
        }
        if (
          i < this.taille_grille_y - 1 &&
          j < this.taille_grille_x - 1 &&
          this.mat_objects[i][j].coef == this.mat_objects[i + 1][j + 1].coef
        ) {
          is_available = true;
        }
        if (
          i < this.taille_grille_y - 1 &&
          this.mat_objects[i][j].coef == this.mat_objects[i + 1][j].coef
        ) {
          is_available = true;
        }
        if (
          j > 0 &&
          i < this.taille_grille_y - 1 &&
          this.mat_objects[i][j].coef == this.mat_objects[i + 1][j - 1].coef
        ) {
          is_available = true;
        }
        if (
          j > 0 &&
          this.mat_objects[i][j].coef == this.mat_objects[i][j - 1].coef
        ) {
          is_available = true;
        }
        if (
          i > 0 &&
          j > 0 &&
          this.mat_objects[i][j].coef == this.mat_objects[i - 1][j - 1].coef
        ) {
          is_available = true;
        }
        if (is_available) {
          return this.mat_objects[i][j];
        }
      }
    }
    return is_available;
  },
  verification_after_create: function() {
    this.mat_delete = [];
    for (var s = 0; s < this.taille_grille_y; s++) {
      this.mat_delete[s] = [];
    }
    this.destruction = false;
    var coef_calcul = 0;
    for (i = 0; i < this.taille_grille_y; i++) {
      for (j = 0; j < this.taille_grille_x; j++) {
        this.mat_delete[i][j] = 0;
      }
    }
    for (k = 0; k < this.vect_object_selectionne.length - 1; k++) {
      this.mat_delete[
        Math.round(
          Math.abs(this.vect_object_selectionne[k].y - 60 - taille / 2) / taille
        )
      ][
        Math.round(
          Math.abs(this.vect_object_selectionne[k].x - 50 - taille / 2) / taille
        )
      ] = 1;
      this.destruction = true;
      coef_calcul += this.vect_object_selectionne[k].coef;
    }
    if (this.destruction) {
      play.score +=
        play.vect_object_selectionne[
          this.vect_object_selectionne.length - 1
        ].coef;
      for (i = 0; i < this.taille_grille_y; i++) {
        for (j = this.taille_grille_x - 1; j >= 0; j--) {
          if (this.mat_delete[i][j] == 1) {
            this.nbr_object_to_die += 1;
            this.kill_animation(this.mat_objects[i][j]);
          }
        }
      }
      if (Music.enableMisic) Music.sounds.play("result");
      play.vect_object_selectionne[
        this.vect_object_selectionne.length - 1
      ].selectionne = false;
      play.vect_object_selectionne[
        this.vect_object_selectionne.length - 1
      ].Allowed = false;
      play.vect_object_selectionne[
        this.vect_object_selectionne.length - 1
      ].coef =
        play.vect_object_selectionne[this.vect_object_selectionne.length - 1]
          .coef + coef_calcul;
      play.vect_object_selectionne[
        this.vect_object_selectionne.length - 1
      ].coef = Math.pow(
        2,
        Math.floor(
          Math.log(
            play.vect_object_selectionne[
              this.vect_object_selectionne.length - 1
            ].coef
          ) / Math.log(2)
        )
      );
      play.vect_object_selectionne[
        this.vect_object_selectionne.length - 1
      ].frameName =
        "" +
        play.vect_object_selectionne[this.vect_object_selectionne.length - 1]
          .coef +
        ".png";
      while (
        vect_coef[play.max_coef] <
        play.vect_object_selectionne[this.vect_object_selectionne.length - 1]
          .coef
      ) {
        play.max_coef += 1;
      }
      play.vect_object_selectionne = [];
    }
  },
  calculer_score: function(object) {
    play.score += object.coef;
    play.score_texte.setText("" + play.score);
    play.score_texte.align = "center";
    play.score_texte.updateText();
    play.score_texte.x = 320 - play.score_texte.width / 2;
  },
  kill_animation: function(object) {
    play.calculer_score(object);
    this.groupe_object.removeChild(object);
    this.groupe_object.add(object);
    this.groupe_object.removeChild(
      play.vect_object_selectionne[play.vect_object_selectionne.length - 1]
    );
    this.groupe_object.add(
      play.vect_object_selectionne[play.vect_object_selectionne.length - 1]
    );
    if (object.line != null) object.line.destroy();
    game.add
      .tween(object)
      .to(
        {
          x:
            play.vect_object_selectionne[
              play.vect_object_selectionne.length - 1
            ].x,
          y:
            play.vect_object_selectionne[
              play.vect_object_selectionne.length - 1
            ].y
        },
        600,
        Phaser.Easing.Quadratic.Out,
        true
      )
      .onComplete.add(function() {
        play.nbr_object_to_die -= 1;
        this.kill();
      }, object);
  },
  repositionner: function() {
    var m;
    this.nbr_object_repositionner = 0;
    this.repositionnement = true;
    this.destruction = false;
    for (var j = 0; j < this.taille_grille_x; j++) {
      for (var i = this.taille_grille_y - 1; i >= 0; i--) {
        if (this.mat_objects[i][j]) {
          if (this.mat_delete[i][j] == 1) {
            for (m = i; m >= 0; m--) {
              if (this.mat_objects[m][j] && this.mat_delete[m][j] != 1) {
                this.nbr_object_repositionner += 1;
                this.mat_delete[m][j] = 1;
                this.mat_delete[i][j] = 0;
                game.add
                  .tween(this.mat_objects[m][j])
                  .to(
                    {
                      x: Math.round(j * taille + 50 + taille / 2),
                      y: Math.round(i * taille + 60 + taille / 2)
                    },
                    300,
                    Phaser.Easing.Quadratic.Out,
                    true
                  )
                  .onComplete.add(this.finish_moving, this.mat_objects[m][j]);
                break;
              }
            }
          }
        }
      }
      for (m = this.taille_grille_y - 1; m >= 0; m--) {
        if (this.mat_delete[m][j] == 1) {
          this.mat_delete[m][j] = 0;
          this.create_object(m, j);
        }
      }
    }
  },
  verification_power_up_isalive: function(type) {
    for (var i = 0; i < this.taille_grille_x; i++) {
      for (var j = 0; j < this.taille_grille_y; j++) {
        if (this.mat_objects[i][j]) {
          if (this.mat_objects[i][j].type == type) {
            return true;
          }
        }
      }
    }
    return false;
  },
  create_object: function(i, j) {
    var object = null;
    object = this.groupe_object.getFirstDead();
    i = i * taille + 60 + taille / 2;
    j = j * taille + 50 + taille / 2;
    var type = Math.floor(Math.random() * 4.9);
    if (object != null) {
      object.reset(j, i - 10 * taille);
      object.loadTexture("");
      object.scale.setTo(1, 1);
    } else {
      object = game.add.sprite(j, i - 10 * taille, "");
      this.groupe_object.add(object);
    }
    object.anchor.setTo(0.5, 0.5);
    object.alive = true;
    object.line = null;
    object.selectionne = false;
    object.visible = false;
    object.coef = vect_coef[Math.floor(Math.random() * (this.max_coef - 0.1))];
    object.frameName = "" + object.coef + ".png";
    if (tuto_activated) object.Allowed = false;
    object.inputEnabled = true;
    object.events.onInputDown.add(this.click_on_object, object);
    object.events.onInputUp.add(this.click_up_object, object);
    play.nbr_object_repositionner += 1;
    game.add
      .tween(object)
      .to(
        {
          x: j,
          y: i
        },
        600,
        Phaser.Easing.Quadratic.Out,
        true
      )
      .onComplete.add(play.finish_moving, object);
  },
  finish_moving: function() {
    play.nbr_object_repositionner -= 1;
    play.mat_delete[Math.round(Math.abs(this.y - 60 - taille / 2) / taille)][
      Math.round(Math.abs(this.x - 50 - taille / 2) / taille)
    ] = 0;
  }
};
window.onload = function() {
  setTimeout(function() {
    window.scrollTo(0, 1);
  }, 10);
  game = new Phaser.Game(320 * resolution, 480 * resolution, Phaser.CANVAS);
  play = game.state.add("play", NumbersGame.Play, false);
  game.state.add("menu", NumbersGame.Menu, false);
  game.state.add("preload", NumbersGame.Preload, false);
  game.state.add("boot", NumbersGame.Boot, true);
};
