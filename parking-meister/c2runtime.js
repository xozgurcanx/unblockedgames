// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
if (typeof Object.getPrototypeOf !== "function")
{
	if (typeof "test".__proto__ === "object")
	{
		Object.getPrototypeOf = function(object) {
			return object.__proto__;
		};
	}
	else
	{
		Object.getPrototypeOf = function(object) {
			return object.constructor.prototype;
		};
	}
}
(function(){
	cr.logexport = function (msg)
	{
		if (window.console && window.console.log)
			window.console.log(msg);
	};
	cr.seal = function(x)
	{
		return x;
	};
	cr.freeze = function(x)
	{
		return x;
	};
	cr.is_undefined = function (x)
	{
		return typeof x === "undefined";
	};
	cr.is_number = function (x)
	{
		return typeof x === "number";
	};
	cr.is_string = function (x)
	{
		return typeof x === "string";
	};
	cr.isPOT = function (x)
	{
		return x > 0 && ((x - 1) & x) === 0;
	};
	cr.nextHighestPowerOfTwo = function(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	cr.abs = function (x)
	{
		return (x < 0 ? -x : x);
	};
	cr.max = function (a, b)
	{
		return (a > b ? a : b);
	};
	cr.min = function (a, b)
	{
		return (a < b ? a : b);
	};
	cr.PI = Math.PI;
	cr.round = function (x)
	{
		return (x + 0.5) | 0;
	};
	cr.floor = function (x)
	{
		if (x >= 0)
			return x | 0;
		else
			return (x | 0) - 1;		// correctly round down when negative
	};
	cr.ceil = function (x)
	{
		var f = x | 0;
		return (f === x ? f : f + 1);
	};
	function Vector2(x, y)
	{
		this.x = x;
		this.y = y;
		cr.seal(this);
	};
	Vector2.prototype.offset = function (px, py)
	{
		this.x += px;
		this.y += py;
		return this;
	};
	Vector2.prototype.mul = function (px, py)
	{
		this.x *= px;
		this.y *= py;
		return this;
	};
	cr.vector2 = Vector2;
	cr.segments_intersect = function(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)
	{
		var max_ax, min_ax, max_ay, min_ay, max_bx, min_bx, max_by, min_by;
		if (a1x < a2x)
		{
			min_ax = a1x;
			max_ax = a2x;
		}
		else
		{
			min_ax = a2x;
			max_ax = a1x;
		}
		if (b1x < b2x)
		{
			min_bx = b1x;
			max_bx = b2x;
		}
		else
		{
			min_bx = b2x;
			max_bx = b1x;
		}
		if (max_ax < min_bx || min_ax > max_bx)
			return false;
		if (a1y < a2y)
		{
			min_ay = a1y;
			max_ay = a2y;
		}
		else
		{
			min_ay = a2y;
			max_ay = a1y;
		}
		if (b1y < b2y)
		{
			min_by = b1y;
			max_by = b2y;
		}
		else
		{
			min_by = b2y;
			max_by = b1y;
		}
		if (max_ay < min_by || min_ay > max_by)
			return false;
		var dpx = b1x - a1x + b2x - a2x;
		var dpy = b1y - a1y + b2y - a2y;
		var qax = a2x - a1x;
		var qay = a2y - a1y;
		var qbx = b2x - b1x;
		var qby = b2y - b1y;
		var d = cr.abs(qay * qbx - qby * qax);
		var la = qbx * dpy - qby * dpx;
		if (cr.abs(la) > d)
			return false;
		var lb = qax * dpy - qay * dpx;
		return cr.abs(lb) <= d;
	};
	function Rect(left, top, right, bottom)
	{
		this.set(left, top, right, bottom);
		cr.seal(this);
	};
	Rect.prototype.set = function (left, top, right, bottom)
	{
		this.left = left;
		this.top = top;
		this.right = right;
		this.bottom = bottom;
	};
	Rect.prototype.copy = function (r)
	{
		this.left = r.left;
		this.top = r.top;
		this.right = r.right;
		this.bottom = r.bottom;
	};
	Rect.prototype.width = function ()
	{
		return this.right - this.left;
	};
	Rect.prototype.height = function ()
	{
		return this.bottom - this.top;
	};
	Rect.prototype.offset = function (px, py)
	{
		this.left += px;
		this.top += py;
		this.right += px;
		this.bottom += py;
		return this;
	};
	Rect.prototype.normalize = function ()
	{
		var temp = 0;
		if (this.left > this.right)
		{
			temp = this.left;
			this.left = this.right;
			this.right = temp;
		}
		if (this.top > this.bottom)
		{
			temp = this.top;
			this.top = this.bottom;
			this.bottom = temp;
		}
	};
	Rect.prototype.intersects_rect = function (rc)
	{
		return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
	};
	Rect.prototype.intersects_rect_off = function (rc, ox, oy)
	{
		return !(rc.right + ox < this.left || rc.bottom + oy < this.top || rc.left + ox > this.right || rc.top + oy > this.bottom);
	};
	Rect.prototype.contains_pt = function (x, y)
	{
		return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
	};
	Rect.prototype.equals = function (r)
	{
		return this.left === r.left && this.top === r.top && this.right === r.right && this.bottom === r.bottom;
	};
	cr.rect = Rect;
	function Quad()
	{
		this.tlx = 0;
		this.tly = 0;
		this.trx = 0;
		this.try_ = 0;	// is a keyword otherwise!
		this.brx = 0;
		this.bry = 0;
		this.blx = 0;
		this.bly = 0;
		cr.seal(this);
	};
	Quad.prototype.set_from_rect = function (rc)
	{
		this.tlx = rc.left;
		this.tly = rc.top;
		this.trx = rc.right;
		this.try_ = rc.top;
		this.brx = rc.right;
		this.bry = rc.bottom;
		this.blx = rc.left;
		this.bly = rc.bottom;
	};
	Quad.prototype.set_from_rotated_rect = function (rc, a)
	{
		if (a === 0)
		{
			this.set_from_rect(rc);
		}
		else
		{
			var sin_a = Math.sin(a);
			var cos_a = Math.cos(a);
			var left_sin_a = rc.left * sin_a;
			var top_sin_a = rc.top * sin_a;
			var right_sin_a = rc.right * sin_a;
			var bottom_sin_a = rc.bottom * sin_a;
			var left_cos_a = rc.left * cos_a;
			var top_cos_a = rc.top * cos_a;
			var right_cos_a = rc.right * cos_a;
			var bottom_cos_a = rc.bottom * cos_a;
			this.tlx = left_cos_a - top_sin_a;
			this.tly = top_cos_a + left_sin_a;
			this.trx = right_cos_a - top_sin_a;
			this.try_ = top_cos_a + right_sin_a;
			this.brx = right_cos_a - bottom_sin_a;
			this.bry = bottom_cos_a + right_sin_a;
			this.blx = left_cos_a - bottom_sin_a;
			this.bly = bottom_cos_a + left_sin_a;
		}
	};
	Quad.prototype.offset = function (px, py)
	{
		this.tlx += px;
		this.tly += py;
		this.trx += px;
		this.try_ += py;
		this.brx += px;
		this.bry += py;
		this.blx += px;
		this.bly += py;
		return this;
	};
	var minresult = 0;
	var maxresult = 0;
	function minmax4(a, b, c, d)
	{
		if (a < b)
		{
			if (c < d)
			{
				if (a < c)
					minresult = a;
				else
					minresult = c;
				if (b > d)
					maxresult = b;
				else
					maxresult = d;
			}
			else
			{
				if (a < d)
					minresult = a;
				else
					minresult = d;
				if (b > c)
					maxresult = b;
				else
					maxresult = c;
			}
		}
		else
		{
			if (c < d)
			{
				if (b < c)
					minresult = b;
				else
					minresult = c;
				if (a > d)
					maxresult = a;
				else
					maxresult = d;
			}
			else
			{
				if (b < d)
					minresult = b;
				else
					minresult = d;
				if (a > c)
					maxresult = a;
				else
					maxresult = c;
			}
		}
	};
	Quad.prototype.bounding_box = function (rc)
	{
		minmax4(this.tlx, this.trx, this.brx, this.blx);
		rc.left = minresult;
		rc.right = maxresult;
		minmax4(this.tly, this.try_, this.bry, this.bly);
		rc.top = minresult;
		rc.bottom = maxresult;
	};
	Quad.prototype.contains_pt = function (x, y)
	{
		var v0x = this.trx - this.tlx;
		var v0y = this.try_ - this.tly;
		var v1x = this.brx - this.tlx;
		var v1y = this.bry - this.tly;
		var v2x = x - this.tlx;
		var v2y = y - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		var dot11 = v1x * v1x + v1y * v1y
		var dot12 = v1x * v2x + v1y * v2y
		var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		if ((u >= 0.0) && (v > 0.0) && (u + v < 1))
			return true;
		v0x = this.blx - this.tlx;
		v0y = this.bly - this.tly;
		var dot00 = v0x * v0x + v0y * v0y
		var dot01 = v0x * v1x + v0y * v1y
		var dot02 = v0x * v2x + v0y * v2y
		invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
		u = (dot11 * dot02 - dot01 * dot12) * invDenom;
		v = (dot00 * dot12 - dot01 * dot02) * invDenom;
		return (u >= 0.0) && (v > 0.0) && (u + v < 1);
	};
	Quad.prototype.at = function (i, xory)
	{
		if (xory)
		{
			switch (i)
			{
				case 0: return this.tlx;
				case 1: return this.trx;
				case 2: return this.brx;
				case 3: return this.blx;
				case 4: return this.tlx;
				default: return this.tlx;
			}
		}
		else
		{
			switch (i)
			{
				case 0: return this.tly;
				case 1: return this.try_;
				case 2: return this.bry;
				case 3: return this.bly;
				case 4: return this.tly;
				default: return this.tly;
			}
		}
	};
	Quad.prototype.midX = function ()
	{
		return (this.tlx + this.trx  + this.brx + this.blx) / 4;
	};
	Quad.prototype.midY = function ()
	{
		return (this.tly + this.try_ + this.bry + this.bly) / 4;
	};
	Quad.prototype.intersects_segment = function (x1, y1, x2, y2)
	{
		if (this.contains_pt(x1, y1) || this.contains_pt(x2, y2))
			return true;
		var a1x, a1y, a2x, a2y;
		var i;
		for (i = 0; i < 4; i++)
		{
			a1x = this.at(i, true);
			a1y = this.at(i, false);
			a2x = this.at(i + 1, true);
			a2y = this.at(i + 1, false);
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	Quad.prototype.intersects_quad = function (rhs)
	{
		var midx = rhs.midX();
		var midy = rhs.midY();
		if (this.contains_pt(midx, midy))
			return true;
		midx = this.midX();
		midy = this.midY();
		if (rhs.contains_pt(midx, midy))
			return true;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		var i, j;
		for (i = 0; i < 4; i++)
		{
			for (j = 0; j < 4; j++)
			{
				a1x = this.at(i, true);
				a1y = this.at(i, false);
				a2x = this.at(i + 1, true);
				a2y = this.at(i + 1, false);
				b1x = rhs.at(j, true);
				b1y = rhs.at(j, false);
				b2x = rhs.at(j + 1, true);
				b2y = rhs.at(j + 1, false);
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	cr.quad = Quad;
	cr.RGB = function (red, green, blue)
	{
		return Math.max(Math.min(red, 255), 0)
			 | (Math.max(Math.min(green, 255), 0) << 8)
			 | (Math.max(Math.min(blue, 255), 0) << 16);
	};
	cr.GetRValue = function (rgb)
	{
		return rgb & 0xFF;
	};
	cr.GetGValue = function (rgb)
	{
		return (rgb & 0xFF00) >> 8;
	};
	cr.GetBValue = function (rgb)
	{
		return (rgb & 0xFF0000) >> 16;
	};
	cr.shallowCopy = function (a, b, allowOverwrite)
	{
		var attr;
		for (attr in b)
		{
			if (b.hasOwnProperty(attr))
			{
;
				a[attr] = b[attr];
			}
		}
		return a;
	};
	cr.arrayRemove = function (arr, index)
	{
		var i, len;
		index = cr.floor(index);
		if (index < 0 || index >= arr.length)
			return;							// index out of bounds
		if (index === 0)					// removing first item
			arr.shift();
		else if (index === arr.length - 1)	// removing last item
			arr.pop();
		else
		{
			for (i = index, len = arr.length - 1; i < len; i++)
				arr[i] = arr[i + 1];
			arr.length = len;
		}
	};
	cr.shallowAssignArray = function (dest, src)
	{
		dest.length = src.length;
		var i, len;
		for (i = 0, len = src.length; i < len; i++)
			dest[i] = src[i];
	};
	cr.appendArray = function (a, b)
	{
		a.push.apply(a, b);
	};
	cr.arrayFindRemove = function (arr, item)
	{
		var index = arr.indexOf(item);
		if (index !== -1)
			cr.arrayRemove(arr, index);
	};
	cr.clamp = function(x, a, b)
	{
		if (x < a)
			return a;
		else if (x > b)
			return b;
		else
			return x;
	};
	cr.to_radians = function(x)
	{
		return x / (180.0 / cr.PI);
	};
	cr.to_degrees = function(x)
	{
		return x * (180.0 / cr.PI);
	};
	cr.clamp_angle_degrees = function (a)
	{
		a %= 360;       // now in (-360, 360) range
		if (a < 0)
			a += 360;   // now in [0, 360) range
		return a;
	};
	cr.clamp_angle = function (a)
	{
		a %= 2 * cr.PI;       // now in (-2pi, 2pi) range
		if (a < 0)
			a += 2 * cr.PI;   // now in [0, 2pi) range
		return a;
	};
	cr.to_clamped_degrees = function (x)
	{
		return cr.clamp_angle_degrees(cr.to_degrees(x));
	};
	cr.to_clamped_radians = function (x)
	{
		return cr.clamp_angle(cr.to_radians(x));
	};
	cr.angleTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.atan2(dy, dx);
	};
	cr.angleDiff = function (a1, a2)
	{
		if (a1 === a2)
			return 0;
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		var n = s1 * s2 + c1 * c2;
		if (n >= 1)
			return 0;
		if (n <= -1)
			return cr.PI;
		return Math.acos(n);
	};
	cr.angleRotate = function (start, end, step)
	{
		var ss = Math.sin(start);
		var cs = Math.cos(start);
		var se = Math.sin(end);
		var ce = Math.cos(end);
		if (Math.acos(ss * se + cs * ce) > step)
		{
			if (cs * se - ss * ce > 0)
				return cr.clamp_angle(start + step);
			else
				return cr.clamp_angle(start - step);
		}
		else
			return cr.clamp_angle(end);
	};
	cr.angleClockwise = function (a1, a2)
	{
		var s1 = Math.sin(a1);
		var c1 = Math.cos(a1);
		var s2 = Math.sin(a2);
		var c2 = Math.cos(a2);
		return c1 * s2 - s1 * c2 <= 0;
	};
	cr.rotatePtAround = function (px, py, a, ox, oy, getx)
	{
		if (a === 0)
			return getx ? px : py;
		var sin_a = Math.sin(a);
		var cos_a = Math.cos(a);
		px -= ox;
		py -= oy;
		var left_sin_a = px * sin_a;
		var top_sin_a = py * sin_a;
		var left_cos_a = px * cos_a;
		var top_cos_a = py * cos_a;
		px = left_cos_a - top_sin_a;
		py = top_cos_a + left_sin_a;
		px += ox;
		py += oy;
		return getx ? px : py;
	}
	cr.distanceTo = function(x1, y1, x2, y2)
	{
		var dx = x2 - x1;
        var dy = y2 - y1;
		return Math.sqrt(dx*dx + dy*dy);
	};
	cr.xor = function (x, y)
	{
		return !x !== !y;
	};
	cr.lerp = function (a, b, x)
	{
		return a + (b - a) * x;
	};
	cr.unlerp = function (a, b, c)
	{
		if (a === b)
			return 0;		// avoid divide by 0
		return (c - a) / (b - a);
	};
	cr.anglelerp = function (a, b, x)
	{
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			return a + diff * x;
		}
		else
		{
			return a - diff * x;
		}
	};
	cr.hasAnyOwnProperty = function (o)
	{
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
				return true;
		}
		return false;
	};
	cr.wipe = function (obj)
	{
		var p;
		for (p in obj)
		{
			if (obj.hasOwnProperty(p))
				delete obj[p];
		}
	};
	var startup_time = +(new Date());
	cr.performance_now = function()
	{
		if (typeof window["performance"] !== "undefined")
		{
			var winperf = window["performance"];
			if (typeof winperf.now !== "undefined")
				return winperf.now();
			else if (typeof winperf["webkitNow"] !== "undefined")
				return winperf["webkitNow"]();
			else if (typeof winperf["mozNow"] !== "undefined")
				return winperf["mozNow"]();
			else if (typeof winperf["msNow"] !== "undefined")
				return winperf["msNow"]();
		}
		return Date.now() - startup_time;
	};
	var supports_set = ((typeof window === "undefined" || !window["c2ejecta"]) && (typeof Set !== "undefined" && typeof Set.prototype["forEach"] !== "undefined"));
	function ObjectSet_()
	{
		this.s = null;
		this.items = null;			// lazy allocated (hopefully results in better GC performance)
		this.item_count = 0;
		if (supports_set)
		{
			this.s = new Set();
		}
		this.values_cache = [];
		this.cache_valid = true;
		cr.seal(this);
	};
	ObjectSet_.prototype.contains = function (x)
	{
		if (this.isEmpty())
			return false;
		if (supports_set)
			return this.s["has"](x);
		else
			return (this.items && this.items.hasOwnProperty(x));
	};
	ObjectSet_.prototype.add = function (x)
	{
		if (supports_set)
		{
			if (!this.s["has"](x))
			{
				this.s["add"](x);
				this.cache_valid = false;
			}
		}
		else
		{
			var str = x.toString();
			var items = this.items;
			if (!items)
			{
				this.items = {};
				this.items[str] = x;
				this.item_count = 1;
				this.cache_valid = false;
			}
			else if (!items.hasOwnProperty(str))
			{
				items[str] = x;
				this.item_count++;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.remove = function (x)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			if (this.s["has"](x))
			{
				this.s["delete"](x);
				this.cache_valid = false;
			}
		}
		else if (this.items)
		{
			var str = x.toString();
			var items = this.items;
			if (items.hasOwnProperty(str))
			{
				delete items[str];
				this.item_count--;
				this.cache_valid = false;
			}
		}
	};
	ObjectSet_.prototype.clear = function (/*wipe_*/)
	{
		if (this.isEmpty())
			return;
		if (supports_set)
		{
			this.s["clear"]();			// best!
		}
		else
		{
				this.items = null;		// creates garbage; will lazy allocate on next add()
			this.item_count = 0;
		}
		this.values_cache.length = 0;
		this.cache_valid = true;
	};
	ObjectSet_.prototype.isEmpty = function ()
	{
		return this.count() === 0;
	};
	ObjectSet_.prototype.count = function ()
	{
		if (supports_set)
			return this.s["size"];
		else
			return this.item_count;
	};
	var current_arr = null;
	var current_index = 0;
	function set_append_to_arr(x)
	{
		current_arr[current_index++] = x;
	};
	ObjectSet_.prototype.update_cache = function ()
	{
		if (this.cache_valid)
			return;
		if (supports_set)
		{
			this.values_cache.length = this.s["size"];
			current_arr = this.values_cache;
			current_index = 0;
			this.s["forEach"](set_append_to_arr);
;
			current_arr = null;
			current_index = 0;
		}
		else
		{
			var values_cache = this.values_cache;
			values_cache.length = this.item_count;
			var p, n = 0, items = this.items;
			if (items)
			{
				for (p in items)
				{
					if (items.hasOwnProperty(p))
						values_cache[n++] = items[p];
				}
			}
;
		}
		this.cache_valid = true;
	};
	ObjectSet_.prototype.valuesRef = function ()
	{
		this.update_cache();
		return this.values_cache;
	};
	cr.ObjectSet = ObjectSet_;
	function KahanAdder_()
	{
		this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
		cr.seal(this);
	};
	KahanAdder_.prototype.add = function (v)
	{
		this.y = v - this.c;
	    this.t = this.sum + this.y;
	    this.c = (this.t - this.sum) - this.y;
	    this.sum = this.t;
	};
    KahanAdder_.prototype.reset = function ()
    {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
	cr.KahanAdder = KahanAdder_;
	cr.regexp_escape = function(text)
	{
		return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
	};
	function CollisionPoly_(pts_array_)
	{
		this.pts_cache = [];
		this.bboxLeft = 0;
		this.bboxTop = 0;
		this.bboxRight = 0;
		this.bboxBottom = 0;
		this.convexpolys = null;		// for physics behavior to cache separated polys
		this.set_pts(pts_array_);
		cr.seal(this);
	};
	CollisionPoly_.prototype.set_pts = function(pts_array_)
	{
		this.pts_array = pts_array_;
		this.pts_count = pts_array_.length / 2;			// x, y, x, y... in array
		this.pts_cache.length = pts_array_.length;
		this.cache_width = -1;
		this.cache_height = -1;
		this.cache_angle = 0;
	};
	CollisionPoly_.prototype.is_empty = function()
	{
		return !this.pts_array.length;
	};
	CollisionPoly_.prototype.update_bbox = function ()
	{
		var myptscache = this.pts_cache;
		var bboxLeft_ = myptscache[0];
		var bboxRight_ = bboxLeft_;
		var bboxTop_ = myptscache[1];
		var bboxBottom_ = bboxTop_;
		var x, y, i = 1, i2, len = this.pts_count;
		for ( ; i < len; ++i)
		{
			i2 = i*2;
			x = myptscache[i2];
			y = myptscache[i2+1];
			if (x < bboxLeft_)
				bboxLeft_ = x;
			if (x > bboxRight_)
				bboxRight_ = x;
			if (y < bboxTop_)
				bboxTop_ = y;
			if (y > bboxBottom_)
				bboxBottom_ = y;
		}
		this.bboxLeft = bboxLeft_;
		this.bboxRight = bboxRight_;
		this.bboxTop = bboxTop_;
		this.bboxBottom = bboxBottom_;
	};
	CollisionPoly_.prototype.set_from_rect = function(rc, offx, offy)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = rc.left - offx;
		myptscache[1] = rc.top - offy;
		myptscache[2] = rc.right - offx;
		myptscache[3] = rc.top - offy;
		myptscache[4] = rc.right - offx;
		myptscache[5] = rc.bottom - offy;
		myptscache[6] = rc.left - offx;
		myptscache[7] = rc.bottom - offy;
		this.cache_width = rc.right - rc.left;
		this.cache_height = rc.bottom - rc.top;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_quad = function(q, offx, offy, w, h)
	{
		this.pts_cache.length = 8;
		this.pts_count = 4;
		var myptscache = this.pts_cache;
		myptscache[0] = q.tlx - offx;
		myptscache[1] = q.tly - offy;
		myptscache[2] = q.trx - offx;
		myptscache[3] = q.try_ - offy;
		myptscache[4] = q.brx - offx;
		myptscache[5] = q.bry - offy;
		myptscache[6] = q.blx - offx;
		myptscache[7] = q.bly - offy;
		this.cache_width = w;
		this.cache_height = h;
		this.update_bbox();
	};
	CollisionPoly_.prototype.set_from_poly = function (r)
	{
		this.pts_count = r.pts_count;
		cr.shallowAssignArray(this.pts_cache, r.pts_cache);
		this.bboxLeft = r.bboxLeft;
		this.bboxTop - r.bboxTop;
		this.bboxRight = r.bboxRight;
		this.bboxBottom = r.bboxBottom;
	};
	CollisionPoly_.prototype.cache_poly = function(w, h, a)
	{
		if (this.cache_width === w && this.cache_height === h && this.cache_angle === a)
			return;		// cache up-to-date
		this.cache_width = w;
		this.cache_height = h;
		this.cache_angle = a;
		var i, i2, i21, len, x, y;
		var sina = 0;
		var cosa = 1;
		var myptsarray = this.pts_array;
		var myptscache = this.pts_cache;
		if (a !== 0)
		{
			sina = Math.sin(a);
			cosa = Math.cos(a);
		}
		for (i = 0, len = this.pts_count; i < len; i++)
		{
			i2 = i*2;
			i21 = i2+1;
			x = myptsarray[i2] * w;
			y = myptsarray[i21] * h;
			myptscache[i2] = (x * cosa) - (y * sina);
			myptscache[i21] = (y * cosa) + (x * sina);
		}
		this.update_bbox();
	};
	CollisionPoly_.prototype.contains_pt = function (a2x, a2y)
	{
		var myptscache = this.pts_cache;
		if (a2x === myptscache[0] && a2y === myptscache[1])
			return true;
		var i, i2, imod, len = this.pts_count;
		var a1x = this.bboxLeft - 110;
		var a1y = this.bboxTop - 101;
		var a3x = this.bboxRight + 131
		var a3y = this.bboxBottom + 120;
		var b1x, b1y, b2x, b2y;
		var count1 = 0, count2 = 0;
		for (i = 0; i < len; i++)
		{
			i2 = i*2;
			imod = ((i+1)%len)*2;
			b1x = myptscache[i2];
			b1y = myptscache[i2+1];
			b2x = myptscache[imod];
			b2y = myptscache[imod+1];
			if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
				count1++;
			if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y))
				count2++;
		}
		return (count1 % 2 === 1) || (count2 % 2 === 1);
	};
	CollisionPoly_.prototype.intersects_poly = function (rhs, offx, offy)
	{
		var rhspts = rhs.pts_cache;
		var mypts = this.pts_cache;
		if (this.contains_pt(rhspts[0] + offx, rhspts[1] + offy))
			return true;
		if (rhs.contains_pt(mypts[0] - offx, mypts[1] - offy))
			return true;
		var i, i2, imod, leni, j, j2, jmod, lenj;
		var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2];
			a1y = mypts[i2+1];
			a2x = mypts[imod];
			a2y = mypts[imod+1];
			for (j = 0, lenj = rhs.pts_count; j < lenj; j++)
			{
				j2 = j*2;
				jmod = ((j+1)%lenj)*2;
				b1x = rhspts[j2] + offx;
				b1y = rhspts[j2+1] + offy;
				b2x = rhspts[jmod] + offx;
				b2y = rhspts[jmod+1] + offy;
				if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y))
					return true;
			}
		}
		return false;
	};
	CollisionPoly_.prototype.intersects_segment = function (offx, offy, x1, y1, x2, y2)
	{
		var mypts = this.pts_cache;
		if (this.contains_pt(x1 - offx, y1 - offy))
			return true;
		var i, leni, i2, imod;
		var a1x, a1y, a2x, a2y;
		for (i = 0, leni = this.pts_count; i < leni; i++)
		{
			i2 = i*2;
			imod = ((i+1)%leni)*2;
			a1x = mypts[i2] + offx;
			a1y = mypts[i2+1] + offy;
			a2x = mypts[imod] + offx;
			a2y = mypts[imod+1] + offy;
			if (cr.segments_intersect(x1, y1, x2, y2, a1x, a1y, a2x, a2y))
				return true;
		}
		return false;
	};
	CollisionPoly_.prototype.mirror = function (px)
	{
		var i, leni, i2;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			this.pts_cache[i2] = px * 2 - this.pts_cache[i2];
		}
	};
	CollisionPoly_.prototype.flip = function (py)
	{
		var i, leni, i21;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i21 = i*2+1;
			this.pts_cache[i21] = py * 2 - this.pts_cache[i21];
		}
	};
	CollisionPoly_.prototype.diag = function ()
	{
		var i, leni, i2, i21, temp;
		for (i = 0, leni = this.pts_count; i < leni; ++i)
		{
			i2 = i*2;
			i21 = i2+1;
			temp = this.pts_cache[i2];
			this.pts_cache[i2] = this.pts_cache[i21];
			this.pts_cache[i21] = temp;
		}
	};
	cr.CollisionPoly = CollisionPoly_;
	function SparseGrid_(cellwidth_, cellheight_)
	{
		this.cellwidth = cellwidth_;
		this.cellheight = cellheight_;
		this.cells = {};
	};
	SparseGrid_.prototype.totalCellCount = 0;
	SparseGrid_.prototype.getCell = function (x_, y_, create_if_missing)
	{
		var ret;
		var col = this.cells[x_];
		if (!col)
		{
			if (create_if_missing)
			{
				ret = allocGridCell(this, x_, y_);
				this.cells[x_] = {};
				this.cells[x_][y_] = ret;
				return ret;
			}
			else
				return null;
		}
		ret = col[y_];
		if (ret)
			return ret;
		else if (create_if_missing)
		{
			ret = allocGridCell(this, x_, y_);
			this.cells[x_][y_] = ret;
			return ret;
		}
		else
			return null;
	};
	SparseGrid_.prototype.XToCell = function (x_)
	{
		return cr.floor(x_ / this.cellwidth);
	};
	SparseGrid_.prototype.YToCell = function (y_)
	{
		return cr.floor(y_ / this.cellheight);
	};
	SparseGrid_.prototype.update = function (inst, oldrange, newrange)
	{
		var x, lenx, y, leny, cell;
		if (oldrange)
		{
			for (x = oldrange.left, lenx = oldrange.right; x <= lenx; ++x)
			{
				for (y = oldrange.top, leny = oldrange.bottom; y <= leny; ++y)
				{
					if (newrange && newrange.contains_pt(x, y))
						continue;	// is still in this cell
					cell = this.getCell(x, y, false);	// don't create if missing
					if (!cell)
						continue;	// cell does not exist yet
					cell.remove(inst);
					if (cell.isEmpty())
					{
						freeGridCell(cell);
						this.cells[x][y] = null;
					}
				}
			}
		}
		if (newrange)
		{
			for (x = newrange.left, lenx = newrange.right; x <= lenx; ++x)
			{
				for (y = newrange.top, leny = newrange.bottom; y <= leny; ++y)
				{
					if (oldrange && oldrange.contains_pt(x, y))
						continue;	// is still in this cell
					this.getCell(x, y, true).insert(inst);
				}
			}
		}
	};
	SparseGrid_.prototype.queryRange = function (rc, result)
	{
		var x, lenx, ystart, y, leny, cell;
		x = this.XToCell(rc.left);
		ystart = this.YToCell(rc.top);
		lenx = this.XToCell(rc.right);
		leny = this.YToCell(rc.bottom);
		for ( ; x <= lenx; ++x)
		{
			for (y = ystart; y <= leny; ++y)
			{
				cell = this.getCell(x, y, false);
				if (!cell)
					continue;
				cell.dump(result);
			}
		}
	};
	cr.SparseGrid = SparseGrid_;
	var gridcellcache = [];
	function allocGridCell(grid_, x_, y_)
	{
		var ret;
		SparseGrid_.prototype.totalCellCount++;
		if (gridcellcache.length)
		{
			ret = gridcellcache.pop();
			ret.grid = grid_;
			ret.x = x_;
			ret.y = y_;
			return ret;
		}
		else
			return new cr.GridCell(grid_, x_, y_);
	};
	function freeGridCell(c)
	{
		SparseGrid_.prototype.totalCellCount--;
		c.objects.clear();
		if (gridcellcache.length < 1000)
			gridcellcache.push(c);
	};
	function GridCell_(grid_, x_, y_)
	{
		this.grid = grid_;
		this.x = x_;
		this.y = y_;
		this.objects = new cr.ObjectSet();
	};
	GridCell_.prototype.isEmpty = function ()
	{
		return this.objects.isEmpty();
	};
	GridCell_.prototype.insert = function (inst)
	{
		this.objects.add(inst);
	};
	GridCell_.prototype.remove = function (inst)
	{
		this.objects.remove(inst);
	};
	GridCell_.prototype.dump = function (result)
	{
		cr.appendArray(result, this.objects.valuesRef());
	};
	cr.GridCell = GridCell_;
	var fxNames = [ "lighter",
					"xor",
					"copy",
					"destination-over",
					"source-in",
					"destination-in",
					"source-out",
					"destination-out",
					"source-atop",
					"destination-atop"];
	cr.effectToCompositeOp = function(effect)
	{
		if (effect <= 0 || effect >= 11)
			return "source-over";
		return fxNames[effect - 1];	// not including "none" so offset by 1
	};
	cr.setGLBlend = function(this_, effect, gl)
	{
		if (!gl)
			return;
		this_.srcBlend = gl.ONE;
		this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
		switch (effect) {
		case 1:		// lighter (additive)
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ONE;
			break;
		case 2:		// xor
			break;	// todo
		case 3:		// copy
			this_.srcBlend = gl.ONE;
			this_.destBlend = gl.ZERO;
			break;
		case 4:		// destination-over
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ONE;
			break;
		case 5:		// source-in
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 6:		// destination-in
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		case 7:		// source-out
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.ZERO;
			break;
		case 8:		// destination-out
			this_.srcBlend = gl.ZERO;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 9:		// source-atop
			this_.srcBlend = gl.DST_ALPHA;
			this_.destBlend = gl.ONE_MINUS_SRC_ALPHA;
			break;
		case 10:	// destination-atop
			this_.srcBlend = gl.ONE_MINUS_DST_ALPHA;
			this_.destBlend = gl.SRC_ALPHA;
			break;
		}
	};
	cr.round6dp = function (x)
	{
		return cr.round(x * 1000000) / 1000000;
	};
	/*
	var localeCompare_options = {
		"usage": "search",
		"sensitivity": "accent"
	};
	var has_localeCompare = !!"a".localeCompare;
	var localeCompare_works1 = (has_localeCompare && "a".localeCompare("A", undefined, localeCompare_options) === 0);
	var localeCompare_works2 = (has_localeCompare && "a".localeCompare("á", undefined, localeCompare_options) !== 0);
	var supports_localeCompare = (has_localeCompare && localeCompare_works1 && localeCompare_works2);
	*/
	cr.equals_nocase = function (a, b)
	{
		if (typeof a !== "string" || typeof b !== "string")
			return false;
		if (a.length !== b.length)
			return false;
		if (a === b)
			return true;
		/*
		if (supports_localeCompare)
		{
			return (a.localeCompare(b, undefined, localeCompare_options) === 0);
		}
		else
		{
		*/
			return a.toLowerCase() === b.toLowerCase();
	};
}());
var MatrixArray=typeof Float32Array!=="undefined"?Float32Array:Array,glMatrixArrayType=MatrixArray,vec3={},mat3={},mat4={},quat4={};vec3.create=function(a){var b=new MatrixArray(3);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2]);return b};vec3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];return b};vec3.add=function(a,b,c){if(!c||a===c)return a[0]+=b[0],a[1]+=b[1],a[2]+=b[2],a;c[0]=a[0]+b[0];c[1]=a[1]+b[1];c[2]=a[2]+b[2];return c};
vec3.subtract=function(a,b,c){if(!c||a===c)return a[0]-=b[0],a[1]-=b[1],a[2]-=b[2],a;c[0]=a[0]-b[0];c[1]=a[1]-b[1];c[2]=a[2]-b[2];return c};vec3.negate=function(a,b){b||(b=a);b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];return b};vec3.scale=function(a,b,c){if(!c||a===c)return a[0]*=b,a[1]*=b,a[2]*=b,a;c[0]=a[0]*b;c[1]=a[1]*b;c[2]=a[2]*b;return c};
vec3.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=Math.sqrt(c*c+d*d+e*e);if(g){if(g===1)return b[0]=c,b[1]=d,b[2]=e,b}else return b[0]=0,b[1]=0,b[2]=0,b;g=1/g;b[0]=c*g;b[1]=d*g;b[2]=e*g;return b};vec3.cross=function(a,b,c){c||(c=a);var d=a[0],e=a[1],a=a[2],g=b[0],f=b[1],b=b[2];c[0]=e*b-a*f;c[1]=a*g-d*b;c[2]=d*f-e*g;return c};vec3.length=function(a){var b=a[0],c=a[1],a=a[2];return Math.sqrt(b*b+c*c+a*a)};vec3.dot=function(a,b){return a[0]*b[0]+a[1]*b[1]+a[2]*b[2]};
vec3.direction=function(a,b,c){c||(c=a);var d=a[0]-b[0],e=a[1]-b[1],a=a[2]-b[2],b=Math.sqrt(d*d+e*e+a*a);if(!b)return c[0]=0,c[1]=0,c[2]=0,c;b=1/b;c[0]=d*b;c[1]=e*b;c[2]=a*b;return c};vec3.lerp=function(a,b,c,d){d||(d=a);d[0]=a[0]+c*(b[0]-a[0]);d[1]=a[1]+c*(b[1]-a[1]);d[2]=a[2]+c*(b[2]-a[2]);return d};vec3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+"]"};
mat3.create=function(a){var b=new MatrixArray(9);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8]);return b};mat3.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];return b};mat3.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=1;a[5]=0;a[6]=0;a[7]=0;a[8]=1;return a};
mat3.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[5];a[1]=a[3];a[2]=a[6];a[3]=c;a[5]=a[7];a[6]=d;a[7]=e;return a}b[0]=a[0];b[1]=a[3];b[2]=a[6];b[3]=a[1];b[4]=a[4];b[5]=a[7];b[6]=a[2];b[7]=a[5];b[8]=a[8];return b};mat3.toMat4=function(a,b){b||(b=mat4.create());b[15]=1;b[14]=0;b[13]=0;b[12]=0;b[11]=0;b[10]=a[8];b[9]=a[7];b[8]=a[6];b[7]=0;b[6]=a[5];b[5]=a[4];b[4]=a[3];b[3]=0;b[2]=a[2];b[1]=a[1];b[0]=a[0];return b};
mat3.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+"]"};mat4.create=function(a){var b=new MatrixArray(16);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3],b[4]=a[4],b[5]=a[5],b[6]=a[6],b[7]=a[7],b[8]=a[8],b[9]=a[9],b[10]=a[10],b[11]=a[11],b[12]=a[12],b[13]=a[13],b[14]=a[14],b[15]=a[15]);return b};
mat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=a[12];b[13]=a[13];b[14]=a[14];b[15]=a[15];return b};mat4.identity=function(a){a[0]=1;a[1]=0;a[2]=0;a[3]=0;a[4]=0;a[5]=1;a[6]=0;a[7]=0;a[8]=0;a[9]=0;a[10]=1;a[11]=0;a[12]=0;a[13]=0;a[14]=0;a[15]=1;return a};
mat4.transpose=function(a,b){if(!b||a===b){var c=a[1],d=a[2],e=a[3],g=a[6],f=a[7],h=a[11];a[1]=a[4];a[2]=a[8];a[3]=a[12];a[4]=c;a[6]=a[9];a[7]=a[13];a[8]=d;a[9]=g;a[11]=a[14];a[12]=e;a[13]=f;a[14]=h;return a}b[0]=a[0];b[1]=a[4];b[2]=a[8];b[3]=a[12];b[4]=a[1];b[5]=a[5];b[6]=a[9];b[7]=a[13];b[8]=a[2];b[9]=a[6];b[10]=a[10];b[11]=a[14];b[12]=a[3];b[13]=a[7];b[14]=a[11];b[15]=a[15];return b};
mat4.determinant=function(a){var b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],f=a[5],h=a[6],i=a[7],j=a[8],k=a[9],l=a[10],n=a[11],o=a[12],m=a[13],p=a[14],a=a[15];return o*k*h*e-j*m*h*e-o*f*l*e+g*m*l*e+j*f*p*e-g*k*p*e-o*k*d*i+j*m*d*i+o*c*l*i-b*m*l*i-j*c*p*i+b*k*p*i+o*f*d*n-g*m*d*n-o*c*h*n+b*m*h*n+g*c*p*n-b*f*p*n-j*f*d*a+g*k*d*a+j*c*h*a-b*k*h*a-g*c*l*a+b*f*l*a};
mat4.inverse=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=a[4],h=a[5],i=a[6],j=a[7],k=a[8],l=a[9],n=a[10],o=a[11],m=a[12],p=a[13],r=a[14],s=a[15],A=c*h-d*f,B=c*i-e*f,t=c*j-g*f,u=d*i-e*h,v=d*j-g*h,w=e*j-g*i,x=k*p-l*m,y=k*r-n*m,z=k*s-o*m,C=l*r-n*p,D=l*s-o*p,E=n*s-o*r,q=1/(A*E-B*D+t*C+u*z-v*y+w*x);b[0]=(h*E-i*D+j*C)*q;b[1]=(-d*E+e*D-g*C)*q;b[2]=(p*w-r*v+s*u)*q;b[3]=(-l*w+n*v-o*u)*q;b[4]=(-f*E+i*z-j*y)*q;b[5]=(c*E-e*z+g*y)*q;b[6]=(-m*w+r*t-s*B)*q;b[7]=(k*w-n*t+o*B)*q;b[8]=(f*D-h*z+j*x)*q;
b[9]=(-c*D+d*z-g*x)*q;b[10]=(m*v-p*t+s*A)*q;b[11]=(-k*v+l*t-o*A)*q;b[12]=(-f*C+h*y-i*x)*q;b[13]=(c*C-d*y+e*x)*q;b[14]=(-m*u+p*B-r*A)*q;b[15]=(k*u-l*B+n*A)*q;return b};mat4.toRotationMat=function(a,b){b||(b=mat4.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];b[4]=a[4];b[5]=a[5];b[6]=a[6];b[7]=a[7];b[8]=a[8];b[9]=a[9];b[10]=a[10];b[11]=a[11];b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
mat4.toMat3=function(a,b){b||(b=mat3.create());b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[4];b[4]=a[5];b[5]=a[6];b[6]=a[8];b[7]=a[9];b[8]=a[10];return b};mat4.toInverseMat3=function(a,b){var c=a[0],d=a[1],e=a[2],g=a[4],f=a[5],h=a[6],i=a[8],j=a[9],k=a[10],l=k*f-h*j,n=-k*g+h*i,o=j*g-f*i,m=c*l+d*n+e*o;if(!m)return null;m=1/m;b||(b=mat3.create());b[0]=l*m;b[1]=(-k*d+e*j)*m;b[2]=(h*d-e*f)*m;b[3]=n*m;b[4]=(k*c-e*i)*m;b[5]=(-h*c+e*g)*m;b[6]=o*m;b[7]=(-j*c+d*i)*m;b[8]=(f*c-d*g)*m;return b};
mat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],f=a[3],h=a[4],i=a[5],j=a[6],k=a[7],l=a[8],n=a[9],o=a[10],m=a[11],p=a[12],r=a[13],s=a[14],a=a[15],A=b[0],B=b[1],t=b[2],u=b[3],v=b[4],w=b[5],x=b[6],y=b[7],z=b[8],C=b[9],D=b[10],E=b[11],q=b[12],F=b[13],G=b[14],b=b[15];c[0]=A*d+B*h+t*l+u*p;c[1]=A*e+B*i+t*n+u*r;c[2]=A*g+B*j+t*o+u*s;c[3]=A*f+B*k+t*m+u*a;c[4]=v*d+w*h+x*l+y*p;c[5]=v*e+w*i+x*n+y*r;c[6]=v*g+w*j+x*o+y*s;c[7]=v*f+w*k+x*m+y*a;c[8]=z*d+C*h+D*l+E*p;c[9]=z*e+C*i+D*n+E*r;c[10]=z*g+C*
j+D*o+E*s;c[11]=z*f+C*k+D*m+E*a;c[12]=q*d+F*h+G*l+b*p;c[13]=q*e+F*i+G*n+b*r;c[14]=q*g+F*j+G*o+b*s;c[15]=q*f+F*k+G*m+b*a;return c};mat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],b=b[2];c[0]=a[0]*d+a[4]*e+a[8]*b+a[12];c[1]=a[1]*d+a[5]*e+a[9]*b+a[13];c[2]=a[2]*d+a[6]*e+a[10]*b+a[14];return c};
mat4.multiplyVec4=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=b[3];c[0]=a[0]*d+a[4]*e+a[8]*g+a[12]*b;c[1]=a[1]*d+a[5]*e+a[9]*g+a[13]*b;c[2]=a[2]*d+a[6]*e+a[10]*g+a[14]*b;c[3]=a[3]*d+a[7]*e+a[11]*g+a[15]*b;return c};
mat4.translate=function(a,b,c){var d=b[0],e=b[1],b=b[2],g,f,h,i,j,k,l,n,o,m,p,r;if(!c||a===c)return a[12]=a[0]*d+a[4]*e+a[8]*b+a[12],a[13]=a[1]*d+a[5]*e+a[9]*b+a[13],a[14]=a[2]*d+a[6]*e+a[10]*b+a[14],a[15]=a[3]*d+a[7]*e+a[11]*b+a[15],a;g=a[0];f=a[1];h=a[2];i=a[3];j=a[4];k=a[5];l=a[6];n=a[7];o=a[8];m=a[9];p=a[10];r=a[11];c[0]=g;c[1]=f;c[2]=h;c[3]=i;c[4]=j;c[5]=k;c[6]=l;c[7]=n;c[8]=o;c[9]=m;c[10]=p;c[11]=r;c[12]=g*d+j*e+o*b+a[12];c[13]=f*d+k*e+m*b+a[13];c[14]=h*d+l*e+p*b+a[14];c[15]=i*d+n*e+r*b+a[15];
return c};mat4.scale=function(a,b,c){var d=b[0],e=b[1],b=b[2];if(!c||a===c)return a[0]*=d,a[1]*=d,a[2]*=d,a[3]*=d,a[4]*=e,a[5]*=e,a[6]*=e,a[7]*=e,a[8]*=b,a[9]*=b,a[10]*=b,a[11]*=b,a;c[0]=a[0]*d;c[1]=a[1]*d;c[2]=a[2]*d;c[3]=a[3]*d;c[4]=a[4]*e;c[5]=a[5]*e;c[6]=a[6]*e;c[7]=a[7]*e;c[8]=a[8]*b;c[9]=a[9]*b;c[10]=a[10]*b;c[11]=a[11]*b;c[12]=a[12];c[13]=a[13];c[14]=a[14];c[15]=a[15];return c};
mat4.rotate=function(a,b,c,d){var e=c[0],g=c[1],c=c[2],f=Math.sqrt(e*e+g*g+c*c),h,i,j,k,l,n,o,m,p,r,s,A,B,t,u,v,w,x,y,z;if(!f)return null;f!==1&&(f=1/f,e*=f,g*=f,c*=f);h=Math.sin(b);i=Math.cos(b);j=1-i;b=a[0];f=a[1];k=a[2];l=a[3];n=a[4];o=a[5];m=a[6];p=a[7];r=a[8];s=a[9];A=a[10];B=a[11];t=e*e*j+i;u=g*e*j+c*h;v=c*e*j-g*h;w=e*g*j-c*h;x=g*g*j+i;y=c*g*j+e*h;z=e*c*j+g*h;e=g*c*j-e*h;g=c*c*j+i;d?a!==d&&(d[12]=a[12],d[13]=a[13],d[14]=a[14],d[15]=a[15]):d=a;d[0]=b*t+n*u+r*v;d[1]=f*t+o*u+s*v;d[2]=k*t+m*u+A*
v;d[3]=l*t+p*u+B*v;d[4]=b*w+n*x+r*y;d[5]=f*w+o*x+s*y;d[6]=k*w+m*x+A*y;d[7]=l*w+p*x+B*y;d[8]=b*z+n*e+r*g;d[9]=f*z+o*e+s*g;d[10]=k*z+m*e+A*g;d[11]=l*z+p*e+B*g;return d};mat4.rotateX=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[4],g=a[5],f=a[6],h=a[7],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[0]=a[0],c[1]=a[1],c[2]=a[2],c[3]=a[3],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[4]=e*b+i*d;c[5]=g*b+j*d;c[6]=f*b+k*d;c[7]=h*b+l*d;c[8]=e*-d+i*b;c[9]=g*-d+j*b;c[10]=f*-d+k*b;c[11]=h*-d+l*b;return c};
mat4.rotateY=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[8],j=a[9],k=a[10],l=a[11];c?a!==c&&(c[4]=a[4],c[5]=a[5],c[6]=a[6],c[7]=a[7],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*-d;c[1]=g*b+j*-d;c[2]=f*b+k*-d;c[3]=h*b+l*-d;c[8]=e*d+i*b;c[9]=g*d+j*b;c[10]=f*d+k*b;c[11]=h*d+l*b;return c};
mat4.rotateZ=function(a,b,c){var d=Math.sin(b),b=Math.cos(b),e=a[0],g=a[1],f=a[2],h=a[3],i=a[4],j=a[5],k=a[6],l=a[7];c?a!==c&&(c[8]=a[8],c[9]=a[9],c[10]=a[10],c[11]=a[11],c[12]=a[12],c[13]=a[13],c[14]=a[14],c[15]=a[15]):c=a;c[0]=e*b+i*d;c[1]=g*b+j*d;c[2]=f*b+k*d;c[3]=h*b+l*d;c[4]=e*-d+i*b;c[5]=g*-d+j*b;c[6]=f*-d+k*b;c[7]=h*-d+l*b;return c};
mat4.frustum=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=e*2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=e*2/i;f[6]=0;f[7]=0;f[8]=(b+a)/h;f[9]=(d+c)/i;f[10]=-(g+e)/j;f[11]=-1;f[12]=0;f[13]=0;f[14]=-(g*e*2)/j;f[15]=0;return f};mat4.perspective=function(a,b,c,d,e){a=c*Math.tan(a*Math.PI/360);b*=a;return mat4.frustum(-b,b,-a,a,c,d,e)};
mat4.ortho=function(a,b,c,d,e,g,f){f||(f=mat4.create());var h=b-a,i=d-c,j=g-e;f[0]=2/h;f[1]=0;f[2]=0;f[3]=0;f[4]=0;f[5]=2/i;f[6]=0;f[7]=0;f[8]=0;f[9]=0;f[10]=-2/j;f[11]=0;f[12]=-(a+b)/h;f[13]=-(d+c)/i;f[14]=-(g+e)/j;f[15]=1;return f};
mat4.lookAt=function(a,b,c,d){d||(d=mat4.create());var e,g,f,h,i,j,k,l,n=a[0],o=a[1],a=a[2];g=c[0];f=c[1];e=c[2];c=b[1];j=b[2];if(n===b[0]&&o===c&&a===j)return mat4.identity(d);c=n-b[0];j=o-b[1];k=a-b[2];l=1/Math.sqrt(c*c+j*j+k*k);c*=l;j*=l;k*=l;b=f*k-e*j;e=e*c-g*k;g=g*j-f*c;(l=Math.sqrt(b*b+e*e+g*g))?(l=1/l,b*=l,e*=l,g*=l):g=e=b=0;f=j*g-k*e;h=k*b-c*g;i=c*e-j*b;(l=Math.sqrt(f*f+h*h+i*i))?(l=1/l,f*=l,h*=l,i*=l):i=h=f=0;d[0]=b;d[1]=f;d[2]=c;d[3]=0;d[4]=e;d[5]=h;d[6]=j;d[7]=0;d[8]=g;d[9]=i;d[10]=k;d[11]=
0;d[12]=-(b*n+e*o+g*a);d[13]=-(f*n+h*o+i*a);d[14]=-(c*n+j*o+k*a);d[15]=1;return d};mat4.fromRotationTranslation=function(a,b,c){c||(c=mat4.create());var d=a[0],e=a[1],g=a[2],f=a[3],h=d+d,i=e+e,j=g+g,a=d*h,k=d*i;d*=j;var l=e*i;e*=j;g*=j;h*=f;i*=f;f*=j;c[0]=1-(l+g);c[1]=k+f;c[2]=d-i;c[3]=0;c[4]=k-f;c[5]=1-(a+g);c[6]=e+h;c[7]=0;c[8]=d+i;c[9]=e-h;c[10]=1-(a+l);c[11]=0;c[12]=b[0];c[13]=b[1];c[14]=b[2];c[15]=1;return c};
mat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+", "+a[4]+", "+a[5]+", "+a[6]+", "+a[7]+", "+a[8]+", "+a[9]+", "+a[10]+", "+a[11]+", "+a[12]+", "+a[13]+", "+a[14]+", "+a[15]+"]"};quat4.create=function(a){var b=new MatrixArray(4);a&&(b[0]=a[0],b[1]=a[1],b[2]=a[2],b[3]=a[3]);return b};quat4.set=function(a,b){b[0]=a[0];b[1]=a[1];b[2]=a[2];b[3]=a[3];return b};
quat4.calculateW=function(a,b){var c=a[0],d=a[1],e=a[2];if(!b||a===b)return a[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e)),a;b[0]=c;b[1]=d;b[2]=e;b[3]=-Math.sqrt(Math.abs(1-c*c-d*d-e*e));return b};quat4.inverse=function(a,b){if(!b||a===b)return a[0]*=-1,a[1]*=-1,a[2]*=-1,a;b[0]=-a[0];b[1]=-a[1];b[2]=-a[2];b[3]=a[3];return b};quat4.length=function(a){var b=a[0],c=a[1],d=a[2],a=a[3];return Math.sqrt(b*b+c*c+d*d+a*a)};
quat4.normalize=function(a,b){b||(b=a);var c=a[0],d=a[1],e=a[2],g=a[3],f=Math.sqrt(c*c+d*d+e*e+g*g);if(f===0)return b[0]=0,b[1]=0,b[2]=0,b[3]=0,b;f=1/f;b[0]=c*f;b[1]=d*f;b[2]=e*f;b[3]=g*f;return b};quat4.multiply=function(a,b,c){c||(c=a);var d=a[0],e=a[1],g=a[2],a=a[3],f=b[0],h=b[1],i=b[2],b=b[3];c[0]=d*b+a*f+e*i-g*h;c[1]=e*b+a*h+g*f-d*i;c[2]=g*b+a*i+d*h-e*f;c[3]=a*b-d*f-e*h-g*i;return c};
quat4.multiplyVec3=function(a,b,c){c||(c=b);var d=b[0],e=b[1],g=b[2],b=a[0],f=a[1],h=a[2],a=a[3],i=a*d+f*g-h*e,j=a*e+h*d-b*g,k=a*g+b*e-f*d,d=-b*d-f*e-h*g;c[0]=i*a+d*-b+j*-h-k*-f;c[1]=j*a+d*-f+k*-b-i*-h;c[2]=k*a+d*-h+i*-f-j*-b;return c};quat4.toMat3=function(a,b){b||(b=mat3.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=k-g;b[4]=1-(j+e);b[5]=d+f;b[6]=c+h;b[7]=d-f;b[8]=1-(j+l);return b};
quat4.toMat4=function(a,b){b||(b=mat4.create());var c=a[0],d=a[1],e=a[2],g=a[3],f=c+c,h=d+d,i=e+e,j=c*f,k=c*h;c*=i;var l=d*h;d*=i;e*=i;f*=g;h*=g;g*=i;b[0]=1-(l+e);b[1]=k+g;b[2]=c-h;b[3]=0;b[4]=k-g;b[5]=1-(j+e);b[6]=d+f;b[7]=0;b[8]=c+h;b[9]=d-f;b[10]=1-(j+l);b[11]=0;b[12]=0;b[13]=0;b[14]=0;b[15]=1;return b};
quat4.slerp=function(a,b,c,d){d||(d=a);var e=a[0]*b[0]+a[1]*b[1]+a[2]*b[2]+a[3]*b[3],g,f;if(Math.abs(e)>=1)return d!==a&&(d[0]=a[0],d[1]=a[1],d[2]=a[2],d[3]=a[3]),d;g=Math.acos(e);f=Math.sqrt(1-e*e);if(Math.abs(f)<0.001)return d[0]=a[0]*0.5+b[0]*0.5,d[1]=a[1]*0.5+b[1]*0.5,d[2]=a[2]*0.5+b[2]*0.5,d[3]=a[3]*0.5+b[3]*0.5,d;e=Math.sin((1-c)*g)/f;c=Math.sin(c*g)/f;d[0]=a[0]*e+b[0]*c;d[1]=a[1]*e+b[1]*c;d[2]=a[2]*e+b[2]*c;d[3]=a[3]*e+b[3]*c;return d};
quat4.str=function(a){return"["+a[0]+", "+a[1]+", "+a[2]+", "+a[3]+"]"};
(function()
{
	var MAX_VERTICES = 8000;						// equates to 2500 objects being drawn
	var MAX_INDICES = (MAX_VERTICES / 2) * 3;		// 6 indices for every 4 vertices
	var MAX_POINTS = 8000;
	var MULTI_BUFFERS = 4;							// cycle 4 buffers to try and avoid blocking
	var BATCH_NULL = 0;
	var BATCH_QUAD = 1;
	var BATCH_SETTEXTURE = 2;
	var BATCH_SETOPACITY = 3;
	var BATCH_SETBLEND = 4;
	var BATCH_UPDATEMODELVIEW = 5;
	var BATCH_RENDERTOTEXTURE = 6;
	var BATCH_CLEAR = 7;
	var BATCH_POINTS = 8;
	var BATCH_SETPROGRAM = 9;
	var BATCH_SETPROGRAMPARAMETERS = 10;
	var BATCH_SETTEXTURE1 = 11;
	function GLWrap_(gl, isMobile)
	{
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.width = 0;		// not yet known, wait for call to setSize()
		this.height = 0;
		this.cam = vec3.create([0, 0, 100]);			// camera position
		this.look = vec3.create([0, 0, 0]);				// lookat position
		this.up = vec3.create([0, 1, 0]);				// up vector
		this.worldScale = vec3.create([1, 1, 1]);		// world scaling factor
		this.matP = mat4.create();						// perspective matrix
		this.matMV = mat4.create();						// model view matrix
		this.lastMV = mat4.create();
		this.currentMV = mat4.create();
		this.gl = gl;
		this.initState();
	};
	GLWrap_.prototype.initState = function ()
	{
		var gl = this.gl;
		var i, len;
		this.lastOpacity = 1;
		this.lastTexture0 = null;			// last bound to TEXTURE0
		this.lastTexture1 = null;			// last bound to TEXTURE1
		this.currentOpacity = 1;
		gl.clearColor(0, 0, 0, 0);
		gl.clear(gl.COLOR_BUFFER_BIT);
		gl.enable(gl.BLEND);
        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.disable(gl.CULL_FACE);
		gl.disable(gl.DEPTH_TEST);
		this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
		this.lastSrcBlend = gl.ONE;
		this.lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
		this.pointBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
		this.vertexBuffers = new Array(MULTI_BUFFERS);
		this.texcoordBuffers = new Array(MULTI_BUFFERS);
		for (i = 0; i < MULTI_BUFFERS; i++)
		{
			this.vertexBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[i]);
			this.texcoordBuffers[i] = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[i]);
		}
		this.curBuffer = 0;
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);
		this.vertexData = new Float32Array(MAX_VERTICES * 2);
		this.texcoordData = new Float32Array(MAX_VERTICES * 2);
		this.pointData = new Float32Array(MAX_POINTS * 4);
		var indexData = new Uint16Array(MAX_INDICES);
		i = 0, len = MAX_INDICES;
		var fv = 0;
		while (i < len)
		{
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 1;	// top right
			indexData[i++] = fv + 2;	// bottom right (first tri)
			indexData[i++] = fv;		// top left
			indexData[i++] = fv + 2;	// bottom right
			indexData[i++] = fv + 3;	// bottom left
			fv += 4;
		}
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);
		this.vertexPtr = 0;
		this.pointPtr = 0;
		var fsSource, vsSource;
		this.shaderPrograms = [];
		fsSource = [
			"varying mediump vec2 vTex;",
			"uniform lowp float opacity;",
			"uniform lowp sampler2D samplerFront;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, vTex);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		vsSource = [
			"attribute highp vec2 aPos;",
			"attribute mediump vec2 aTex;",
			"varying mediump vec2 vTex;",
			"uniform highp mat4 matP;",
			"uniform highp mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	vTex = aTex;",
			"}"
		].join("\n");
		var shaderProg = this.createShaderProgram({src: fsSource}, vsSource, "<default>");
;
		this.shaderPrograms.push(shaderProg);		// Default shader is always shader 0
		fsSource = [
			"uniform mediump sampler2D samplerFront;",
			"varying lowp float opacity;",
			"void main(void) {",
			"	gl_FragColor = texture2D(samplerFront, gl_PointCoord);",
			"	gl_FragColor *= opacity;",
			"}"
		].join("\n");
		var pointVsSource = [
			"attribute vec4 aPos;",
			"varying float opacity;",
			"uniform mat4 matP;",
			"uniform mat4 matMV;",
			"void main(void) {",
			"	gl_Position = matP * matMV * vec4(aPos.x, aPos.y, 0.0, 1.0);",
			"	gl_PointSize = aPos.z;",
			"	opacity = aPos.w;",
			"}"
		].join("\n");
		shaderProg = this.createShaderProgram({src: fsSource}, pointVsSource, "<point>");
;
		this.shaderPrograms.push(shaderProg);		// Point shader is always shader 1
		for (var shader_name in cr.shaders)
		{
			if (cr.shaders.hasOwnProperty(shader_name))
				this.shaderPrograms.push(this.createShaderProgram(cr.shaders[shader_name], vsSource, shader_name));
		}
		gl.activeTexture(gl.TEXTURE0);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.batch = [];
		this.batchPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.lastProgram = -1;				// start -1 so first switchProgram can do work
		this.currentProgram = -1;			// current program during batch execution
		this.currentShader = null;
		this.fbo = gl.createFramebuffer();
		this.renderToTex = null;
		this.tmpVec3 = vec3.create([0, 0, 0]);
;
;
		var pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
		this.minPointSize = pointsizes[0];
		this.maxPointSize = pointsizes[1];
;
		this.switchProgram(0);
		cr.seal(this);
	};
	function GLShaderProgram(gl, shaderProgram, name)
	{
		this.gl = gl;
		this.shaderProgram = shaderProgram;
		this.name = name;
		this.locAPos = gl.getAttribLocation(shaderProgram, "aPos");
		this.locATex = gl.getAttribLocation(shaderProgram, "aTex");
		this.locMatP = gl.getUniformLocation(shaderProgram, "matP");
		this.locMatMV = gl.getUniformLocation(shaderProgram, "matMV");
		this.locOpacity = gl.getUniformLocation(shaderProgram, "opacity");
		this.locSamplerFront = gl.getUniformLocation(shaderProgram, "samplerFront");
		this.locSamplerBack = gl.getUniformLocation(shaderProgram, "samplerBack");
		this.locDestStart = gl.getUniformLocation(shaderProgram, "destStart");
		this.locDestEnd = gl.getUniformLocation(shaderProgram, "destEnd");
		this.locSeconds = gl.getUniformLocation(shaderProgram, "seconds");
		this.locPixelWidth = gl.getUniformLocation(shaderProgram, "pixelWidth");
		this.locPixelHeight = gl.getUniformLocation(shaderProgram, "pixelHeight");
		this.locLayerScale = gl.getUniformLocation(shaderProgram, "layerScale");
		this.locLayerAngle = gl.getUniformLocation(shaderProgram, "layerAngle");
		this.locViewOrigin = gl.getUniformLocation(shaderProgram, "viewOrigin");
		this.hasAnyOptionalUniforms = !!(this.locPixelWidth || this.locPixelHeight || this.locSeconds || this.locSamplerBack || this.locDestStart || this.locDestEnd || this.locLayerScale || this.locLayerAngle || this.locViewOrigin);
		if (this.locOpacity)
			gl.uniform1f(this.locOpacity, 1);
		if (this.locSamplerFront)
			gl.uniform1i(this.locSamplerFront, 0);
		if (this.locSamplerBack)
			gl.uniform1i(this.locSamplerBack, 1);
		if (this.locDestStart)
			gl.uniform2f(this.locDestStart, 0.0, 0.0);
		if (this.locDestEnd)
			gl.uniform2f(this.locDestEnd, 1.0, 1.0);
		if (this.locLayerScale)
			gl.uniform1f(this.locLayerScale, 1.0);
		if (this.locLayerAngle)
			gl.uniform1f(this.locLayerAngle, 0.0);
		if (this.locViewOrigin)
			gl.uniform2f(this.locViewOrigin, 0.0, 0.0);
		this.hasCurrentMatMV = false;		// matMV needs updating
	};
	GLWrap_.prototype.createShaderProgram = function(shaderEntry, vsSource, name)
	{
		var gl = this.gl;
		var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(fragmentShader, shaderEntry.src);
		gl.compileShader(fragmentShader);
		if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			return null;
		}
		var vertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(vertexShader, vsSource);
		gl.compileShader(vertexShader);
		if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			return null;
		}
		var shaderProgram = gl.createProgram();
		gl.attachShader(shaderProgram, fragmentShader);
		gl.attachShader(shaderProgram, vertexShader);
		gl.linkProgram(shaderProgram);
		if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
		{
;
			gl.deleteShader(fragmentShader);
			gl.deleteShader(vertexShader);
			gl.deleteProgram(shaderProgram);
			return null;
		}
		gl.useProgram(shaderProgram);
;
		gl.deleteShader(fragmentShader);
		gl.deleteShader(vertexShader);
		var ret = new GLShaderProgram(gl, shaderProgram, name);
		ret.extendBoxHorizontal = shaderEntry.extendBoxHorizontal || 0;
		ret.extendBoxVertical = shaderEntry.extendBoxVertical || 0;
		ret.crossSampling = !!shaderEntry.crossSampling;
		ret.animated = !!shaderEntry.animated;
		ret.parameters = shaderEntry.parameters || [];
		var i, len;
		for (i = 0, len = ret.parameters.length; i < len; i++)
		{
			ret.parameters[i][1] = gl.getUniformLocation(shaderProgram, ret.parameters[i][0]);
			gl.uniform1f(ret.parameters[i][1], 0);
		}
		cr.seal(ret);
		return ret;
	};
	GLWrap_.prototype.getShaderIndex = function(name_)
	{
		var i, len;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			if (this.shaderPrograms[i].name === name_)
				return i;
		}
		return -1;
	};
	GLWrap_.prototype.project = function (x, y, out)
	{
		var mv = this.matMV;
		var proj = this.matP;
		var fTempo = [0, 0, 0, 0, 0, 0, 0, 0];
		fTempo[0] = mv[0]*x+mv[4]*y+mv[12];
		fTempo[1] = mv[1]*x+mv[5]*y+mv[13];
		fTempo[2] = mv[2]*x+mv[6]*y+mv[14];
		fTempo[3] = mv[3]*x+mv[7]*y+mv[15];
		fTempo[4] = proj[0]*fTempo[0]+proj[4]*fTempo[1]+proj[8]*fTempo[2]+proj[12]*fTempo[3];
		fTempo[5] = proj[1]*fTempo[0]+proj[5]*fTempo[1]+proj[9]*fTempo[2]+proj[13]*fTempo[3];
		fTempo[6] = proj[2]*fTempo[0]+proj[6]*fTempo[1]+proj[10]*fTempo[2]+proj[14]*fTempo[3];
		fTempo[7] = -fTempo[2];
		if(fTempo[7]===0.0)	//The w value
			return;
		fTempo[7]=1.0/fTempo[7];
		fTempo[4]*=fTempo[7];
		fTempo[5]*=fTempo[7];
		fTempo[6]*=fTempo[7];
		out[0]=(fTempo[4]*0.5+0.5)*this.width;
		out[1]=(fTempo[5]*0.5+0.5)*this.height;
	};
	GLWrap_.prototype.setSize = function(w, h, force)
	{
		if (this.width === w && this.height === h && !force)
			return;
		this.endBatch();
		this.width = w;
		this.height = h;
		this.gl.viewport(0, 0, w, h);
		mat4.perspective(45, w / h, 1, 1000, this.matP);
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		var tl = [0, 0];
		var br = [0, 0];
		this.project(0, 0, tl);
		this.project(1, 1, br);
		this.worldScale[0] = 1 / (br[0] - tl[0]);
		this.worldScale[1] = -1 / (br[1] - tl[1]);
		var i, len, s;
		for (i = 0, len = this.shaderPrograms.length; i < len; i++)
		{
			s = this.shaderPrograms[i];
			s.hasCurrentMatMV = false;
			if (s.locMatP)
			{
				this.gl.useProgram(s.shaderProgram);
				this.gl.uniformMatrix4fv(s.locMatP, false, this.matP);
			}
		}
		this.gl.useProgram(this.shaderPrograms[this.lastProgram].shaderProgram);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE1);
		this.gl.bindTexture(this.gl.TEXTURE_2D, null);
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.lastTexture0 = null;
		this.lastTexture1 = null;
	};
	GLWrap_.prototype.resetModelView = function ()
	{
		mat4.lookAt(this.cam, this.look, this.up, this.matMV);
		mat4.scale(this.matMV, this.worldScale);
	};
	GLWrap_.prototype.translate = function (x, y)
	{
		if (x === 0 && y === 0)
			return;
		this.tmpVec3[0] = x;// * this.worldScale[0];
		this.tmpVec3[1] = y;// * this.worldScale[1];
		this.tmpVec3[2] = 0;
		mat4.translate(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.scale = function (x, y)
	{
		if (x === 1 && y === 1)
			return;
		this.tmpVec3[0] = x;
		this.tmpVec3[1] = y;
		this.tmpVec3[2] = 1;
		mat4.scale(this.matMV, this.tmpVec3);
	};
	GLWrap_.prototype.rotateZ = function (a)
	{
		if (a === 0)
			return;
		mat4.rotateZ(this.matMV, a);
	};
	GLWrap_.prototype.updateModelView = function()
	{
		var anydiff = false;
		for (var i = 0; i < 16; i++)
		{
			if (this.lastMV[i] !== this.matMV[i])
			{
				anydiff = true;
				break;
			}
		}
		if (!anydiff)
			return;
		var b = this.pushBatch();
		b.type = BATCH_UPDATEMODELVIEW;
		if (b.mat4param)
			mat4.set(this.matMV, b.mat4param);
		else
			b.mat4param = mat4.create(this.matMV);
		mat4.set(this.matMV, this.lastMV);
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	/*
	var debugBatch = false;
	jQuery(document).mousedown(
		function(info) {
			if (info.which === 2)
				debugBatch = true;
		}
	);
	*/
	function GLBatchJob(type_, glwrap_)
	{
		this.type = type_;
		this.glwrap = glwrap_;
		this.gl = glwrap_.gl;
		this.opacityParam = 0;		// for setOpacity()
		this.startIndex = 0;		// for quad()
		this.indexCount = 0;		// "
		this.texParam = null;		// for setTexture()
		this.mat4param = null;		// for updateModelView()
		this.shaderParams = [];		// for user parameters
		cr.seal(this);
	};
	GLBatchJob.prototype.doSetTexture = function ()
	{
		this.gl.bindTexture(this.gl.TEXTURE_2D, this.texParam);
	};
	GLBatchJob.prototype.doSetTexture1 = function ()
	{
		var gl = this.gl;
		gl.activeTexture(gl.TEXTURE1);
		gl.bindTexture(gl.TEXTURE_2D, this.texParam);
		gl.activeTexture(gl.TEXTURE0);
	};
	GLBatchJob.prototype.doSetOpacity = function ()
	{
		var o = this.opacityParam;
		var glwrap = this.glwrap;
		glwrap.currentOpacity = o;
		var curProg = glwrap.currentShader;
		if (curProg.locOpacity)
			this.gl.uniform1f(curProg.locOpacity, o);
	};
	GLBatchJob.prototype.doQuad = function ()
	{
		this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, this.startIndex * 2);
	};
	GLBatchJob.prototype.doSetBlend = function ()
	{
		this.gl.blendFunc(this.startIndex, this.indexCount);
	};
	GLBatchJob.prototype.doUpdateModelView = function ()
	{
		var i, len, s, shaderPrograms = this.glwrap.shaderPrograms, currentProgram = this.glwrap.currentProgram;
		for (i = 0, len = shaderPrograms.length; i < len; i++)
		{
			s = shaderPrograms[i];
			if (i === currentProgram && s.locMatMV)
			{
				this.gl.uniformMatrix4fv(s.locMatMV, false, this.mat4param);
				s.hasCurrentMatMV = true;
			}
			else
				s.hasCurrentMatMV = false;
		}
		mat4.set(this.mat4param, this.glwrap.currentMV);
	};
	GLBatchJob.prototype.doRenderToTexture = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		if (this.texParam)
		{
			if (glwrap.lastTexture1 === this.texParam)
			{
				gl.activeTexture(gl.TEXTURE1);
				gl.bindTexture(gl.TEXTURE_2D, null);
				glwrap.lastTexture1 = null;
				gl.activeTexture(gl.TEXTURE0);
			}
			gl.bindFramebuffer(gl.FRAMEBUFFER, glwrap.fbo);
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texParam, 0);
		}
		else
		{
			gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
			gl.bindFramebuffer(gl.FRAMEBUFFER, null);
		}
	};
	GLBatchJob.prototype.doClear = function ()
	{
		var gl = this.gl;
		if (this.startIndex === 0)		// clear whole surface
		{
			gl.clearColor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clear(gl.COLOR_BUFFER_BIT);
		}
		else							// clear rectangle
		{
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(this.mat4param[0], this.mat4param[1], this.mat4param[2], this.mat4param[3]);
			gl.clearColor(0, 0, 0, 0);
			gl.clear(this.gl.COLOR_BUFFER_BIT);
			gl.disable(gl.SCISSOR_TEST);
		}
	};
	GLBatchJob.prototype.doPoints = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[1];
		gl.useProgram(s.shaderProgram);
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		gl.enableVertexAttribArray(s.locAPos);
		gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.pointBuffer);
		gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.POINTS, this.startIndex / 4, this.indexCount);
		s = glwrap.currentShader;
		gl.useProgram(s.shaderProgram);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	};
	GLBatchJob.prototype.doSetProgram = function ()
	{
		var gl = this.gl;
		var glwrap = this.glwrap;
		var s = glwrap.shaderPrograms[this.startIndex];		// recycled param to save memory
		glwrap.currentProgram = this.startIndex;			// current batch program
		glwrap.currentShader = s;
		gl.useProgram(s.shaderProgram);						// switch to
		if (!s.hasCurrentMatMV && s.locMatMV)
		{
			gl.uniformMatrix4fv(s.locMatMV, false, glwrap.currentMV);
			s.hasCurrentMatMV = true;
		}
		if (s.locOpacity)
			gl.uniform1f(s.locOpacity, glwrap.currentOpacity);
		if (s.locAPos >= 0)
		{
			gl.enableVertexAttribArray(s.locAPos);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.vertexBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
		}
		if (s.locATex >= 0)
		{
			gl.enableVertexAttribArray(s.locATex);
			gl.bindBuffer(gl.ARRAY_BUFFER, glwrap.texcoordBuffers[glwrap.curBuffer]);
			gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
	}
	GLBatchJob.prototype.doSetProgramParameters = function ()
	{
		var i, len, s = this.glwrap.currentShader;
		var gl = this.gl;
		var mat4param = this.mat4param;
		if (s.locSamplerBack && this.glwrap.lastTexture1 !== this.texParam)
		{
			gl.activeTexture(gl.TEXTURE1);
			gl.bindTexture(gl.TEXTURE_2D, this.texParam);
			this.glwrap.lastTexture1 = this.texParam;
			gl.activeTexture(gl.TEXTURE0);
		}
		if (s.locPixelWidth)
			gl.uniform1f(s.locPixelWidth, mat4param[0]);
		if (s.locPixelHeight)
			gl.uniform1f(s.locPixelHeight, mat4param[1]);
		if (s.locDestStart)
			gl.uniform2f(s.locDestStart, mat4param[2], mat4param[3]);
		if (s.locDestEnd)
			gl.uniform2f(s.locDestEnd, mat4param[4], mat4param[5]);
		if (s.locLayerScale)
			gl.uniform1f(s.locLayerScale, mat4param[6]);
		if (s.locLayerAngle)
			gl.uniform1f(s.locLayerAngle, mat4param[7]);
		if (s.locViewOrigin)
			gl.uniform2f(s.locViewOrigin, mat4param[8], mat4param[9]);
		if (s.locSeconds)
			gl.uniform1f(s.locSeconds, cr.performance_now() / 1000.0);
		if (s.parameters.length)
		{
			for (i = 0, len = s.parameters.length; i < len; i++)
			{
				gl.uniform1f(s.parameters[i][1], this.shaderParams[i]);
			}
		}
	};
	GLWrap_.prototype.pushBatch = function ()
	{
		if (this.batchPtr === this.batch.length)
			this.batch.push(new GLBatchJob(BATCH_NULL, this));
		return this.batch[this.batchPtr++];
	};
	GLWrap_.prototype.endBatch = function ()
	{
		if (this.batchPtr === 0)
			return;
		if (this.gl.isContextLost())
			return;
		var gl = this.gl;
		if (this.pointPtr > 0)
		{
			gl.bindBuffer(gl.ARRAY_BUFFER, this.pointBuffer);
			gl.bufferData(gl.ARRAY_BUFFER, this.pointData.subarray(0, this.pointPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name === "<point>")
				gl.vertexAttribPointer(s.locAPos, 4, gl.FLOAT, false, 0, 0);
		}
		if (this.vertexPtr > 0)
		{
			var s = this.currentShader;
			gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.vertexData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locAPos >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locAPos, 2, gl.FLOAT, false, 0, 0);
			gl.bindBuffer(gl.ARRAY_BUFFER, this.texcoordBuffers[this.curBuffer]);
			gl.bufferData(gl.ARRAY_BUFFER, this.texcoordData.subarray(0, this.vertexPtr), gl.STREAM_DRAW);
			if (s && s.locATex >= 0 && s.name !== "<point>")
				gl.vertexAttribPointer(s.locATex, 2, gl.FLOAT, false, 0, 0);
		}
		var i, len, b;
		for (i = 0, len = this.batchPtr; i < len; i++)
		{
			b = this.batch[i];
			switch (b.type) {
			case 1:
				b.doQuad();
				break;
			case 2:
				b.doSetTexture();
				break;
			case 3:
				b.doSetOpacity();
				break;
			case 4:
				b.doSetBlend();
				break;
			case 5:
				b.doUpdateModelView();
				break;
			case 6:
				b.doRenderToTexture();
				break;
			case 7:
				b.doClear();
				break;
			case 8:
				b.doPoints();
				break;
			case 9:
				b.doSetProgram();
				break;
			case 10:
				b.doSetProgramParameters();
				break;
			case 11:
				b.doSetTexture1();
				break;
			}
		}
		this.batchPtr = 0;
		this.vertexPtr = 0;
		this.pointPtr = 0;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
		this.curBuffer++;
		if (this.curBuffer >= MULTI_BUFFERS)
			this.curBuffer = 0;
	};
	GLWrap_.prototype.setOpacity = function (op)
	{
		if (op === this.lastOpacity)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETOPACITY;
		b.opacityParam = op;
		this.lastOpacity = op;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setTexture = function (tex)
	{
		if (tex === this.lastTexture0)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_SETTEXTURE;
		b.texParam = tex;
		this.lastTexture0 = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.setBlend = function (s, d)
	{
		if (s === this.lastSrcBlend && d === this.lastDestBlend)
			return;
		var b = this.pushBatch();
		b.type = BATCH_SETBLEND;
		b.startIndex = s;		// recycle params to save memory
		b.indexCount = d;
		this.lastSrcBlend = s;
		this.lastDestBlend = d;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.isPremultipliedAlphaBlend = function ()
	{
		return (this.lastSrcBlend === this.gl.ONE && this.lastDestBlend === this.gl.ONE_MINUS_SRC_ALPHA);
	};
	GLWrap_.prototype.setAlphaBlend = function ()
	{
		this.setBlend(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	GLWrap_.prototype.setNoPremultiplyAlphaBlend = function ()
	{
		this.setBlend(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);
	};
	var LAST_VERTEX = MAX_VERTICES * 2 - 8;
	GLWrap_.prototype.quad = function(tlx, tly, trx, try_, brx, bry, blx, bly)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = 0;
		vd[v] = tly;
		td[v++] = 0;
		vd[v] = trx;
		td[v++] = 1;
		vd[v] = try_;
		td[v++] = 0;
		vd[v] = brx;
		td[v++] = 1;
		vd[v] = bry;
		td[v++] = 1;
		vd[v] = blx;
		td[v++] = 0;
		vd[v] = bly;
		td[v++] = 1;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTex = function(tlx, tly, trx, try_, brx, bry, blx, bly, rcTex)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		var rc_left = rcTex.left;
		var rc_top = rcTex.top;
		var rc_right = rcTex.right;
		var rc_bottom = rcTex.bottom;
		vd[v] = tlx;
		td[v++] = rc_left;
		vd[v] = tly;
		td[v++] = rc_top;
		vd[v] = trx;
		td[v++] = rc_right;
		vd[v] = try_;
		td[v++] = rc_top;
		vd[v] = brx;
		td[v++] = rc_right;
		vd[v] = bry;
		td[v++] = rc_bottom;
		vd[v] = blx;
		td[v++] = rc_left;
		vd[v] = bly;
		td[v++] = rc_bottom;
		this.vertexPtr = v;
	};
	GLWrap_.prototype.quadTexUV = function(tlx, tly, trx, try_, brx, bry, blx, bly, tlu, tlv, tru, trv, bru, brv, blu, blv)
	{
		if (this.vertexPtr >= LAST_VERTEX)
			this.endBatch();
		var v = this.vertexPtr;			// vertex cursor
		var vd = this.vertexData;		// vertex data array
		var td = this.texcoordData;		// texture coord data array
		if (this.hasQuadBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount += 6;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_QUAD;
			b.startIndex = (v / 4) * 3;
			b.indexCount = 6;
			this.hasQuadBatchTop = true;
			this.hasPointBatchTop = false;
		}
		vd[v] = tlx;
		td[v++] = tlu;
		vd[v] = tly;
		td[v++] = tlv;
		vd[v] = trx;
		td[v++] = tru;
		vd[v] = try_;
		td[v++] = trv;
		vd[v] = brx;
		td[v++] = bru;
		vd[v] = bry;
		td[v++] = brv;
		vd[v] = blx;
		td[v++] = blu;
		vd[v] = bly;
		td[v++] = blv;
		this.vertexPtr = v;
	};
	var LAST_POINT = MAX_POINTS - 4;
	GLWrap_.prototype.point = function(x_, y_, size_, opacity_)
	{
		if (this.pointPtr >= LAST_POINT)
			this.endBatch();
		var p = this.pointPtr;			// point cursor
		var pd = this.pointData;		// point data array
		if (this.hasPointBatchTop)
		{
			this.batch[this.batchPtr - 1].indexCount++;
		}
		else
		{
			var b = this.pushBatch();
			b.type = BATCH_POINTS;
			b.startIndex = p;
			b.indexCount = 1;
			this.hasPointBatchTop = true;
			this.hasQuadBatchTop = false;
		}
		pd[p++] = x_;
		pd[p++] = y_;
		pd[p++] = size_;
		pd[p++] = opacity_;
		this.pointPtr = p;
	};
	GLWrap_.prototype.switchProgram = function (progIndex)
	{
		if (this.lastProgram === progIndex)
			return;			// no change
		var shaderProg = this.shaderPrograms[progIndex];
		if (!shaderProg)
		{
			if (this.lastProgram === 0)
				return;								// already on default shader
			progIndex = 0;
			shaderProg = this.shaderPrograms[0];
		}
		var b = this.pushBatch();
		b.type = BATCH_SETPROGRAM;
		b.startIndex = progIndex;
		this.lastProgram = progIndex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.programUsesDest = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd);
	};
	GLWrap_.prototype.programUsesCrossSampling = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return !!(s.locDestStart || s.locDestEnd || s.crossSampling);
	};
	GLWrap_.prototype.programExtendsBox = function (progIndex)
	{
		var s = this.shaderPrograms[progIndex];
		return s.extendBoxHorizontal !== 0 || s.extendBoxVertical !== 0;
	};
	GLWrap_.prototype.getProgramBoxExtendHorizontal = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxHorizontal;
	};
	GLWrap_.prototype.getProgramBoxExtendVertical = function (progIndex)
	{
		return this.shaderPrograms[progIndex].extendBoxVertical;
	};
	GLWrap_.prototype.getProgramParameterType = function (progIndex, paramIndex)
	{
		return this.shaderPrograms[progIndex].parameters[paramIndex][2];
	};
	GLWrap_.prototype.programIsAnimated = function (progIndex)
	{
		return this.shaderPrograms[progIndex].animated;
	};
	GLWrap_.prototype.setProgramParameters = function (backTex, pixelWidth, pixelHeight, destStartX, destStartY, destEndX, destEndY, layerScale, layerAngle, viewOriginLeft, viewOriginTop, params)
	{
		var i, len;
		var s = this.shaderPrograms[this.lastProgram];
		var b, mat4param, shaderParams;
		if (s.hasAnyOptionalUniforms || params.length)
		{
			b = this.pushBatch();
			b.type = BATCH_SETPROGRAMPARAMETERS;
			if (b.mat4param)
				mat4.set(this.matMV, b.mat4param);
			else
				b.mat4param = mat4.create();
			mat4param = b.mat4param;
			mat4param[0] = pixelWidth;
			mat4param[1] = pixelHeight;
			mat4param[2] = destStartX;
			mat4param[3] = destStartY;
			mat4param[4] = destEndX;
			mat4param[5] = destEndY;
			mat4param[6] = layerScale;
			mat4param[7] = layerAngle;
			mat4param[8] = viewOriginLeft;
			mat4param[9] = viewOriginTop;
			if (s.locSamplerBack)
			{
;
				b.texParam = backTex;
			}
			else
				b.texParam = null;
			if (params.length)
			{
				shaderParams = b.shaderParams;
				shaderParams.length = params.length;
				for (i = 0, len = params.length; i < len; i++)
					shaderParams[i] = params[i];
			}
			this.hasQuadBatchTop = false;
			this.hasPointBatchTop = false;
		}
	};
	GLWrap_.prototype.clear = function (r, g, b_, a)
	{
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 0;					// clear all mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = r;
		b.mat4param[1] = g;
		b.mat4param[2] = b_;
		b.mat4param[3] = a;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.clearRect = function (x, y, w, h)
	{
		if (w < 0 || h < 0)
			return;							// invalid clear area
		var b = this.pushBatch();
		b.type = BATCH_CLEAR;
		b.startIndex = 1;					// clear rect mode
		if (!b.mat4param)
			b.mat4param = mat4.create();
		b.mat4param[0] = x;
		b.mat4param[1] = y;
		b.mat4param[2] = w;
		b.mat4param[3] = h;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	GLWrap_.prototype.present = function ()
	{
		this.endBatch();
		this.gl.flush();
		/*
		if (debugBatch)
		{
;
			debugBatch = false;
		}
		*/
	};
	function nextHighestPowerOfTwo(x) {
		--x;
		for (var i = 1; i < 32; i <<= 1) {
			x = x | x >> i;
		}
		return x + 1;
	}
	var all_textures = [];
	var textures_by_src = {};
	var BF_RGBA8 = 0;
	var BF_RGB8 = 1;
	var BF_RGBA4 = 2;
	var BF_RGB5_A1 = 3;
	var BF_RGB565 = 4;
	GLWrap_.prototype.loadTexture = function (img, tiling, linearsampling, pixelformat, tiletype)
	{
		tiling = !!tiling;
		linearsampling = !!linearsampling;
		var tex_key = img.src + "," + tiling + "," + linearsampling + (tiling ? ("," + tiletype) : "");
		var webGL_texture = null;
		if (typeof img.src !== "undefined" && textures_by_src.hasOwnProperty(tex_key))
		{
			webGL_texture = textures_by_src[tex_key];
			webGL_texture.c2refcount++;
			return webGL_texture;
		}
		this.endBatch();
;
		var gl = this.gl;
		var isPOT = (cr.isPOT(img.width) && cr.isPOT(img.height));
		webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		var internalformat = gl.RGBA;
		var format = gl.RGBA;
		var type = gl.UNSIGNED_BYTE;
		if (pixelformat && !this.isIE)
		{
			switch (pixelformat) {
			case BF_RGB8:
				internalformat = gl.RGB;
				format = gl.RGB;
				break;
			case BF_RGBA4:
				type = gl.UNSIGNED_SHORT_4_4_4_4;
				break;
			case BF_RGB5_A1:
				type = gl.UNSIGNED_SHORT_5_5_5_1;
				break;
			case BF_RGB565:
				internalformat = gl.RGB;
				format = gl.RGB;
				type = gl.UNSIGNED_SHORT_5_6_5;
				break;
			}
		}
		if (!isPOT && tiling)
		{
			var canvas = document.createElement("canvas");
			canvas.width = cr.nextHighestPowerOfTwo(img.width);
			canvas.height = cr.nextHighestPowerOfTwo(img.height);
			var ctx = canvas.getContext("2d");
			ctx["webkitImageSmoothingEnabled"] = linearsampling;
			ctx["mozImageSmoothingEnabled"] = linearsampling;
			ctx["msImageSmoothingEnabled"] = linearsampling;
			ctx["imageSmoothingEnabled"] = linearsampling;
			ctx.drawImage(img,
						  0, 0, img.width, img.height,
						  0, 0, canvas.width, canvas.height);
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, canvas);
		}
		else
			gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, format, type, img);
		if (tiling)
		{
			if (tiletype === "repeat-x")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			}
			else if (tiletype === "repeat-y")
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
			else
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
			}
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		if (linearsampling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			if (isPOT)
			{
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
				gl.generateMipmap(gl.TEXTURE_2D);
			}
			else
				gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
		}
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = img.width;
		webGL_texture.c2height = img.height;
		webGL_texture.c2refcount = 1;
		webGL_texture.c2texkey = tex_key;
		all_textures.push(webGL_texture);
		textures_by_src[tex_key] = webGL_texture;
		return webGL_texture;
	};
	GLWrap_.prototype.createEmptyTexture = function (w, h, linearsampling, _16bit, tiling)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		var webGL_texture = gl.createTexture();
		gl.bindTexture(gl.TEXTURE_2D, webGL_texture);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, null);
		if (tiling)
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
		}
		else
		{
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
		}
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, linearsampling ? gl.LINEAR : gl.NEAREST);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
		webGL_texture.c2width = w;
		webGL_texture.c2height = h;
		all_textures.push(webGL_texture);
		return webGL_texture;
	};
	GLWrap_.prototype.videoToTexture = function (video_, texture_, _16bit)
	{
		this.endBatch();
		var gl = this.gl;
		if (this.isIE)
			_16bit = false;
		gl.bindTexture(gl.TEXTURE_2D, texture_);
		gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], true);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, _16bit ? gl.UNSIGNED_SHORT_4_4_4_4 : gl.UNSIGNED_BYTE, video_);
		gl.bindTexture(gl.TEXTURE_2D, null);
		this.lastTexture0 = null;
	};
	GLWrap_.prototype.deleteTexture = function (tex)
	{
		if (!tex)
			return;
		if (typeof tex.c2refcount !== "undefined" && tex.c2refcount > 1)
		{
			tex.c2refcount--;
			return;
		}
		this.endBatch();
		if (tex === this.lastTexture0)
		{
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.lastTexture0 = null;
		}
		if (tex === this.lastTexture1)
		{
			this.gl.activeTexture(this.gl.TEXTURE1);
			this.gl.bindTexture(this.gl.TEXTURE_2D, null);
			this.gl.activeTexture(this.gl.TEXTURE0);
			this.lastTexture1 = null;
		}
		cr.arrayFindRemove(all_textures, tex);
		if (typeof tex.c2texkey !== "undefined")
			delete textures_by_src[tex.c2texkey];
		this.gl.deleteTexture(tex);
	};
	GLWrap_.prototype.estimateVRAM = function ()
	{
		var total = this.width * this.height * 4 * 2;
		var i, len, t;
		for (i = 0, len = all_textures.length; i < len; i++)
		{
			t = all_textures[i];
			total += (t.c2width * t.c2height * 4);
		}
		return total;
	};
	GLWrap_.prototype.textureCount = function ()
	{
		return all_textures.length;
	};
	GLWrap_.prototype.setRenderingToTexture = function (tex)
	{
		if (tex === this.renderToTex)
			return;
;
		var b = this.pushBatch();
		b.type = BATCH_RENDERTOTEXTURE;
		b.texParam = tex;
		this.renderToTex = tex;
		this.hasQuadBatchTop = false;
		this.hasPointBatchTop = false;
	};
	cr.GLWrap = GLWrap_;
}());
;
(function()
{
	function Runtime(canvas)
	{
		if (!canvas || (!canvas.getContext && !canvas["dc"]))
			return;
		if (canvas["c2runtime"])
			return;
		else
			canvas["c2runtime"] = this;
		var self = this;
		this.isCrosswalk = /crosswalk/i.test(navigator.userAgent) || /xwalk/i.test(navigator.userAgent) || !!(typeof window["c2isCrosswalk"] !== "undefined" && window["c2isCrosswalk"]);
		this.isPhoneGap = (!this.isCrosswalk && (typeof window["device"] !== "undefined" && (typeof window["device"]["cordova"] !== "undefined" || typeof window["device"]["phonegap"] !== "undefined")));
		this.isDirectCanvas = !!canvas["dc"];
		this.isAppMobi = (typeof window["AppMobi"] !== "undefined" || this.isDirectCanvas);
		this.isCocoonJs = !!window["c2cocoonjs"];
		this.isEjecta = !!window["c2ejecta"];
		if (this.isCocoonJs)
		{
			CocoonJS["App"]["onSuspended"].addEventListener(function() {
				self["setSuspended"](true);
			});
			CocoonJS["App"]["onActivated"].addEventListener(function () {
				self["setSuspended"](false);
			});
		}
		if (this.isEjecta)
		{
			document.addEventListener("pagehide", function() {
				self["setSuspended"](true);
			});
			document.addEventListener("pageshow", function() {
				self["setSuspended"](false);
			});
			document.addEventListener("resize", function () {
				self["setSize"](window.innerWidth, window.innerHeight);
			});
		}
		this.isDomFree = (this.isDirectCanvas || this.isCocoonJs || this.isEjecta);
		this.isTizen = /tizen/i.test(navigator.userAgent);
		this.isAndroid = /android/i.test(navigator.userAgent) && !this.isTizen;		// tizen says "like Android"
		this.isIE = /msie/i.test(navigator.userAgent) || /trident/i.test(navigator.userAgent);
		this.isiPhone = /iphone/i.test(navigator.userAgent) || /ipod/i.test(navigator.userAgent);	// treat ipod as an iphone
		this.isiPad = /ipad/i.test(navigator.userAgent);
		this.isiOS = this.isiPhone || this.isiPad || this.isEjecta;
		this.isiPhoneiOS6 = (this.isiPhone && /os\s6/i.test(navigator.userAgent));
		this.isChrome = /chrome/i.test(navigator.userAgent) || /chromium/i.test(navigator.userAgent);
		this.isAmazonWebApp = /amazonwebappplatform/i.test(navigator.userAgent);
		this.isFirefox = /firefox/i.test(navigator.userAgent);
		this.isSafari = !this.isChrome && /safari/i.test(navigator.userAgent);		// Chrome includes Safari in UA
		this.isWindows = /windows/i.test(navigator.userAgent);
		this.isNodeWebkit = (typeof window["c2nodewebkit"] !== "undefined" || /nodewebkit/i.test(navigator.userAgent));
		this.isArcade = (typeof window["is_scirra_arcade"] !== "undefined");
		this.isWindows8App = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.isWindows8Capable = !!(typeof window["c2isWindows8Capable"] !== "undefined" && window["c2isWindows8Capable"]);
		this.isWindowsPhone8 = !!(typeof window["c2isWindowsPhone8"] !== "undefined" && window["c2isWindowsPhone8"]);
		this.isWindowsPhone81 = !!(typeof window["c2isWindowsPhone81"] !== "undefined" && window["c2isWindowsPhone81"]);
		this.isWinJS = (this.isWindows8App || this.isWindows8Capable || this.isWindowsPhone81);	// note not WP8.0
		this.isBlackberry10 = !!(typeof window["c2isBlackberry10"] !== "undefined" && window["c2isBlackberry10"]);
		this.isAndroidStockBrowser = (this.isAndroid && !this.isChrome && !this.isFirefox && !this.isAmazonWebApp && !this.isDomFree);
		this.devicePixelRatio = 1;
		this.isMobile = (this.isPhoneGap || this.isCrosswalk || this.isAppMobi || this.isCocoonJs || this.isAndroid || this.isiOS || this.isWindowsPhone8 || this.isWindowsPhone81 || this.isBlackberry10 || this.isTizen || this.isEjecta);
		if (!this.isMobile)
		{
			this.isMobile = /(blackberry|bb10|playbook|palm|symbian|nokia|windows\s+ce|phone|mobile|tablet|kindle|silk)/i.test(navigator.userAgent);
		}
		if (typeof cr_is_preview !== "undefined" && !this.isNodeWebkit && (window.location.search === "?nw" || /nodewebkit/i.test(navigator.userAgent)))
		{
			this.isNodeWebkit = true;
		}
		this.isDebug = (typeof cr_is_preview !== "undefined" && window.location.search.indexOf("debug") > -1)
		this.canvas = canvas;
		this.canvasdiv = document.getElementById("c2canvasdiv");
		this.gl = null;
		this.glwrap = null;
		this.ctx = null;
		this.fullscreenOldMarginCss = "";
		this.firstInFullscreen = false;
		this.oldWidth = 0;		// for restoring non-fullscreen canvas after fullscreen
		this.oldHeight = 0;
		this.canvas.oncontextmenu = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		this.canvas.onselectstart = function (e) { if (e.preventDefault) e.preventDefault(); return false; };
		if (this.isDirectCanvas)
			window["c2runtime"] = this;
		if (this.isNodeWebkit)
		{
			window.ondragover = function(e) { e.preventDefault(); return false; };
			window.ondrop = function(e) { e.preventDefault(); return false; };
			require("nw.gui")["App"]["clearCache"]();
		}
		this.width = canvas.width;
		this.height = canvas.height;
		this.draw_width = this.width;
		this.draw_height = this.height;
		this.cssWidth = this.width;
		this.cssHeight = this.height;
		this.lastWindowWidth = window.innerWidth;
		this.lastWindowHeight = window.innerHeight;
		this.redraw = true;
		this.isSuspended = false;
		if (!Date.now) {
		  Date.now = function now() {
			return +new Date();
		  };
		}
		this.plugins = [];
		this.types = {};
		this.types_by_index = [];
		this.behaviors = [];
		this.layouts = {};
		this.layouts_by_index = [];
		this.eventsheets = {};
		this.eventsheets_by_index = [];
		this.wait_for_textures = [];        // for blocking until textures loaded
		this.triggers_to_postinit = [];
		this.all_global_vars = [];
		this.all_local_vars = [];
		this.solidBehavior = null;
		this.jumpthruBehavior = null;
		this.deathRow = new cr.ObjectSet();
		this.isInClearDeathRow = false;
		this.isInOnDestroy = 0;					// needs to support recursion so increments and decrements and is true if > 0
		this.isRunningEvents = false;
		this.createRow = [];
		this.isLoadingState = false;
		this.saveToSlot = "";
		this.loadFromSlot = "";
		this.loadFromJson = "";
		this.lastSaveJson = "";
		this.signalledContinuousPreview = false;
		this.suspendDrawing = false;		// for hiding display until continuous preview loads
		this.dt = 0;
        this.dt1 = 0;
		this.logictime = 0;			// used to calculate CPUUtilisation
		this.cpuutilisation = 0;
		this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
		this.last_tick_time = 0;
		this.measuring_dt = true;
		this.fps = 0;
		this.last_fps_time = 0;
		this.tickcount = 0;
		this.execcount = 0;
		this.framecount = 0;        // for fps
		this.objectcount = 0;
		this.changelayout = null;
		this.destroycallbacks = [];
		this.event_stack = [];
		this.event_stack_index = -1;
		this.localvar_stack = [[]];
		this.localvar_stack_index = 0;
		this.trigger_depth = 0;		// recursion depth for triggers
		this.pushEventStack(null);
		this.loop_stack = [];
		this.loop_stack_index = -1;
		this.next_uid = 0;
		this.next_puid = 0;		// permanent unique ids
		this.layout_first_tick = true;
		this.family_count = 0;
		this.suspend_events = [];
		this.raf_id = -1;
		this.timeout_id = -1;
		this.isloading = true;
		this.loadingprogress = 0;
		this.isNodeFullscreen = false;
		this.stackLocalCount = 0;	// number of stack-based local vars for recursion
		this.halfFramerateMode = false;
		this.lastRafTime = 0;		// time of last requestAnimationFrame call
		this.ranLastRaf = false;	// false if last requestAnimationFrame was skipped for half framerate mode
		this.had_a_click = false;
		this.isInUserInputEvent = false;
        this.objects_to_tick = new cr.ObjectSet();
		this.objects_to_tick2 = new cr.ObjectSet();
		this.registered_collisions = [];
		this.temp_poly = new cr.CollisionPoly([]);
		this.temp_poly2 = new cr.CollisionPoly([]);
		this.allGroups = [];				// array of all event groups
        this.groups_by_name = {};
		this.cndsBySid = {};
		this.actsBySid = {};
		this.varsBySid = {};
		this.blocksBySid = {};
		this.running_layout = null;			// currently running layout
		this.layer_canvas = null;			// for layers "render-to-texture"
		this.layer_ctx = null;
		this.layer_tex = null;
		this.layout_tex = null;
		this.layout_canvas = null;
		this.layout_ctx = null;
		this.is_WebGL_context_lost = false;
		this.uses_background_blending = false;	// if any shader uses background blending, so entire layout renders to texture
		this.fx_tex = [null, null];
		this.fullscreen_scaling = 0;
		this.files_subfolder = "";			// path with project files
		this.objectsByUid = {};				// maps every in-use UID (as a string) to its instance
		this.loaderlogo = null;
		this.snapshotCanvas = null;
		this.snapshotData = "";
		this.load();
		this.isRetina = ((!this.isDomFree || this.isEjecta) && this.useHighDpi && !this.isAndroidStockBrowser);
		this.devicePixelRatio = (this.isRetina ? (window["devicePixelRatio"] || window["webkitDevicePixelRatio"] || window["mozDevicePixelRatio"] || window["msDevicePixelRatio"] || 1) : 1);
		this.ClearDeathRow();
		var attribs;
		var alpha_canvas = this.alphaBackground && !(this.isNodeWebkit || this.isWinJS || this.isWindowsPhone8 || this.isCrosswalk);
		if (this.fullscreen_mode > 0)
			this["setSize"](window.innerWidth, window.innerHeight, true);
		try {
			if (this.enableWebGL && (this.isCocoonJs || this.isEjecta || !this.isDomFree))
			{
				attribs = {
					"alpha": alpha_canvas,
					"depth": false,
					"antialias": false,
					"failIfMajorPerformanceCaveat": true
				};
				this.gl = (canvas.getContext("webgl", attribs) || canvas.getContext("experimental-webgl", attribs));
			}
		}
		catch (e) {
		}
		if (this.gl)
		{
;
			if (!this.isDomFree)
			{
				this.overlay_canvas = document.createElement("canvas");
				jQuery(this.overlay_canvas).appendTo(this.canvas.parentNode);
				this.overlay_canvas.oncontextmenu = function (e) { return false; };
				this.overlay_canvas.onselectstart = function (e) { return false; };
				this.overlay_canvas.width = this.cssWidth;
				this.overlay_canvas.height = this.cssHeight;
				jQuery(this.overlay_canvas).css({"width": this.cssWidth + "px",
												"height": this.cssHeight + "px"});
				this.positionOverlayCanvas();
				this.overlay_ctx = this.overlay_canvas.getContext("2d");
			}
			this.glwrap = new cr.GLWrap(this.gl, this.isMobile);
			this.glwrap.setSize(canvas.width, canvas.height);
			this.ctx = null;
			this.canvas.addEventListener("webglcontextlost", function (ev) {
				ev.preventDefault();
				self.onContextLost();
				console.log("[Construct 2] WebGL context lost");
				window["cr_setSuspended"](true);		// stop rendering
			}, false);
			this.canvas.addEventListener("webglcontextrestored", function (ev) {
				self.glwrap.initState();
				self.glwrap.setSize(self.glwrap.width, self.glwrap.height, true);
				self.layer_tex = null;
				self.layout_tex = null;
				self.fx_tex[0] = null;
				self.fx_tex[1] = null;
				self.onContextRestored();
				self.redraw = true;
				console.log("[Construct 2] WebGL context restored");
				window["cr_setSuspended"](false);		// resume rendering
			}, false);
			var i, len, j, lenj, k, lenk, t, s, l, y;
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
				{
					s = t.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
					this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
				}
			}
			for (i = 0, len = this.layouts_by_index.length; i < len; i++)
			{
				l = this.layouts_by_index[i];
				for (j = 0, lenj = l.effect_types.length; j < lenj; j++)
				{
					s = l.effect_types[j];
					s.shaderindex = this.glwrap.getShaderIndex(s.id);
				}
				for (j = 0, lenj = l.layers.length; j < lenj; j++)
				{
					y = l.layers[j];
					for (k = 0, lenk = y.effect_types.length; k < lenk; k++)
					{
						s = y.effect_types[k];
						s.shaderindex = this.glwrap.getShaderIndex(s.id);
						this.uses_background_blending = this.uses_background_blending || this.glwrap.programUsesDest(s.shaderindex);
					}
				}
			}
		}
		else
		{
			if (this.fullscreen_mode > 0 && this.isDirectCanvas)
			{
;
				this.canvas = null;
				document.oncontextmenu = function (e) { return false; };
				document.onselectstart = function (e) { return false; };
				this.ctx = AppMobi["canvas"]["getContext"]("2d");
				try {
					this.ctx["samplingMode"] = this.linearSampling ? "smooth" : "sharp";
					this.ctx["globalScale"] = 1;
					this.ctx["HTML5CompatibilityMode"] = true;
					this.ctx["imageSmoothingEnabled"] = this.linearSampling;
				} catch(e){}
				if (this.width !== 0 && this.height !== 0)
				{
					this.ctx.width = this.width;
					this.ctx.height = this.height;
				}
			}
			if (!this.ctx)
			{
;
				if (this.isCocoonJs)
				{
					attribs = {
						"antialias": !!this.linearSampling,
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				else
				{
					attribs = {
						"alpha": alpha_canvas
					};
					this.ctx = canvas.getContext("2d", attribs);
				}
				this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
				this.ctx["imageSmoothingEnabled"] = this.linearSampling;
			}
			this.overlay_canvas = null;
			this.overlay_ctx = null;
		}
		this.tickFunc = function () { self.tick(false); };
		if (window != window.top && !this.isDomFree && !this.isWinJS && !this.isWindowsPhone8)
		{
			document.addEventListener("mousedown", function () {
				window.focus();
			}, true);
			document.addEventListener("touchstart", function () {
				window.focus();
			}, true);
		}
		if (typeof cr_is_preview !== "undefined")
		{
			if (this.isCocoonJs)
				console.log("[Construct 2] In preview-over-wifi via CocoonJS mode");
			if (window.location.search.indexOf("continuous") > -1)
			{
				cr.logexport("Reloading for continuous preview");
				this.loadFromSlot = "__c2_continuouspreview";
				this.suspendDrawing = true;
			}
			if (this.pauseOnBlur && !this.isMobile)
			{
				jQuery(window).focus(function ()
				{
					self["setSuspended"](false);
				});
				jQuery(window).blur(function ()
				{
					self["setSuspended"](true);
				});
			}
		}
		if (this.fullscreen_mode === 0 && this.isRetina && this.devicePixelRatio > 1)
		{
			this["setSize"](this.original_width, this.original_height, true);
		}
		this.tryLockOrientation();
		this.go();			// run loading screen
		this.extra = {};
		cr.seal(this);
	};
	var webkitRepaintFlag = false;
	Runtime.prototype["setSize"] = function (w, h, force)
	{
		var offx = 0, offy = 0;
		var neww = 0, newh = 0, intscale = 0;
		var tryHideAddressBar = (this.isiPhoneiOS6 && this.isSafari && !navigator["standalone"] && !this.isDomFree && !this.isPhoneGap);
		if (tryHideAddressBar)
			h += 60;		// height of Safari iPhone iOS 6 address bar
		if (this.lastWindowWidth === w && this.lastWindowHeight === h && !force)
			return;
		this.lastWindowWidth = w;
		this.lastWindowHeight = h;
		var mode = this.fullscreen_mode;
		var orig_aspect, cur_aspect;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.fullscreen_mode === 0 && !force)
			return;			// ignore size events when not fullscreen and not using a fullscreen-in-browser mode
		if (isfullscreen && this.fullscreen_scaling > 0)
			mode = this.fullscreen_scaling;
		if (mode >= 4)
		{
			orig_aspect = this.original_width / this.original_height;
			cur_aspect = w / h;
			if (cur_aspect > orig_aspect)
			{
				neww = h * orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = neww / this.original_width;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offx = (w - neww) / 2;
					w = neww;
				}
			}
			else
			{
				newh = w / orig_aspect;
				if (mode === 5)	// integer scaling
				{
					intscale = newh / this.original_height;
					if (intscale > 1)
						intscale = Math.floor(intscale);
					else if (intscale < 1)
						intscale = 1 / Math.ceil(1 / intscale);
					neww = this.original_width * intscale;
					newh = this.original_height * intscale;
					offx = (w - neww) / 2;
					offy = (h - newh) / 2;
					w = neww;
					h = newh;
				}
				else
				{
					offy = (h - newh) / 2;
					h = newh;
				}
			}
			if (isfullscreen && !this.isNodeWebkit)
			{
				offx = 0;
				offy = 0;
			}
			offx = Math.floor(offx);
			offy = Math.floor(offy);
			w = Math.floor(w);
			h = Math.floor(h);
		}
		else if (this.isNodeWebkit && this.isNodeFullscreen && this.fullscreen_mode_set === 0)
		{
			offx = Math.floor((w - this.original_width) / 2);
			offy = Math.floor((h - this.original_height) / 2);
			w = this.original_width;
			h = this.original_height;
		}
		if (mode < 2)
			this.aspect_scale = this.devicePixelRatio;
		if (this.isRetina && this.isiPad && this.devicePixelRatio > 1)	// don't apply to iPad 1-2
		{
			if (w >= 1024)
				w = 1023;		// 2046 retina pixels
			if (h >= 1024)
				h = 1023;
		}
		var multiplier = this.devicePixelRatio;
		this.cssWidth = w;
		this.cssHeight = h;
		this.width = Math.round(w * multiplier);
		this.height = Math.round(h * multiplier);
		this.redraw = true;
		if (this.wantFullscreenScalingQuality)
		{
			this.draw_width = this.width;
			this.draw_height = this.height;
			this.fullscreenScalingQuality = true;
		}
		else
		{
			if ((this.width < this.original_width && this.height < this.original_height) || mode === 1)
			{
				this.draw_width = this.width;
				this.draw_height = this.height;
				this.fullscreenScalingQuality = true;
			}
			else
			{
				this.draw_width = this.original_width;
				this.draw_height = this.original_height;
				this.fullscreenScalingQuality = false;
				/*var orig_aspect = this.original_width / this.original_height;
				var cur_aspect = this.width / this.height;
				if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
					this.aspect_scale = this.height / this.original_height;
				else
					this.aspect_scale = this.width / this.original_width;*/
				if (mode === 2)		// scale inner
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect < orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect > orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
				else if (mode === 3)
				{
					orig_aspect = this.original_width / this.original_height;
					cur_aspect = this.lastWindowWidth / this.lastWindowHeight;
					if (cur_aspect > orig_aspect)
						this.draw_width = this.draw_height * cur_aspect;
					else if (cur_aspect < orig_aspect)
						this.draw_height = this.draw_width / cur_aspect;
				}
			}
		}
		if (this.canvasdiv && !this.isDomFree)
		{
			jQuery(this.canvasdiv).css({"width": w + "px",
										"height": h + "px",
										"margin-left": offx,
										"margin-top": offy});
			if (typeof cr_is_preview !== "undefined")
			{
				jQuery("#borderwrap").css({"width": w + "px",
											"height": h + "px"});
			}
		}
		if (this.canvas)
		{
			this.canvas.width = Math.round(w * multiplier);
			this.canvas.height = Math.round(h * multiplier);
			if (this.isEjecta)
			{
				this.canvas.style.left = offx + "px";
				this.canvas.style.top = offy + "px";
				this.canvas.style.width = w + "px";
				this.canvas.style.height = h + "px";
			}
			else if (this.isRetina && !this.isDomFree)
			{
				jQuery(this.canvas).css({"width": w + "px",
										"height": h + "px"});
			}
		}
		if (this.overlay_canvas)
		{
			this.overlay_canvas.width = w;
			this.overlay_canvas.height = h;
			jQuery(this.overlay_canvas).css({"width": w + "px",
											"height": h + "px"});
		}
		if (this.glwrap)
		{
			this.glwrap.setSize(Math.round(w * multiplier), Math.round(h * multiplier));
		}
		if (this.isDirectCanvas && this.ctx)
		{
			this.ctx.width = w;
			this.ctx.height = h;
		}
		if (this.ctx)
		{
			this.ctx["webkitImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["mozImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["msImageSmoothingEnabled"] = this.linearSampling;
			this.ctx["imageSmoothingEnabled"] = this.linearSampling;
		}
		this.tryLockOrientation();
		if (!this.isDomFree && (tryHideAddressBar || this.isiPhone))
		{
			window.setTimeout(function () {
				window.scrollTo(0, 1);
			}, 100);
		}
	};
	Runtime.prototype.tryLockOrientation = function ()
	{
		if (!this.autoLockOrientation || this.orientations === 0)
			return;
		var orientation = "portrait";
		if (this.orientations === 2)
			orientation = "landscape";
		if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"]) { }
			//screen["msLockOrientation"](orientation);
	};
	Runtime.prototype.onContextLost = function ()
	{
		this.is_WebGL_context_lost = true;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onLostWebGLContext)
				t.onLostWebGLContext();
		}
	};
	Runtime.prototype.onContextRestored = function ()
	{
		this.is_WebGL_context_lost = false;
		var i, len, t;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onRestoreWebGLContext)
				t.onRestoreWebGLContext();
		}
	};
	Runtime.prototype.positionOverlayCanvas = function()
	{
		if (this.isDomFree)
			return;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen);
		var overlay_position = isfullscreen ? jQuery(this.canvas).offset() : jQuery(this.canvas).position();
		overlay_position.position = "absolute";
		jQuery(this.overlay_canvas).css(overlay_position);
	};
	var caf = window["cancelAnimationFrame"] ||
	  window["mozCancelAnimationFrame"]    ||
	  window["webkitCancelAnimationFrame"] ||
	  window["msCancelAnimationFrame"]     ||
	  window["oCancelAnimationFrame"];
	Runtime.prototype["setSuspended"] = function (s)
	{
		var i, len;
		if (s && !this.isSuspended)
		{
			cr.logexport("[Construct 2] Suspending");
			this.isSuspended = true;			// next tick will be last
			if (this.raf_id !== -1 && caf)		// note: CocoonJS does not implement cancelAnimationFrame
				caf(this.raf_id);
			if (this.timeout_id !== -1)
				clearTimeout(this.timeout_id);
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](true);
		}
		else if (!s && this.isSuspended)
		{
			cr.logexport("[Construct 2] Resuming");
			this.isSuspended = false;
			this.last_tick_time = cr.performance_now();	// ensure first tick is a zero-dt one
			this.last_fps_time = cr.performance_now();	// reset FPS counter
			this.framecount = 0;
			this.logictime = 0;
			for (i = 0, len = this.suspend_events.length; i < len; i++)
				this.suspend_events[i](false);
			this.tick(false);						// kick off runtime again
		}
	};
	Runtime.prototype.addSuspendCallback = function (f)
	{
		this.suspend_events.push(f);
	};
	Runtime.prototype.load = function ()
	{
;
		var pm = cr.getProjectModel();
		this.name = pm[0];
		this.first_layout = pm[1];
		this.fullscreen_mode = pm[11];	// 0 = off, 1 = crop, 2 = scale inner, 3 = scale outer, 4 = letterbox scale, 5 = integer letterbox scale
		this.fullscreen_mode_set = pm[11];
		this.original_width = pm[9];
		this.original_height = pm[10];
		this.parallax_x_origin = this.original_width / 2;
		this.parallax_y_origin = this.original_height / 2;
		if (this.isDomFree && !this.isEjecta && (pm[11] >= 4 || pm[11] === 0))
		{
			cr.logexport("[Construct 2] Letterbox scale fullscreen modes are not supported on this platform - falling back to 'Scale outer'");
			this.fullscreen_mode = 3;
			this.fullscreen_mode_set = 3;
		}
		this.uses_loader_layout = pm[17];
		this.loaderstyle = pm[18];
		if (this.loaderstyle === 0)
		{
			this.loaderlogo = new Image();
			this.loaderlogo.src = "loading-logo.png";
		}
		this.next_uid = pm[20];
		this.system = new cr.system_object(this);
		var i, len, j, lenj, k, lenk, idstr, m, b, t, f;
		var plugin, plugin_ctor;
		for (i = 0, len = pm[2].length; i < len; i++)
		{
			m = pm[2][i];
;
			cr.add_common_aces(m);
			plugin = new m[0](this);
			plugin.singleglobal = m[1];
			plugin.is_world = m[2];
			plugin.must_predraw = m[9];
			if (plugin.onCreate)
				plugin.onCreate();  // opportunity to override default ACEs
			cr.seal(plugin);
			this.plugins.push(plugin);
		}
		pm = cr.getProjectModel();
		for (i = 0, len = pm[3].length; i < len; i++)
		{
			m = pm[3][i];
			plugin_ctor = m[1];
;
			plugin = null;
			for (j = 0, lenj = this.plugins.length; j < lenj; j++)
			{
				if (this.plugins[j] instanceof plugin_ctor)
				{
					plugin = this.plugins[j];
					break;
				}
			}
;
;
			var type_inst = new plugin.Type(plugin);
;
			type_inst.name = m[0];
			type_inst.is_family = m[2];
			type_inst.instvar_sids = m[3].slice(0);
			type_inst.vars_count = m[3].length;
			type_inst.behs_count = m[4];
			type_inst.fx_count = m[5];
			type_inst.sid = m[11];
			if (type_inst.is_family)
			{
				type_inst.members = [];				// types in this family
				type_inst.family_index = this.family_count++;
				type_inst.families = null;
			}
			else
			{
				type_inst.members = null;
				type_inst.family_index = -1;
				type_inst.families = [];			// families this type belongs to
			}
			type_inst.family_var_map = null;
			type_inst.family_beh_map = null;
			type_inst.family_fx_map = null;
			type_inst.is_contained = false;
			type_inst.container = null;
			if (m[6])
			{
				type_inst.texture_file = m[6][0];
				type_inst.texture_filesize = m[6][1];
				type_inst.texture_pixelformat = m[6][2];
			}
			else
			{
				type_inst.texture_file = null;
				type_inst.texture_filesize = 0;
				type_inst.texture_pixelformat = 0;		// rgba8
			}
			if (m[7])
			{
				type_inst.animations = m[7];
			}
			else
			{
				type_inst.animations = null;
			}
			type_inst.index = i;                                // save index in to types array in type
			type_inst.instances = [];                           // all instances of this type
			type_inst.deadCache = [];							// destroyed instances to recycle next create
			type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
			type_inst.cur_sol = 0;
			type_inst.default_instance = null;
			type_inst.default_layerindex = 0;
			type_inst.stale_iids = true;
			type_inst.updateIIDs = cr.type_updateIIDs;
			type_inst.getFirstPicked = cr.type_getFirstPicked;
			type_inst.getPairedInstance = cr.type_getPairedInstance;
			type_inst.getCurrentSol = cr.type_getCurrentSol;
			type_inst.pushCleanSol = cr.type_pushCleanSol;
			type_inst.pushCopySol = cr.type_pushCopySol;
			type_inst.popSol = cr.type_popSol;
			type_inst.getBehaviorByName = cr.type_getBehaviorByName;
			type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
			type_inst.getEffectIndexByName = cr.type_getEffectIndexByName;
			type_inst.applySolToContainer = cr.type_applySolToContainer;
			type_inst.getInstanceByIID = cr.type_getInstanceByIID;
			type_inst.collision_grid = new cr.SparseGrid(this.original_width, this.original_height);
			type_inst.any_cell_changed = true;
			type_inst.any_instance_parallaxed = false;
			type_inst.extra = {};
			type_inst.toString = cr.type_toString;
			type_inst.behaviors = [];
			for (j = 0, lenj = m[8].length; j < lenj; j++)
			{
				b = m[8][j];
				var behavior_ctor = b[1];
				var behavior_plugin = null;
				for (k = 0, lenk = this.behaviors.length; k < lenk; k++)
				{
					if (this.behaviors[k] instanceof behavior_ctor)
					{
						behavior_plugin = this.behaviors[k];
						break;
					}
				}
				if (!behavior_plugin)
				{
					behavior_plugin = new behavior_ctor(this);
					behavior_plugin.my_types = [];						// types using this behavior
					behavior_plugin.my_instances = new cr.ObjectSet(); 	// instances of this behavior
					if (behavior_plugin.onCreate)
						behavior_plugin.onCreate();
					cr.seal(behavior_plugin);
					this.behaviors.push(behavior_plugin);
					if (cr.behaviors.solid && behavior_plugin instanceof cr.behaviors.solid)
						this.solidBehavior = behavior_plugin;
					if (cr.behaviors.jumpthru && behavior_plugin instanceof cr.behaviors.jumpthru)
						this.jumpthruBehavior = behavior_plugin;
				}
				if (behavior_plugin.my_types.indexOf(type_inst) === -1)
					behavior_plugin.my_types.push(type_inst);
				var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
				behavior_type.name = b[0];
				behavior_type.sid = b[2];
				behavior_type.onCreate();
				cr.seal(behavior_type);
				type_inst.behaviors.push(behavior_type);
			}
			type_inst.global = m[9];
			type_inst.isOnLoaderLayout = m[10];
			type_inst.effect_types = [];
			for (j = 0, lenj = m[12].length; j < lenj; j++)
			{
				type_inst.effect_types.push({
					id: m[12][j][0],
					name: m[12][j][1],
					shaderindex: -1,
					active: true,
					index: j
				});
			}
			type_inst.tile_poly_data = m[13];
			if (!this.uses_loader_layout || type_inst.is_family || type_inst.isOnLoaderLayout || !plugin.is_world)
			{
				type_inst.onCreate();
				cr.seal(type_inst);
			}
			if (type_inst.name)
				this.types[type_inst.name] = type_inst;
			this.types_by_index.push(type_inst);
			if (plugin.singleglobal)
			{
				var instance = new plugin.Instance(type_inst);
				instance.uid = this.next_uid++;
				instance.puid = this.next_puid++;
				instance.iid = 0;
				instance.get_iid = cr.inst_get_iid;
				instance.toString = cr.inst_toString;
				instance.properties = m[14];
				instance.onCreate();
				cr.seal(instance);
				type_inst.instances.push(instance);
				this.objectsByUid[instance.uid.toString()] = instance;
			}
		}
		for (i = 0, len = pm[4].length; i < len; i++)
		{
			var familydata = pm[4][i];
			var familytype = this.types_by_index[familydata[0]];
			var familymember;
			for (j = 1, lenj = familydata.length; j < lenj; j++)
			{
				familymember = this.types_by_index[familydata[j]];
				familymember.families.push(familytype);
				familytype.members.push(familymember);
			}
		}
		for (i = 0, len = pm[23].length; i < len; i++)
		{
			var containerdata = pm[23][i];
			var containertypes = [];
			for (j = 0, lenj = containerdata.length; j < lenj; j++)
				containertypes.push(this.types_by_index[containerdata[j]]);
			for (j = 0, lenj = containertypes.length; j < lenj; j++)
			{
				containertypes[j].is_contained = true;
				containertypes[j].container = containertypes;
			}
		}
		if (this.family_count > 0)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (t.is_family || !t.families.length)
					continue;
				t.family_var_map = new Array(this.family_count);
				t.family_beh_map = new Array(this.family_count);
				t.family_fx_map = new Array(this.family_count);
				var all_fx = [];
				var varsum = 0;
				var behsum = 0;
				var fxsum = 0;
				for (j = 0, lenj = t.families.length; j < lenj; j++)
				{
					f = t.families[j];
					t.family_var_map[f.family_index] = varsum;
					varsum += f.vars_count;
					t.family_beh_map[f.family_index] = behsum;
					behsum += f.behs_count;
					t.family_fx_map[f.family_index] = fxsum;
					fxsum += f.fx_count;
					for (k = 0, lenk = f.effect_types.length; k < lenk; k++)
						all_fx.push(cr.shallowCopy({}, f.effect_types[k]));
				}
				t.effect_types = all_fx.concat(t.effect_types);
				for (j = 0, lenj = t.effect_types.length; j < lenj; j++)
					t.effect_types[j].index = j;
			}
		}
		for (i = 0, len = pm[5].length; i < len; i++)
		{
			m = pm[5][i];
			var layout = new cr.layout(this, m);
			cr.seal(layout);
			this.layouts[layout.name] = layout;
			this.layouts_by_index.push(layout);
		}
		for (i = 0, len = pm[6].length; i < len; i++)
		{
			m = pm[6][i];
			var sheet = new cr.eventsheet(this, m);
			cr.seal(sheet);
			this.eventsheets[sheet.name] = sheet;
			this.eventsheets_by_index.push(sheet);
		}
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].postInit();
		for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
			this.eventsheets_by_index[i].updateDeepIncludes();
		for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
			this.triggers_to_postinit[i].postInit();
		this.triggers_to_postinit.length = 0;
		this.files_subfolder = pm[7];
		this.pixel_rounding = pm[8];
		this.aspect_scale = 1.0;
		this.enableWebGL = pm[12];
		this.linearSampling = pm[13];
		this.alphaBackground = pm[14];
		this.versionstr = pm[15];
		this.useHighDpi = pm[16];
		this.orientations = pm[19];		// 0 = any, 1 = portrait, 2 = landscape
		this.autoLockOrientation = (this.orientations > 0);
		this.pauseOnBlur = pm[21];
		this.wantFullscreenScalingQuality = pm[22];		// false = low quality, true = high quality
		this.fullscreenScalingQuality = this.wantFullscreenScalingQuality;
		this.start_time = Date.now();
	};
	var anyImageHadError = false;
	Runtime.prototype.waitForImageLoad = function (img_)
	{
		img_.onerror = function (e)
		{
			img_.c2error = true;
			anyImageHadError = true;
			if (console && console.error)
				console.error("Error loading image '" + img_.src + "': ", e);
		};
		this.wait_for_textures.push(img_);
	};
	Runtime.prototype.findWaitingTexture = function (src_)
	{
		var i, len;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			if (this.wait_for_textures[i].cr_src === src_)
				return this.wait_for_textures[i];
		}
		return null;
	};
	Runtime.prototype.areAllTexturesLoaded = function ()
	{
		var totalsize = 0;
		var completedsize = 0;
		var ret = true;
		var i, len, img;
		for (i = 0, len = this.wait_for_textures.length; i < len; i++)
		{
			img = this.wait_for_textures[i];
			var filesize = img.cr_filesize;
			if (!filesize || filesize <= 0)
				filesize = 50000;
			totalsize += filesize;
			if ((img.complete || img["loaded"]) && !img.c2error)
				completedsize += filesize;
			else
				ret = false;    // not all textures loaded
		}
		if (totalsize == 0)
			this.progress = 0;
		else
			this.progress = (completedsize / totalsize);
		return ret;
	};
	Runtime.prototype.go = function ()
	{
		if (!this.ctx && !this.glwrap)
			return;
		var ctx = this.ctx || this.overlay_ctx;
		if (this.overlay_canvas)
			this.positionOverlayCanvas();
		this.progress = 0;
		this.last_progress = -1;
		if (this.areAllTexturesLoaded())
			this.go_textures_done();
		else
		{
			var ms_elapsed = Date.now() - this.start_time;
			if (ctx)
			{
				var overlay_width = this.width;
				var overlay_height = this.height;
				var multiplier = this.devicePixelRatio;
				if (this.overlay_canvas)
				{
					overlay_width = this.cssWidth;
					overlay_height = this.cssHeight;
					multiplier = 1;
				}
				if (this.loaderstyle !== 3 && (this.isCocoonJs || (ms_elapsed >= 500 && this.last_progress != this.progress)))
				{
					ctx.clearRect(0, 0, overlay_width, overlay_height);
					var mx = overlay_width / 2;
					var my = overlay_height / 2;
					var haslogo = (this.loaderstyle === 0 && this.loaderlogo.complete);
					var hlw = 40 * multiplier;
					var hlh = 0;
					var logowidth = 80 * multiplier;
					var logoheight;
					if (haslogo)
					{
						logowidth = this.loaderlogo.width * multiplier;
						logoheight = this.loaderlogo.height * multiplier;
						hlw = logowidth / 2;
						hlh = logoheight / 2;
						ctx.drawImage(this.loaderlogo, cr.floor(mx - hlw), cr.floor(my - hlh), logowidth, logoheight);
					}
					if (this.loaderstyle <= 1)
					{
						my += hlh + (haslogo ? 12 * multiplier : 0);
						mx -= hlw;
						mx = cr.floor(mx) + 0.5;
						my = cr.floor(my) + 0.5;
						ctx.fillStyle = anyImageHadError ? "red" : "DodgerBlue";
						ctx.fillRect(mx, my, Math.floor(logowidth * this.progress), 6 * multiplier);
						ctx.strokeStyle = "black";
						ctx.strokeRect(mx, my, logowidth, 6 * multiplier);
						ctx.strokeStyle = "white";
						ctx.strokeRect(mx - 1 * multiplier, my - 1 * multiplier, logowidth + 2 * multiplier, 8 * multiplier);
					}
					else if (this.loaderstyle === 2)
					{
						ctx.font = (this.isEjecta ? "12pt ArialMT" : "12pt Arial");
						ctx.fillStyle = anyImageHadError ? "#f00" : "#999";
						ctx.textBaseLine = "middle";
						var percent_text = Math.round(this.progress * 100) + "%";
						var text_dim = ctx.measureText ? ctx.measureText(percent_text) : null;
						var text_width = text_dim ? text_dim.width : 0;
						ctx.fillText(percent_text, mx - (text_width / 2), my);
					}
				}
				this.last_progress = this.progress;
			}
			setTimeout((function (self) { return function () { self.go(); }; })(this), (this.isCocoonJs ? 10 : 100));
		}
	};
	Runtime.prototype.go_textures_done = function ()
	{
		if (this.overlay_canvas)
		{
			this.canvas.parentNode.removeChild(this.overlay_canvas);
			this.overlay_ctx = null;
			this.overlay_canvas = null;
		}
		this.start_time = Date.now();
		this.last_fps_time = cr.performance_now();       // for counting framerate
		var i, len, t;
		if (this.uses_loader_layout)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				t = this.types_by_index[i];
				if (!t.is_family && !t.isOnLoaderLayout && t.plugin.is_world)
				{
					t.onCreate();
					cr.seal(t);
				}
			}
		}
		else
			this.isloading = false;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			this.layouts_by_index[i].createGlobalNonWorlds();
		}
		if (this.fullscreen_mode >= 2)
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			if ((this.fullscreen_mode !== 2 && cur_aspect > orig_aspect) || (this.fullscreen_mode === 2 && cur_aspect < orig_aspect))
				this.aspect_scale = this.height / this.original_height;
			else
				this.aspect_scale = this.width / this.original_width;
		}
		if (this.first_layout)
			this.layouts[this.first_layout].startRunning();
		else
			this.layouts_by_index[0].startRunning();
;
		if (!this.uses_loader_layout)
		{
			this.loadingprogress = 1;
			this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
		}
		if (navigator["splashscreen"] && navigator["splashscreen"]["hide"])
			navigator["splashscreen"]["hide"]();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			t = this.types_by_index[i];
			if (t.onAppBegin)
				t.onAppBegin();
		}
		this.tick(false);
		if (this.isDirectCanvas)
			AppMobi["webview"]["execute"]("onGameReady();");
	};
	var raf = window["requestAnimationFrame"] ||
	  window["mozRequestAnimationFrame"]    ||
	  window["webkitRequestAnimationFrame"] ||
	  window["msRequestAnimationFrame"]     ||
	  window["oRequestAnimationFrame"];
	Runtime.prototype.tick = function (background_wake)
	{
		if (!this.running_layout)
			return;
		var logic_start = cr.performance_now();
		if (this.halfFramerateMode && this.ranLastRaf)
		{
			if (logic_start - this.lastRafTime < 29)
			{
				this.ranLastRaf = false;
				this.lastRafTime = logic_start;
				if (raf)
					this.raf_id = raf(this.tickFunc, this.canvas);
				else	// no idea if this works without raf/hi res timers but let's hope for the best
					this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
				return;		// skipped this frame
			}
		}
		this.ranLastRaf = true;
		this.lastRafTime = logic_start;
		var fsmode = this.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"]);
		if ((isfullscreen || this.isNodeFullscreen) && this.fullscreen_scaling > 0)
			fsmode = this.fullscreen_scaling;
		if (fsmode > 0 && (!this.isiPhone || window.self !== window.top))
		{
			var curwidth = window.innerWidth;
			var curheight = window.innerHeight;
			if (this.lastWindowWidth !== curwidth || this.lastWindowHeight !== curheight)
			{
					this["setSize"](curwidth, curheight);
			}
		}
		if (!this.isDomFree)
		{
			if (isfullscreen)
			{
				if (!this.firstInFullscreen)
				{
					this.fullscreenOldMarginCss = jQuery(this.canvas).css("margin") || "0";
					this.firstInFullscreen = true;
				}
				if (!this.isChrome && !this.isNodeWebkit)
				{
					jQuery(this.canvas).css({
						"margin-left": "" + Math.floor((screen.width - (this.width / this.devicePixelRatio)) / 2) + "px",
						"margin-top": "" + Math.floor((screen.height - (this.height / this.devicePixelRatio)) / 2) + "px"
					});
				}
			}
			else
			{
				if (this.firstInFullscreen)
				{
					if (!this.isChrome && !this.isNodeWebkit)
					{
						jQuery(this.canvas).css("margin", this.fullscreenOldMarginCss);
					}
					this.fullscreenOldMarginCss = "";
					this.firstInFullscreen = false;
					if (this.fullscreen_mode === 0)
					{
						this["setSize"](Math.round(this.oldWidth / this.devicePixelRatio), Math.round(this.oldHeight / this.devicePixelRatio), true);
					}
				}
				else
				{
					this.oldWidth = this.width;
					this.oldHeight = this.height;
				}
			}
		}
		if (this.isloading)
		{
			var done = this.areAllTexturesLoaded();		// updates this.progress
			this.loadingprogress = this.progress;
			if (done)
			{
				this.isloading = false;
				this.progress = 1;
				this.trigger(cr.system_object.prototype.cnds.OnLoadFinished, null);
			}
		}
		this.logic();
		if ((this.redraw || this.isCocoonJs) && !this.is_WebGL_context_lost && !this.suspendDrawing && !background_wake)
		{
			this.redraw = false;
			if (this.glwrap)
				this.drawGL();
			else
				this.draw();
			if (this.snapshotCanvas)
			{
				if (this.canvas && this.canvas.toDataURL)
				{
					this.snapshotData = this.canvas.toDataURL(this.snapshotCanvas[0], this.snapshotCanvas[1]);
					this.trigger(cr.system_object.prototype.cnds.OnCanvasSnapshot, null);
				}
				this.snapshotCanvas = null;
			}
		}
		if (!this.hit_breakpoint)
		{
			this.tickcount++;
			this.execcount++;
			this.framecount++;
		}
		this.logictime += cr.performance_now() - logic_start;
		if (this.isSuspended || background_wake)
			return;
		if (raf)
			this.raf_id = raf(this.tickFunc, this.canvas);
		else
		{
			this.timeout_id = setTimeout(this.tickFunc, this.isMobile ? 1 : 16);
		}
	};
	Runtime.prototype.logic = function ()
	{
		var i, leni, j, lenj, k, lenk, type, inst, binst;
		var cur_time = cr.performance_now();
		if (cur_time - this.last_fps_time >= 1000)  // every 1 second
		{
			this.last_fps_time += 1000;
			this.fps = this.framecount;
			this.framecount = 0;
			this.cpuutilisation = this.logictime;
			this.logictime = 0;
		}
		if (this.measuring_dt)
		{
			if (this.last_tick_time !== 0)
			{
				var ms_diff = cur_time - this.last_tick_time;
				if (ms_diff === 0 && !this.isDebug)
				{
					this.zeroDtCount++;
					if (this.zeroDtCout >= 10)
						this.measuring_dt = false;
					this.dt1 = 1.0 / 60.0;            // 60fps assumed (0.01666...)
				}
				else
				{
					this.dt1 = ms_diff / 1000.0; // dt measured in seconds
					if (this.dt1 > 0.5)
						this.dt1 = 0;
					else if (this.dt1 > 0.1)
						this.dt1 = 0.1;
				}
			}
			this.last_tick_time = cur_time;
		}
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || !!document["msFullscreenElement"] || this.isNodeFullscreen);
		if (this.fullscreen_mode >= 2 /* scale */ || (isfullscreen && this.fullscreen_scaling > 0))
		{
			var orig_aspect = this.original_width / this.original_height;
			var cur_aspect = this.width / this.height;
			var mode = this.fullscreen_mode;
			if (isfullscreen && this.fullscreen_scaling > 0)
				mode = this.fullscreen_scaling;
			if ((mode !== 2 && cur_aspect > orig_aspect) || (mode === 2 && cur_aspect < orig_aspect))
			{
				this.aspect_scale = this.height / this.original_height;
			}
			else
			{
				this.aspect_scale = this.width / this.original_width;
			}
			if (this.running_layout)
			{
				this.running_layout.scrollToX(this.running_layout.scrollX);
				this.running_layout.scrollToY(this.running_layout.scrollY);
			}
		}
		else
			this.aspect_scale = (this.isRetina ? this.devicePixelRatio : 1);
		this.ClearDeathRow();
		this.isInOnDestroy++;
		this.system.runWaits();		// prevent instance list changing
		this.isInOnDestroy--;
		this.ClearDeathRow();		// allow instance list changing
		this.isInOnDestroy++;
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					inst.behavior_insts[k].tick();
				}
			}
		}
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.posttick)
						binst.posttick();
				}
			}
		}
        var tickarr = this.objects_to_tick.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
		this.handleSaveLoad();		// save/load now if queued
		i = 0;
		while (this.changelayout && i++ < 10)
		{
			this.doChangeLayout(this.changelayout);
		}
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
            this.eventsheets_by_index[i].hasRun = false;
		if (this.running_layout.event_sheet)
			this.running_layout.event_sheet.run();
		this.registered_collisions.length = 0;
		this.layout_first_tick = false;
		this.isInOnDestroy++;		// prevent instance lists from being changed
		for (i = 0, leni = this.types_by_index.length; i < leni; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || (!type.behaviors.length && !type.families.length))
				continue;	// type doesn't have any behaviors
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				var inst = type.instances[j];
				for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
				{
					binst = inst.behavior_insts[k];
					if (binst.tick2)
						binst.tick2();
				}
			}
		}
        tickarr = this.objects_to_tick2.valuesRef();
        for (i = 0, leni = tickarr.length; i < leni; i++)
            tickarr[i].tick2();
		this.isInOnDestroy--;		// end preventing instance lists from being changed
	};
	Runtime.prototype.doChangeLayout = function (changeToLayout)
	{
;
		var prev_layout = this.running_layout;
		this.running_layout.stopRunning();
		var i, len, j, lenj, k, lenk, type, inst, binst;
		if (this.glwrap)
		{
			for (i = 0, len = this.types_by_index.length; i < len; i++)
			{
				type = this.types_by_index[i];
				if (type.is_family)
					continue;
				if (type.unloadTextures && (!type.global || type.instances.length === 0) && changeToLayout.initial_types.indexOf(type) === -1)
				{
					type.unloadTextures();
				}
			}
		}
		if (prev_layout == changeToLayout)
			this.system.waits.length = 0;
		changeToLayout.startRunning();
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (!type.global && !type.plugin.singleglobal)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (inst.onLayoutChange)
					inst.onLayoutChange();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.onLayoutChange)
							binst.onLayoutChange();
					}
				}
			}
		}
		this.redraw = true;
		this.layout_first_tick = true;
		this.ClearDeathRow();
	};
    Runtime.prototype.tickMe = function (inst)
    {
        this.objects_to_tick.add(inst);
    };
	Runtime.prototype.untickMe = function (inst)
	{
		this.objects_to_tick.remove(inst);
	};
	Runtime.prototype.tick2Me = function (inst)
    {
        this.objects_to_tick2.add(inst);
    };
	Runtime.prototype.untick2Me = function (inst)
	{
		this.objects_to_tick2.remove(inst);
	};
    Runtime.prototype.getDt = function (inst)
    {
        if (!inst || inst.my_timescale === -1.0)
            return this.dt;
        return this.dt1 * inst.my_timescale;
    };
	Runtime.prototype.draw = function ()
	{
		this.running_layout.draw(this.ctx);
		if (this.isDirectCanvas)
			this.ctx["present"]();
	};
	Runtime.prototype.drawGL = function ()
	{
		this.running_layout.drawGL(this.glwrap);
		this.glwrap.present();
	};
	Runtime.prototype.addDestroyCallback = function (f)
	{
		if (f)
			this.destroycallbacks.push(f);
	};
	Runtime.prototype.removeDestroyCallback = function (f)
	{
		cr.arrayFindRemove(this.destroycallbacks, f);
	};
	Runtime.prototype.getObjectByUID = function (uid_)
	{
;
		var uidstr = uid_.toString();
		if (this.objectsByUid.hasOwnProperty(uidstr))
			return this.objectsByUid[uidstr];
		else
			return null;
	};
	Runtime.prototype.DestroyInstance = function (inst)
	{
		var i, len;
		if (!this.deathRow.contains(inst))
		{
			this.deathRow.add(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					this.DestroyInstance(inst.siblings[i]);
				}
			}
			if (this.isInClearDeathRow)
				this.deathRow.values_cache.push(inst);
			this.isInOnDestroy++;		// support recursion
			this.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnDestroyed, inst);
			this.isInOnDestroy--;
		}
	};
	Runtime.prototype.ClearDeathRow = function ()
	{
		var inst, index, type, instances, binst;
		var i, j, k, leni, lenj, lenk;
		var w, f;
		this.isInClearDeathRow = true;
		for (i = 0, leni = this.createRow.length; i < leni; i++)
		{
			inst = this.createRow[i];
			type = inst.type;
			type.instances.push(inst);
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				type.families[j].instances.push(inst);
				type.families[j].stale_iids = true;
			}
		}
		this.createRow.length = 0;
		var arr = this.deathRow.valuesRef();	// get array of items from set
		for (i = 0; i < arr.length; i++)		// check array length every time in case it changes
		{
			inst = arr[i];
			type = inst.type;
			instances = type.instances;
			for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
				this.destroycallbacks[j](inst);
			cr.arrayFindRemove(instances, inst);
			if (instances.length === 0)
				type.any_instance_parallaxed = false;
			if (inst.collcells)
			{
				type.collision_grid.update(inst, inst.collcells, null);
			}
			if (inst.layer)
			{
				cr.arrayRemove(inst.layer.instances, inst.get_zindex());
				inst.layer.zindices_stale = true;
			}
			for (j = 0, lenj = type.families.length; j < lenj; j++)
			{
				cr.arrayFindRemove(type.families[j].instances, inst);
				type.families[j].stale_iids = true;
			}
			if (inst.behavior_insts)
			{
				for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++)
				{
					binst = inst.behavior_insts[j];
					if (binst.onDestroy)
						binst.onDestroy();
					binst.behavior.my_instances.remove(inst);
				}
			}
            this.objects_to_tick.remove(inst);
			this.objects_to_tick2.remove(inst);
			for (j = 0, lenj = this.system.waits.length; j < lenj; j++)
			{
				w = this.system.waits[j];
				if (w.sols.hasOwnProperty(type.index))
					cr.arrayFindRemove(w.sols[type.index].insts, inst);
				if (!type.is_family)
				{
					for (k = 0, lenk = type.families.length; k < lenk; k++)
					{
						f = type.families[k];
						if (w.sols.hasOwnProperty(f.index))
							cr.arrayFindRemove(w.sols[f.index].insts, inst);
					}
				}
			}
			if (inst.onDestroy)
				inst.onDestroy();
			if (this.objectsByUid.hasOwnProperty(inst.uid.toString()))
				delete this.objectsByUid[inst.uid.toString()];
			this.objectcount--;
			if (type.deadCache.length < 64)
				type.deadCache.push(inst);
			type.stale_iids = true;
		}
		if (!this.deathRow.isEmpty())
			this.redraw = true;
		this.deathRow.clear();
		this.isInClearDeathRow = false;
	};
	Runtime.prototype.createInstance = function (type, layer, sx, sy)
	{
		if (type.is_family)
		{
			var i = cr.floor(Math.random() * type.members.length);
			return this.createInstance(type.members[i], layer, sx, sy);
		}
		if (!type.default_instance)
		{
			return null;
		}
		return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy, false);
	};
	var all_behaviors = [];
	Runtime.prototype.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy, skip_siblings)
	{
		var i, len, j, lenj, p, effect_fallback, x, y;
		if (!initial_inst)
			return null;
		var type = this.types_by_index[initial_inst[1]];
;
;
		var is_world = type.plugin.is_world;
;
		if (this.isloading && is_world && !type.isOnLoaderLayout)
			return null;
		if (is_world && !this.glwrap && initial_inst[0][11] === 11)
			return null;
		var original_layer = layer;
		if (!is_world)
			layer = null;
		var inst;
		if (type.deadCache.length)
		{
			inst = type.deadCache.pop();
			inst.recycled = true;
			type.plugin.Instance.call(inst, type);
		}
		else
		{
			inst = new type.plugin.Instance(type);
			inst.recycled = false;
		}
		if (is_startup_instance && !skip_siblings)
			inst.uid = initial_inst[2];
		else
			inst.uid = this.next_uid++;
		this.objectsByUid[inst.uid.toString()] = inst;
		inst.puid = this.next_puid++;
		inst.iid = type.instances.length;
		for (i = 0, len = this.createRow.length; i < len; ++i)
		{
			if (this.createRow[i].type === type)
				inst.iid++;
		}
		inst.get_iid = cr.inst_get_iid;
		var initial_vars = initial_inst[3];
		if (inst.recycled)
		{
			cr.wipe(inst.extra);
		}
		else
		{
			inst.extra = {};
			if (typeof cr_is_preview !== "undefined")
			{
				inst.instance_var_names = [];
				inst.instance_var_names.length = initial_vars.length;
				for (i = 0, len = initial_vars.length; i < len; i++)
					inst.instance_var_names[i] = initial_vars[i][1];
			}
			inst.instance_vars = [];
			inst.instance_vars.length = initial_vars.length;
		}
		for (i = 0, len = initial_vars.length; i < len; i++)
			inst.instance_vars[i] = initial_vars[i][0];
		if (is_world)
		{
			var wm = initial_inst[0];
;
			inst.x = cr.is_undefined(sx) ? wm[0] : sx;
			inst.y = cr.is_undefined(sy) ? wm[1] : sy;
			inst.z = wm[2];
			inst.width = wm[3];
			inst.height = wm[4];
			inst.depth = wm[5];
			inst.angle = wm[6];
			inst.opacity = wm[7];
			inst.hotspotX = wm[8];
			inst.hotspotY = wm[9];
			inst.blend_mode = wm[10];
			effect_fallback = wm[11];
			if (!this.glwrap && type.effect_types.length)	// no WebGL renderer and shaders used
				inst.blend_mode = effect_fallback;			// use fallback blend mode - destroy mode was handled above
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			if (inst.recycled)
			{
				for (i = 0, len = wm[12].length; i < len; i++)
				{
					for (j = 0, lenj = wm[12][i].length; j < lenj; j++)
						inst.effect_params[i][j] = wm[12][i][j];
				}
				inst.bbox.set(0, 0, 0, 0);
				inst.collcells.set(0, 0, -1, -1);
				inst.bquad.set_from_rect(inst.bbox);
				inst.bbox_changed_callbacks.length = 0;
			}
			else
			{
				inst.effect_params = wm[12].slice(0);
				for (i = 0, len = inst.effect_params.length; i < len; i++)
					inst.effect_params[i] = wm[12][i].slice(0);
				inst.active_effect_types = [];
				inst.active_effect_flags = [];
				inst.active_effect_flags.length = type.effect_types.length;
				inst.bbox = new cr.rect(0, 0, 0, 0);
				inst.collcells = new cr.rect(0, 0, -1, -1);
				inst.bquad = new cr.quad();
				inst.bbox_changed_callbacks = [];
				inst.set_bbox_changed = cr.set_bbox_changed;
				inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
				inst.contains_pt = cr.inst_contains_pt;
				inst.update_bbox = cr.update_bbox;
				inst.update_collision_cell = cr.update_collision_cell;
				inst.get_zindex = cr.inst_get_zindex;
			}
			inst.tilemap_exists = false;
			inst.tilemap_width = 0;
			inst.tilemap_height = 0;
			inst.tilemap_data = null;
			if (wm.length === 14)
			{
				inst.tilemap_exists = true;
				inst.tilemap_width = wm[13][0];
				inst.tilemap_height = wm[13][1];
				inst.tilemap_data = wm[13][2];
			}
			for (i = 0, len = type.effect_types.length; i < len; i++)
				inst.active_effect_flags[i] = true;
			inst.updateActiveEffects = cr.inst_updateActiveEffects;
			inst.updateActiveEffects();
			inst.uses_shaders = !!inst.active_effect_types.length;
			inst.bbox_changed = true;
			inst.cell_changed = true;
			type.any_cell_changed = true;
			inst.visible = true;
            inst.my_timescale = -1.0;
			inst.layer = layer;
			inst.zindex = layer.instances.length;	// will be placed at top of current layer
			if (typeof inst.collision_poly === "undefined")
				inst.collision_poly = null;
			inst.collisionsEnabled = true;
			this.redraw = true;
		}
		inst.toString = cr.inst_toString;
		var initial_props, binst;
		all_behaviors.length = 0;
		for (i = 0, len = type.families.length; i < len; i++)
		{
			all_behaviors.push.apply(all_behaviors, type.families[i].behaviors);
		}
		all_behaviors.push.apply(all_behaviors, type.behaviors);
		if (inst.recycled)
		{
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				binst = inst.behavior_insts[i];
				binst.recycled = true;
				btype.behavior.Instance.call(binst, btype, inst);
				initial_props = initial_inst[4][i];
				for (j = 0, lenj = initial_props.length; j < lenj; j++)
					binst.properties[j] = initial_props[j];
				binst.onCreate();
				btype.behavior.my_instances.add(inst);
			}
		}
		else
		{
			inst.behavior_insts = [];
			for (i = 0, len = all_behaviors.length; i < len; i++)
			{
				var btype = all_behaviors[i];
				var binst = new btype.behavior.Instance(btype, inst);
				binst.recycled = false;
				binst.properties = initial_inst[4][i].slice(0);
				binst.onCreate();
				cr.seal(binst);
				inst.behavior_insts.push(binst);
				btype.behavior.my_instances.add(inst);
			}
		}
		initial_props = initial_inst[5];
		if (inst.recycled)
		{
			for (i = 0, len = initial_props.length; i < len; i++)
				inst.properties[i] = initial_props[i];
		}
		else
			inst.properties = initial_props.slice(0);
		this.createRow.push(inst);
		if (layer)
		{
;
			layer.instances.push(inst);
			if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
				type.any_instance_parallaxed = true;
		}
		this.objectcount++;
		if (type.is_contained)
		{
			inst.is_contained = true;
			if (inst.recycled)
				inst.siblings.length = 0;
			else
				inst.siblings = [];			// note: should not include self in siblings
			if (!is_startup_instance && !skip_siblings)	// layout links initial instances
			{
				for (i = 0, len = type.container.length; i < len; i++)
				{
					if (type.container[i] === type)
						continue;
					if (!type.container[i].default_instance)
					{
						return null;
					}
					inst.siblings.push(this.createInstanceFromInit(type.container[i].default_instance, original_layer, false, is_world ? inst.x : sx, is_world ? inst.y : sy, true));
				}
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					inst.siblings[i].siblings.push(inst);
					for (j = 0; j < len; j++)
					{
						if (i !== j)
							inst.siblings[i].siblings.push(inst.siblings[j]);
					}
				}
			}
		}
		else
		{
			inst.is_contained = false;
			inst.siblings = null;
		}
		inst.onCreate();
		if (!inst.recycled)
			cr.seal(inst);
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].postCreate)
				inst.behavior_insts[i].postCreate();
		}
		return inst;
	};
	Runtime.prototype.getLayerByName = function (layer_name)
	{
		var i, len;
		for (i = 0, len = this.running_layout.layers.length; i < len; i++)
		{
			var layer = this.running_layout.layers[i];
			if (cr.equals_nocase(layer.name, layer_name))
				return layer;
		}
		return null;
	};
	Runtime.prototype.getLayerByNumber = function (index)
	{
		index = cr.floor(index);
		if (index < 0)
			index = 0;
		if (index >= this.running_layout.layers.length)
			index = this.running_layout.layers.length - 1;
		return this.running_layout.layers[index];
	};
	Runtime.prototype.getLayer = function (l)
	{
		if (cr.is_number(l))
			return this.getLayerByNumber(l);
		else
			return this.getLayerByName(l.toString());
	};
	Runtime.prototype.clearSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].getCurrentSol().select_all = true;
		}
	};
	Runtime.prototype.pushCleanSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCleanSol();
		}
	};
	Runtime.prototype.pushCopySol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].pushCopySol();
		}
	};
	Runtime.prototype.popSol = function (solModifiers)
	{
		var i, len;
		for (i = 0, len = solModifiers.length; i < len; i++)
		{
			solModifiers[i].popSol();
		}
	};
	Runtime.prototype.updateAllCells = function (type)
	{
		if (!type.any_cell_changed)
			return;		// all instances must already be up-to-date
		var i, len, instances = type.instances;
		for (i = 0, len = instances.length; i < len; ++i)
		{
			instances[i].update_collision_cell();
		}
		var createRow = this.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === type)
				createRow[i].update_collision_cell();
		}
		type.any_cell_changed = false;
	};
	Runtime.prototype.getCollisionCandidates = function (layer, rtype, bbox, candidates)
	{
		var i, len, t;
		var is_parallaxed = (layer ? (layer.parallaxX !== 1 || layer.parallaxY !== 1) : false);
		if (rtype.is_family)
		{
			for (i = 0, len = rtype.members.length; i < len; ++i)
			{
				t = rtype.members[i];
				if (is_parallaxed || t.any_instance_parallaxed)
				{
					cr.appendArray(candidates, t.instances);
				}
				else
				{
					this.updateAllCells(t);
					t.collision_grid.queryRange(bbox, candidates);
				}
			}
		}
		else
		{
			if (is_parallaxed || rtype.any_instance_parallaxed)
			{
				cr.appendArray(candidates, rtype.instances);
			}
			else
			{
				this.updateAllCells(rtype);
				rtype.collision_grid.queryRange(bbox, candidates);
			}
		}
	};
	Runtime.prototype.getTypesCollisionCandidates = function (layer, types, bbox, candidates)
	{
		var i, len;
		for (i = 0, len = types.length; i < len; ++i)
		{
			this.getCollisionCandidates(layer, types[i], bbox, candidates);
		}
	};
	Runtime.prototype.getSolidCollisionCandidates = function (layer, bbox, candidates)
	{
		var solid = this.getSolidBehavior();
		if (!solid)
			return null;
		this.getTypesCollisionCandidates(layer, solid.my_types, bbox, candidates);
	};
	Runtime.prototype.getJumpthruCollisionCandidates = function (layer, bbox, candidates)
	{
		var jumpthru = this.getJumpthruBehavior();
		if (!jumpthru)
			return null;
		this.getTypesCollisionCandidates(layer, jumpthru.my_types, bbox, candidates);
	};
	Runtime.prototype.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted)
	{
		var sol = type.getCurrentSol();
		var i, j, inst, len;
		var lx, ly;
		if (sol.select_all)
		{
			if (!inverted)
			{
				sol.select_all = false;
				sol.instances.length = 0;   // clear contents
			}
			for (i = 0, len = type.instances.length; i < len; i++)
			{
				inst = type.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
						sol.instances.push(inst);
				}
			}
		}
		else
		{
			j = 0;
			for (i = 0, len = sol.instances.length; i < len; i++)
			{
				inst = sol.instances[i];
				inst.update_bbox();
				lx = inst.layer.canvasToLayer(ptx, pty, true);
				ly = inst.layer.canvasToLayer(ptx, pty, false);
				if (inst.contains_pt(lx, ly))
				{
					if (inverted)
						return false;
					else
					{
						sol.instances[j] = sol.instances[i];
						j++;
					}
				}
			}
			if (!inverted)
				sol.instances.length = j;
		}
		type.applySolToContainer();
		if (inverted)
			return true;		// did not find anything overlapping
		else
			return sol.hasObjects();
	};
	Runtime.prototype.testOverlap = function (a, b)
	{
		if (!a || !b || a === b || !a.collisionsEnabled || !b.collisionsEnabled)
			return false;
		a.update_bbox();
		b.update_bbox();
		var layera = a.layer;
		var layerb = b.layer;
		var different_layers = (layera !== layerb && (layera.parallaxX !== layerb.parallaxX || layerb.parallaxY !== layerb.parallaxY || layera.scale !== layerb.scale || layera.angle !== layerb.angle || layera.zoomRate !== layerb.zoomRate));
		var i, len, i2, i21, x, y, haspolya, haspolyb, polya, polyb;
		if (!different_layers)	// same layers: easy check
		{
			if (!a.bbox.intersects_rect(b.bbox))
				return false;
			if (!a.bquad.intersects_quad(b.bquad))
				return false;
			if (a.tilemap_exists && b.tilemap_exists)
				return false;
			if (a.tilemap_exists)
				return this.testTilemapOverlap(a, b);
			if (b.tilemap_exists)
				return this.testTilemapOverlap(b, a);
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolya && !haspolyb)
				return true;
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				polya = a.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
				polya = this.temp_poly;
			}
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				polyb = b.collision_poly;
			}
			else
			{
				this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
				polyb = this.temp_poly;
			}
			return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
		}
		else	// different layers: need to do full translated check
		{
			haspolya = (a.collision_poly && !a.collision_poly.is_empty());
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (haspolya)
			{
				a.collision_poly.cache_poly(a.width, a.height, a.angle);
				this.temp_poly.set_from_poly(a.collision_poly);
			}
			else
			{
				this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
			}
			polya = this.temp_poly;
			if (haspolyb)
			{
				b.collision_poly.cache_poly(b.width, b.height, b.angle);
				this.temp_poly2.set_from_poly(b.collision_poly);
			}
			else
			{
				this.temp_poly2.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
			}
			polyb = this.temp_poly2;
			for (i = 0, len = polya.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polya.pts_cache[i2];
				y = polya.pts_cache[i21];
				polya.pts_cache[i2] = layera.layerToCanvas(x + a.x, y + a.y, true);
				polya.pts_cache[i21] = layera.layerToCanvas(x + a.x, y + a.y, false);
			}
			polya.update_bbox();
			for (i = 0, len = polyb.pts_count; i < len; i++)
			{
				i2 = i * 2;
				i21 = i2 + 1;
				x = polyb.pts_cache[i2];
				y = polyb.pts_cache[i21];
				polyb.pts_cache[i2] = layerb.layerToCanvas(x + b.x, y + b.y, true);
				polyb.pts_cache[i21] = layerb.layerToCanvas(x + b.x, y + b.y, false);
			}
			polyb.update_bbox();
			return polya.intersects_poly(polyb, 0, 0);
		}
	};
	var tmpQuad = new cr.quad();
	var tmpRect = new cr.rect(0, 0, 0, 0);
	var collrect_candidates = [];
	Runtime.prototype.testTilemapOverlap = function (tm, a)
	{
		var i, len, c, rc;
		var bbox = a.bbox;
		var tmx = tm.x;
		var tmy = tm.y;
		tm.getCollisionRectCandidates(bbox, collrect_candidates);
		var collrects = collrect_candidates;
		var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
		for (i = 0, len = collrects.length; i < len; ++i)
		{
			c = collrects[i];
			rc = c.rc;
			if (bbox.intersects_rect_off(rc, tmx, tmy))
			{
				tmpQuad.set_from_rect(rc);
				tmpQuad.offset(tmx, tmy);
				if (tmpQuad.intersects_quad(a.bquad))
				{
					if (haspolya)
					{
						a.collision_poly.cache_poly(a.width, a.height, a.angle);
						if (c.poly)
						{
							if (c.poly.intersects_poly(a.collision_poly, a.x - (tmx + rc.left), a.y - (tmy + rc.top)))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							this.temp_poly.set_from_quad(tmpQuad, 0, 0, rc.right - rc.left, rc.bottom - rc.top);
							if (this.temp_poly.intersects_poly(a.collision_poly, a.x, a.y))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
					}
					else
					{
						if (c.poly)
						{
							this.temp_poly.set_from_quad(a.bquad, 0, 0, a.width, a.height);
							if (c.poly.intersects_poly(this.temp_poly, -(tmx + rc.left), -(tmy + rc.top)))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
				}
			}
		}
		collrect_candidates.length = 0;
		return false;
	};
	Runtime.prototype.testRectOverlap = function (r, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		if (!b.bbox.intersects_rect(r))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(r, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (r.intersects_rect_off(tilerc, tmx, tmy))
				{
					if (c.poly)
					{
						this.temp_poly.set_from_rect(r, 0, 0);
						if (c.poly.intersects_poly(this.temp_poly, -(tmx + tilerc.left), -(tmy + tilerc.top)))
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
					else
					{
						collrect_candidates.length = 0;
						return true;
					}
				}
			}
			collrect_candidates.length = 0;
			return false;
		}
		else
		{
			tmpQuad.set_from_rect(r);
			if (!b.bquad.intersects_quad(tmpQuad))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			tmpQuad.offset(-r.left, -r.top);
			this.temp_poly.set_from_quad(tmpQuad, 0, 0, 1, 1);
			return b.collision_poly.intersects_poly(this.temp_poly, r.left - b.x, r.top - b.y);
		}
	};
	Runtime.prototype.testSegmentOverlap = function (x1, y1, x2, y2, b)
	{
		if (!b || !b.collisionsEnabled)
			return false;
		b.update_bbox();
		var layerb = b.layer;
		var haspolyb, polyb;
		tmpRect.set(cr.min(x1, x2), cr.min(y1, y2), cr.max(x1, x2), cr.max(y1, y2));
		if (!b.bbox.intersects_rect(tmpRect))
			return false;
		if (b.tilemap_exists)
		{
			b.getCollisionRectCandidates(tmpRect, collrect_candidates);
			var collrects = collrect_candidates;
			var i, len, c, tilerc;
			var tmx = b.x;
			var tmy = b.y;
			for (i = 0, len = collrects.length; i < len; ++i)
			{
				c = collrects[i];
				tilerc = c.rc;
				if (tmpRect.intersects_rect_off(tilerc, tmx, tmy))
				{
					tmpQuad.set_from_rect(tilerc);
					tmpQuad.offset(tmx, tmy);
					if (tmpQuad.intersects_segment(x1, y1, x2, y2))
					{
						if (c.poly)
						{
							if (c.poly.intersects_segment(tmx + tilerc.left, tmy + tilerc.top, x1, y1, x2, y2))
							{
								collrect_candidates.length = 0;
								return true;
							}
						}
						else
						{
							collrect_candidates.length = 0;
							return true;
						}
					}
				}
			}
			collrect_candidates.length = 0;
			return false;
		}
		else
		{
			if (!b.bquad.intersects_segment(x1, y1, x2, y2))
				return false;
			haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
			if (!haspolyb)
				return true;
			b.collision_poly.cache_poly(b.width, b.height, b.angle);
			return b.collision_poly.intersects_segment(b.x, b.y, x1, y1, x2, y2);
		}
	};
	Runtime.prototype.typeHasBehavior = function (t, b)
	{
		if (!b)
			return false;
		var i, len, j, lenj, f;
		for (i = 0, len = t.behaviors.length; i < len; i++)
		{
			if (t.behaviors[i].behavior instanceof b)
				return true;
		}
		if (!t.is_family)
		{
			for (i = 0, len = t.families.length; i < len; i++)
			{
				f = t.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (f.behaviors[j].behavior instanceof b)
						return true;
				}
			}
		}
		return false;
	};
	Runtime.prototype.typeHasNoSaveBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.NoSave);
	};
	Runtime.prototype.typeHasPersistBehavior = function (t)
	{
		return this.typeHasBehavior(t, cr.behaviors.Persist);
	};
	Runtime.prototype.getSolidBehavior = function ()
	{
		return this.solidBehavior;
	};
	Runtime.prototype.getJumpthruBehavior = function ()
	{
		return this.jumpthruBehavior;
	};
	var candidates = [];
	Runtime.prototype.testOverlapSolid = function (inst)
	{
		var i, len, s;
		inst.update_bbox();
		this.getSolidCollisionCandidates(inst.layer, inst.bbox, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testOverlap(inst, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	Runtime.prototype.testRectOverlapSolid = function (r)
	{
		var i, len, s;
		this.getSolidCollisionCandidates(null, r, candidates);
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			s = candidates[i];
			if (!s.extra.solidEnabled)
				continue;
			if (this.testRectOverlap(r, s))
			{
				candidates.length = 0;
				return s;
			}
		}
		candidates.length = 0;
		return null;
	};
	var jumpthru_array_ret = [];
	Runtime.prototype.testOverlapJumpThru = function (inst, all)
	{
		var ret = null;
		if (all)
		{
			ret = jumpthru_array_ret;
			ret.length = 0;
		}
		inst.update_bbox();
		this.getJumpthruCollisionCandidates(inst.layer, inst.bbox, candidates);
		var i, len, j;
		for (i = 0, len = candidates.length; i < len; ++i)
		{
			j = candidates[i];
			if (!j.extra.jumpthruEnabled)
				continue;
			if (this.testOverlap(inst, j))
			{
				if (all)
					ret.push(j);
				else
				{
					candidates.length = 0;
					return j;
				}
			}
		}
		candidates.length = 0;
		return ret;
	};
	Runtime.prototype.pushOutSolid = function (inst, xdir, ydir, dist, include_jumpthrus, specific_jumpthru)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		var last_overlapped = null, secondlast_overlapped = null;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (last_overlapped)
					secondlast_overlapped = last_overlapped;
				if (!last_overlapped)
				{
					if (include_jumpthrus)
					{
						if (specific_jumpthru)
							last_overlapped = (this.testOverlap(inst, specific_jumpthru) ? specific_jumpthru : null);
						else
							last_overlapped = this.testOverlapJumpThru(inst);
						if (last_overlapped)
							secondlast_overlapped = last_overlapped;
					}
					if (!last_overlapped)
					{
						if (secondlast_overlapped)
							this.pushInFractional(inst, xdir, ydir, secondlast_overlapped, 16);
						return true;
					}
				}
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushOut = function (inst, xdir, ydir, dist, otherinst)
	{
		var push_dist = dist || 50;
		var oldx = inst.x
		var oldy = inst.y;
		var i;
		for (i = 0; i < push_dist; i++)
		{
			inst.x = (oldx + (xdir * i));
			inst.y = (oldy + (ydir * i));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, otherinst))
				return true;
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.pushInFractional = function (inst, xdir, ydir, obj, limit)
	{
		var divisor = 2;
		var frac;
		var forward = false;
		var overlapping = false;
		var bestx = inst.x;
		var besty = inst.y;
		while (divisor <= limit)
		{
			frac = 1 / divisor;
			divisor *= 2;
			inst.x += xdir * frac * (forward ? 1 : -1);
			inst.y += ydir * frac * (forward ? 1 : -1);
			inst.set_bbox_changed();
			if (this.testOverlap(inst, obj))
			{
				forward = true;
				overlapping = true;
			}
			else
			{
				forward = false;
				overlapping = false;
				bestx = inst.x;
				besty = inst.y;
			}
		}
		if (overlapping)
		{
			inst.x = bestx;
			inst.y = besty;
			inst.set_bbox_changed();
		}
	};
	Runtime.prototype.pushOutSolidNearest = function (inst, max_dist_)
	{
		var max_dist = (cr.is_undefined(max_dist_) ? 100 : max_dist_);
		var dist = 0;
		var oldx = inst.x
		var oldy = inst.y;
		var dir = 0;
		var dx = 0, dy = 0;
		var last_overlapped = this.testOverlapSolid(inst);
		if (!last_overlapped)
			return true;		// already clear of solids
		while (dist <= max_dist)
		{
			switch (dir) {
			case 0:		dx = 0; dy = -1; dist++; break;
			case 1:		dx = 1; dy = -1; break;
			case 2:		dx = 1; dy = 0; break;
			case 3:		dx = 1; dy = 1; break;
			case 4:		dx = 0; dy = 1; break;
			case 5:		dx = -1; dy = 1; break;
			case 6:		dx = -1; dy = 0; break;
			case 7:		dx = -1; dy = -1; break;
			}
			dir = (dir + 1) % 8;
			inst.x = cr.floor(oldx + (dx * dist));
			inst.y = cr.floor(oldy + (dy * dist));
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, last_overlapped))
			{
				last_overlapped = this.testOverlapSolid(inst);
				if (!last_overlapped)
					return true;
			}
		}
		inst.x = oldx;
		inst.y = oldy;
		inst.set_bbox_changed();
		return false;
	};
	Runtime.prototype.registerCollision = function (a, b)
	{
		if (!a.collisionsEnabled || !b.collisionsEnabled)
			return;
		this.registered_collisions.push([a, b]);
	};
	Runtime.prototype.checkRegisteredCollision = function (a, b)
	{
		var i, len, x;
		for (i = 0, len = this.registered_collisions.length; i < len; i++)
		{
			x = this.registered_collisions[i];
			if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a))
				return true;
		}
		return false;
	};
	Runtime.prototype.calculateSolidBounceAngle = function(inst, startx, starty, obj)
	{
		var objx = inst.x;
		var objy = inst.y;
		var radius = cr.max(10, cr.distanceTo(startx, starty, objx, objy));
		var startangle = cr.angleTo(startx, starty, objx, objy);
		var firstsolid = obj || this.testOverlapSolid(inst);
		if (!firstsolid)
			return cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
		var increment = cr.to_radians(5);	// 5 degree increments
		for (i = 1; i < 36; i++)
		{
			curangle = startangle - i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					anticlockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			anticlockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		var cursolid = firstsolid;
		for (i = 1; i < 36; i++)
		{
			curangle = startangle + i * increment;
			inst.x = startx + Math.cos(curangle) * radius;
			inst.y = starty + Math.sin(curangle) * radius;
			inst.set_bbox_changed();
			if (!this.testOverlap(inst, cursolid))
			{
				cursolid = obj ? null : this.testOverlapSolid(inst);
				if (!cursolid)
				{
					clockwise_free_angle = curangle;
					break;
				}
			}
		}
		if (i === 36)
			clockwise_free_angle = cr.clamp_angle(startangle + cr.PI);
		inst.x = objx;
		inst.y = objy;
		inst.set_bbox_changed();
		if (clockwise_free_angle === anticlockwise_free_angle)
			return clockwise_free_angle;
		var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
		var normal;
		if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle))
		{
			normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + cr.PI);
		}
		else
		{
			normal = cr.clamp_angle(clockwise_free_angle + half_diff);
		}
;
		var vx = Math.cos(startangle);
		var vy = Math.sin(startangle);
		var nx = Math.cos(normal);
		var ny = Math.sin(normal);
		var v_dot_n = vx * nx + vy * ny;
		var rx = vx - 2 * v_dot_n * nx;
		var ry = vy - 2 * v_dot_n * ny;
		return cr.angleTo(0, 0, rx, ry);
	};
	var triggerSheetIndex = -1;
	Runtime.prototype.trigger = function (method, inst, value /* for fast triggers */)
	{
;
		if (!this.running_layout)
			return false;
		var sheet = this.running_layout.event_sheet;
		if (!sheet)
			return false;     // no event sheet active; nothing to trigger
		var ret = false;
		var r, i, len;
		triggerSheetIndex++;
		var deep_includes = sheet.deep_includes;
		for (i = 0, len = deep_includes.length; i < len; ++i)
		{
			r = this.triggerOnSheet(method, inst, deep_includes[i], value);
			ret = ret || r;
		}
		r = this.triggerOnSheet(method, inst, sheet, value);
		ret = ret || r;
		triggerSheetIndex--;
		return ret;
    };
    Runtime.prototype.triggerOnSheet = function (method, inst, sheet, value)
    {
        var ret = false;
		var i, leni, r, families;
		if (!inst)
		{
			r = this.triggerOnSheetForTypeName(method, inst, "system", sheet, value);
			ret = ret || r;
		}
		else
		{
			r = this.triggerOnSheetForTypeName(method, inst, inst.type.name, sheet, value);
			ret = ret || r;
			families = inst.type.families;
			for (i = 0, leni = families.length; i < leni; ++i)
			{
				r = this.triggerOnSheetForTypeName(method, inst, families[i].name, sheet, value);
				ret = ret || r;
			}
		}
		return ret;             // true if anything got triggered
	};
	Runtime.prototype.triggerOnSheetForTypeName = function (method, inst, type_name, sheet, value)
	{
		var i, leni;
		var ret = false, ret2 = false;
		var trig, index;
		var fasttrigger = (typeof value !== "undefined");
		var triggers = (fasttrigger ? sheet.fasttriggers : sheet.triggers);
		var obj_entry = triggers[type_name];
		if (!obj_entry)
			return ret;
		var triggers_list = null;
		for (i = 0, leni = obj_entry.length; i < leni; ++i)
		{
			if (obj_entry[i].method == method)
			{
				triggers_list = obj_entry[i].evs;
				break;
			}
		}
		if (!triggers_list)
			return ret;
		var triggers_to_fire;
		if (fasttrigger)
		{
			triggers_to_fire = triggers_list[value];
		}
		else
		{
			triggers_to_fire = triggers_list;
		}
		if (!triggers_to_fire)
			return null;
		for (i = 0, leni = triggers_to_fire.length; i < leni; i++)
		{
			trig = triggers_to_fire[i][0];
			index = triggers_to_fire[i][1];
			ret2 = this.executeSingleTrigger(inst, type_name, trig, index);
			ret = ret || ret2;
		}
		return ret;
	};
	Runtime.prototype.executeSingleTrigger = function (inst, type_name, trig, index)
	{
		var i, leni;
		var ret = false;
		this.trigger_depth++;
		var current_event = this.getCurrentEventStack().current_event;
		if (current_event)
			this.pushCleanSol(current_event.solModifiersIncludingParents);
		var isrecursive = (this.trigger_depth > 1);		// calling trigger from inside another trigger
		this.pushCleanSol(trig.solModifiersIncludingParents);
		if (isrecursive)
			this.pushLocalVarStack();
		var event_stack = this.pushEventStack(trig);
		event_stack.current_event = trig;
		if (inst)
		{
			var sol = this.types[type_name].getCurrentSol();
			sol.select_all = false;
			sol.instances.length = 1;
			sol.instances[0] = inst;
			this.types[type_name].applySolToContainer();
		}
		var ok_to_run = true;
		if (trig.parent)
		{
			var temp_parents_arr = event_stack.temp_parents_arr;
			var cur_parent = trig.parent;
			while (cur_parent)
			{
				temp_parents_arr.push(cur_parent);
				cur_parent = cur_parent.parent;
			}
			temp_parents_arr.reverse();
			for (i = 0, leni = temp_parents_arr.length; i < leni; i++)
			{
				if (!temp_parents_arr[i].run_pretrigger())   // parent event failed
				{
					ok_to_run = false;
					break;
				}
			}
		}
		if (ok_to_run)
		{
			this.execcount++;
			if (trig.orblock)
				trig.run_orblocktrigger(index);
			else
				trig.run();
			ret = ret || event_stack.last_event_true;
		}
		this.popEventStack();
		if (isrecursive)
			this.popLocalVarStack();
		this.popSol(trig.solModifiersIncludingParents);
		if (current_event)
			this.popSol(current_event.solModifiersIncludingParents);
		if (this.isInOnDestroy === 0 && triggerSheetIndex === 0 && !this.isRunningEvents && (!this.deathRow.isEmpty() || this.createRow.length))
		{
			this.ClearDeathRow();
		}
		this.trigger_depth--;
		return ret;
	};
	Runtime.prototype.getCurrentCondition = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.conditions[evinfo.cndindex];
	};
	Runtime.prototype.getCurrentAction = function ()
	{
		var evinfo = this.getCurrentEventStack();
		return evinfo.current_event.actions[evinfo.actindex];
	};
	Runtime.prototype.pushLocalVarStack = function ()
	{
		this.localvar_stack_index++;
		if (this.localvar_stack_index >= this.localvar_stack.length)
			this.localvar_stack.push([]);
	};
	Runtime.prototype.popLocalVarStack = function ()
	{
;
		this.localvar_stack_index--;
	};
	Runtime.prototype.getCurrentLocalVarStack = function ()
	{
		return this.localvar_stack[this.localvar_stack_index];
	};
	Runtime.prototype.pushEventStack = function (cur_event)
	{
		this.event_stack_index++;
		if (this.event_stack_index >= this.event_stack.length)
			this.event_stack.push(new cr.eventStackFrame());
		var ret = this.getCurrentEventStack();
		ret.reset(cur_event);
		return ret;
	};
	Runtime.prototype.popEventStack = function ()
	{
;
		this.event_stack_index--;
	};
	Runtime.prototype.getCurrentEventStack = function ()
	{
		return this.event_stack[this.event_stack_index];
	};
	Runtime.prototype.pushLoopStack = function (name_)
	{
		this.loop_stack_index++;
		if (this.loop_stack_index >= this.loop_stack.length)
		{
			this.loop_stack.push(cr.seal({ name: name_, index: 0, stopped: false }));
		}
		var ret = this.getCurrentLoop();
		ret.name = name_;
		ret.index = 0;
		ret.stopped = false;
		return ret;
	};
	Runtime.prototype.popLoopStack = function ()
	{
;
		this.loop_stack_index--;
	};
	Runtime.prototype.getCurrentLoop = function ()
	{
		return this.loop_stack[this.loop_stack_index];
	};
	Runtime.prototype.getEventVariableByName = function (name, scope)
	{
		var i, leni, j, lenj, sheet, e;
		while (scope)
		{
			for (i = 0, leni = scope.subevents.length; i < leni; i++)
			{
				e = scope.subevents[i];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
			scope = scope.parent;
		}
		for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
		{
			sheet = this.eventsheets_by_index[i];
			for (j = 0, lenj = sheet.events.length; j < lenj; j++)
			{
				e = sheet.events[j];
				if (e instanceof cr.eventvariable && cr.equals_nocase(name, e.name))
					return e;
			}
		}
		return null;
	};
	Runtime.prototype.getLayoutBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			if (this.layouts_by_index[i].sid === sid_)
				return this.layouts_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getObjectTypeBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			if (this.types_by_index[i].sid === sid_)
				return this.types_by_index[i];
		}
		return null;
	};
	Runtime.prototype.getGroupBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			if (this.allGroups[i].sid === sid_)
				return this.allGroups[i];
		}
		return null;
	};
	function makeSaveDb(e)
	{
		var db = e.target.result;
		db.createObjectStore("saves", { keyPath: "slot" });
	};
	function IndexedDB_WriteSlot(slot_, data_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"], "readwrite");
			var objectStore = transaction.objectStore("saves");
			var putReq = objectStore.put({"slot": slot_, "data": data_ });
			putReq.onsuccess = oncomplete_;
		};
	};
	function IndexedDB_ReadSlot(slot_, oncomplete_, onerror_)
	{
		var request = indexedDB.open("_C2SaveStates");
		request.onupgradeneeded = makeSaveDb;
		request.onerror = onerror_;
		request.onsuccess = function (e)
		{
			var db = e.target.result;
			db.onerror = onerror_;
			var transaction = db.transaction(["saves"]);
			var objectStore = transaction.objectStore("saves");
			var readReq = objectStore.get(slot_);
			readReq.onsuccess = function (e)
			{
				if (readReq.result)
					oncomplete_(readReq.result["data"]);
				else
					oncomplete_(null);
			};
		};
	};
	Runtime.prototype.signalContinuousPreview = function ()
	{
		this.signalledContinuousPreview = true;
	};
	function doContinuousPreviewReload()
	{
		cr.logexport("Reloading for continuous preview");
		if (!!window["c2cocoonjs"])
		{
			CocoonJS["App"]["reload"]();
		}
		else
		{
			if (window.location.search.indexOf("continuous") > -1)
				window.location.reload(true);
			else
				window.location = window.location + "?continuous";
		}
	};
	Runtime.prototype.handleSaveLoad = function ()
	{
		var self = this;
		var savingToSlot = this.saveToSlot;
		var savingJson = this.lastSaveJson;
		var loadingFromSlot = this.loadFromSlot;
		var continuous = false;
		if (this.signalledContinuousPreview)
		{
			continuous = true;
			savingToSlot = "__c2_continuouspreview";
			this.signalledContinuousPreview = false;
		}
		if (savingToSlot.length)
		{
			this.ClearDeathRow();
			savingJson = this.saveToJSONString();
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_WriteSlot(savingToSlot, savingJson, function ()
				{
					cr.logexport("Saved state to IndexedDB storage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}, function (e)
				{
					try {
						localStorage.setItem("__c2save_" + savingToSlot, savingJson);
						cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
						self.lastSaveJson = savingJson;
						self.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
						self.lastSaveJson = "";
						if (continuous)
							doContinuousPreviewReload();
					}
					catch (f)
					{
						cr.logexport("Failed to save game state: " + e + "; " + f);
					}
				});
			}
			else
			{
				try {
					localStorage.setItem("__c2save_" + savingToSlot, savingJson);
					cr.logexport("Saved state to WebStorage (" + savingJson.length + " bytes)");
					self.lastSaveJson = savingJson;
					this.trigger(cr.system_object.prototype.cnds.OnSaveComplete, null);
					self.lastSaveJson = "";
					if (continuous)
						doContinuousPreviewReload();
				}
				catch (e)
				{
					cr.logexport("Error saving to WebStorage: " + e);
				}
			}
			this.saveToSlot = "";
			this.loadFromSlot = "";
			this.loadFromJson = "";
		}
		if (loadingFromSlot.length)
		{
			if (window.indexedDB && !this.isCocoonJs)
			{
				IndexedDB_ReadSlot(loadingFromSlot, function (result_)
				{
					if (result_)
					{
						self.loadFromJson = result_;
						cr.logexport("Loaded state from IndexedDB storage (" + self.loadFromJson.length + " bytes)");
					}
					else
					{
						self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
						cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					}
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				}, function (e)
				{
					self.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
					cr.logexport("Loaded state from WebStorage (" + self.loadFromJson.length + " bytes)");
					self.suspendDrawing = false;
					if (!self.loadFromJson.length)
						self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
				});
			}
			else
			{
				this.loadFromJson = localStorage.getItem("__c2save_" + loadingFromSlot) || "";
				cr.logexport("Loaded state from WebStorage (" + this.loadFromJson.length + " bytes)");
				this.suspendDrawing = false;
				if (!self.loadFromJson.length)
					self.trigger(cr.system_object.prototype.cnds.OnLoadFailed, null);
			}
			this.loadFromSlot = "";
			this.saveToSlot = "";
		}
		if (this.loadFromJson.length)
		{
			this.ClearDeathRow();
			this.loadFromJSONString(this.loadFromJson);
			this.lastSaveJson = this.loadFromJson;
			this.trigger(cr.system_object.prototype.cnds.OnLoadComplete, null);
			this.lastSaveJson = "";
			this.loadFromJson = "";
		}
	};
	function CopyExtraObject(extra)
	{
		var p, ret = {};
		for (p in extra)
		{
			if (extra.hasOwnProperty(p))
			{
				if (extra[p] instanceof cr.ObjectSet)
					continue;
				if (extra[p] && typeof extra[p].c2userdata !== "undefined")
					continue;
				ret[p] = extra[p];
			}
		}
		return ret;
	};
	Runtime.prototype.saveToJSONString = function()
	{
		var i, len, j, lenj, type, layout, typeobj, g, c, a, v, p;
		var o = {
			"c2save":				true,
			"version":				1,
			"rt": {
				"time":				this.kahanTime.sum,
				"timescale":		this.timescale,
				"tickcount":		this.tickcount,
				"execcount":		this.execcount,
				"next_uid":			this.next_uid,
				"running_layout":	this.running_layout.sid,
				"start_time_offset": (Date.now() - this.start_time)
			},
			"types": {},
			"layouts": {},
			"events": {
				"groups": {},
				"cnds": {},
				"acts": {},
				"vars": {}
			}
		};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family || this.typeHasNoSaveBehavior(type))
				continue;
			typeobj = {
				"instances": []
			};
			if (cr.hasAnyOwnProperty(type.extra))
				typeobj["ex"] = CopyExtraObject(type.extra);
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				typeobj["instances"].push(this.saveInstanceToJSON(type.instances[j]));
			}
			o["types"][type.sid.toString()] = typeobj;
		}
		for (i = 0, len = this.layouts_by_index.length; i < len; i++)
		{
			layout = this.layouts_by_index[i];
			o["layouts"][layout.sid.toString()] = layout.saveToJSON();
		}
		var ogroups = o["events"]["groups"];
		for (i = 0, len = this.allGroups.length; i < len; i++)
		{
			g = this.allGroups[i];
			ogroups[g.sid.toString()] = this.groups_by_name[g.group_name].group_active;
		}
		var ocnds = o["events"]["cnds"];
		for (p in this.cndsBySid)
		{
			if (this.cndsBySid.hasOwnProperty(p))
			{
				c = this.cndsBySid[p];
				if (cr.hasAnyOwnProperty(c.extra))
					ocnds[p] = { "ex": CopyExtraObject(c.extra) };
			}
		}
		var oacts = o["events"]["acts"];
		for (p in this.actsBySid)
		{
			if (this.actsBySid.hasOwnProperty(p))
			{
				a = this.actsBySid[p];
				if (cr.hasAnyOwnProperty(a.extra))
					oacts[p] = { "ex": a.extra };
			}
		}
		var ovars = o["events"]["vars"];
		for (p in this.varsBySid)
		{
			if (this.varsBySid.hasOwnProperty(p))
			{
				v = this.varsBySid[p];
				if (!v.is_constant && (!v.parent || v.is_static))
					ovars[p] = v.data;
			}
		}
		o["system"] = this.system.saveToJSON();
		return JSON.stringify(o);
	};
	Runtime.prototype.refreshUidMap = function ()
	{
		var i, len, type, j, lenj, inst;
		this.objectsByUid = {};
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				this.objectsByUid[inst.uid.toString()] = inst;
			}
		}
	};
	Runtime.prototype.loadFromJSONString = function (str)
	{
		var o = JSON.parse(str);
		if (!o["c2save"])
			return;		// probably not a c2 save state
		if (o["version"] > 1)
			return;		// from future version of c2; assume not compatible
		var rt = o["rt"];
		this.kahanTime.reset();
		this.kahanTime.sum = rt["time"];
		this.timescale = rt["timescale"];
		this.tickcount = rt["tickcount"];
		this.start_time = Date.now() - rt["start_time_offset"];
		var layout_sid = rt["running_layout"];
		if (layout_sid !== this.running_layout.sid)
		{
			var changeToLayout = this.getLayoutBySid(layout_sid);
			if (changeToLayout)
				this.doChangeLayout(changeToLayout);
			else
				return;		// layout that was saved on has gone missing (deleted?)
		}
		this.isLoadingState = true;
		var i, len, j, lenj, k, lenk, p, type, existing_insts, load_insts, inst, binst, layout, layer, g, iid, t;
		var otypes = o["types"];
		for (p in otypes)
		{
			if (otypes.hasOwnProperty(p))
			{
				type = this.getObjectTypeBySid(parseInt(p, 10));
				if (!type || type.is_family || this.typeHasNoSaveBehavior(type))
					continue;
				if (otypes[p]["ex"])
					type.extra = otypes[p]["ex"];
				else
					cr.wipe(type.extra);
				existing_insts = type.instances;
				load_insts = otypes[p]["instances"];
				for (i = 0, len = cr.min(existing_insts.length, load_insts.length); i < len; i++)
				{
					this.loadInstanceFromJSON(existing_insts[i], load_insts[i]);
				}
				for (i = load_insts.length, len = existing_insts.length; i < len; i++)
					this.DestroyInstance(existing_insts[i]);
				for (i = existing_insts.length, len = load_insts.length; i < len; i++)
				{
					layer = null;
					if (type.plugin.is_world)
					{
						layer = this.running_layout.getLayerBySid(load_insts[i]["w"]["l"]);
						if (!layer)
							continue;
					}
					inst = this.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
					this.loadInstanceFromJSON(inst, load_insts[i]);
				}
				type.stale_iids = true;
			}
		}
		this.ClearDeathRow();
		this.refreshUidMap();
		var olayouts = o["layouts"];
		for (p in olayouts)
		{
			if (olayouts.hasOwnProperty(p))
			{
				layout = this.getLayoutBySid(parseInt(p, 10));
				if (!layout)
					continue;		// must've gone missing
				layout.loadFromJSON(olayouts[p]);
			}
		}
		var ogroups = o["events"]["groups"];
		for (p in ogroups)
		{
			if (ogroups.hasOwnProperty(p))
			{
				g = this.getGroupBySid(parseInt(p, 10));
				if (g && this.groups_by_name[g.group_name])
					this.groups_by_name[g.group_name].group_active = ogroups[p];
			}
		}
		var ocnds = o["events"]["cnds"];
		for (p in ocnds)
		{
			if (ocnds.hasOwnProperty(p) && this.cndsBySid.hasOwnProperty(p))
			{
				this.cndsBySid[p].extra = ocnds[p]["ex"];
			}
		}
		var oacts = o["events"]["acts"];
		for (p in oacts)
		{
			if (oacts.hasOwnProperty(p) && this.actsBySid.hasOwnProperty(p))
			{
				this.actsBySid[p].extra = oacts[p]["ex"];
			}
		}
		var ovars = o["events"]["vars"];
		for (p in ovars)
		{
			if (ovars.hasOwnProperty(p) && this.varsBySid.hasOwnProperty(p))
			{
				this.varsBySid[p].data = ovars[p];
			}
		}
		this.next_uid = rt["next_uid"];
		this.isLoadingState = false;
		this.system.loadFromJSON(o["system"]);
		for (i = 0, len = this.types_by_index.length; i < len; i++)
		{
			type = this.types_by_index[i];
			if (type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
			{
				inst = type.instances[j];
				if (type.is_contained)
				{
					iid = inst.get_iid();
					inst.siblings.length = 0;
					for (k = 0, lenk = type.container.length; k < lenk; k++)
					{
						t = type.container[k];
						if (type === t)
							continue;
;
						inst.siblings.push(t.instances[iid]);
					}
				}
				if (inst.afterLoad)
					inst.afterLoad();
				if (inst.behavior_insts)
				{
					for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++)
					{
						binst = inst.behavior_insts[k];
						if (binst.afterLoad)
							binst.afterLoad();
					}
				}
			}
		}
		this.redraw = true;
	};
	Runtime.prototype.saveInstanceToJSON = function(inst, state_only)
	{
		var i, len, world, behinst, et;
		var type = inst.type;
		var plugin = type.plugin;
		var o = {};
		if (state_only)
			o["c2"] = true;		// mark as known json data from Construct 2
		else
			o["uid"] = inst.uid;
		if (cr.hasAnyOwnProperty(inst.extra))
			o["ex"] = CopyExtraObject(inst.extra);
		if (inst.instance_vars && inst.instance_vars.length)
		{
			o["ivs"] = {};
			for (i = 0, len = inst.instance_vars.length; i < len; i++)
			{
				o["ivs"][inst.type.instvar_sids[i].toString()] = inst.instance_vars[i];
			}
		}
		if (plugin.is_world)
		{
			world = {
				"x": inst.x,
				"y": inst.y,
				"w": inst.width,
				"h": inst.height,
				"l": inst.layer.sid,
				"zi": inst.get_zindex()
			};
			if (inst.angle !== 0)
				world["a"] = inst.angle;
			if (inst.opacity !== 1)
				world["o"] = inst.opacity;
			if (inst.hotspotX !== 0.5)
				world["hX"] = inst.hotspotX;
			if (inst.hotspotY !== 0.5)
				world["hY"] = inst.hotspotY;
			if (inst.blend_mode !== 0)
				world["bm"] = inst.blend_mode;
			if (!inst.visible)
				world["v"] = inst.visible;
			if (!inst.collisionsEnabled)
				world["ce"] = inst.collisionsEnabled;
			if (inst.my_timescale !== -1)
				world["mts"] = inst.my_timescale;
			if (type.effect_types.length)
			{
				world["fx"] = [];
				for (i = 0, len = type.effect_types.length; i < len; i++)
				{
					et = type.effect_types[i];
					world["fx"].push({"name": et.name,
									  "active": inst.active_effect_flags[et.index],
									  "params": inst.effect_params[et.index] });
				}
			}
			o["w"] = world;
		}
		if (inst.behavior_insts && inst.behavior_insts.length)
		{
			o["behs"] = {};
			for (i = 0, len = inst.behavior_insts.length; i < len; i++)
			{
				behinst = inst.behavior_insts[i];
				if (behinst.saveToJSON)
					o["behs"][behinst.type.sid.toString()] = behinst.saveToJSON();
			}
		}
		if (inst.saveToJSON)
			o["data"] = inst.saveToJSON();
		return o;
	};
	Runtime.prototype.getInstanceVarIndexBySid = function (type, sid_)
	{
		var i, len;
		for (i = 0, len = type.instvar_sids.length; i < len; i++)
		{
			if (type.instvar_sids[i] === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.getBehaviorIndexBySid = function (inst, sid_)
	{
		var i, len;
		for (i = 0, len = inst.behavior_insts.length; i < len; i++)
		{
			if (inst.behavior_insts[i].type.sid === sid_)
				return i;
		}
		return -1;
	};
	Runtime.prototype.loadInstanceFromJSON = function(inst, o, state_only)
	{
		var p, i, len, iv, oivs, world, fxindex, obehs, behindex;
		var oldlayer;
		var type = inst.type;
		var plugin = type.plugin;
		if (state_only)
		{
			if (!o["c2"])
				return;
		}
		else
			inst.uid = o["uid"];
		if (o["ex"])
			inst.extra = o["ex"];
		else
			cr.wipe(inst.extra);
		oivs = o["ivs"];
		if (oivs)
		{
			for (p in oivs)
			{
				if (oivs.hasOwnProperty(p))
				{
					iv = this.getInstanceVarIndexBySid(type, parseInt(p, 10));
					if (iv < 0 || iv >= inst.instance_vars.length)
						continue;		// must've gone missing
					inst.instance_vars[iv] = oivs[p];
				}
			}
		}
		if (plugin.is_world)
		{
			world = o["w"];
			if (inst.layer.sid !== world["l"])
			{
				oldlayer = inst.layer;
				inst.layer = this.running_layout.getLayerBySid(world["l"]);
				if (inst.layer)
				{
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
					cr.arrayFindRemove(oldlayer.instances, inst);
					oldlayer.zindices_stale = true;
				}
				else
				{
					inst.layer = oldlayer;
					this.DestroyInstance(inst);
				}
			}
			inst.x = world["x"];
			inst.y = world["y"];
			inst.width = world["w"];
			inst.height = world["h"];
			inst.zindex = world["zi"];
			inst.angle = world.hasOwnProperty("a") ? world["a"] : 0;
			inst.opacity = world.hasOwnProperty("o") ? world["o"] : 1;
			inst.hotspotX = world.hasOwnProperty("hX") ? world["hX"] : 0.5;
			inst.hotspotY = world.hasOwnProperty("hY") ? world["hY"] : 0.5;
			inst.visible = world.hasOwnProperty("v") ? world["v"] : true;
			inst.collisionsEnabled = world.hasOwnProperty("ce") ? world["ce"] : true;
			inst.my_timescale = world.hasOwnProperty("mts") ? world["mts"] : -1;
			inst.blend_mode = world.hasOwnProperty("bm") ? world["bm"] : 0;;
			inst.compositeOp = cr.effectToCompositeOp(inst.blend_mode);
			if (this.gl)
				cr.setGLBlend(inst, inst.blend_mode, this.gl);
			inst.set_bbox_changed();
			if (world.hasOwnProperty("fx"))
			{
				for (i = 0, len = world["fx"].length; i < len; i++)
				{
					fxindex = type.getEffectIndexByName(world["fx"][i]["name"]);
					if (fxindex < 0)
						continue;		// must've gone missing
					inst.active_effect_flags[fxindex] = world["fx"][i]["active"];
					inst.effect_params[fxindex] = world["fx"][i]["params"];
				}
			}
			inst.updateActiveEffects();
		}
		obehs = o["behs"];
		if (obehs)
		{
			for (p in obehs)
			{
				if (obehs.hasOwnProperty(p))
				{
					behindex = this.getBehaviorIndexBySid(inst, parseInt(p, 10));
					if (behindex < 0)
						continue;		// must've gone missing
					inst.behavior_insts[behindex].loadFromJSON(obehs[p]);
				}
			}
		}
		if (o["data"])
			inst.loadFromJSON(o["data"]);
	};
	cr.runtime = Runtime;
	cr.createRuntime = function (canvasid)
	{
		return new Runtime(document.getElementById(canvasid));
	};
	cr.createDCRuntime = function (w, h)
	{
		return new Runtime({ "dc": true, "width": w, "height": h });
	};
	window["cr_createRuntime"] = cr.createRuntime;
	window["cr_createDCRuntime"] = cr.createDCRuntime;
	window["createCocoonJSRuntime"] = function ()
	{
		window["c2cocoonjs"] = true;
		var canvas = document.createElement("screencanvas") || document.createElement("canvas");
		canvas.screencanvas = true;
		document.body.appendChild(canvas);
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window.addEventListener("orientationchange", function () {
			window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		});
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
	window["createEjectaRuntime"] = function ()
	{
		var canvas = document.getElementById("canvas");
		var rt = new Runtime(canvas);
		window["c2runtime"] = rt;
		window["c2runtime"]["setSize"](window.innerWidth, window.innerHeight);
		return rt;
	};
}());
window["cr_getC2Runtime"] = function()
{
	var canvas = document.getElementById("c2canvas");
	if (canvas)
		return canvas["c2runtime"];
	else if (window["c2runtime"])
		return window["c2runtime"];
	else
		return null;
}
window["cr_sizeCanvas"] = function(w, h)
{
	if (w === 0 || h === 0)
		return;
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSize"](w, h);
}
window["cr_setSuspended"] = function(s)
{
	var runtime = window["cr_getC2Runtime"]();
	if (runtime)
		runtime["setSuspended"](s);
}
;
(function()
{
	function Layout(runtime, m)
	{
		this.runtime = runtime;
		this.event_sheet = null;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		this.scale = 1.0;
		this.angle = 0;
		this.first_visit = true;
		this.name = m[0];
		this.width = m[1];
		this.height = m[2];
		this.unbounded_scrolling = m[3];
		this.sheetname = m[4];
		this.sid = m[5];
		var lm = m[6];
		var i, len;
		this.layers = [];
		this.initial_types = [];
		for (i = 0, len = lm.length; i < len; i++)
		{
			var layer = new cr.layer(this, lm[i]);
			layer.number = i;
			cr.seal(layer);
			this.layers.push(layer);
		}
		var im = m[7];
		this.initial_nonworld = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
				type.default_instance = inst;
			this.initial_nonworld.push(inst);
			if (this.initial_types.indexOf(type) === -1)
				this.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[8].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[8][i][0],
				name: m[8][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[8][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
		this.persist_data = {};
	};
	Layout.prototype.saveObjectToPersist = function (inst)
	{
		var sidStr = inst.type.sid.toString();
		if (!this.persist_data.hasOwnProperty(sidStr))
			this.persist_data[sidStr] = [];
		var type_persist = this.persist_data[sidStr];
		type_persist.push(this.runtime.saveInstanceToJSON(inst));
	};
	Layout.prototype.hasOpaqueBottomLayer = function ()
	{
		var layer = this.layers[0];
		return !layer.transparent && layer.opacity === 1.0 && !layer.forceOwnTexture && layer.visible;
	};
	Layout.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layout.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	var created_instances = [];
	Layout.prototype.startRunning = function ()
	{
		if (this.sheetname)
		{
			this.event_sheet = this.runtime.eventsheets[this.sheetname];
;
			this.event_sheet.updateDeepIncludes();
		}
		this.runtime.running_layout = this;
		this.scrollX = (this.runtime.original_width / 2);
		this.scrollY = (this.runtime.original_height / 2);
		var i, k, len, lenk, type, type_instances, inst, iid, t, s, p, q, type_data, layer;
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.is_family)
				continue;		// instances are only transferred for their real type
			type_instances = type.instances;
			for (k = 0, lenk = type_instances.length; k < lenk; k++)
			{
				inst = type_instances[k];
				if (inst.layer)
				{
					var num = inst.layer.number;
					if (num >= this.layers.length)
						num = this.layers.length - 1;
					inst.layer = this.layers[num];
					inst.layer.instances.push(inst);
					inst.layer.zindices_stale = true;
				}
			}
		}
		var layer;
		created_instances.length = 0;
		this.boundScrolling();
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			layer.createInitialInstances();		// fills created_instances
			layer.disableAngle = true;
			var px = layer.canvasToLayer(0, 0, true, true);
			var py = layer.canvasToLayer(0, 0, false, true);
			layer.disableAngle = false;
			if (this.runtime.pixel_rounding)
			{
				px = (px + 0.5) | 0;
				py = (py + 0.5) | 0;
			}
			layer.rotateViewport(px, py, null);
		}
		var uids_changed = false;
		if (!this.first_visit)
		{
			for (p in this.persist_data)
			{
				if (this.persist_data.hasOwnProperty(p))
				{
					type = this.runtime.getObjectTypeBySid(parseInt(p, 10));
					if (!type || type.is_family || !this.runtime.typeHasPersistBehavior(type))
						continue;
					type_data = this.persist_data[p];
					for (i = 0, len = type_data.length; i < len; i++)
					{
						layer = null;
						if (type.plugin.is_world)
						{
							layer = this.getLayerBySid(type_data[i]["w"]["l"]);
							if (!layer)
								continue;
						}
						inst = this.runtime.createInstanceFromInit(type.default_instance, layer, false, 0, 0, true);
						this.runtime.loadInstanceFromJSON(inst, type_data[i]);
						uids_changed = true;
						created_instances.push(inst);
					}
					type_data.length = 0;
				}
			}
			for (i = 0, len = this.layers.length; i < len; i++)
			{
				this.layers[i].instances.sort(sortInstanceByZIndex);
				this.layers[i].zindices_stale = true;		// in case of duplicates/holes
			}
		}
		if (uids_changed)
		{
			this.runtime.ClearDeathRow();
			this.runtime.refreshUidMap();
		}
		for (i = 0; i < created_instances.length; i++)
		{
			inst = created_instances[i];
			if (!inst.type.is_contained)
				continue;
			iid = inst.get_iid();
			for (k = 0, lenk = inst.type.container.length; k < lenk; k++)
			{
				t = inst.type.container[k];
				if (inst.type === t)
					continue;
				if (t.instances.length > iid)
					inst.siblings.push(t.instances[iid]);
				else
				{
					if (!t.default_instance)
					{
					}
					else
					{
						s = this.runtime.createInstanceFromInit(t.default_instance, inst.layer, true, inst.x, inst.y, true);
						this.runtime.ClearDeathRow();
						t.updateIIDs();
						inst.siblings.push(s);
						created_instances.push(s);		// come back around and link up its own instances too
					}
				}
			}
		}
		for (i = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
;
		}
		this.runtime.changelayout = null;
		this.runtime.ClearDeathRow();
		if (this.runtime.ctx && !this.runtime.isDomFree)
		{
			for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
			{
				t = this.runtime.types_by_index[i];
				if (t.is_family || !t.instances.length || !t.preloadCanvas2D)
					continue;
				t.preloadCanvas2D(this.runtime.ctx);
			}
		}
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout start: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		for (i = 0, len = created_instances.length; i < len; i++)
		{
			inst = created_instances[i];
			this.runtime.trigger(Object.getPrototypeOf(inst.type.plugin).cnds.OnCreated, inst);
		}
		created_instances.length = 0;
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
		this.first_visit = false;
	};
	Layout.prototype.createGlobalNonWorlds = function ()
	{
		var i, k, len, initial_inst, inst, type;
		for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++)
		{
			initial_inst = this.initial_nonworld[i];
			type = this.runtime.types_by_index[initial_inst[1]];
			if (type.global)
				inst = this.runtime.createInstanceFromInit(initial_inst, null, true);
			else
			{
				this.initial_nonworld[k] = initial_inst;
				k++;
			}
		}
		this.initial_nonworld.length = k;
	};
	Layout.prototype.stopRunning = function ()
	{
;
		/*
		if (this.runtime.glwrap)
		{
			console.log("Estimated VRAM at layout end: " + this.runtime.glwrap.textureCount() + " textures, approx. " + Math.round(this.runtime.glwrap.estimateVRAM() / 1024) + " kb");
		}
		*/
		this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
		this.runtime.system.waits.length = 0;
		var i, leni, j, lenj;
		var layer_instances, inst, type;
		for (i = 0, leni = this.layers.length; i < leni; i++)
		{
			layer_instances = this.layers[i].instances;
			for (j = 0, lenj = layer_instances.length; j < lenj; j++)
			{
				inst = layer_instances[j];
				if (!inst.type.global)
				{
					if (this.runtime.typeHasPersistBehavior(inst.type))
						this.saveObjectToPersist(inst);
					this.runtime.DestroyInstance(inst);
				}
			}
			this.runtime.ClearDeathRow();
			layer_instances.length = 0;
			this.layers[i].zindices_stale = true;
		}
		for (i = 0, leni = this.runtime.types_by_index.length; i < leni; i++)
		{
			type = this.runtime.types_by_index[i];
			if (type.global || type.plugin.is_world || type.plugin.singleglobal || type.is_family)
				continue;
			for (j = 0, lenj = type.instances.length; j < lenj; j++)
				this.runtime.DestroyInstance(type.instances[j]);
			this.runtime.ClearDeathRow();
		}
	};
	Layout.prototype.draw = function (ctx)
	{
		var layout_canvas;
		var layout_ctx = ctx;
		var ctx_changed = false;
		var render_offscreen = !this.runtime.fullscreenScalingQuality;
		if (render_offscreen)
		{
			if (!this.runtime.layout_canvas)
			{
				this.runtime.layout_canvas = document.createElement("canvas");
				layout_canvas = this.runtime.layout_canvas;
				layout_canvas.width = this.runtime.draw_width;
				layout_canvas.height = this.runtime.draw_height;
				this.runtime.layout_ctx = layout_canvas.getContext("2d");
				ctx_changed = true;
			}
			layout_canvas = this.runtime.layout_canvas;
			layout_ctx = this.runtime.layout_ctx;
			if (layout_canvas.width !== this.runtime.draw_width)
			{
				layout_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layout_canvas.height !== this.runtime.draw_height)
			{
				layout_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layout_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layout_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
		}
		layout_ctx.globalAlpha = 1;
		layout_ctx.globalCompositeOperation = "source-over";
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			layout_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		var i, len, l;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.visible && l.opacity > 0 && l.blend_mode !== 11)
				l.draw(layout_ctx);
		}
		if (render_offscreen)
		{
			ctx.drawImage(layout_canvas, 0, 0, this.runtime.width, this.runtime.height);
		}
	};
	Layout.prototype.drawGL = function (glw)
	{
		var render_to_texture = (this.active_effect_types.length > 0 ||
								 this.runtime.uses_background_blending ||
								 !this.runtime.fullscreenScalingQuality);
		if (render_to_texture)
		{
			if (!this.runtime.layout_tex)
			{
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layout_tex.c2width !== this.runtime.draw_width || this.runtime.layout_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layout_tex);
			if (!this.runtime.fullscreenScalingQuality)
			{
				glw.setSize(this.runtime.draw_width, this.runtime.draw_height);
			}
		}
		else
		{
			if (this.runtime.layout_tex)
			{
				glw.setRenderingToTexture(null);
				glw.deleteTexture(this.runtime.layout_tex);
				this.runtime.layout_tex = null;
			}
		}
		if (this.runtime.alphaBackground && !this.hasOpaqueBottomLayer())
			glw.clear(0, 0, 0, 0);
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].visible && this.layers[i].opacity > 0)
				this.layers[i].drawGL(glw);
		}
		if (render_to_texture)
		{
			if (this.active_effect_types.length === 0 ||
				(this.active_effect_types.length === 1 && this.runtime.fullscreenScalingQuality))
			{
				if (this.active_effect_types.length === 1)
				{
					var etindex = this.active_effect_types[0].index;
					glw.switchProgram(this.active_effect_types[0].shaderindex);
					glw.setProgramParameters(null,								// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.scale,						// layerScale
											 this.angle,						// layerAngle
											 0.0, 0.0,							// viewOrigin
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(this.active_effect_types[0].shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
				}
				glw.setRenderingToTexture(null);				// to backbuffer
				glw.setOpacity(1);
				glw.setTexture(this.runtime.layout_tex);
				glw.setAlphaBlend();
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.width / 2;
				var halfh = this.runtime.height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.renderEffectChain(glw, null, null, null);
			}
		}
	};
	Layout.prototype.getRenderTarget = function()
	{
		return (this.active_effect_types.length > 0 ||
				this.runtime.uses_background_blending ||
				!this.runtime.fullscreenScalingQuality) ? this.runtime.layout_tex : null;
	};
	Layout.prototype.getMinLayerScale = function ()
	{
		var m = this.layers[0].getScale();
		var i, len, l;
		for (i = 1, len = this.layers.length; i < len; i++)
		{
			l = this.layers[i];
			if (l.parallaxX === 0 && l.parallaxY === 0)
				continue;
			if (l.getScale() < m)
				m = l.getScale();
		}
		return m;
	};
	Layout.prototype.scrollToX = function (x)
	{
		if (!this.unbounded_scrolling)
		{
			var widthBoundary = (this.runtime.draw_width * (1 / this.getMinLayerScale()) / 2);
			if (x > this.width - widthBoundary)
				x = this.width - widthBoundary;
			if (x < widthBoundary)
				x = widthBoundary;
		}
		if (this.scrollX !== x)
		{
			this.scrollX = x;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.scrollToY = function (y)
	{
		if (!this.unbounded_scrolling)
		{
			var heightBoundary = (this.runtime.draw_height * (1 / this.getMinLayerScale()) / 2);
			if (y > this.height - heightBoundary)
				y = this.height - heightBoundary;
			if (y < heightBoundary)
				y = heightBoundary;
		}
		if (this.scrollY !== y)
		{
			this.scrollY = y;
			this.runtime.redraw = true;
		}
	};
	Layout.prototype.boundScrolling = function ()
	{
		this.scrollToX(this.scrollX);
		this.scrollToY(this.scrollY);
	};
	Layout.prototype.renderEffectChain = function (glw, layer, inst, rendertarget)
	{
		var active_effect_types = inst ?
							inst.active_effect_types :
							layer ?
								layer.active_effect_types :
								this.active_effect_types;
		var layerScale = 1, layerAngle = 0, viewOriginLeft = 0, viewOriginTop = 0;
		if (inst)
		{
			layerScale = inst.layer.getScale();
			layerAngle = inst.layer.getAngle();
			viewOriginLeft = inst.layer.viewLeft;
			viewOriginTop = inst.layer.viewTop;
		}
		else if (layer)
		{
			layerScale = layer.getScale();
			layerAngle = layer.getAngle();
			viewOriginLeft = layer.viewLeft;
			viewOriginTop = layer.viewTop;
		}
		var fx_tex = this.runtime.fx_tex;
		var i, len, last, temp, fx_index = 0, other_fx_index = 1;
		var y, h;
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var halfw = windowWidth / 2;
		var halfh = windowHeight / 2;
		var rcTex = layer ? layer.rcTex : this.rcTex;
		var rcTex2 = layer ? layer.rcTex2 : this.rcTex2;
		var screenleft = 0, clearleft = 0;
		var screentop = 0, cleartop = 0;
		var screenright = windowWidth, clearright = windowWidth;
		var screenbottom = windowHeight, clearbottom = windowHeight;
		var boxExtendHorizontal = 0;
		var boxExtendVertical = 0;
		var inst_layer_angle = inst ? inst.layer.getAngle() : 0;
		if (inst)
		{
			for (i = 0, len = active_effect_types.length; i < len; i++)
			{
				boxExtendHorizontal += glw.getProgramBoxExtendHorizontal(active_effect_types[i].shaderindex);
				boxExtendVertical += glw.getProgramBoxExtendVertical(active_effect_types[i].shaderindex);
			}
			var bbox = inst.bbox;
			screenleft = layer.layerToCanvas(bbox.left, bbox.top, true, true);
			screentop = layer.layerToCanvas(bbox.left, bbox.top, false, true);
			screenright = layer.layerToCanvas(bbox.right, bbox.bottom, true, true);
			screenbottom = layer.layerToCanvas(bbox.right, bbox.bottom, false, true);
			if (inst_layer_angle !== 0)
			{
				var screentrx = layer.layerToCanvas(bbox.right, bbox.top, true, true);
				var screentry = layer.layerToCanvas(bbox.right, bbox.top, false, true);
				var screenblx = layer.layerToCanvas(bbox.left, bbox.bottom, true, true);
				var screenbly = layer.layerToCanvas(bbox.left, bbox.bottom, false, true);
				temp = Math.min(screenleft, screenright, screentrx, screenblx);
				screenright = Math.max(screenleft, screenright, screentrx, screenblx);
				screenleft = temp;
				temp = Math.min(screentop, screenbottom, screentry, screenbly);
				screenbottom = Math.max(screentop, screenbottom, screentry, screenbly);
				screentop = temp;
			}
			screenleft -= boxExtendHorizontal;
			screentop -= boxExtendVertical;
			screenright += boxExtendHorizontal;
			screenbottom += boxExtendVertical;
			rcTex2.left = screenleft / windowWidth;
			rcTex2.top = 1 - screentop / windowHeight;
			rcTex2.right = screenright / windowWidth;
			rcTex2.bottom = 1 - screenbottom / windowHeight;
			clearleft = screenleft = cr.floor(screenleft);
			cleartop = screentop = cr.floor(screentop);
			clearright = screenright = cr.ceil(screenright);
			clearbottom = screenbottom = cr.ceil(screenbottom);
			clearleft -= boxExtendHorizontal;
			cleartop -= boxExtendVertical;
			clearright += boxExtendHorizontal;
			clearbottom += boxExtendVertical;
			if (screenleft < 0)					screenleft = 0;
			if (screentop < 0)					screentop = 0;
			if (screenright > windowWidth)		screenright = windowWidth;
			if (screenbottom > windowHeight)	screenbottom = windowHeight;
			if (clearleft < 0)					clearleft = 0;
			if (cleartop < 0)					cleartop = 0;
			if (clearright > windowWidth)		clearright = windowWidth;
			if (clearbottom > windowHeight)		clearbottom = windowHeight;
			rcTex.left = screenleft / windowWidth;
			rcTex.top = 1 - screentop / windowHeight;
			rcTex.right = screenright / windowWidth;
			rcTex.bottom = 1 - screenbottom / windowHeight;
		}
		else
		{
			rcTex.left = rcTex2.left = 0;
			rcTex.top = rcTex2.top = 0;
			rcTex.right = rcTex2.right = 1;
			rcTex.bottom = rcTex2.bottom = 1;
		}
		var pre_draw = (inst && (((inst.angle || inst_layer_angle) && glw.programUsesDest(active_effect_types[0].shaderindex)) || boxExtendHorizontal !== 0 || boxExtendVertical !== 0 || inst.opacity !== 1 || inst.type.plugin.must_predraw)) || (layer && !inst && layer.opacity !== 1);
		glw.setAlphaBlend();
		if (pre_draw)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(0);
			glw.setRenderingToTexture(fx_tex[fx_index]);
			h = clearbottom - cleartop;
			y = (windowHeight - cleartop) - h;
			glw.clearRect(clearleft, y, clearright - clearleft, h);
			if (inst)
			{
				inst.drawGL(glw);
			}
			else
			{
				glw.setTexture(this.runtime.layer_tex);
				glw.setOpacity(layer.opacity);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			}
			rcTex2.left = rcTex2.top = 0;
			rcTex2.right = rcTex2.bottom = 1;
			if (inst)
			{
				temp = rcTex.top;
				rcTex.top = rcTex.bottom;
				rcTex.bottom = temp;
			}
			fx_index = 1;
			other_fx_index = 0;
		}
		glw.setOpacity(1);
		var last = active_effect_types.length - 1;
		var post_draw = glw.programUsesCrossSampling(active_effect_types[last].shaderindex) ||
						(!layer && !inst && !this.runtime.fullscreenScalingQuality);
		var etindex = 0;
		for (i = 0, len = active_effect_types.length; i < len; i++)
		{
			if (!fx_tex[fx_index])
			{
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			if (fx_tex[fx_index].c2width !== windowWidth || fx_tex[fx_index].c2height !== windowHeight)
			{
				glw.deleteTexture(fx_tex[fx_index]);
				fx_tex[fx_index] = glw.createEmptyTexture(windowWidth, windowHeight, this.runtime.linearSampling);
			}
			glw.switchProgram(active_effect_types[i].shaderindex);
			etindex = active_effect_types[i].index;
			if (glw.programIsAnimated(active_effect_types[i].shaderindex))
				this.runtime.redraw = true;
			if (i == 0 && !pre_draw)
			{
				glw.setRenderingToTexture(fx_tex[fx_index]);
				h = clearbottom - cleartop;
				y = (windowHeight - cleartop) - h;
				glw.clearRect(clearleft, y, clearright - clearleft, h);
				if (inst)
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / inst.width,				// pixelWidth
											 1.0 / inst.height,				// pixelHeight
											 rcTex2.left, rcTex2.top,		// destStart
											 rcTex2.right, rcTex2.bottom,	// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 inst.effect_params[etindex]);	// fx params
					inst.drawGL(glw);
				}
				else
				{
					glw.setProgramParameters(rendertarget,					// backTex
											 1.0 / windowWidth,				// pixelWidth
											 1.0 / windowHeight,			// pixelHeight
											 0.0, 0.0,						// destStart
											 1.0, 1.0,						// destEnd
											 layerScale,
											 layerAngle,
											 viewOriginLeft, viewOriginTop,
											 layer ?						// fx params
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
					glw.setTexture(layer ? this.runtime.layer_tex : this.runtime.layout_tex);
					glw.resetModelView();
					glw.translate(-halfw, -halfh);
					glw.updateModelView();
					glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				}
				rcTex2.left = rcTex2.top = 0;
				rcTex2.right = rcTex2.bottom = 1;
				if (inst && !post_draw)
				{
					temp = screenbottom;
					screenbottom = screentop;
					screentop = temp;
				}
			}
			else
			{
				glw.setProgramParameters(rendertarget,						// backTex
										 1.0 / windowWidth,					// pixelWidth
										 1.0 / windowHeight,				// pixelHeight
										 rcTex2.left, rcTex2.top,			// destStart
										 rcTex2.right, rcTex2.bottom,		// destEnd
										 layerScale,
										 layerAngle,
										 viewOriginLeft, viewOriginTop,
										 inst ?								// fx params
											inst.effect_params[etindex] :
											layer ?
												layer.effect_params[etindex] :
												this.effect_params[etindex]);
				glw.setTexture(null);
				if (i === last && !post_draw)
				{
					if (inst)
						glw.setBlend(inst.srcBlend, inst.destBlend);
					else if (layer)
						glw.setBlend(layer.srcBlend, layer.destBlend);
					glw.setRenderingToTexture(rendertarget);
				}
				else
				{
					glw.setRenderingToTexture(fx_tex[fx_index]);
					h = clearbottom - cleartop;
					y = (windowHeight - cleartop) - h;
					glw.clearRect(clearleft, y, clearright - clearleft, h);
				}
				glw.setTexture(fx_tex[other_fx_index]);
				glw.resetModelView();
				glw.translate(-halfw, -halfh);
				glw.updateModelView();
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
				if (i === last && !post_draw)
					glw.setTexture(null);
			}
			fx_index = (fx_index === 0 ? 1 : 0);
			other_fx_index = (fx_index === 0 ? 1 : 0);		// will be opposite to fx_index since it was just assigned
		}
		if (post_draw)
		{
			glw.switchProgram(0);
			if (inst)
				glw.setBlend(inst.srcBlend, inst.destBlend);
			else if (layer)
				glw.setBlend(layer.srcBlend, layer.destBlend);
			else
			{
				if (!this.runtime.fullscreenScalingQuality)
				{
					glw.setSize(this.runtime.width, this.runtime.height);
					halfw = this.runtime.width / 2;
					halfh = this.runtime.height / 2;
					screenleft = 0;
					screentop = 0;
					screenright = this.runtime.width;
					screenbottom = this.runtime.height;
				}
			}
			glw.setRenderingToTexture(rendertarget);
			glw.setTexture(fx_tex[other_fx_index]);
			glw.resetModelView();
			glw.translate(-halfw, -halfh);
			glw.updateModelView();
			if (inst && active_effect_types.length === 1 && !pre_draw)
				glw.quadTex(screenleft, screentop, screenright, screentop, screenright, screenbottom, screenleft, screenbottom, rcTex);
			else
				glw.quadTex(screenleft, screenbottom, screenright, screenbottom, screenright, screentop, screenleft, screentop, rcTex);
			glw.setTexture(null);
		}
	};
	Layout.prototype.getLayerBySid = function (sid_)
	{
		var i, len;
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			if (this.layers[i].sid === sid_)
				return this.layers[i];
		}
		return null;
	};
	Layout.prototype.saveToJSON = function ()
	{
		var i, len, layer, et;
		var o = {
			"sx": this.scrollX,
			"sy": this.scrollY,
			"s": this.scale,
			"a": this.angle,
			"w": this.width,
			"h": this.height,
			"fv": this.first_visit,			// added r127
			"persist": this.persist_data,
			"fx": [],
			"layers": {}
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		for (i = 0, len = this.layers.length; i < len; i++)
		{
			layer = this.layers[i];
			o["layers"][layer.sid.toString()] = layer.saveToJSON();
		}
		return o;
	};
	Layout.prototype.loadFromJSON = function (o)
	{
		var i, len, fx, p, layer;
		this.scrollX = o["sx"];
		this.scrollY = o["sy"];
		this.scale = o["s"];
		this.angle = o["a"];
		this.width = o["w"];
		this.height = o["h"];
		this.persist_data = o["persist"];
		if (typeof o["fv"] !== "undefined")
			this.first_visit = o["fv"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		var olayers = o["layers"];
		for (p in olayers)
		{
			if (olayers.hasOwnProperty(p))
			{
				layer = this.getLayerBySid(parseInt(p, 10));
				if (!layer)
					continue;		// must've gone missing
				layer.loadFromJSON(olayers[p]);
			}
		}
	};
	cr.layout = Layout;
	function Layer(layout, m)
	{
		this.layout = layout;
		this.runtime = layout.runtime;
		this.instances = [];        // running instances
		this.scale = 1.0;
		this.angle = 0;
		this.disableAngle = false;
		this.tmprect = new cr.rect(0, 0, 0, 0);
		this.tmpquad = new cr.quad();
		this.viewLeft = 0;
		this.viewRight = 0;
		this.viewTop = 0;
		this.viewBottom = 0;
		this.zindices_stale = false;
		this.name = m[0];
		this.index = m[1];
		this.sid = m[2];
		this.visible = m[3];		// initially visible
		this.background_color = m[4];
		this.transparent = m[5];
		this.parallaxX = m[6];
		this.parallaxY = m[7];
		this.opacity = m[8];
		this.forceOwnTexture = m[9];
		this.zoomRate = m[10];
		this.blend_mode = m[11];
		this.effect_fallback = m[12];
		this.compositeOp = "source-over";
		this.srcBlend = 0;
		this.destBlend = 0;
		this.render_offscreen = false;
		var im = m[13];
		var i, len;
		this.initial_instances = [];
		for (i = 0, len = im.length; i < len; i++)
		{
			var inst = im[i];
			var type = this.runtime.types_by_index[inst[1]];
;
			if (!type.default_instance)
			{
				type.default_instance = inst;
				type.default_layerindex = this.index;
			}
			this.initial_instances.push(inst);
			if (this.layout.initial_types.indexOf(type) === -1)
				this.layout.initial_types.push(type);
		}
		this.effect_types = [];
		this.active_effect_types = [];
		this.effect_params = [];
		for (i = 0, len = m[14].length; i < len; i++)
		{
			this.effect_types.push({
				id: m[14][i][0],
				name: m[14][i][1],
				shaderindex: -1,
				active: true,
				index: i
			});
			this.effect_params.push(m[14][i][2].slice(0));
		}
		this.updateActiveEffects();
		this.rcTex = new cr.rect(0, 0, 1, 1);
		this.rcTex2 = new cr.rect(0, 0, 1, 1);
	};
	Layer.prototype.updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.active)
				this.active_effect_types.push(et);
		}
	};
	Layer.prototype.getEffectByName = function (name_)
	{
		var i, len, et;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			if (et.name === name_)
				return et;
		}
		return null;
	};
	Layer.prototype.createInitialInstances = function ()
	{
		var i, k, len, inst, initial_inst, type, keep, hasPersistBehavior;
		for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++)
		{
			initial_inst = this.initial_instances[i];
			type = this.runtime.types_by_index[initial_inst[1]];
;
			hasPersistBehavior = this.runtime.typeHasPersistBehavior(type);
			keep = true;
			if (!hasPersistBehavior || this.layout.first_visit)
			{
				inst = this.runtime.createInstanceFromInit(initial_inst, this, true);
;
				created_instances.push(inst);
				if (inst.type.global)
					keep = false;
			}
			if (keep)
			{
				this.initial_instances[k] = this.initial_instances[i];
				k++;
			}
		}
		this.initial_instances.length = k;
		this.runtime.ClearDeathRow();		// flushes creation row so IIDs will be correct
		if (!this.runtime.glwrap && this.effect_types.length)	// no WebGL renderer and shaders used
			this.blend_mode = this.effect_fallback;				// use fallback blend mode
		this.compositeOp = cr.effectToCompositeOp(this.blend_mode);
		if (this.runtime.gl)
			cr.setGLBlend(this, this.blend_mode, this.runtime.gl);
	};
	Layer.prototype.updateZIndices = function ()
	{
		if (!this.zindices_stale)
			return;
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
;
;
			this.instances[i].zindex = i;
		}
		this.zindices_stale = false;
	};
	Layer.prototype.getScale = function (include_aspect)
	{
		return this.getNormalScale() * (this.runtime.fullscreenScalingQuality || include_aspect ? this.runtime.aspect_scale : 1);
	};
	Layer.prototype.getNormalScale = function ()
	{
		return ((this.scale * this.layout.scale) - 1) * this.zoomRate + 1;
	};
	Layer.prototype.getAngle = function ()
	{
		if (this.disableAngle)
			return 0;
		return cr.clamp_angle(this.layout.angle + this.angle);
	};
	Layer.prototype.draw = function (ctx)
	{
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.blend_mode !== 0);
		var layer_canvas = this.runtime.canvas;
		var layer_ctx = ctx;
		var ctx_changed = false;
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_canvas)
			{
				this.runtime.layer_canvas = document.createElement("canvas");
;
				layer_canvas = this.runtime.layer_canvas;
				layer_canvas.width = this.runtime.draw_width;
				layer_canvas.height = this.runtime.draw_height;
				this.runtime.layer_ctx = layer_canvas.getContext("2d");
;
				ctx_changed = true;
			}
			layer_canvas = this.runtime.layer_canvas;
			layer_ctx = this.runtime.layer_ctx;
			if (layer_canvas.width !== this.runtime.draw_width)
			{
				layer_canvas.width = this.runtime.draw_width;
				ctx_changed = true;
			}
			if (layer_canvas.height !== this.runtime.draw_height)
			{
				layer_canvas.height = this.runtime.draw_height;
				ctx_changed = true;
			}
			if (ctx_changed)
			{
				layer_ctx["webkitImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["mozImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["msImageSmoothingEnabled"] = this.runtime.linearSampling;
				layer_ctx["imageSmoothingEnabled"] = this.runtime.linearSampling;
			}
			if (this.transparent)
				layer_ctx.clearRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.globalAlpha = 1;
		layer_ctx.globalCompositeOperation = "source-over";
		if (!this.transparent)
		{
			layer_ctx.fillStyle = "rgb(" + this.background_color[0] + "," + this.background_color[1] + "," + this.background_color[2] + ")";
			layer_ctx.fillRect(0, 0, this.runtime.draw_width, this.runtime.draw_height);
		}
		layer_ctx.save();
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, layer_ctx);
		var myscale = this.getScale();
		layer_ctx.scale(myscale, myscale);
		layer_ctx.translate(-px, -py);
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			layer_ctx.globalCompositeOperation = inst.compositeOp;
			inst.draw(layer_ctx);
		}
		layer_ctx.restore();
		if (this.render_offscreen)
		{
			ctx.globalCompositeOperation = this.compositeOp;
			ctx.globalAlpha = this.opacity;
			ctx.drawImage(layer_canvas, 0, 0);
		}
	};
	Layer.prototype.rotateViewport = function (px, py, ctx)
	{
		var myscale = this.getScale();
		this.viewLeft = px;
		this.viewTop = py;
		this.viewRight = px + (this.runtime.draw_width * (1 / myscale));
		this.viewBottom = py + (this.runtime.draw_height * (1 / myscale));
		var myAngle = this.getAngle();
		if (myAngle !== 0)
		{
			if (ctx)
			{
				ctx.translate(this.runtime.draw_width / 2, this.runtime.draw_height / 2);
				ctx.rotate(-myAngle);
				ctx.translate(this.runtime.draw_width / -2, this.runtime.draw_height / -2);
			}
			this.tmprect.set(this.viewLeft, this.viewTop, this.viewRight, this.viewBottom);
			this.tmprect.offset((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
			this.tmpquad.set_from_rotated_rect(this.tmprect, myAngle);
			this.tmpquad.bounding_box(this.tmprect);
			this.tmprect.offset((this.viewLeft + this.viewRight) / 2, (this.viewTop + this.viewBottom) / 2);
			this.viewLeft = this.tmprect.left;
			this.viewTop = this.tmprect.top;
			this.viewRight = this.tmprect.right;
			this.viewBottom = this.tmprect.bottom;
		}
	}
	Layer.prototype.drawGL = function (glw)
	{
		var windowWidth = this.runtime.draw_width;
		var windowHeight = this.runtime.draw_height;
		var shaderindex = 0;
		var etindex = 0;
		this.render_offscreen = (this.forceOwnTexture || this.opacity !== 1.0 || this.active_effect_types.length > 0 || this.blend_mode !== 0);
		if (this.render_offscreen)
		{
			if (!this.runtime.layer_tex)
			{
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			if (this.runtime.layer_tex.c2width !== this.runtime.draw_width || this.runtime.layer_tex.c2height !== this.runtime.draw_height)
			{
				glw.deleteTexture(this.runtime.layer_tex);
				this.runtime.layer_tex = glw.createEmptyTexture(this.runtime.draw_width, this.runtime.draw_height, this.runtime.linearSampling);
			}
			glw.setRenderingToTexture(this.runtime.layer_tex);
			if (this.transparent)
				glw.clear(0, 0, 0, 0);
		}
		if (!this.transparent)
		{
			glw.clear(this.background_color[0] / 255, this.background_color[1] / 255, this.background_color[2] / 255, 1);
		}
		this.disableAngle = true;
		var px = this.canvasToLayer(0, 0, true, true);
		var py = this.canvasToLayer(0, 0, false, true);
		this.disableAngle = false;
		if (this.runtime.pixel_rounding)
		{
			px = (px + 0.5) | 0;
			py = (py + 0.5) | 0;
		}
		this.rotateViewport(px, py, null);
		var myscale = this.getScale();
		glw.resetModelView();
		glw.scale(myscale, myscale);
		glw.rotateZ(-this.getAngle());
		glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
		glw.updateModelView();
		var i, len, inst, bbox;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			if (!inst.visible || inst.width === 0 || inst.height === 0)
				continue;
			inst.update_bbox();
			bbox = inst.bbox;
			if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom)
				continue;
			if (inst.uses_shaders)
			{
				shaderindex = inst.active_effect_types[0].shaderindex;
				etindex = inst.active_effect_types[0].index;
				if (inst.active_effect_types.length === 1 && !glw.programUsesCrossSampling(shaderindex) &&
					!glw.programExtendsBox(shaderindex) && ((!inst.angle && !inst.layer.getAngle()) || !glw.programUsesDest(shaderindex)) &&
					inst.opacity === 1 && !inst.type.plugin.must_predraw)
				{
					glw.switchProgram(shaderindex);
					glw.setBlend(inst.srcBlend, inst.destBlend);
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
					var destStartX = 0, destStartY = 0, destEndX = 0, destEndY = 0;
					if (glw.programUsesDest(shaderindex))
					{
						var bbox = inst.bbox;
						var screenleft = this.layerToCanvas(bbox.left, bbox.top, true, true);
						var screentop = this.layerToCanvas(bbox.left, bbox.top, false, true);
						var screenright = this.layerToCanvas(bbox.right, bbox.bottom, true, true);
						var screenbottom = this.layerToCanvas(bbox.right, bbox.bottom, false, true);
						destStartX = screenleft / windowWidth;
						destStartY = 1 - screentop / windowHeight;
						destEndX = screenright / windowWidth;
						destEndY = 1 - screenbottom / windowHeight;
					}
					glw.setProgramParameters(this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget(), // backTex
											 1.0 / inst.width,			// pixelWidth
											 1.0 / inst.height,			// pixelHeight
											 destStartX, destStartY,
											 destEndX, destEndY,
											 this.getScale(),
											 this.getAngle(),
											 this.viewLeft, this.viewTop,
											 inst.effect_params[etindex]);
					inst.drawGL(glw);
				}
				else
				{
					this.layout.renderEffectChain(glw, this, inst, this.render_offscreen ? this.runtime.layer_tex : this.layout.getRenderTarget());
					glw.resetModelView();
					glw.scale(myscale, myscale);
					glw.rotateZ(-this.getAngle());
					glw.translate((this.viewLeft + this.viewRight) / -2, (this.viewTop + this.viewBottom) / -2);
					glw.updateModelView();
				}
			}
			else
			{
				glw.switchProgram(0);		// un-set any previously set shader
				glw.setBlend(inst.srcBlend, inst.destBlend);
				inst.drawGL(glw);
			}
		}
		if (this.render_offscreen)
		{
			shaderindex = this.active_effect_types.length ? this.active_effect_types[0].shaderindex : 0;
			etindex = this.active_effect_types.length ? this.active_effect_types[0].index : 0;
			if (this.active_effect_types.length === 0 || (this.active_effect_types.length === 1 &&
				!glw.programUsesCrossSampling(shaderindex) && this.opacity === 1))
			{
				if (this.active_effect_types.length === 1)
				{
					glw.switchProgram(shaderindex);
					glw.setProgramParameters(this.layout.getRenderTarget(),		// backTex
											 1.0 / this.runtime.draw_width,		// pixelWidth
											 1.0 / this.runtime.draw_height,	// pixelHeight
											 0.0, 0.0,							// destStart
											 1.0, 1.0,							// destEnd
											 this.getScale(),					// layerScale
											 this.getAngle(),
											 this.viewLeft, this.viewTop,
											 this.effect_params[etindex]);		// fx parameters
					if (glw.programIsAnimated(shaderindex))
						this.runtime.redraw = true;
				}
				else
					glw.switchProgram(0);
				glw.setRenderingToTexture(this.layout.getRenderTarget());
				glw.setOpacity(this.opacity);
				glw.setTexture(this.runtime.layer_tex);
				glw.setBlend(this.srcBlend, this.destBlend);
				glw.resetModelView();
				glw.updateModelView();
				var halfw = this.runtime.draw_width / 2;
				var halfh = this.runtime.draw_height / 2;
				glw.quad(-halfw, halfh, halfw, halfh, halfw, -halfh, -halfw, -halfh);
				glw.setTexture(null);
			}
			else
			{
				this.layout.renderEffectChain(glw, this, null, this.layout.getRenderTarget());
			}
		}
	};
	Layer.prototype.canvasToLayer = function (ptx, pty, getx, using_draw_area)
	{
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			ptx *= multiplier;
			pty *= multiplier;
		}
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x += ptx * invScale;
		y += pty * invScale;
		var a = this.getAngle();
		if (a !== 0)
		{
			x -= this.layout.scrollX;
			y -= this.layout.scrollY;
			var cosa = Math.cos(a);
			var sina = Math.sin(a);
			var x_temp = (x * cosa) - (y * sina);
			y = (y * cosa) + (x * sina);
			x = x_temp;
			x += this.layout.scrollX;
			y += this.layout.scrollY;
		}
		return getx ? x : y;
	};
	Layer.prototype.layerToCanvas = function (ptx, pty, getx, using_draw_area)
	{
		var a = this.getAngle();
		if (a !== 0)
		{
			ptx -= this.layout.scrollX;
			pty -= this.layout.scrollY;
			var cosa = Math.cos(-a);
			var sina = Math.sin(-a);
			var x_temp = (ptx * cosa) - (pty * sina);
			pty = (pty * cosa) + (ptx * sina);
			ptx = x_temp;
			ptx += this.layout.scrollX;
			pty += this.layout.scrollY;
		}
		var ox = this.runtime.parallax_x_origin;
		var oy = this.runtime.parallax_y_origin;
		var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
		var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
		var invScale = 1 / this.getScale(!using_draw_area);
		if (using_draw_area)
		{
			x -= (this.runtime.draw_width * invScale) / 2;
			y -= (this.runtime.draw_height * invScale) / 2;
		}
		else
		{
			x -= (this.runtime.width * invScale) / 2;
			y -= (this.runtime.height * invScale) / 2;
		}
		x = (ptx - x) / invScale;
		y = (pty - y) / invScale;
		var multiplier = this.runtime.devicePixelRatio;
		if (this.runtime.isRetina)
		{
			x /= multiplier;
			y /= multiplier;
		}
		return getx ? x : y;
	};
	Layer.prototype.rotatePt = function (x_, y_, getx)
	{
		if (this.getAngle() === 0)
			return getx ? x_ : y_;
		var nx = this.layerToCanvas(x_, y_, true);
		var ny = this.layerToCanvas(x_, y_, false);
		this.disableAngle = true;
		var px = this.canvasToLayer(nx, ny, true);
		var py = this.canvasToLayer(nx, ny, true);
		this.disableAngle = false;
		return getx ? px : py;
	};
	Layer.prototype.saveToJSON = function ()
	{
		var i, len, et;
		var o = {
			"s": this.scale,
			"a": this.angle,
			"vl": this.viewLeft,
			"vt": this.viewTop,
			"vr": this.viewRight,
			"vb": this.viewBottom,
			"v": this.visible,
			"bc": this.background_color,
			"t": this.transparent,
			"px": this.parallaxX,
			"py": this.parallaxY,
			"o": this.opacity,
			"zr": this.zoomRate,
			"fx": [],
			"instances": []
		};
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			et = this.effect_types[i];
			o["fx"].push({"name": et.name, "active": et.active, "params": this.effect_params[et.index] });
		}
		return o;
	};
	function sortInstanceByZIndex(a, b)
	{
		return a.zindex - b.zindex;
	};
	Layer.prototype.loadFromJSON = function (o)
	{
		var i, len, p, inst, fx;
		this.scale = o["s"];
		this.angle = o["a"];
		this.viewLeft = o["vl"];
		this.viewTop = o["vt"];
		this.viewRight = o["vr"];
		this.viewBottom = o["vb"];
		this.visible = o["v"];
		this.background_color = o["bc"];
		this.transparent = o["t"];
		this.parallaxX = o["px"];
		this.parallaxY = o["py"];
		this.opacity = o["o"];
		this.zoomRate = o["zr"];
		var ofx = o["fx"];
		for (i = 0, len = ofx.length; i < len; i++)
		{
			fx = this.getEffectByName(ofx[i]["name"]);
			if (!fx)
				continue;		// must've gone missing
			fx.active = ofx[i]["active"];
			this.effect_params[fx.index] = ofx[i]["params"];
		}
		this.updateActiveEffects();
		this.instances.sort(sortInstanceByZIndex);
		this.zindices_stale = true;
	};
	cr.layer = Layer;
}());
;
(function()
{
	var allUniqueSolModifiers = [];
	function testSolsMatch(arr1, arr2)
	{
		var i, len = arr1.length;
		switch (len) {
		case 0:
			return true;
		case 1:
			return arr1[0] === arr2[0];
		case 2:
			return arr1[0] === arr2[0] && arr1[1] === arr2[1];
		default:
			for (i = 0; i < len; i++)
			{
				if (arr1[i] !== arr2[i])
					return false;
			}
			return true;
		}
	};
	function solArraySorter(t1, t2)
	{
		return t1.index - t2.index;
	};
	function findMatchingSolModifier(arr)
	{
		var i, len, u, temp, subarr;
		if (arr.length === 2)
		{
			if (arr[0].index > arr[1].index)
			{
				temp = arr[0];
				arr[0] = arr[1];
				arr[1] = temp;
			}
		}
		else if (arr.length > 2)
			arr.sort(solArraySorter);		// so testSolsMatch compares in same order
		if (arr.length >= allUniqueSolModifiers.length)
			allUniqueSolModifiers.length = arr.length + 1;
		if (!allUniqueSolModifiers[arr.length])
			allUniqueSolModifiers[arr.length] = [];
		subarr = allUniqueSolModifiers[arr.length];
		for (i = 0, len = subarr.length; i < len; i++)
		{
			u = subarr[i];
			if (testSolsMatch(arr, u))
				return u;
		}
		subarr.push(arr);
		return arr;
	};
	function EventSheet(runtime, m)
	{
		this.runtime = runtime;
		this.triggers = {};
		this.fasttriggers = {};
        this.hasRun = false;
        this.includes = new cr.ObjectSet(); 	// all event sheets included by this sheet, at first-level indirection only
		this.deep_includes = [];				// all includes from this sheet recursively, in trigger order
		this.already_included_sheets = [];		// used while building deep_includes
		this.name = m[0];
		var em = m[1];		// events model
		this.events = [];       // triggers won't make it to this array
		var i, len;
		for (i = 0, len = em.length; i < len; i++)
			this.init_event(em[i], null, this.events);
	};
    EventSheet.prototype.toString = function ()
    {
        return this.name;
    };
	EventSheet.prototype.init_event = function (m, parent, nontriggers)
	{
		switch (m[0]) {
		case 0:	// event block
		{
			var block = new cr.eventblock(this, parent, m);
			cr.seal(block);
			if (block.orblock)
			{
				nontriggers.push(block);
				var i, len;
				for (i = 0, len = block.conditions.length; i < len; i++)
				{
					if (block.conditions[i].trigger)
						this.init_trigger(block, i);
				}
			}
			else
			{
				if (block.is_trigger())
					this.init_trigger(block, 0);
				else
					nontriggers.push(block);
			}
			break;
		}
		case 1: // variable
		{
			var v = new cr.eventvariable(this, parent, m);
			cr.seal(v);
			nontriggers.push(v);
			break;
		}
        case 2:	// include
        {
            var inc = new cr.eventinclude(this, parent, m);
			cr.seal(inc);
            nontriggers.push(inc);
			break;
        }
		default:
;
		}
	};
	EventSheet.prototype.postInit = function ()
	{
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			this.events[i].postInit(i < len - 1 && this.events[i + 1].is_else_block);
		}
	};
	EventSheet.prototype.updateDeepIncludes = function ()
	{
		this.deep_includes.length = 0;
		this.already_included_sheets.length = 0;
		this.addDeepIncludes(this);
		this.already_included_sheets.length = 0;
	};
	EventSheet.prototype.addDeepIncludes = function (root_sheet)
	{
		var i, len, inc, sheet;
		var deep_includes = root_sheet.deep_includes;
		var already_included_sheets = root_sheet.already_included_sheets;
		var arr = this.includes.valuesRef();
		for (i = 0, len = arr.length; i < len; ++i)
		{
			inc = arr[i];
			sheet = inc.include_sheet;
			if (!inc.isActive() || root_sheet === sheet || already_included_sheets.indexOf(sheet) > -1)
				continue;
			already_included_sheets.push(sheet);
			sheet.addDeepIncludes(root_sheet);
			deep_includes.push(sheet);
		}
	};
	EventSheet.prototype.run = function (from_include)
	{
		if (!this.runtime.resuming_breakpoint)
		{
			this.hasRun = true;
			if (!from_include)
				this.runtime.isRunningEvents = true;
		}
		var i, len;
		for (i = 0, len = this.events.length; i < len; i++)
		{
			var ev = this.events[i];
			ev.run();
				this.runtime.clearSol(ev.solModifiers);
				if (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length)
					this.runtime.ClearDeathRow();
		}
			if (!from_include)
				this.runtime.isRunningEvents = false;
	};
	function isPerformanceSensitiveTrigger(method)
	{
		if (cr.plugins_.Sprite && method === cr.plugins_.Sprite.prototype.cnds.OnFrameChanged)
		{
			return true;
		}
		return false;
	};
	EventSheet.prototype.init_trigger = function (trig, index)
	{
		if (!trig.orblock)
			this.runtime.triggers_to_postinit.push(trig);	// needs to be postInit'd later
		var i, len;
		var cnd = trig.conditions[index];
		var type_name;
		if (cnd.type)
			type_name = cnd.type.name;
		else
			type_name = "system";
		var fasttrigger = cnd.fasttrigger;
		var triggers = (fasttrigger ? this.fasttriggers : this.triggers);
		if (!triggers[type_name])
			triggers[type_name] = [];
		var obj_entry = triggers[type_name];
		var method = cnd.func;
		if (fasttrigger)
		{
			if (!cnd.parameters.length)				// no parameters
				return;
			var firstparam = cnd.parameters[0];
			if (firstparam.type !== 1 ||			// not a string param
				firstparam.expression.type !== 2)	// not a string literal node
			{
				return;
			}
			var fastevs;
			var firstvalue = firstparam.expression.value.toLowerCase();
			var i, len;
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					fastevs = obj_entry[i].evs;
					if (!fastevs[firstvalue])
						fastevs[firstvalue] = [[trig, index]];
					else
						fastevs[firstvalue].push([trig, index]);
					return;
				}
			}
			fastevs = {};
			fastevs[firstvalue] = [[trig, index]];
			obj_entry.push({ method: method, evs: fastevs });
		}
		else
		{
			for (i = 0, len = obj_entry.length; i < len; i++)
			{
				if (obj_entry[i].method == method)
				{
					obj_entry[i].evs.push([trig, index]);
					return;
				}
			}
			if (isPerformanceSensitiveTrigger(method))
				obj_entry.unshift({ method: method, evs: [[trig, index]]});
			else
				obj_entry.push({ method: method, evs: [[trig, index]]});
		}
	};
	cr.eventsheet = EventSheet;
	function Selection(type)
	{
		this.type = type;
		this.instances = [];        // subset of picked instances
		this.else_instances = [];	// subset of unpicked instances
		this.select_all = true;
	};
	Selection.prototype.hasObjects = function ()
	{
		if (this.select_all)
			return this.type.instances.length;
		else
			return this.instances.length;
	};
	Selection.prototype.getObjects = function ()
	{
		if (this.select_all)
			return this.type.instances;
		else
			return this.instances;
	};
	/*
	Selection.prototype.ensure_picked = function (inst, skip_siblings)
	{
		var i, len;
		var orblock = inst.runtime.getCurrentEventStack().current_event.orblock;
		if (this.select_all)
		{
			this.select_all = false;
			if (orblock)
			{
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				cr.arrayFindRemove(this.else_instances, inst);
			}
			this.instances.length = 1;
			this.instances[0] = inst;
		}
		else
		{
			if (orblock)
			{
				i = this.else_instances.indexOf(inst);
				if (i !== -1)
				{
					this.instances.push(this.else_instances[i]);
					this.else_instances.splice(i, 1);
				}
			}
			else
			{
				if (this.instances.indexOf(inst) === -1)
					this.instances.push(inst);
			}
		}
		if (!skip_siblings)
		{
		}
	};
	*/
	Selection.prototype.pick_one = function (inst)
	{
		if (!inst)
			return;
		if (inst.runtime.getCurrentEventStack().current_event.orblock)
		{
			if (this.select_all)
			{
				this.instances.length = 0;
				cr.shallowAssignArray(this.else_instances, inst.type.instances);
				this.select_all = false;
			}
			var i = this.else_instances.indexOf(inst);
			if (i !== -1)
			{
				this.instances.push(this.else_instances[i]);
				this.else_instances.splice(i, 1);
			}
		}
		else
		{
			this.select_all = false;
			this.instances.length = 1;
			this.instances[0] = inst;
		}
	};
	cr.selection = Selection;
	function EventBlock(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.solModifiersIncludingParents = [];
		this.solWriterAfterCnds = false;	// block does not change SOL after running its conditions
		this.group = false;					// is group of events
		this.initially_activated = false;	// if a group, is active on startup
		this.toplevelevent = false;			// is an event block parented only by a top-level group
		this.toplevelgroup = false;			// is parented only by other groups or is top-level (i.e. not in a subevent)
		this.has_else_block = false;		// is followed by else
;
		this.conditions = [];
		this.actions = [];
		this.subevents = [];
		this.group_name = "";
		this.group = false;
		this.initially_activated = false;
		this.group_active = false;
		this.contained_includes = null;
        if (m[1])
        {
			this.group_name = m[1][1].toLowerCase();
			this.group = true;
			this.initially_activated = !!m[1][0];
			this.contained_includes = [];
			this.group_active = this.initially_activated;
			this.runtime.allGroups.push(this);
            this.runtime.groups_by_name[this.group_name] = this;
        }
		this.orblock = m[2];
		this.sid = m[4];
		if (!this.group)
			this.runtime.blocksBySid[this.sid.toString()] = this;
		var i, len;
		var cm = m[5];
		for (i = 0, len = cm.length; i < len; i++)
		{
			var cnd = new cr.condition(this, cm[i]);
			cnd.index = i;
			cr.seal(cnd);
			this.conditions.push(cnd);
			/*
			if (cnd.is_logical())
				this.is_logical = true;
			if (cnd.type && !cnd.type.plugin.singleglobal && this.cndReferences.indexOf(cnd.type) === -1)
				this.cndReferences.push(cnd.type);
			*/
			this.addSolModifier(cnd.type);
		}
		var am = m[6];
		for (i = 0, len = am.length; i < len; i++)
		{
			var act = new cr.action(this, am[i]);
			act.index = i;
			cr.seal(act);
			this.actions.push(act);
		}
		if (m.length === 8)
		{
			var em = m[7];
			for (i = 0, len = em.length; i < len; i++)
				this.sheet.init_event(em[i], this, this.subevents);
		}
		this.is_else_block = false;
		if (this.conditions.length)
		{
			this.is_else_block = (this.conditions[0].type == null && this.conditions[0].func == cr.system_object.prototype.cnds.Else);
		}
	};
	window["_c2hh_"] = "106FC8FAA71857530F21FF84BC16F83AFB53D46C";
	EventBlock.prototype.postInit = function (hasElse/*, prevBlock_*/)
	{
		var i, len;
		var p = this.parent;
		if (this.group)
		{
			this.toplevelgroup = true;
			while (p)
			{
				if (!p.group)
				{
					this.toplevelgroup = false;
					break;
				}
				p = p.parent;
			}
		}
		this.toplevelevent = !this.is_trigger() && (!this.parent || (this.parent.group && this.parent.toplevelgroup));
		this.has_else_block = !!hasElse;
		this.solModifiersIncludingParents = this.solModifiers.slice(0);
		p = this.parent;
		while (p)
		{
			for (i = 0, len = p.solModifiers.length; i < len; i++)
				this.addParentSolModifier(p.solModifiers[i]);
			p = p.parent;
		}
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		this.solModifiersIncludingParents = findMatchingSolModifier(this.solModifiersIncludingParents);
		var i, len/*, s*/;
		for (i = 0, len = this.conditions.length; i < len; i++)
			this.conditions[i].postInit();
		for (i = 0, len = this.actions.length; i < len; i++)
			this.actions[i].postInit();
		for (i = 0, len = this.subevents.length; i < len; i++)
		{
			this.subevents[i].postInit(i < len - 1 && this.subevents[i + 1].is_else_block);
		}
		/*
		if (this.is_else_block && this.prev_block)
		{
			for (i = 0, len = this.prev_block.solModifiers.length; i < len; i++)
			{
				s = this.prev_block.solModifiers[i];
				if (this.solModifiers.indexOf(s) === -1)
					this.solModifiers.push(s);
			}
		}
		*/
	};
	EventBlock.prototype.setGroupActive = function (a)
	{
		if (this.group_active === !!a)
			return;		// same state
		this.group_active = !!a;
		var i, len;
		for (i = 0, len = this.contained_includes.length; i < len; ++i)
		{
			this.contained_includes[i].updateActive();
		}
		if (len > 0 && this.runtime.running_layout.event_sheet)
			this.runtime.running_layout.event_sheet.updateDeepIncludes();
	};
	function addSolModifierToList(type, arr)
	{
		var i, len, t;
		if (!type)
			return;
		if (arr.indexOf(type) === -1)
			arr.push(type);
		if (type.is_contained)
		{
			for (i = 0, len = type.container.length; i < len; i++)
			{
				t = type.container[i];
				if (type === t)
					continue;		// already handled
				if (arr.indexOf(t) === -1)
					arr.push(t);
			}
		}
	};
	EventBlock.prototype.addSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiers);
	};
	EventBlock.prototype.addParentSolModifier = function (type)
	{
		addSolModifierToList(type, this.solModifiersIncludingParents);
	};
	EventBlock.prototype.setSolWriterAfterCnds = function ()
	{
		this.solWriterAfterCnds = true;
		if (this.parent)
			this.parent.setSolWriterAfterCnds();
	};
	EventBlock.prototype.is_trigger = function ()
	{
		if (!this.conditions.length)    // no conditions
			return false;
		else
			return this.conditions[0].trigger;
	};
	EventBlock.prototype.run = function ()
	{
		var i, len, any_true = false, cnd_result;
		var runtime = this.runtime;
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var conditions = this.conditions;
			if (!this.is_else_block)
				evinfo.else_branch_ran = false;
		if (this.orblock)
		{
			if (conditions.length === 0)
				any_true = true;		// be sure to run if empty block
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (conditions[evinfo.cndindex].trigger)		// skip triggers when running OR block
					continue;
				cnd_result = conditions[evinfo.cndindex].run();
				if (cnd_result)			// make sure all conditions run and run if any were true
					any_true = true;
			}
			evinfo.last_event_true = any_true;
			if (any_true)
				this.run_actions_and_subevents();
		}
		else
		{
				evinfo.cndindex = 0
			for (len = conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				cnd_result = conditions[evinfo.cndindex].run();
				if (!cnd_result)    // condition failed
				{
					evinfo.last_event_true = false;
					if (this.toplevelevent && (!runtime.deathRow.isEmpty() || runtime.createRow.length))
						runtime.ClearDeathRow();
					return;		// bail out now
				}
			}
			evinfo.last_event_true = true;
			this.run_actions_and_subevents();
		}
		this.end_run(evinfo);
	};
	EventBlock.prototype.end_run = function (evinfo)
	{
		if (evinfo.last_event_true && this.has_else_block)
			evinfo.else_branch_ran = true;
		if (this.toplevelevent && (!this.runtime.deathRow.isEmpty() || this.runtime.createRow.length))
			this.runtime.ClearDeathRow();
	};
	EventBlock.prototype.run_orblocktrigger = function (index)
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		if (this.conditions[index].run())
		{
			this.run_actions_and_subevents();
			this.runtime.getCurrentEventStack().last_event_true = true;
		}
	};
	EventBlock.prototype.run_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.resume_actions_and_subevents = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		var len;
		for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++)
		{
			if (this.actions[evinfo.actindex].run())
				return;
		}
		this.run_subevents();
	};
	EventBlock.prototype.run_subevents = function ()
	{
		if (!this.subevents.length)
			return;
		var i, len, subev, pushpop/*, skipped_pop = false, pop_modifiers = null*/;
		var last = this.subevents.length - 1;
			this.runtime.pushEventStack(this);
		if (this.solWriterAfterCnds)
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				subev = this.subevents[i];
					pushpop = (!this.toplevelgroup || (!this.group && i < last));
					if (pushpop)
						this.runtime.pushCopySol(subev.solModifiers);
				subev.run();
					if (pushpop)
						this.runtime.popSol(subev.solModifiers);
					else
						this.runtime.clearSol(subev.solModifiers);
			}
		}
		else
		{
			for (i = 0, len = this.subevents.length; i < len; i++)
			{
				this.subevents[i].run();
			}
		}
			this.runtime.popEventStack();
	};
	EventBlock.prototype.run_pretrigger = function ()
	{
		var evinfo = this.runtime.getCurrentEventStack();
		evinfo.current_event = this;
		var any_true = false;
		var i, len;
		for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
		{
;
			if (this.conditions[evinfo.cndindex].run())
				any_true = true;
			else if (!this.orblock)			// condition failed (let OR blocks run all conditions anyway)
				return false;               // bail out
		}
		return this.orblock ? any_true : true;
	};
	EventBlock.prototype.retrigger = function ()
	{
		this.runtime.execcount++;
		var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
		var len;
		var evinfo = this.runtime.pushEventStack(this);
		if (!this.orblock)
		{
			for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++)
			{
				if (!this.conditions[evinfo.cndindex].run())    // condition failed
				{
					this.runtime.popEventStack();               // moving up level of recursion
					return false;                               // bail out
				}
			}
		}
		this.run_actions_and_subevents();
		this.runtime.popEventStack();
		return true;		// ran an iteration
	};
	EventBlock.prototype.isFirstConditionOfType = function (cnd)
	{
		var cndindex = cnd.index;
		if (cndindex === 0)
			return true;
		--cndindex;
		for ( ; cndindex >= 0; --cndindex)
		{
			if (this.conditions[cndindex].type === cnd.type)
				return false;
		}
		return true;
	};
	cr.eventblock = EventBlock;
	function Condition(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = m[1];
;
		this.trigger = (m[3] > 0);
		this.fasttrigger = (m[3] === 2);
		this.looping = m[4];
		this.inverted = m[5];
		this.isstatic = m[6];
		this.sid = m[7];
		this.runtime.cndsBySid[this.sid.toString()] = this;
		if (m[0] === -1)		// system object
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			if (this.isstatic)
				this.run = this.run_static;
			else
				this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
			if (this.block.parent)
				this.block.parent.setSolWriterAfterCnds();
		}
		if (this.fasttrigger)
			this.run = this.run_true;
		if (m.length === 10)
		{
			var i, len;
			var em = m[9];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Condition.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	/*
	Condition.prototype.is_logical = function ()
	{
		return !this.type || this.type.plugin.singleglobal;
	};
	*/
	Condition.prototype.run_true = function ()
	{
		return true;
	};
	Condition.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
	};
	Condition.prototype.run_static = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		var ret = this.func.apply(this.behaviortype ? this.behaviortype : this.type, this.results);
		this.type.applySolToContainer();
		return ret;
	};
	Condition.prototype.run_object = function ()
	{
		var i, j, k, leni, lenj, p, ret, met, inst, s, sol2;
		var type = this.type;
		var sol = type.getCurrentSol();
		var is_orblock = this.block.orblock && !this.trigger;		// triggers in OR blocks need to work normally
		var offset = 0;
		var is_contained = type.is_contained;
		var is_family = type.is_family;
		var family_index = type.family_index;
		var beh_index = this.beh_index;
		var is_beh = (beh_index > -1);
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var inverted = this.inverted;
		var func = this.func;
		var arr, container;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		if (sol.select_all) {
			sol.instances.length = 0;       // clear contents
			sol.else_instances.length = 0;
			arr = type.instances;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				met = cr.xor(ret, inverted);
				if (met)
					sol.instances.push(inst);
				else if (is_orblock)					// in OR blocks, keep the instances not meeting the condition for subsequent testing
					sol.else_instances.push(inst);
			}
			if (type.finish)
				type.finish(true);
			sol.select_all = false;
			type.applySolToContainer();
			return sol.hasObjects();
		}
		else {
			k = 0;
			var using_else_instances = (is_orblock && !this.block.isFirstConditionOfType(this));
			arr = (using_else_instances ? sol.else_instances : sol.instances);
			var any_true = false;
			for (i = 0, leni = arr.length; i < leni; ++i)
			{
				inst = arr[i];
;
				if (params_vary)
				{
					for (j = 0, lenj = parameters.length; j < lenj; ++j)
					{
						p = parameters[j];
						if (p.variesPerInstance)
							results[j] = p.get(i);        // default SOL index is current object
					}
				}
				if (is_beh)
				{
					offset = 0;
					if (is_family)
					{
						offset = inst.type.family_beh_map[family_index];
					}
					ret = func.apply(inst.behavior_insts[beh_index + offset], results);
				}
				else
					ret = func.apply(inst, results);
				if (cr.xor(ret, inverted))
				{
					any_true = true;
					if (using_else_instances)
					{
						sol.instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances.push(s);
							}
						}
					}
					else
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().instances[k] = s;
							}
						}
						k++;
					}
				}
				else
				{
					if (using_else_instances)
					{
						arr[k] = inst;
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances[k] = s;
							}
						}
						k++;
					}
					else if (is_orblock)
					{
						sol.else_instances.push(inst);
						if (is_contained)
						{
							for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
							{
								s = inst.siblings[j];
								s.type.getCurrentSol().else_instances.push(s);
							}
						}
					}
				}
			}
			arr.length = k;
			if (is_contained)
			{
				container = type.container;
				for (i = 0, leni = container.length; i < leni; i++)
				{
					sol2 = container[i].getCurrentSol();
					if (using_else_instances)
						sol2.else_instances.length = k;
					else
						sol2.instances.length = k;
				}
			}
			var pick_in_finish = any_true;		// don't pick in finish() if we're only doing the logic test below
			if (using_else_instances && !any_true)
			{
				for (i = 0, leni = sol.instances.length; i < leni; i++)
				{
					inst = sol.instances[i];
					if (params_vary)
					{
						for (j = 0, lenj = parameters.length; j < lenj; j++)
						{
							p = parameters[j];
							if (p.variesPerInstance)
								results[j] = p.get(i);
						}
					}
					if (is_beh)
						ret = func.apply(inst.behavior_insts[beh_index], results);
					else
						ret = func.apply(inst, results);
					if (cr.xor(ret, inverted))
					{
						any_true = true;
						break;		// got our flag, don't need to test any more
					}
				}
			}
			if (type.finish)
				type.finish(pick_in_finish || is_orblock);
			return is_orblock ? any_true : sol.hasObjects();
		}
	};
	cr.condition = Condition;
	function Action(block, m)
	{
		this.block = block;
		this.sheet = block.sheet;
		this.runtime = block.runtime;
		this.parameters = [];
		this.results = [];
		this.extra = {};		// for plugins to stow away some custom info
		this.index = -1;
		this.anyParamVariesPerInstance = false;
		this.func = m[1];
;
		if (m[0] === -1)	// system
		{
			this.type = null;
			this.run = this.run_system;
			this.behaviortype = null;
			this.beh_index = -1;
		}
		else
		{
			this.type = this.runtime.types_by_index[m[0]];
;
			this.run = this.run_object;
			if (m[2])
			{
				this.behaviortype = this.type.getBehaviorByName(m[2]);
;
				this.beh_index = this.type.getBehaviorIndexByName(m[2]);
;
			}
			else
			{
				this.behaviortype = null;
				this.beh_index = -1;
			}
		}
		this.sid = m[3];
		this.runtime.actsBySid[this.sid.toString()] = this;
		if (m.length === 6)
		{
			var i, len;
			var em = m[5];
			for (i = 0, len = em.length; i < len; i++)
			{
				var param = new cr.parameter(this, em[i]);
				cr.seal(param);
				this.parameters.push(param);
			}
			this.results.length = em.length;
		}
	};
	Action.prototype.postInit = function ()
	{
		var i, len, p;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			p = this.parameters[i];
			p.postInit();
			if (p.variesPerInstance)
				this.anyParamVariesPerInstance = true;
		}
	};
	Action.prototype.run_system = function ()
	{
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
			this.results[i] = this.parameters[i].get();
		return this.func.apply(this.runtime.system, this.results);
	};
	Action.prototype.run_object = function ()
	{
		var instances = this.type.getCurrentSol().getObjects();
		var is_family = this.type.is_family;
		var family_index = this.type.family_index;
		var beh_index = this.beh_index;
		var is_beh = (beh_index > -1);
		var params_vary = this.anyParamVariesPerInstance;
		var parameters = this.parameters;
		var results = this.results;
		var func = this.func;
		var i, j, leni, lenj, p, inst, offset;
		if (params_vary)
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
			{
				p = parameters[j];
				if (!p.variesPerInstance)
					results[j] = p.get(0);
			}
		}
		else
		{
			for (j = 0, lenj = parameters.length; j < lenj; ++j)
				results[j] = parameters[j].get(0);
		}
		for (i = 0, leni = instances.length; i < leni; ++i)
		{
			inst = instances[i];
			if (params_vary)
			{
				for (j = 0, lenj = parameters.length; j < lenj; ++j)
				{
					p = parameters[j];
					if (p.variesPerInstance)
						results[j] = p.get(i);    // pass i to use as default SOL index
				}
			}
			if (is_beh)
			{
				offset = 0;
				if (is_family)
				{
					offset = inst.type.family_beh_map[family_index];
				}
				func.apply(inst.behavior_insts[beh_index + offset], results);
			}
			else
				func.apply(inst, results);
		}
		return false;
	};
	cr.action = Action;
	var tempValues = [];
	var tempValuesPtr = -1;
	function Parameter(owner, m)
	{
		this.owner = owner;
		this.block = owner.block;
		this.sheet = owner.sheet;
		this.runtime = owner.runtime;
		this.type = m[0];
		this.expression = null;
		this.solindex = 0;
		this.get = null;
		this.combosel = 0;
		this.layout = null;
		this.key = 0;
		this.object = null;
		this.index = 0;
		this.varname = null;
		this.eventvar = null;
		this.fileinfo = null;
		this.subparams = null;
		this.variadicret = null;
		this.subparams = null;
		this.variadicret = null;
		this.variesPerInstance = false;
		var i, len, param;
		switch (m[0])
		{
			case 0:		// number
			case 7:		// any
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp;
				break;
			case 1:		// string
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_exp_str;
				break;
			case 5:		// layer
				this.expression = new cr.expNode(this, m[1]);
				this.solindex = 0;
				this.get = this.get_layer;
				break;
			case 3:		// combo
			case 8:		// cmp
				this.combosel = m[1];
				this.get = this.get_combosel;
				break;
			case 6:		// layout
				this.layout = this.runtime.layouts[m[1]];
;
				this.get = this.get_layout;
				break;
			case 9:		// keyb
				this.key = m[1];
				this.get = this.get_key;
				break;
			case 4:		// object
				this.object = this.runtime.types_by_index[m[1]];
;
				this.get = this.get_object;
				this.block.addSolModifier(this.object);
				if (this.owner instanceof cr.action)
					this.block.setSolWriterAfterCnds();
				else if (this.block.parent)
					this.block.parent.setSolWriterAfterCnds();
				break;
			case 10:	// instvar
				this.index = m[1];
				if (owner.type.is_family)
				{
					this.get = this.get_familyvar;
					this.variesPerInstance = true;
				}
				else
					this.get = this.get_instvar;
				break;
			case 11:	// eventvar
				this.varname = m[1];
				this.eventvar = null;
				this.get = this.get_eventvar;
				break;
			case 2:		// audiofile	["name", ismusic]
			case 12:	// fileinfo		"name"
				this.fileinfo = m[1];
				this.get = this.get_audiofile;
				break;
			case 13:	// variadic
				this.get = this.get_variadic;
				this.subparams = [];
				this.variadicret = [];
				for (i = 1, len = m.length; i < len; i++)
				{
					param = new cr.parameter(this.owner, m[i]);
					cr.seal(param);
					this.subparams.push(param);
					this.variadicret.push(0);
				}
				break;
			default:
;
		}
	};
	Parameter.prototype.postInit = function ()
	{
		var i, len;
		if (this.type === 11)		// eventvar
		{
			this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);
;
		}
		else if (this.type === 13)	// variadic, postInit all sub-params
		{
			for (i = 0, len = this.subparams.length; i < len; i++)
				this.subparams[i].postInit();
		}
		if (this.expression)
			this.expression.postInit();
	};
	Parameter.prototype.maybeVaryForType = function (t)
	{
		if (this.variesPerInstance)
			return;				// already varies per instance, no need to check again
		if (!t)
			return;				// never vary for system type
		if (!t.plugin.singleglobal)
		{
			this.variesPerInstance = true;
			return;
		}
	};
	Parameter.prototype.setVaries = function ()
	{
		this.variesPerInstance = true;
	};
	Parameter.prototype.pushTempValue = function ()
	{
		tempValuesPtr++;
		if (tempValues.length === tempValuesPtr)
			tempValues.push(new cr.expvalue());
		return tempValues[tempValuesPtr];
	};
	Parameter.prototype.popTempValue = function ()
	{
		tempValuesPtr--;
	};
	Parameter.prototype.get_exp = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		return temp.data;      			// return actual JS value, not expvalue
	};
	Parameter.prototype.get_exp_str = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (cr.is_string(temp.data))
			return temp.data;
		else
			return "";
	};
	Parameter.prototype.get_object = function ()
	{
		return this.object;
	};
	Parameter.prototype.get_combosel = function ()
	{
		return this.combosel;
	};
	Parameter.prototype.get_layer = function (solindex)
	{
		this.solindex = solindex || 0;   // default SOL index to use
		var temp = this.pushTempValue();
		this.expression.get(temp);
		this.popTempValue();
		if (temp.is_number())
			return this.runtime.getLayerByNumber(temp.data);
		else
			return this.runtime.getLayerByName(temp.data);
	}
	Parameter.prototype.get_layout = function ()
	{
		return this.layout;
	};
	Parameter.prototype.get_key = function ()
	{
		return this.key;
	};
	Parameter.prototype.get_instvar = function ()
	{
		return this.index;
	};
	Parameter.prototype.get_familyvar = function (solindex_)
	{
		var solindex = solindex_ || 0;
		var familytype = this.owner.type;
		var realtype = null;
		var sol = familytype.getCurrentSol();
		var objs = sol.getObjects();
		if (objs.length)
			realtype = objs[solindex % objs.length].type;
		else if (sol.else_instances.length)
			realtype = sol.else_instances[solindex % sol.else_instances.length].type;
		else if (familytype.instances.length)
			realtype = familytype.instances[solindex % familytype.instances.length].type;
		else
			return 0;
		return this.index + realtype.family_var_map[familytype.family_index];
	};
	Parameter.prototype.get_eventvar = function ()
	{
		return this.eventvar;
	};
	Parameter.prototype.get_audiofile = function ()
	{
		return this.fileinfo;
	};
	Parameter.prototype.get_variadic = function ()
	{
		var i, len;
		for (i = 0, len = this.subparams.length; i < len; i++)
		{
			this.variadicret[i] = this.subparams[i].get();
		}
		return this.variadicret;
	};
	cr.parameter = Parameter;
	function EventVariable(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.name = m[1];
		this.vartype = m[2];
		this.initial = m[3];
		this.is_static = !!m[4];
		this.is_constant = !!m[5];
		this.sid = m[6];
		this.runtime.varsBySid[this.sid.toString()] = this;
		this.data = this.initial;	// note: also stored in event stack frame for local nonstatic nonconst vars
		if (this.parent)			// local var
		{
			if (this.is_static || this.is_constant)
				this.localIndex = -1;
			else
				this.localIndex = this.runtime.stackLocalCount++;
			this.runtime.all_local_vars.push(this);
		}
		else						// global var
		{
			this.localIndex = -1;
			this.runtime.all_global_vars.push(this);
		}
	};
	EventVariable.prototype.postInit = function ()
	{
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
	};
	EventVariable.prototype.setValue = function (x)
	{
;
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs)
			this.data = x;
		else	// local nonstatic variable: use event stack to keep value at this level of recursion
		{
			if (this.localIndex >= lvs.length)
				lvs.length = this.localIndex + 1;
			lvs[this.localIndex] = x;
		}
	};
	EventVariable.prototype.getValue = function ()
	{
		var lvs = this.runtime.getCurrentLocalVarStack();
		if (!this.parent || this.is_static || !lvs || this.is_constant)
			return this.data;
		else	// local nonstatic variable
		{
			if (this.localIndex >= lvs.length)
			{
;
				return this.initial;
			}
			if (typeof lvs[this.localIndex] === "undefined")
			{
;
				return this.initial;
			}
			return lvs[this.localIndex];
		}
	};
	EventVariable.prototype.run = function ()
	{
			if (this.parent && !this.is_static && !this.is_constant)
				this.setValue(this.initial);
	};
	cr.eventvariable = EventVariable;
	function EventInclude(sheet, parent, m)
	{
		this.sheet = sheet;
		this.parent = parent;
		this.runtime = sheet.runtime;
		this.solModifiers = [];
		this.include_sheet = null;		// determined in postInit
		this.include_sheet_name = m[1];
		this.active = true;
	};
	EventInclude.prototype.toString = function ()
	{
		return "include:" + this.include_sheet.toString();
	};
	EventInclude.prototype.postInit = function ()
	{
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];
;
;
        this.sheet.includes.add(this);
		this.solModifiers = findMatchingSolModifier(this.solModifiers);
		var p = this.parent;
		while (p)
		{
			if (p.group)
				p.contained_includes.push(this);
			p = p.parent;
		}
		this.updateActive();
	};
	EventInclude.prototype.run = function ()
	{
			if (this.parent)
				this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun)
            this.include_sheet.run(true);			// from include
			if (this.parent)
				this.runtime.popSol(this.runtime.types_by_index);
	};
	EventInclude.prototype.updateActive = function ()
	{
		var p = this.parent;
		while (p)
		{
			if (p.group && !p.group_active)
			{
				this.active = false;
				return;
			}
			p = p.parent;
		}
		this.active = true;
	};
	EventInclude.prototype.isActive = function ()
	{
		return this.active;
	};
	cr.eventinclude = EventInclude;
	function EventStackFrame()
	{
		this.temp_parents_arr = [];
		this.reset(null);
		cr.seal(this);
	};
	EventStackFrame.prototype.reset = function (cur_event)
	{
		this.current_event = cur_event;
		this.cndindex = 0;
		this.actindex = 0;
		this.temp_parents_arr.length = 0;
		this.last_event_true = false;
		this.else_branch_ran = false;
		this.any_true_state = false;
	};
	EventStackFrame.prototype.isModifierAfterCnds = function ()
	{
		if (this.current_event.solWriterAfterCnds)
			return true;
		if (this.cndindex < this.current_event.conditions.length - 1)
			return !!this.current_event.solModifiers.length;
		return false;
	};
	cr.eventStackFrame = EventStackFrame;
}());
(function()
{
	function ExpNode(owner_, m)
	{
		this.owner = owner_;
		this.runtime = owner_.runtime;
		this.type = m[0];
;
		this.get = [this.eval_int,
					this.eval_float,
					this.eval_string,
					this.eval_unaryminus,
					this.eval_add,
					this.eval_subtract,
					this.eval_multiply,
					this.eval_divide,
					this.eval_mod,
					this.eval_power,
					this.eval_and,
					this.eval_or,
					this.eval_equal,
					this.eval_notequal,
					this.eval_less,
					this.eval_lessequal,
					this.eval_greater,
					this.eval_greaterequal,
					this.eval_conditional,
					this.eval_system_exp,
					this.eval_object_behavior_exp,
					this.eval_instvar_exp,
					this.eval_object_behavior_exp,
					this.eval_eventvar_exp][this.type];
		var paramsModel = null;
		this.value = null;
		this.first = null;
		this.second = null;
		this.third = null;
		this.func = null;
		this.results = null;
		this.parameters = null;
		this.object_type = null;
		this.beh_index = -1;
		this.instance_expr = null;
		this.varindex = -1;
		this.behavior_type = null;
		this.varname = null;
		this.eventvar = null;
		this.return_string = false;
		switch (this.type) {
		case 0:		// int
		case 1:		// float
		case 2:		// string
			this.value = m[1];
			break;
		case 3:		// unaryminus
			this.first = new cr.expNode(owner_, m[1]);
			break;
		case 18:	// conditional
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
			this.third = new cr.expNode(owner_, m[3]);
			break;
		case 19:	// system_exp
			this.func = m[1];
;
			if (this.func === cr.system_object.prototype.exps.random
			 || this.func === cr.system_object.prototype.exps.choose)
			{
				this.owner.setVaries();
			}
			this.results = [];
			this.parameters = [];
			if (m.length === 3)
			{
				paramsModel = m[2];
				this.results.length = paramsModel.length + 1;	// must also fit 'ret'
			}
			else
				this.results.length = 1;      // to fit 'ret'
			break;
		case 20:	// object_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.beh_index = -1;
			this.func = m[2];
			this.return_string = m[3];
			if (cr.plugins_.Function && this.func === cr.plugins_.Function.prototype.exps.Call)
			{
				this.owner.setVaries();
			}
			if (m[4])
				this.instance_expr = new cr.expNode(owner_, m[4]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 6)
			{
				paramsModel = m[5];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 21:		// instvar_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.return_string = m[2];
			if (m[3])
				this.instance_expr = new cr.expNode(owner_, m[3]);
			else
				this.instance_expr = null;
			this.varindex = m[4];
			break;
		case 22:		// behavior_exp
			this.object_type = this.runtime.types_by_index[m[1]];
;
			this.behavior_type = this.object_type.getBehaviorByName(m[2]);
;
			this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
			this.func = m[3];
			this.return_string = m[4];
			if (m[5])
				this.instance_expr = new cr.expNode(owner_, m[5]);
			else
				this.instance_expr = null;
			this.results = [];
			this.parameters = [];
			if (m.length === 7)
			{
				paramsModel = m[6];
				this.results.length = paramsModel.length + 1;
			}
			else
				this.results.length = 1;	// to fit 'ret'
			break;
		case 23:		// eventvar_exp
			this.varname = m[1];
			this.eventvar = null;	// assigned in postInit
			break;
		}
		this.owner.maybeVaryForType(this.object_type);
		if (this.type >= 4 && this.type <= 17)
		{
			this.first = new cr.expNode(owner_, m[1]);
			this.second = new cr.expNode(owner_, m[2]);
		}
		if (paramsModel)
		{
			var i, len;
			for (i = 0, len = paramsModel.length; i < len; i++)
				this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
		}
		cr.seal(this);
	};
	ExpNode.prototype.postInit = function ()
	{
		if (this.type === 23)	// eventvar_exp
		{
			this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);
;
		}
		if (this.first)
			this.first.postInit();
		if (this.second)
			this.second.postInit();
		if (this.third)
			this.third.postInit();
		if (this.instance_expr)
			this.instance_expr.postInit();
		if (this.parameters)
		{
			var i, len;
			for (i = 0, len = this.parameters.length; i < len; i++)
				this.parameters[i].postInit();
		}
	};
	ExpNode.prototype.eval_system_exp = function (ret)
	{
		this.results[0] = ret;
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++)
		{
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		this.owner.popTempValue();
		this.func.apply(this.runtime.system, this.results);
	};
	ExpNode.prototype.eval_object_behavior_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		this.results[0] = ret;
		ret.object_class = this.object_type;		// so expression can access family type if need be
		var temp = this.owner.pushTempValue();
		var i, len;
		for (i = 0, len = this.parameters.length; i < len; i++) {
			this.parameters[i].get(temp);
			this.results[i + 1] = temp.data;   // passing actual javascript value as argument instead of expvalue
		}
		var index = this.owner.solindex;
		if (this.instance_expr) {
			this.instance_expr.get(temp);
			if (temp.is_number()) {
				index = temp.data;
				instances = this.object_type.instances;    // pick from all instances, not SOL
			}
		}
		this.owner.popTempValue();
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var returned_val;
		var inst = instances[index];
		if (this.beh_index > -1)
		{
			var offset = 0;
			if (this.object_type.is_family)
			{
				offset = inst.type.family_beh_map[this.object_type.family_index];
			}
			returned_val = this.func.apply(inst.behavior_insts[this.beh_index + offset], this.results);
		}
		else
			returned_val = this.func.apply(inst, this.results);
;
	};
	ExpNode.prototype.eval_instvar_exp = function (ret)
	{
		var sol = this.object_type.getCurrentSol();
		var instances = sol.getObjects();
		if (!instances.length)
		{
			if (sol.else_instances.length)
				instances = sol.else_instances;
			else
			{
				if (this.return_string)
					ret.set_string("");
				else
					ret.set_int(0);
				return;
			}
		}
		var index = this.owner.solindex;
		if (this.instance_expr)
		{
			var temp = this.owner.pushTempValue();
			this.instance_expr.get(temp);
			if (temp.is_number())
			{
				index = temp.data;
				var type_instances = this.object_type.instances;
				index %= type_instances.length;     // wraparound
				if (index < 0)                      // offset
					index += type_instances.length;
				var to_ret = type_instances[index].instance_vars[this.varindex];
				if (cr.is_string(to_ret))
					ret.set_string(to_ret);
				else
					ret.set_float(to_ret);
				this.owner.popTempValue();
				return;         // done
			}
			this.owner.popTempValue();
		}
		index %= instances.length;      // wraparound
		if (index < 0)
			index += instances.length;
		var inst = instances[index];
		var offset = 0;
		if (this.object_type.is_family)
		{
			offset = inst.type.family_var_map[this.object_type.family_index];
		}
		var to_ret = inst.instance_vars[this.varindex + offset];
		if (cr.is_string(to_ret))
			ret.set_string(to_ret);
		else
			ret.set_float(to_ret);
	};
	ExpNode.prototype.eval_int = function (ret)
	{
		ret.type = cr.exptype.Integer;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_float = function (ret)
	{
		ret.type = cr.exptype.Float;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_string = function (ret)
	{
		ret.type = cr.exptype.String;
		ret.data = this.value;
	};
	ExpNode.prototype.eval_unaryminus = function (ret)
	{
		this.first.get(ret);                // retrieve operand
		if (ret.is_number())
			ret.data = -ret.data;
	};
	ExpNode.prototype.eval_add = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data += temp.data;          // both operands numbers: add
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_subtract = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data -= temp.data;          // both operands numbers: subtract
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_multiply = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data *= temp.data;          // both operands numbers: multiply
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_divide = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data /= temp.data;          // both operands numbers: divide
			ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_mod = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data %= temp.data;          // both operands numbers: modulo
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_power = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			ret.data = Math.pow(ret.data, temp.data);   // both operands numbers: raise to power
			if (temp.is_float())
				ret.make_float();
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_and = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number())
		{
			if (temp.is_string())
			{
				ret.set_string(ret.data.toString() + temp.data);
			}
			else
			{
				if (ret.data && temp.data)
					ret.set_int(1);
				else
					ret.set_int(0);
			}
		}
		else if (ret.is_string())
		{
			if (temp.is_string())
				ret.data += temp.data;
			else
			{
				ret.data += (Math.round(temp.data * 1e10) / 1e10).toString();
			}
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_or = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		if (ret.is_number() && temp.is_number())
		{
			if (ret.data || temp.data)
				ret.set_int(1);
			else
				ret.set_int(0);
		}
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_conditional = function (ret)
	{
		this.first.get(ret);                // condition operand
		if (ret.data)                       // is true
			this.second.get(ret);           // evaluate second operand to ret
		else
			this.third.get(ret);            // evaluate third operand to ret
	};
	ExpNode.prototype.eval_equal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data === temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_notequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data !== temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_less = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data < temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_lessequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data <= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greater = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data > temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_greaterequal = function (ret)
	{
		this.first.get(ret);                // left operand
		var temp = this.owner.pushTempValue();
		this.second.get(temp);			// right operand
		ret.set_int(ret.data >= temp.data ? 1 : 0);
		this.owner.popTempValue();
	};
	ExpNode.prototype.eval_eventvar_exp = function (ret)
	{
		var val = this.eventvar.getValue();
		if (cr.is_number(val))
			ret.set_float(val);
		else
			ret.set_string(val);
	};
	cr.expNode = ExpNode;
	function ExpValue(type, data)
	{
		this.type = type || cr.exptype.Integer;
		this.data = data || 0;
		this.object_class = null;
;
;
;
		if (this.type == cr.exptype.Integer)
			this.data = Math.floor(this.data);
		cr.seal(this);
	};
	ExpValue.prototype.is_int = function ()
	{
		return this.type === cr.exptype.Integer;
	};
	ExpValue.prototype.is_float = function ()
	{
		return this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_number = function ()
	{
		return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
	};
	ExpValue.prototype.is_string = function ()
	{
		return this.type === cr.exptype.String;
	};
	ExpValue.prototype.make_int = function ()
	{
		if (!this.is_int())
		{
			if (this.is_float())
				this.data = Math.floor(this.data);      // truncate float
			else if (this.is_string())
				this.data = parseInt(this.data, 10);
			this.type = cr.exptype.Integer;
		}
	};
	ExpValue.prototype.make_float = function ()
	{
		if (!this.is_float())
		{
			if (this.is_string())
				this.data = parseFloat(this.data);
			this.type = cr.exptype.Float;
		}
	};
	ExpValue.prototype.make_string = function ()
	{
		if (!this.is_string())
		{
			this.data = this.data.toString();
			this.type = cr.exptype.String;
		}
	};
	ExpValue.prototype.set_int = function (val)
	{
;
		this.type = cr.exptype.Integer;
		this.data = Math.floor(val);
	};
	ExpValue.prototype.set_float = function (val)
	{
;
		this.type = cr.exptype.Float;
		this.data = val;
	};
	ExpValue.prototype.set_string = function (val)
	{
;
		this.type = cr.exptype.String;
		this.data = val;
	};
	ExpValue.prototype.set_any = function (val)
	{
		if (cr.is_number(val))
		{
			this.type = cr.exptype.Float;
			this.data = val;
		}
		else if (cr.is_string(val))
		{
			this.type = cr.exptype.String;
			this.data = val.toString();
		}
		else
		{
			this.type = cr.exptype.Integer;
			this.data = 0;
		}
	};
	cr.expvalue = ExpValue;
	cr.exptype = {
		Integer: 0,     // emulated; no native integer support in javascript
		Float: 1,
		String: 2
	};
}());
;
cr.system_object = function (runtime)
{
    this.runtime = runtime;
	this.waits = [];
};
cr.system_object.prototype.saveToJSON = function ()
{
	var o = {};
	var i, len, j, lenj, p, w, t, sobj;
	o["waits"] = [];
	var owaits = o["waits"];
	var waitobj;
	for (i = 0, len = this.waits.length; i < len; i++)
	{
		w = this.waits[i];
		waitobj = {
			"t": w.time,
			"ev": w.ev.sid,
			"sm": [],
			"sols": {}
		};
		if (w.ev.actions[w.actindex])
			waitobj["act"] = w.ev.actions[w.actindex].sid;
		for (j = 0, lenj = w.solModifiers.length; j < lenj; j++)
			waitobj["sm"].push(w.solModifiers[j].sid);
		for (p in w.sols)
		{
			if (w.sols.hasOwnProperty(p))
			{
				t = this.runtime.types_by_index[parseInt(p, 10)];
;
				sobj = {
					"sa": w.sols[p].sa,
					"insts": []
				};
				for (j = 0, lenj = w.sols[p].insts.length; j < lenj; j++)
					sobj["insts"].push(w.sols[p].insts[j].uid);
				waitobj["sols"][t.sid.toString()] = sobj;
			}
		}
		owaits.push(waitobj);
	}
	return o;
};
cr.system_object.prototype.loadFromJSON = function (o)
{
	var owaits = o["waits"];
	var i, len, j, lenj, p, w, addWait, e, aindex, t, savedsol, nusol, inst;
	this.waits.length = 0;
	for (i = 0, len = owaits.length; i < len; i++)
	{
		w = owaits[i];
		e = this.runtime.blocksBySid[w["ev"].toString()];
		if (!e)
			continue;	// event must've gone missing
		aindex = -1;
		for (j = 0, lenj = e.actions.length; j < lenj; j++)
		{
			if (e.actions[j].sid === w["act"])
			{
				aindex = j;
				break;
			}
		}
		if (aindex === -1)
			continue;	// action must've gone missing
		addWait = {};
		addWait.sols = {};
		addWait.solModifiers = [];
		addWait.deleteme = false;
		addWait.time = w["t"];
		addWait.ev = e;
		addWait.actindex = aindex;
		for (j = 0, lenj = w["sm"].length; j < lenj; j++)
		{
			t = this.runtime.getObjectTypeBySid(w["sm"][j]);
			if (t)
				addWait.solModifiers.push(t);
		}
		for (p in w["sols"])
		{
			if (w["sols"].hasOwnProperty(p))
			{
				t = this.runtime.getObjectTypeBySid(parseInt(p, 10));
				if (!t)
					continue;		// type must've been deleted
				savedsol = w["sols"][p];
				nusol = {
					sa: savedsol["sa"],
					insts: []
				};
				for (j = 0, lenj = savedsol["insts"].length; j < lenj; j++)
				{
					inst = this.runtime.getObjectByUID(savedsol["insts"][j]);
					if (inst)
						nusol.insts.push(inst);
				}
				addWait.sols[t.index.toString()] = nusol;
			}
		}
		this.waits.push(addWait);
	}
};
(function ()
{
	var sysProto = cr.system_object.prototype;
	function SysCnds() {};
    SysCnds.prototype.EveryTick = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutStart = function()
    {
        return true;
    };
    SysCnds.prototype.OnLayoutEnd = function()
    {
        return true;
    };
    SysCnds.prototype.Compare = function(x, cmp, y)
    {
        return cr.do_cmp(x, cmp, y);
    };
    SysCnds.prototype.CompareTime = function (cmp, t)
    {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0)
        {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed)
            {
                if (elapsed >= t)
                {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    SysCnds.prototype.LayerVisible = function (layer)
    {
        if (!layer)
            return false;
        else
            return layer.visible;
    };
	SysCnds.prototype.LayerCmpOpacity = function (layer, cmp, opacity_)
	{
		if (!layer)
			return false;
		return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
	};
    SysCnds.prototype.Repeat = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; i < count && !current_loop.stopped; i++)
			{
				current_loop.index = i;
				current_event.retrigger();
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	SysCnds.prototype.While = function (count)
    {
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
		if (solModifierAfterCnds)
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				current_loop.index = i;
				if (!current_event.retrigger())		// one of the other conditions returned false
					current_loop.stopped = true;	// break
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			for (i = 0; !current_loop.stopped; i++)
			{
				current_loop.index = i;
				if (!current_event.retrigger())
					current_loop.stopped = true;
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
    SysCnds.prototype.For = function (name, start, end)
    {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
		if (end < start)
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i >= end && !current_loop.stopped; --i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
		else
		{
			if (solModifierAfterCnds)
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					this.runtime.pushCopySol(current_event.solModifiers);
					current_loop.index = i;
					current_event.retrigger();
					this.runtime.popSol(current_event.solModifiers);
				}
			}
			else
			{
				for (i = start; i <= end && !current_loop.stopped; ++i)  // inclusive to end
				{
					current_loop.index = i;
					current_event.retrigger();
				}
			}
		}
        this.runtime.popLoopStack();
		return false;
    };
	var foreach_instancestack = [];
	var foreach_instanceptr = -1;
    SysCnds.prototype.ForEach = function (obj)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i, len, j, lenj, inst, s, sol2;
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	function foreach_sortinstances(a, b)
	{
		var va = a.extra.c2_foreachordered_val;
		var vb = b.extra.c2_foreachordered_val;
		if (cr.is_number(va) && cr.is_number(vb))
			return va - vb;
		else
		{
			va = "" + va;
			vb = "" + vb;
			if (va < vb)
				return -1;
			else if (va > vb)
				return 1;
			else
				return 0;
		}
	};
	SysCnds.prototype.ForEachOrdered = function (obj, exp, order)
    {
        var sol = obj.getCurrentSol();
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var instances = foreach_instancestack[foreach_instanceptr];
		cr.shallowAssignArray(instances, sol.getObjects());
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var current_condition = this.runtime.getCurrentCondition();
		var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
		var i, len, j, lenj, inst, s, sol2;
		for (i = 0, len = instances.length; i < len; i++)
		{
			instances[i].extra.c2_foreachordered_val = current_condition.parameters[1].get(i);
		}
		instances.sort(foreach_sortinstances);
		if (order === 1)
			instances.reverse();
		var is_contained = obj.is_contained;
		if (solModifierAfterCnds)
		{
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				this.runtime.pushCopySol(current_event.solModifiers);
				inst = instances[i];
				sol = obj.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
				this.runtime.popSol(current_event.solModifiers);
			}
		}
		else
		{
			sol.select_all = false;
			sol.instances.length = 1;
			for (i = 0, len = instances.length; i < len && !current_loop.stopped; i++)
			{
				inst = instances[i];
				sol.instances[0] = inst;
				if (is_contained)
				{
					for (j = 0, lenj = inst.siblings.length; j < lenj; j++)
					{
						s = inst.siblings[j];
						sol2 = s.type.getCurrentSol();
						sol2.select_all = false;
						sol2.instances.length = 1;
						sol2.instances[0] = s;
					}
				}
				current_loop.index = i;
				current_event.retrigger();
			}
		}
		instances.length = 0;
        this.runtime.popLoopStack();
		foreach_instanceptr--;
		return false;
    };
	SysCnds.prototype.PickByComparison = function (obj_, exp_, cmp_, val_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			val_ = current_condition.parameters[3].get(i);
			if (cr.do_cmp(exp_, cmp_, val_))
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
	SysCnds.prototype.PickByEvaluate = function (obj_, exp_)
	{
		var i, len, k, inst;
		if (!obj_)
			return;
		foreach_instanceptr++;
		if (foreach_instancestack.length === foreach_instanceptr)
			foreach_instancestack.push([]);
		var tmp_instances = foreach_instancestack[foreach_instanceptr];
		var sol = obj_.getCurrentSol();
		cr.shallowAssignArray(tmp_instances, sol.getObjects());
		if (sol.select_all)
			sol.else_instances.length = 0;
		var current_condition = this.runtime.getCurrentCondition();
		for (i = 0, k = 0, len = tmp_instances.length; i < len; i++)
		{
			inst = tmp_instances[i];
			tmp_instances[k] = inst;
			exp_ = current_condition.parameters[1].get(i);
			if (exp_)
			{
				k++;
			}
			else
			{
				sol.else_instances.push(inst);
			}
		}
		tmp_instances.length = k;
		sol.select_all = false;
		cr.shallowAssignArray(sol.instances, tmp_instances);
		tmp_instances.length = 0;
		foreach_instanceptr--;
		obj_.applySolToContainer();
		return !!sol.instances.length;
	};
    SysCnds.prototype.TriggerOnce = function ()
    {
        var cndextra = this.runtime.getCurrentCondition().extra;
		if (typeof cndextra.TriggerOnce_lastTick === "undefined")
			cndextra.TriggerOnce_lastTick = -1;
        var last_tick = cndextra.TriggerOnce_lastTick;
        var cur_tick = this.runtime.tickcount;
        cndextra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || last_tick !== cur_tick - 1;
    };
    SysCnds.prototype.Every = function (seconds)
    {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
		if (typeof cnd.extra.Every_seconds === "undefined")
			cnd.extra.Every_seconds = seconds;
		var this_seconds = cnd.extra.Every_seconds;
        if (cur_time >= last_time + this_seconds)
        {
            cnd.extra.Every_lastTime = last_time + this_seconds;
			if (cur_time >= cnd.extra.Every_lastTime + 0.04)
			{
				cnd.extra.Every_lastTime = cur_time;
			}
			cnd.extra.Every_seconds = seconds;
            return true;
        }
		else if (cur_time < last_time - 0.1)
		{
			cnd.extra.Every_lastTime = cur_time;
		}
		return false;
    };
    SysCnds.prototype.PickNth = function (obj, index)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		index = cr.floor(index);
        if (index < 0 || index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.PickRandom = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
		var index = cr.floor(Math.random() * instances.length);
        if (index >= instances.length)
            return false;
		var inst = instances[index];
        sol.pick_one(inst);
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.CompareVar = function (v, cmp, val)
    {
        return cr.do_cmp(v.getValue(), cmp, val);
    };
    SysCnds.prototype.IsGroupActive = function (group)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
        return g && g.group_active;
    };
	SysCnds.prototype.IsPreview = function ()
	{
		return typeof cr_is_preview !== "undefined";
	};
	SysCnds.prototype.PickAll = function (obj)
    {
        if (!obj)
            return false;
		if (!obj.instances.length)
			return false;
        var sol = obj.getCurrentSol();
        sol.select_all = true;
		obj.applySolToContainer();
        return true;
    };
	SysCnds.prototype.IsMobile = function ()
	{
		return this.runtime.isMobile;
	};
	SysCnds.prototype.CompareBetween = function (x, a, b)
	{
		return x >= a && x <= b;
	};
	SysCnds.prototype.Else = function ()
	{
		var current_frame = this.runtime.getCurrentEventStack();
		if (current_frame.else_branch_ran)
			return false;		// another event in this else-if chain has run
		else
			return !current_frame.last_event_true;
		/*
		var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
		var prev_event = current_event.prev_block;
		if (!prev_event)
			return false;
		if (prev_event.is_logical)
			return !this.runtime.last_event_true;
		var i, len, j, lenj, s, sol, temp, inst, any_picked = false;
		for (i = 0, len = prev_event.cndReferences.length; i < len; i++)
		{
			s = prev_event.cndReferences[i];
			sol = s.getCurrentSol();
			if (sol.select_all || sol.instances.length === s.instances.length)
			{
				sol.select_all = false;
				sol.instances.length = 0;
			}
			else
			{
				if (sol.instances.length === 1 && sol.else_instances.length === 0 && s.instances.length >= 2)
				{
					inst = sol.instances[0];
					sol.instances.length = 0;
					for (j = 0, lenj = s.instances.length; j < lenj; j++)
					{
						if (s.instances[j] != inst)
							sol.instances.push(s.instances[j]);
					}
					any_picked = true;
				}
				else
				{
					temp = sol.instances;
					sol.instances = sol.else_instances;
					sol.else_instances = temp;
					any_picked = true;
				}
			}
		}
		return any_picked;
		*/
	};
	SysCnds.prototype.OnLoadFinished = function ()
	{
		return true;
	};
	SysCnds.prototype.OnCanvasSnapshot = function ()
	{
		return true;
	};
	SysCnds.prototype.EffectsSupported = function ()
	{
		return !!this.runtime.glwrap;
	};
	SysCnds.prototype.OnSaveComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadComplete = function ()
	{
		return true;
	};
	SysCnds.prototype.OnLoadFailed = function ()
	{
		return true;
	};
	SysCnds.prototype.ObjectUIDExists = function (u)
	{
		return !!this.runtime.getObjectByUID(u);
	};
	SysCnds.prototype.IsOnPlatform = function (p)
	{
		var rt = this.runtime;
		switch (p) {
		case 0:		// HTML5 website
			return !rt.isDomFree && !rt.isNodeWebkit && !rt.isPhoneGap && !rt.isCrosswalk && !rt.isWinJS && !rt.isWindowsPhone8 && !rt.isBlackberry10 && !rt.isAmazonWebApp;
		case 1:		// iOS
			return rt.isiOS;
		case 2:		// Android
			return rt.isAndroid;
		case 3:		// Windows 8
			return rt.isWindows8App;
		case 4:		// Windows Phone 8
			return rt.isWindowsPhone8;
		case 5:		// Blackberry 10
			return rt.isBlackberry10;
		case 6:		// Tizen
			return rt.isTizen;
		case 7:		// CocoonJS
			return rt.isCocoonJs;
		case 8:		// PhoneGap
			return rt.isPhoneGap;
		case 9:	// Scirra Arcade
			return rt.isArcade;
		case 10:	// node-webkit
			return rt.isNodeWebkit;
		case 11:	// crosswalk
			return rt.isCrosswalk;
		case 12:	// amazon webapp
			return rt.isAmazonWebApp;
		default:	// should not be possible
			return false;
		}
	};
	var cacheRegex = null;
	var lastRegex = "";
	var lastFlags = "";
	function getRegex(regex_, flags_)
	{
		if (!cacheRegex || regex_ !== lastRegex || flags_ !== lastFlags)
		{
			cacheRegex = new RegExp(regex_, flags_);
			lastRegex = regex_;
			lastFlags = flags_;
		}
		cacheRegex.lastIndex = 0;		// reset
		return cacheRegex;
	};
	SysCnds.prototype.RegexTest = function (str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		return regex.test(str_);
	};
	var tmp_arr = [];
	SysCnds.prototype.PickOverlappingPoint = function (obj_, x_, y_)
	{
		if (!obj_)
            return false;
        var sol = obj_.getCurrentSol();
        var instances = sol.getObjects();
		var current_event = this.runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		var cnd = this.runtime.getCurrentCondition();
		var i, len, inst, pick;
		if (sol.select_all)
		{
			cr.shallowAssignArray(tmp_arr, instances);
			sol.else_instances.length = 0;
			sol.select_all = false;
			sol.instances.length = 0;
		}
		else
		{
			if (orblock)
			{
				cr.shallowAssignArray(tmp_arr, sol.else_instances);
				sol.else_instances.length = 0;
			}
			else
			{
				cr.shallowAssignArray(tmp_arr, instances);
				sol.instances.length = 0;
			}
		}
		for (i = 0, len = tmp_arr.length; i < len; ++i)
		{
			inst = tmp_arr[i];
			inst.update_bbox();
			pick = cr.xor(inst.contains_pt(x_, y_), cnd.inverted);
			if (pick)
				sol.instances.push(inst);
			else
				sol.else_instances.push(inst);
		}
		obj_.applySolToContainer();
		return cr.xor(!!sol.instances.length, cnd.inverted);
	};
	sysProto.cnds = new SysCnds();
    function SysActs() {};
    SysActs.prototype.GoToLayout = function(to)
    {
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
        this.runtime.changelayout = to;
    };
    SysActs.prototype.CreateObject = function (obj, layer, x, y)
    {
        if (!layer || !obj)
            return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
		if (!inst)
			return;
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
        var sol = obj.getCurrentSol();
        sol.select_all = false;
		sol.instances.length = 1;
		sol.instances[0] = inst;
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				sol = s.type.getCurrentSol();
				sol.select_all = false;
				sol.instances.length = 1;
				sol.instances[0] = s;
			}
		}
    };
    SysActs.prototype.SetLayerVisible = function (layer, visible_)
    {
        if (!layer)
            return;
		if (layer.visible !== visible_)
		{
			layer.visible = visible_;
			this.runtime.redraw = true;
		}
    };
	SysActs.prototype.SetLayerOpacity = function (layer, opacity_)
	{
		if (!layer)
			return;
		opacity_ = cr.clamp(opacity_ / 100, 0, 1);
		if (layer.opacity !== opacity_)
		{
			layer.opacity = opacity_;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayerScaleRate = function (layer, sr)
	{
		if (!layer)
			return;
		if (layer.zoomRate !== sr)
		{
			layer.zoomRate = sr;
			this.runtime.redraw = true;
		}
	};
	SysActs.prototype.SetLayoutScale = function (s)
	{
		if (!this.runtime.running_layout)
			return;
		if (this.runtime.running_layout.scale !== s)
		{
			this.runtime.running_layout.scale = s;
			this.runtime.running_layout.boundScrolling();
			this.runtime.redraw = true;
		}
	};
    SysActs.prototype.ScrollX = function(x)
    {
        this.runtime.running_layout.scrollToX(x);
    };
    SysActs.prototype.ScrollY = function(y)
    {
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.Scroll = function(x, y)
    {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    SysActs.prototype.ScrollToObject = function(obj)
    {
        var inst = obj.getFirstPicked();
        if (inst)
        {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
	SysActs.prototype.SetVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(x);
			else
				v.setValue(parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(x.toString());
	};
	SysActs.prototype.AddVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() + x);
			else
				v.setValue(v.getValue() + parseFloat(x));
		}
		else if (v.vartype === 1)
			v.setValue(v.getValue() + x.toString());
	};
	SysActs.prototype.SubVar = function(v, x)
	{
;
		if (v.vartype === 0)
		{
			if (cr.is_number(x))
				v.setValue(v.getValue() - x);
			else
				v.setValue(v.getValue() - parseFloat(x));
		}
	};
    SysActs.prototype.SetGroupActive = function (group, active)
    {
		var g = this.runtime.groups_by_name[group.toLowerCase()];
		if (!g)
			return;
		switch (active) {
		case 0:
			g.setGroupActive(false);
			break;
		case 1:
			g.setGroupActive(true);
			break;
		case 2:
			g.setGroupActive(!g.group_active);
			break;
		}
    };
    SysActs.prototype.SetTimescale = function (ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        this.runtime.timescale = ts;
    };
    SysActs.prototype.SetObjectTimescale = function (obj, ts_)
    {
        var ts = ts_;
        if (ts < 0)
            ts = 0;
        if (!obj)
            return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = ts;
        }
    };
    SysActs.prototype.RestoreObjectTimescale = function (obj)
    {
        if (!obj)
            return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++)
        {
            instances[i].my_timescale = -1.0;
        }
    };
	var waitobjrecycle = [];
	function allocWaitObject()
	{
		var w;
		if (waitobjrecycle.length)
			w = waitobjrecycle.pop();
		else
		{
			w = {};
			w.sols = {};
			w.solModifiers = [];
		}
		w.deleteme = false;
		return w;
	};
	function freeWaitObject(w)
	{
		cr.wipe(w.sols);
		w.solModifiers.length = 0;
		waitobjrecycle.push(w);
	};
	var solstateobjects = [];
	function allocSolStateObject()
	{
		var s;
		if (solstateobjects.length)
			s = solstateobjects.pop();
		else
		{
			s = {};
			s.insts = [];
		}
		s.sa = false;
		return s;
	};
	function freeSolStateObject(s)
	{
		s.insts.length = 0;
		solstateobjects.push(s);
	};
	SysActs.prototype.Wait = function (seconds)
	{
		if (seconds < 0)
			return;
		var i, len, s, t, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		var waitobj = allocWaitObject();
		waitobj.time = this.runtime.kahanTime.sum + seconds;
		waitobj.ev = evinfo.current_event;
		waitobj.actindex = evinfo.actindex + 1;	// pointing at next action
		for (i = 0, len = this.runtime.types_by_index.length; i < len; i++)
		{
			t = this.runtime.types_by_index[i];
			s = t.getCurrentSol();
			if (s.select_all && evinfo.current_event.solModifiers.indexOf(t) === -1)
				continue;
			waitobj.solModifiers.push(t);
			ss = allocSolStateObject();
			ss.sa = s.select_all;
			cr.shallowAssignArray(ss.insts, s.instances);
			waitobj.sols[i.toString()] = ss;
		}
		this.waits.push(waitobj);
		return true;
	};
	SysActs.prototype.SetLayerScale = function (layer, scale)
    {
        if (!layer)
            return;
		if (layer.scale === scale)
			return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
	SysActs.prototype.ResetGlobals = function ()
	{
		var i, len, g;
		for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++)
		{
			g = this.runtime.all_global_vars[i];
			g.data = g.initial;
		}
	};
	SysActs.prototype.SetLayoutAngle = function (a)
	{
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (this.runtime.running_layout)
		{
			if (this.runtime.running_layout.angle !== a)
			{
				this.runtime.running_layout.angle = a;
				this.runtime.redraw = true;
			}
		}
	};
	SysActs.prototype.SetLayerAngle = function (layer, a)
    {
        if (!layer)
            return;
		a = cr.to_radians(a);
		a = cr.clamp_angle(a);
		if (layer.angle === a)
			return;
        layer.angle = a;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerParallax = function (layer, px, py)
    {
        if (!layer)
            return;
		if (layer.parallaxX === px / 100 && layer.parallaxY === py / 100)
			return;
        layer.parallaxX = px / 100;
		layer.parallaxY = py / 100;
		if (layer.parallaxX !== 1 || layer.parallaxY !== 1)
		{
			var i, len, instances = layer.instances;
			for (i = 0, len = instances.length; i < len; ++i)
			{
				instances[i].type.any_instance_parallaxed = true;
			}
		}
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerBackground = function (layer, c)
    {
        if (!layer)
            return;
		var r = cr.GetRValue(c);
		var g = cr.GetGValue(c);
		var b = cr.GetBValue(c);
		if (layer.background_color[0] === r && layer.background_color[1] === g && layer.background_color[2] === b)
			return;
        layer.background_color[0] = r;
		layer.background_color[1] = g;
		layer.background_color[2] = b;
        this.runtime.redraw = true;
    };
	SysActs.prototype.SetLayerTransparent = function (layer, t)
    {
        if (!layer)
            return;
		if (!!t === !!layer.transparent)
			return;
		layer.transparent = !!t;
        this.runtime.redraw = true;
    };
	SysActs.prototype.StopLoop = function ()
	{
		if (this.runtime.loop_stack_index < 0)
			return;		// no loop currently running
		this.runtime.getCurrentLoop().stopped = true;
	};
	SysActs.prototype.GoToLayoutByName = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot change layout while loading on loader layout
		if (this.runtime.changelayout)
			return;		// already changing to different layout
;
		var l;
		for (l in this.runtime.layouts)
		{
			if (this.runtime.layouts.hasOwnProperty(l) && cr.equals_nocase(l, layoutname))
			{
				this.runtime.changelayout = this.runtime.layouts[l];
				return;
			}
		}
	};
	SysActs.prototype.RestartLayout = function (layoutname)
	{
		if (this.runtime.isloading)
			return;		// cannot restart loader layouts
		if (this.runtime.changelayout)
			return;		// already changing to a different layout
;
		if (!this.runtime.running_layout)
			return;
		this.runtime.changelayout = this.runtime.running_layout;
		var i, len, g;
		for (i = 0, len = this.runtime.allGroups.length; i < len; i++)
		{
			g = this.runtime.allGroups[i];
			g.setGroupActive(g.initially_activated);
		}
	};
	SysActs.prototype.SnapshotCanvas = function (format_, quality_)
	{
		this.runtime.snapshotCanvas = [format_ === 0 ? "image/png" : "image/jpeg", quality_ / 100];
		this.runtime.redraw = true;		// force redraw so snapshot is always taken
	};
	SysActs.prototype.SetCanvasSize = function (w, h)
	{
		if (w <= 0 || h <= 0)
			return;
		var mode = this.runtime.fullscreen_mode;
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
		if (isfullscreen && this.runtime.fullscreen_scaling > 0)
			mode = this.runtime.fullscreen_scaling;
		if (mode === 0)
		{
			this.runtime["setSize"](w, h, true);
		}
		else
		{
			this.runtime.original_width = w;
			this.runtime.original_height = h;
			this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
		}
	};
	SysActs.prototype.SetLayoutEffectEnabled = function (enable_, effectname_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		this.runtime.running_layout.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectEnabled = function (layer, enable_, effectname_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var enable = (enable_ === 1);
		if (et.active == enable)
			return;		// no change
		et.active = enable;
		layer.updateActiveEffects();
		this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayoutEffectParam = function (effectname_, index_, value_)
	{
		if (!this.runtime.running_layout || !this.runtime.glwrap)
			return;
		var et = this.runtime.running_layout.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = this.runtime.running_layout.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SetLayerEffectParam = function (layer, effectname_, index_, value_)
	{
		if (!layer || !this.runtime.glwrap)
			return;
		var et = layer.getEffectByName(effectname_);
		if (!et)
			return;		// effect name not found
		var params = layer.effect_params[et.index];
		index_ = Math.floor(index_);
		if (index_ < 0 || index_ >= params.length)
			return;		// effect index out of bounds
		if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
			value_ /= 100.0;
		if (params[index_] === value_)
			return;		// no change
		params[index_] = value_;
		if (et.active)
			this.runtime.redraw = true;
	};
	SysActs.prototype.SaveState = function (slot_)
	{
		this.runtime.saveToSlot = slot_;
	};
	SysActs.prototype.LoadState = function (slot_)
	{
		this.runtime.loadFromSlot = slot_;
	};
	SysActs.prototype.LoadStateJSON = function (jsonstr_)
	{
		this.runtime.loadFromJson = jsonstr_;
	};
	SysActs.prototype.SetHalfFramerateMode = function (set_)
	{
		this.runtime.halfFramerateMode = (set_ !== 0);
	};
	SysActs.prototype.SetFullscreenQuality = function (q)
	{
		var isfullscreen = (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"] || this.isNodeFullscreen);
		if (!isfullscreen && this.runtime.fullscreen_mode === 0)
			return;
		this.runtime.wantFullscreenScalingQuality = (q !== 0);
		this.runtime["setSize"](this.runtime.lastWindowWidth, this.runtime.lastWindowHeight, true);
	};
	sysProto.acts = new SysActs();
    function SysExps() {};
    SysExps.prototype["int"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_int(x);
    };
    SysExps.prototype["float"] = function(ret, x)
    {
        if (cr.is_string(x))
        {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data))
                ret.data = 0;
        }
        else
            ret.set_float(x);
    };
    SysExps.prototype.str = function(ret, x)
    {
        if (cr.is_string(x))
            ret.set_string(x);
        else
            ret.set_string(x.toString());
    };
    SysExps.prototype.len = function(ret, x)
    {
        ret.set_int(x.length || 0);
    };
    SysExps.prototype.random = function (ret, a, b)
    {
        if (b === undefined)
        {
            ret.set_float(Math.random() * a);
        }
        else
        {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    SysExps.prototype.sqrt = function(ret, x)
    {
        ret.set_float(Math.sqrt(x));
    };
    SysExps.prototype.abs = function(ret, x)
    {
        ret.set_float(Math.abs(x));
    };
    SysExps.prototype.round = function(ret, x)
    {
        ret.set_int(Math.round(x));
    };
    SysExps.prototype.floor = function(ret, x)
    {
        ret.set_int(Math.floor(x));
    };
    SysExps.prototype.ceil = function(ret, x)
    {
        ret.set_int(Math.ceil(x));
    };
    SysExps.prototype.sin = function(ret, x)
    {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    SysExps.prototype.cos = function(ret, x)
    {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    SysExps.prototype.tan = function(ret, x)
    {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    SysExps.prototype.asin = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    SysExps.prototype.acos = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    SysExps.prototype.atan = function(ret, x)
    {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    SysExps.prototype.exp = function(ret, x)
    {
        ret.set_float(Math.exp(x));
    };
    SysExps.prototype.ln = function(ret, x)
    {
        ret.set_float(Math.log(x));
    };
    SysExps.prototype.log10 = function(ret, x)
    {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    SysExps.prototype.max = function(ret)
    {
		var max_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (max_ < arguments[i])
				max_ = arguments[i];
		}
		ret.set_float(max_);
    };
    SysExps.prototype.min = function(ret)
    {
        var min_ = arguments[1];
		var i, len;
		for (i = 2, len = arguments.length; i < len; i++)
		{
			if (min_ > arguments[i])
				min_ = arguments[i];
		}
		ret.set_float(min_);
    };
    SysExps.prototype.dt = function(ret)
    {
        ret.set_float(this.runtime.dt);
    };
    SysExps.prototype.timescale = function(ret)
    {
        ret.set_float(this.runtime.timescale);
    };
    SysExps.prototype.wallclocktime = function(ret)
    {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    SysExps.prototype.time = function(ret)
    {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    SysExps.prototype.tickcount = function(ret)
    {
        ret.set_int(this.runtime.tickcount);
    };
    SysExps.prototype.objectcount = function(ret)
    {
        ret.set_int(this.runtime.objectcount);
    };
    SysExps.prototype.fps = function(ret)
    {
        ret.set_int(this.runtime.fps);
    };
    SysExps.prototype.loopindex = function(ret, name_)
    {
		var loop, i, len;
        if (!this.runtime.loop_stack.length)
        {
            ret.set_int(0);
            return;
        }
        if (name_)
        {
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++)
            {
                loop = this.runtime.loop_stack[i];
                if (loop.name === name_)
                {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        }
        else
        {
			loop = this.runtime.getCurrentLoop();
			ret.set_int(loop ? loop.index : -1);
        }
    };
    SysExps.prototype.distance = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    SysExps.prototype.angle = function(ret, x1, y1, x2, y2)
    {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    SysExps.prototype.scrollx = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    SysExps.prototype.scrolly = function(ret)
    {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    SysExps.prototype.newline = function(ret)
    {
        ret.set_string("\n");
    };
    SysExps.prototype.lerp = function(ret, a, b, x)
    {
        ret.set_float(cr.lerp(a, b, x));
    };
    SysExps.prototype.windowwidth = function(ret)
    {
        ret.set_int(this.runtime.width);
    };
    SysExps.prototype.windowheight = function(ret)
    {
        ret.set_int(this.runtime.height);
    };
	SysExps.prototype.uppercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toUpperCase() : "");
	};
	SysExps.prototype.lowercase = function(ret, str)
	{
		ret.set_string(cr.is_string(str) ? str.toLowerCase() : "");
	};
	SysExps.prototype.clamp = function(ret, x, l, u)
	{
		if (x < l)
			ret.set_float(l);
		else if (x > u)
			ret.set_float(u);
		else
			ret.set_float(x);
	};
	SysExps.prototype.layerscale = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.scale);
	};
	SysExps.prototype.layeropacity = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.opacity * 100);
	};
	SysExps.prototype.layerscalerate = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.zoomRate);
	};
	SysExps.prototype.layerparallaxx = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxX * 100);
	};
	SysExps.prototype.layerparallaxy = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(layer.parallaxY * 100);
	};
	SysExps.prototype.layoutscale = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_float(this.runtime.running_layout.scale);
		else
			ret.set_float(0);
	};
	SysExps.prototype.layoutangle = function (ret)
	{
		ret.set_float(cr.to_degrees(this.runtime.running_layout.angle));
	};
	SysExps.prototype.layerangle = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		if (!layer)
			ret.set_float(0);
		else
			ret.set_float(cr.to_degrees(layer.angle));
	};
	SysExps.prototype.layoutwidth = function (ret)
	{
		ret.set_int(this.runtime.running_layout.width);
	};
	SysExps.prototype.layoutheight = function (ret)
	{
		ret.set_int(this.runtime.running_layout.height);
	};
	SysExps.prototype.find = function (ret, text, searchstr)
	{
		if (cr.is_string(text) && cr.is_string(searchstr))
			ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
		else
			ret.set_int(-1);
	};
	SysExps.prototype.left = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(0, n) : "");
	};
	SysExps.prototype.right = function (ret, text, n)
	{
		ret.set_string(cr.is_string(text) ? text.substr(text.length - n) : "");
	};
	SysExps.prototype.mid = function (ret, text, index_, length_)
	{
		ret.set_string(cr.is_string(text) ? text.substr(index_, length_) : "");
	};
	SysExps.prototype.tokenat = function (ret, text, index_, sep)
	{
		if (cr.is_string(text) && cr.is_string(sep))
		{
			var arr = text.split(sep);
			var i = cr.floor(index_);
			if (i < 0 || i >= arr.length)
				ret.set_string("");
			else
				ret.set_string(arr[i]);
		}
		else
			ret.set_string("");
	};
	SysExps.prototype.tokencount = function (ret, text, sep)
	{
		if (cr.is_string(text) && text.length)
			ret.set_int(text.split(sep).length);
		else
			ret.set_int(0);
	};
	SysExps.prototype.replace = function (ret, text, find_, replace_)
	{
		if (cr.is_string(text) && cr.is_string(find_) && cr.is_string(replace_))
			ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
		else
			ret.set_string(cr.is_string(text) ? text : "");
	};
	SysExps.prototype.trim = function (ret, text)
	{
		ret.set_string(cr.is_string(text) ? text.trim() : "");
	};
	SysExps.prototype.pi = function (ret)
	{
		ret.set_float(cr.PI);
	};
	SysExps.prototype.layoutname = function (ret)
	{
		if (this.runtime.running_layout)
			ret.set_string(this.runtime.running_layout.name);
		else
			ret.set_string("");
	};
	SysExps.prototype.renderer = function (ret)
	{
		ret.set_string(this.runtime.gl ? "webgl" : "canvas2d");
	};
	SysExps.prototype.anglediff = function (ret, a, b)
	{
		ret.set_float(cr.to_degrees(cr.angleDiff(cr.to_radians(a), cr.to_radians(b))));
	};
	SysExps.prototype.choose = function (ret)
	{
		var index = cr.floor(Math.random() * (arguments.length - 1));
		ret.set_any(arguments[index + 1]);
	};
	SysExps.prototype.rgb = function (ret, r, g, b)
	{
		ret.set_int(cr.RGB(r, g, b));
	};
	SysExps.prototype.projectversion = function (ret)
	{
		ret.set_string(this.runtime.versionstr);
	};
	SysExps.prototype.anglelerp = function (ret, a, b, x)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		var diff = cr.angleDiff(a, b);
		if (cr.angleClockwise(b, a))
		{
			ret.set_float(cr.to_clamped_degrees(a + diff * x));
		}
		else
		{
			ret.set_float(cr.to_clamped_degrees(a - diff * x));
		}
	};
	SysExps.prototype.anglerotate = function (ret, a, b, c)
	{
		a = cr.to_radians(a);
		b = cr.to_radians(b);
		c = cr.to_radians(c);
		ret.set_float(cr.to_clamped_degrees(cr.angleRotate(a, b, c)));
	};
	SysExps.prototype.zeropad = function (ret, n, d)
	{
		var s = (n < 0 ? "-" : "");
		if (n < 0) n = -n;
		var zeroes = d - n.toString().length;
		for (var i = 0; i < zeroes; i++)
			s += "0";
		ret.set_string(s + n.toString());
	};
	SysExps.prototype.cpuutilisation = function (ret)
	{
		ret.set_float(this.runtime.cpuutilisation / 1000);
	};
	SysExps.prototype.viewportleft = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewLeft : 0);
	};
	SysExps.prototype.viewporttop = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewTop : 0);
	};
	SysExps.prototype.viewportright = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewRight : 0);
	};
	SysExps.prototype.viewportbottom = function (ret, layerparam)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.viewBottom : 0);
	};
	SysExps.prototype.loadingprogress = function (ret)
	{
		ret.set_float(this.runtime.loadingprogress);
	};
	SysExps.prototype.unlerp = function(ret, a, b, y)
    {
        ret.set_float(cr.unlerp(a, b, y));
    };
	SysExps.prototype.canvassnapshot = function (ret)
	{
		ret.set_string(this.runtime.snapshotData);
	};
	SysExps.prototype.urlencode = function (ret, s)
	{
		ret.set_string(encodeURIComponent(s));
	};
	SysExps.prototype.urldecode = function (ret, s)
	{
		ret.set_string(decodeURIComponent(s));
	};
	SysExps.prototype.canvastolayerx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, true) : 0);
	};
	SysExps.prototype.canvastolayery = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.canvasToLayer(x, y, false) : 0);
	};
	SysExps.prototype.layertocanvasx = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, true) : 0);
	};
	SysExps.prototype.layertocanvasy = function (ret, layerparam, x, y)
	{
		var layer = this.runtime.getLayer(layerparam);
		ret.set_float(layer ? layer.layerToCanvas(x, y, false) : 0);
	};
	SysExps.prototype.savestatejson = function (ret)
	{
		ret.set_string(this.runtime.lastSaveJson);
	};
	SysExps.prototype.imagememoryusage = function (ret)
	{
		if (this.runtime.glwrap)
			ret.set_float(Math.round(100 * this.runtime.glwrap.estimateVRAM() / (1024 * 1024)) / 100);
		else
			ret.set_float(0);
	};
	SysExps.prototype.regexsearch = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_int(str_ ? str_.search(regex) : -1);
	};
	SysExps.prototype.regexreplace = function (ret, str_, regex_, flags_, replace_)
	{
		var regex = getRegex(regex_, flags_);
		ret.set_string(str_ ? str_.replace(regex, replace_) : "");
	};
	var regexMatches = [];
	var lastMatchesStr = "";
	var lastMatchesRegex = "";
	var lastMatchesFlags = "";
	function updateRegexMatches(str_, regex_, flags_)
	{
		if (str_ === lastMatchesStr && regex_ === lastMatchesRegex && flags_ === lastMatchesFlags)
			return;
		var regex = getRegex(regex_, flags_);
		regexMatches = str_.match(regex);
		lastMatchesStr = str_;
		lastMatchesRegex = regex_;
		lastMatchesFlags = flags_;
	};
	SysExps.prototype.regexmatchcount = function (ret, str_, regex_, flags_)
	{
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		ret.set_int(regexMatches ? regexMatches.length : 0);
	};
	SysExps.prototype.regexmatchat = function (ret, str_, regex_, flags_, index_)
	{
		index_ = Math.floor(index_);
		var regex = getRegex(regex_, flags_);
		updateRegexMatches(str_, regex_, flags_);
		if (!regexMatches || index_ < 0 || index_ >= regexMatches.length)
			ret.set_string("");
		else
			ret.set_string(regexMatches[index_]);
	};
	SysExps.prototype.infinity = function (ret)
	{
		ret.set_float(Infinity);
	};
	SysExps.prototype.setbit = function (ret, n, b, v)
	{
		n = n | 0;
		b = b | 0;
		v = (v !== 0 ? 1 : 0);
		ret.set_int((n & ~(1 << b)) | (v << b));
	};
	SysExps.prototype.togglebit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int(n ^ (1 << b));
	};
	SysExps.prototype.getbit = function (ret, n, b)
	{
		n = n | 0;
		b = b | 0;
		ret.set_int((n & (1 << b)) ? 1 : 0);
	};
	sysProto.exps = new SysExps();
	sysProto.runWaits = function ()
	{
		var i, j, len, w, k, s, ss;
		var evinfo = this.runtime.getCurrentEventStack();
		for (i = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			if (w.time > this.runtime.kahanTime.sum)
				continue;
			evinfo.current_event = w.ev;
			evinfo.actindex = w.actindex;
			evinfo.cndindex = 0;
			for (k in w.sols)
			{
				if (w.sols.hasOwnProperty(k))
				{
					s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
					ss = w.sols[k];
					s.select_all = ss.sa;
					cr.shallowAssignArray(s.instances, ss.insts);
					freeSolStateObject(ss);
				}
			}
			w.ev.resume_actions_and_subevents();
			this.runtime.clearSol(w.solModifiers);
			w.deleteme = true;
		}
		for (i = 0, j = 0, len = this.waits.length; i < len; i++)
		{
			w = this.waits[i];
			this.waits[j] = w;
			if (w.deleteme)
				freeWaitObject(w);
			else
				j++;
		}
		this.waits.length = j;
	};
}());
;
(function () {
	cr.add_common_aces = function (m)
	{
		var pluginProto = m[0].prototype;
		var singleglobal_ = m[1];
		var position_aces = m[3];
		var size_aces = m[4];
		var angle_aces = m[5];
		var appearance_aces = m[6];
		var zorder_aces = m[7];
		var effects_aces = m[8];
		if (!pluginProto.cnds)
			pluginProto.cnds = {};
		if (!pluginProto.acts)
			pluginProto.acts = {};
		if (!pluginProto.exps)
			pluginProto.exps = {};
		var cnds = pluginProto.cnds;
		var acts = pluginProto.acts;
		var exps = pluginProto.exps;
		if (position_aces)
		{
			cnds.CompareX = function (cmp, x)
			{
				return cr.do_cmp(this.x, cmp, x);
			};
			cnds.CompareY = function (cmp, y)
			{
				return cr.do_cmp(this.y, cmp, y);
			};
			cnds.IsOnScreen = function ()
			{
				var layer = this.layer;
				this.update_bbox();
				var bbox = this.bbox;
				return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
			};
			cnds.IsOutsideLayout = function ()
			{
				this.update_bbox();
				var bbox = this.bbox;
				var layout = this.runtime.running_layout;
				return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
			};
			cnds.PickDistance = function (which, x, y)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var dist = cr.distanceTo(inst.x, inst.y, x, y);
				var i, len, d;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					d = cr.distanceTo(inst.x, inst.y, x, y);
					if ((which === 0 && d < dist) || (which === 1 && d > dist))
					{
						dist = d;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.SetX = function (x)
			{
				if (this.x !== x)
				{
					this.x = x;
					this.set_bbox_changed();
				}
			};
			acts.SetY = function (y)
			{
				if (this.y !== y)
				{
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPos = function (x, y)
			{
				if (this.x !== x || this.y !== y)
				{
					this.x = x;
					this.y = y;
					this.set_bbox_changed();
				}
			};
			acts.SetPosToObject = function (obj, imgpt)
			{
				var inst = obj.getPairedInstance(this);
				if (!inst)
					return;
				var newx, newy;
				if (inst.getImagePoint)
				{
					newx = inst.getImagePoint(imgpt, true);
					newy = inst.getImagePoint(imgpt, false);
				}
				else
				{
					newx = inst.x;
					newy = inst.y;
				}
				if (this.x !== newx || this.y !== newy)
				{
					this.x = newx;
					this.y = newy;
					this.set_bbox_changed();
				}
			};
			acts.MoveForward = function (dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(this.angle) * dist;
					this.y += Math.sin(this.angle) * dist;
					this.set_bbox_changed();
				}
			};
			acts.MoveAtAngle = function (a, dist)
			{
				if (dist !== 0)
				{
					this.x += Math.cos(cr.to_radians(a)) * dist;
					this.y += Math.sin(cr.to_radians(a)) * dist;
					this.set_bbox_changed();
				}
			};
			exps.X = function (ret)
			{
				ret.set_float(this.x);
			};
			exps.Y = function (ret)
			{
				ret.set_float(this.y);
			};
			exps.dt = function (ret)
			{
				ret.set_float(this.runtime.getDt(this));
			};
		}
		if (size_aces)
		{
			cnds.CompareWidth = function (cmp, w)
			{
				return cr.do_cmp(this.width, cmp, w);
			};
			cnds.CompareHeight = function (cmp, h)
			{
				return cr.do_cmp(this.height, cmp, h);
			};
			acts.SetWidth = function (w)
			{
				if (this.width !== w)
				{
					this.width = w;
					this.set_bbox_changed();
				}
			};
			acts.SetHeight = function (h)
			{
				if (this.height !== h)
				{
					this.height = h;
					this.set_bbox_changed();
				}
			};
			acts.SetSize = function (w, h)
			{
				if (this.width !== w || this.height !== h)
				{
					this.width = w;
					this.height = h;
					this.set_bbox_changed();
				}
			};
			exps.Width = function (ret)
			{
				ret.set_float(this.width);
			};
			exps.Height = function (ret)
			{
				ret.set_float(this.height);
			};
			exps.BBoxLeft = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.left);
			};
			exps.BBoxTop = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.top);
			};
			exps.BBoxRight = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.right);
			};
			exps.BBoxBottom = function (ret)
			{
				this.update_bbox();
				ret.set_float(this.bbox.bottom);
			};
		}
		if (angle_aces)
		{
			cnds.AngleWithin = function (within, a)
			{
				return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
			};
			cnds.IsClockwiseFrom = function (a)
			{
				return cr.angleClockwise(this.angle, cr.to_radians(a));
			};
			cnds.IsBetweenAngles = function (a, b)
			{
				var lower = cr.to_clamped_radians(a);
				var upper = cr.to_clamped_radians(b);
				var angle = cr.clamp_angle(this.angle);
				var obtuse = (!cr.angleClockwise(upper, lower));
				if (obtuse)
					return !(!cr.angleClockwise(angle, lower) && cr.angleClockwise(angle, upper));
				else
					return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
			};
			acts.SetAngle = function (a)
			{
				var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateClockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle += cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateCounterclockwise = function (a)
			{
				if (a !== 0 && !isNaN(a))
				{
					this.angle -= cr.to_radians(a);
					this.angle = cr.clamp_angle(this.angle);
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardAngle = function (amt, target)
			{
				var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.RotateTowardPosition = function (amt, x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var target = Math.atan2(dy, dx);
				var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			acts.SetTowardPosition = function (x, y)
			{
				var dx = x - this.x;
				var dy = y - this.y;
				var newangle = Math.atan2(dy, dx);
				if (isNaN(newangle))
					return;
				if (this.angle !== newangle)
				{
					this.angle = newangle;
					this.set_bbox_changed();
				}
			};
			exps.Angle = function (ret)
			{
				ret.set_float(cr.to_clamped_degrees(this.angle));
			};
		}
		if (!singleglobal_)
		{
			cnds.CompareInstanceVar = function (iv, cmp, val)
			{
				return cr.do_cmp(this.instance_vars[iv], cmp, val);
			};
			cnds.IsBoolInstanceVarSet = function (iv)
			{
				return this.instance_vars[iv];
			};
			cnds.PickInstVarHiLow = function (which, iv)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var val = inst.instance_vars[iv];
				var i, len, v;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					v = inst.instance_vars[iv];
					if ((which === 0 && v < val) || (which === 1 && v > val))
					{
						val = v;
						pickme = inst;
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			cnds.PickByUID = function (u)
			{
				var i, len, j, inst, families, instances, sol;
				var cnd = this.runtime.getCurrentCondition();
				if (cnd.inverted)
				{
					sol = this.getCurrentSol();
					if (sol.select_all)
					{
						sol.select_all = false;
						sol.instances.length = 0;
						sol.else_instances.length = 0;
						instances = this.instances;
						for (i = 0, len = instances.length; i < len; i++)
						{
							inst = instances[i];
							if (inst.uid === u)
								sol.else_instances.push(inst);
							else
								sol.instances.push(inst);
						}
						this.applySolToContainer();
						return !!sol.instances.length;
					}
					else
					{
						for (i = 0, j = 0, len = sol.instances.length; i < len; i++)
						{
							inst = sol.instances[i];
							sol.instances[j] = inst;
							if (inst.uid === u)
							{
								sol.else_instances.push(inst);
							}
							else
								j++;
						}
						sol.instances.length = j;
						this.applySolToContainer();
						return !!sol.instances.length;
					}
				}
				else
				{
					inst = this.runtime.getObjectByUID(u);
					if (!inst)
						return false;
					sol = this.getCurrentSol();
					if (!sol.select_all && sol.instances.indexOf(inst) === -1)
						return false;		// not picked
					if (this.is_family)
					{
						families = inst.type.families;
						for (i = 0, len = families.length; i < len; i++)
						{
							if (families[i] === this)
							{
								sol.pick_one(inst);
								this.applySolToContainer();
								return true;
							}
						}
					}
					else if (inst.type === this)
					{
						sol.pick_one(inst);
						this.applySolToContainer();
						return true;
					}
					return false;
				}
			};
			cnds.OnCreated = function ()
			{
				return true;
			};
			cnds.OnDestroyed = function ()
			{
				return true;
			};
			acts.SetInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] = val;
					else
						myinstvars[iv] = val.toString();
				}
				else
;
			};
			acts.AddInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += parseFloat(val);
				}
				else if (cr.is_string(myinstvars[iv]))
				{
					if (cr.is_string(val))
						myinstvars[iv] += val;
					else
						myinstvars[iv] += val.toString();
				}
				else
;
			};
			acts.SubInstanceVar = function (iv, val)
			{
				var myinstvars = this.instance_vars;
				if (cr.is_number(myinstvars[iv]))
				{
					if (cr.is_number(val))
						myinstvars[iv] -= val;
					else
						myinstvars[iv] -= parseFloat(val);
				}
				else
;
			};
			acts.SetBoolInstanceVar = function (iv, val)
			{
				this.instance_vars[iv] = val ? 1 : 0;
			};
			acts.ToggleBoolInstanceVar = function (iv)
			{
				this.instance_vars[iv] = 1 - this.instance_vars[iv];
			};
			acts.Destroy = function ()
			{
				this.runtime.DestroyInstance(this);
			};
			if (!acts.LoadFromJsonString)
			{
				acts.LoadFromJsonString = function (str_)
				{
					var o, i, len, binst;
					try {
						o = JSON.parse(str_);
					}
					catch (e) {
						return;
					}
					this.runtime.loadInstanceFromJSON(this, o, true);
					if (this.afterLoad)
						this.afterLoad();
					if (this.behavior_insts)
					{
						for (i = 0, len = this.behavior_insts.length; i < len; ++i)
						{
							binst = this.behavior_insts[i];
							if (binst.afterLoad)
								binst.afterLoad();
						}
					}
				};
			}
			exps.Count = function (ret)
			{
				var count = ret.object_class.instances.length;
				var i, len, inst;
				for (i = 0, len = this.runtime.createRow.length; i < len; i++)
				{
					inst = this.runtime.createRow[i];
					if (ret.object_class.is_family)
					{
						if (inst.type.families.indexOf(ret.object_class) >= 0)
							count++;
					}
					else
					{
						if (inst.type === ret.object_class)
							count++;
					}
				}
				ret.set_int(count);
			};
			exps.PickedCount = function (ret)
			{
				ret.set_int(ret.object_class.getCurrentSol().getObjects().length);
			};
			exps.UID = function (ret)
			{
				ret.set_int(this.uid);
			};
			exps.IID = function (ret)
			{
				ret.set_int(this.get_iid());
			};
			if (!exps.AsJSON)
			{
				exps.AsJSON = function (ret)
				{
					ret.set_string(JSON.stringify(this.runtime.saveInstanceToJSON(this, true)));
				};
			}
		}
		if (appearance_aces)
		{
			cnds.IsVisible = function ()
			{
				return this.visible;
			};
			acts.SetVisible = function (v)
			{
				if (!v !== !this.visible)
				{
					this.visible = v;
					this.runtime.redraw = true;
				}
			};
			cnds.CompareOpacity = function (cmp, x)
			{
				return cr.do_cmp(cr.round6dp(this.opacity * 100), cmp, x);
			};
			acts.SetOpacity = function (x)
			{
				var new_opacity = x / 100.0;
				if (new_opacity < 0)
					new_opacity = 0;
				else if (new_opacity > 1)
					new_opacity = 1;
				if (new_opacity !== this.opacity)
				{
					this.opacity = new_opacity;
					this.runtime.redraw = true;
				}
			};
			exps.Opacity = function (ret)
			{
				ret.set_float(cr.round6dp(this.opacity * 100.0));
			};
		}
		if (zorder_aces)
		{
			cnds.IsOnLayer = function (layer_)
			{
				if (!layer_)
					return false;
				return this.layer === layer_;
			};
			cnds.PickTopBottom = function (which_)
			{
				var sol = this.getCurrentSol();
				var instances = sol.getObjects();
				if (!instances.length)
					return false;
				var inst = instances[0];
				var pickme = inst;
				var i, len;
				for (i = 1, len = instances.length; i < len; i++)
				{
					inst = instances[i];
					if (which_ === 0)
					{
						if (inst.layer.index > pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() > pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
					else
					{
						if (inst.layer.index < pickme.layer.index || (inst.layer.index === pickme.layer.index && inst.get_zindex() < pickme.get_zindex()))
						{
							pickme = inst;
						}
					}
				}
				sol.pick_one(pickme);
				return true;
			};
			acts.MoveToTop = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === this.layer.instances.length - 1)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.push(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToBottom = function ()
			{
				var zindex = this.get_zindex();
				if (zindex === 0)
					return;
				cr.arrayRemove(this.layer.instances, zindex);
				this.layer.instances.unshift(this);
				this.runtime.redraw = true;
				this.layer.zindices_stale = true;
			};
			acts.MoveToLayer = function (layerMove)
			{
				if (!layerMove || layerMove == this.layer)
					return;
				cr.arrayRemove(this.layer.instances, this.get_zindex());
				this.layer.zindices_stale = true;
				this.layer = layerMove;
				this.zindex = layerMove.instances.length;
				layerMove.instances.push(this);
				this.runtime.redraw = true;
			};
			acts.ZMoveToObject = function (where_, obj_)
			{
				var isafter = (where_ === 0);
				if (!obj_)
					return;
				var other = obj_.getFirstPicked(this);
				if (!other || other.uid === this.uid)
					return;
				if (this.layer.index !== other.layer.index)
				{
					cr.arrayRemove(this.layer.instances, this.get_zindex());
					this.layer.zindices_stale = true;
					this.layer = other.layer;
					this.zindex = other.layer.instances.length;
					other.layer.instances.push(this);
				}
				var myZ = this.get_zindex();
				var insertZ = other.get_zindex();
				cr.arrayRemove(this.layer.instances, myZ);
				if (myZ < insertZ)
					insertZ--;
				if (isafter)
					insertZ++;
				if (insertZ === this.layer.instances.length)
					this.layer.instances.push(this);
				else
					this.layer.instances.splice(insertZ, 0, this);
				this.layer.zindices_stale = true;
				this.runtime.redraw = true;
			};
			exps.LayerNumber = function (ret)
			{
				ret.set_int(this.layer.number);
			};
			exps.LayerName = function (ret)
			{
				ret.set_string(this.layer.name);
			};
			exps.ZIndex = function (ret)
			{
				ret.set_int(this.get_zindex());
			};
		}
		if (effects_aces)
		{
			acts.SetEffectEnabled = function (enable_, effectname_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var enable = (enable_ === 1);
				if (this.active_effect_flags[i] === enable)
					return;		// no change
				this.active_effect_flags[i] = enable;
				this.updateActiveEffects();
				this.runtime.redraw = true;
			};
			acts.SetEffectParam = function (effectname_, index_, value_)
			{
				if (!this.runtime.glwrap)
					return;
				var i = this.type.getEffectIndexByName(effectname_);
				if (i < 0)
					return;		// effect name not found
				var et = this.type.effect_types[i];
				var params = this.effect_params[i];
				index_ = Math.floor(index_);
				if (index_ < 0 || index_ >= params.length)
					return;		// effect index out of bounds
				if (this.runtime.glwrap.getProgramParameterType(et.shaderindex, index_) === 1)
					value_ /= 100.0;
				if (params[index_] === value_)
					return;		// no change
				params[index_] = value_;
				if (et.active)
					this.runtime.redraw = true;
			};
		}
	};
	cr.set_bbox_changed = function ()
	{
		this.bbox_changed = true;      		// will recreate next time box requested
		this.cell_changed = true;
		this.type.any_cell_changed = true;	// avoid unnecessary updateAllBBox() calls
		this.runtime.redraw = true;     	// assume runtime needs to redraw
		var i, len, callbacks = this.bbox_changed_callbacks;
		for (i = 0, len = callbacks.length; i < len; ++i)
		{
			callbacks[i](this);
		}
	};
	cr.add_bbox_changed_callback = function (f)
	{
		if (f)
		{
			this.bbox_changed_callbacks.push(f);
		}
	};
	cr.update_bbox = function ()
	{
		if (!this.bbox_changed)
			return;                 // bounding box not changed
		var bbox = this.bbox;
		var bquad = this.bquad;
		bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
		bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
		if (!this.angle)
		{
			bquad.set_from_rect(bbox);    // make bounding quad from box
		}
		else
		{
			bbox.offset(-this.x, -this.y);       			// translate to origin
			bquad.set_from_rotated_rect(bbox, this.angle);	// rotate around origin
			bquad.offset(this.x, this.y);      				// translate back to original position
			bquad.bounding_box(bbox);
		}
		bbox.normalize();
		this.bbox_changed = false;  // bounding box up to date
	};
	var tmprc = new cr.rect(0, 0, 0, 0);
	cr.update_collision_cell = function ()
	{
		if (!this.cell_changed || !this.collisionsEnabled)
			return;
		this.update_bbox();
		var mygrid = this.type.collision_grid;
		var collcells = this.collcells;
		var bbox = this.bbox;
		tmprc.set(mygrid.XToCell(bbox.left), mygrid.YToCell(bbox.top), mygrid.XToCell(bbox.right), mygrid.YToCell(bbox.bottom));
		if (collcells.equals(tmprc))
			return;
		if (collcells.right < collcells.left)
			mygrid.update(this, null, tmprc);		// first insertion with invalid rect: don't provide old range
		else
			mygrid.update(this, collcells, tmprc);
		collcells.copy(tmprc);
		this.cell_changed = false;
	};
	cr.inst_contains_pt = function (x, y)
	{
		if (!this.bbox.contains_pt(x, y))
			return false;
		if (!this.bquad.contains_pt(x, y))
			return false;
		if (this.collision_poly && !this.collision_poly.is_empty())
		{
			this.collision_poly.cache_poly(this.width, this.height, this.angle);
			return this.collision_poly.contains_pt(x - this.x, y - this.y);
		}
		else
			return true;
	};
	cr.inst_get_iid = function ()
	{
		this.type.updateIIDs();
		return this.iid;
	};
	cr.inst_get_zindex = function ()
	{
		this.layer.updateZIndices();
		return this.zindex;
	};
	cr.inst_updateActiveEffects = function ()
	{
		this.active_effect_types.length = 0;
		var i, len, et, inst;
		for (i = 0, len = this.active_effect_flags.length; i < len; i++)
		{
			if (this.active_effect_flags[i])
				this.active_effect_types.push(this.type.effect_types[i]);
		}
		this.uses_shaders = !!this.active_effect_types.length;
	};
	cr.inst_toString = function ()
	{
		return "Inst" + this.puid;
	};
	cr.type_getFirstPicked = function (frominst)
	{
		if (frominst && frominst.is_contained && frominst.type != this)
		{
			var i, len, s;
			for (i = 0, len = frominst.siblings.length; i < len; i++)
			{
				s = frominst.siblings[i];
				if (s.type == this)
					return s;
			}
		}
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[0];
		else
			return null;
	};
	cr.type_getPairedInstance = function (inst)
	{
		var instances = this.getCurrentSol().getObjects();
		if (instances.length)
			return instances[inst.get_iid() % instances.length];
		else
			return null;
	};
	cr.type_updateIIDs = function ()
	{
		if (!this.stale_iids || this.is_family)
			return;		// up to date or is family - don't want family to overwrite IIDs
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].iid = i;
		var next_iid = i;
		var createRow = this.runtime.createRow;
		for (i = 0, len = createRow.length; i < len; ++i)
		{
			if (createRow[i].type === this)
				createRow[i].iid = next_iid++;
		}
		this.stale_iids = false;
	};
	cr.type_getInstanceByIID = function (i)
	{
		if (i < this.instances.length)
			return this.instances[i];
		i -= this.instances.length;
		var createRow = this.runtime.createRow;
		var j, lenj;
		for (j = 0, lenj = createRow.length; j < lenj; ++j)
		{
			if (createRow[j].type === this)
			{
				if (i === 0)
					return createRow[j];
				--i;
			}
		}
;
		return null;
	};
	cr.type_getCurrentSol = function ()
	{
		return this.solstack[this.cur_sol];
	};
	cr.type_pushCleanSol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		else
			this.solstack[this.cur_sol].select_all = true;  // else clear next SOL
	};
	cr.type_pushCopySol = function ()
	{
		this.cur_sol++;
		if (this.cur_sol === this.solstack.length)
			this.solstack.push(new cr.selection(this));
		var clonesol = this.solstack[this.cur_sol];
		var prevsol = this.solstack[this.cur_sol - 1];
		if (prevsol.select_all)
			clonesol.select_all = true;
		else
		{
			clonesol.select_all = false;
			cr.shallowAssignArray(clonesol.instances, prevsol.instances);
			cr.shallowAssignArray(clonesol.else_instances, prevsol.else_instances);
		}
	};
	cr.type_popSol = function ()
	{
;
		this.cur_sol--;
	};
	cr.type_getBehaviorByName = function (behname)
	{
		var i, len, j, lenj, f, index = 0;
		if (!this.is_family)
		{
			for (i = 0, len = this.families.length; i < len; i++)
			{
				f = this.families[i];
				for (j = 0, lenj = f.behaviors.length; j < lenj; j++)
				{
					if (behname === f.behaviors[j].name)
					{
						this.extra.lastBehIndex = index;
						return f.behaviors[j];
					}
					index++;
				}
			}
		}
		for (i = 0, len = this.behaviors.length; i < len; i++) {
			if (behname === this.behaviors[i].name)
			{
				this.extra.lastBehIndex = index;
				return this.behaviors[i];
			}
			index++;
		}
		return null;
	};
	cr.type_getBehaviorIndexByName = function (behname)
	{
		var b = this.getBehaviorByName(behname);
		if (b)
			return this.extra.lastBehIndex;
		else
			return -1;
	};
	cr.type_getEffectIndexByName = function (name_)
	{
		var i, len;
		for (i = 0, len = this.effect_types.length; i < len; i++)
		{
			if (this.effect_types[i].name === name_)
				return i;
		}
		return -1;
	};
	cr.type_applySolToContainer = function ()
	{
		if (!this.is_contained || this.is_family)
			return;
		var i, len, j, lenj, t, sol, sol2;
		this.updateIIDs();
		sol = this.getCurrentSol();
		var select_all = sol.select_all;
		var es = this.runtime.getCurrentEventStack();
		var orblock = es && es.current_event && es.current_event.orblock;
		for (i = 0, len = this.container.length; i < len; i++)
		{
			t = this.container[i];
			if (t === this)
				continue;
			t.updateIIDs();
			sol2 = t.getCurrentSol();
			sol2.select_all = select_all;
			if (!select_all)
			{
				sol2.instances.length = sol.instances.length;
				for (j = 0, lenj = sol.instances.length; j < lenj; j++)
					sol2.instances[j] = t.getInstanceByIID(sol.instances[j].iid);
				if (orblock)
				{
					sol2.else_instances.length = sol.else_instances.length;
					for (j = 0, lenj = sol.else_instances.length; j < lenj; j++)
						sol2.else_instances[j] = t.getInstanceByIID(sol.else_instances[j].iid);
				}
			}
		}
	};
	cr.type_toString = function ()
	{
		return "Type" + this.sid;
	};
	cr.do_cmp = function (x, cmp, y)
	{
		if (typeof x === "undefined" || typeof y === "undefined")
			return false;
		switch (cmp)
		{
			case 0:     // equal
				return x === y;
			case 1:     // not equal
				return x !== y;
			case 2:     // less
				return x < y;
			case 3:     // less/equal
				return x <= y;
			case 4:     // greater
				return x > y;
			case 5:     // greater/equal
				return x >= y;
			default:
;
				return false;
		}
	};
})();
cr.shaders = {};
;
;
cr.plugins_.Audio = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Audio.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	var audRuntime = null;
	var audInst = null;
	var audTag = "";
	var appPath = "";			// for PhoneGap only
	var API_HTML5 = 0;
	var API_WEBAUDIO = 1;
	var API_PHONEGAP = 2;
	var API_APPMOBI = 3;
	var api = API_HTML5;
	var context = null;
	var audioBuffers = [];		// cache of buffers
	var audioInstances = [];	// cache of instances
	var lastAudio = null;
	var useOgg = false;			// determined at create time
	var timescale_mode = 0;
	var silent = false;
	var masterVolume = 1;
	var listenerX = 0;
	var listenerY = 0;
	var panningModel = 1;		// HRTF
	var distanceModel = 1;		// Inverse
	var refDistance = 10;
	var maxDistance = 10000;
	var rolloffFactor = 1;
	var micSource = null;
	var micTag = "";
	var isMusicWorkaround = false;
	var musicPlayNextTouch = [];
	function dbToLinear(x)
	{
		var v = dbToLinear_nocap(x);
		if (v < 0)
			v = 0;
		if (v > 1)
			v = 1;
		return v;
	};
	function linearToDb(x)
	{
		if (x < 0)
			x = 0;
		if (x > 1)
			x = 1;
		return linearToDb_nocap(x);
	};
	function dbToLinear_nocap(x)
	{
		return Math.pow(10, x / 20);
	};
	function linearToDb_nocap(x)
	{
		return (Math.log(x) / Math.log(10)) * 20;
	};
	var effects = {};
	function getDestinationForTag(tag)
	{
		tag = tag.toLowerCase();
		if (effects.hasOwnProperty(tag))
		{
			if (effects[tag].length)
				return effects[tag][0].getInputNode();
		}
		return context["destination"];
	};
	function createGain()
	{
		if (context["createGain"])
			return context["createGain"]();
		else
			return context["createGainNode"]();
	};
	function createDelay(d)
	{
		if (context["createDelay"])
			return context["createDelay"](d);
		else
			return context["createDelayNode"](d);
	};
	function startSource(s)
	{
		if (s["start"])
			s["start"](0);
		else
			s["noteOn"](0);
	};
	function startSourceAt(s, x, d)
	{
		if (s["start"])
			s["start"](0, x);
		else
			s["noteGrainOn"](0, x, d - x);
	};
	function stopSource(s)
	{
		try {
			if (s["stop"])
				s["stop"](0);
			else
				s["noteOff"](0);
		}
		catch (e) {}
	};
	function setAudioParam(ap, value, ramp, time)
	{
		if (!ap)
			return;		// iOS is missing some parameters
		ap["cancelScheduledValues"](0);
		if (time === 0)
		{
			ap["value"] = value;
			return;
		}
		var curTime = context["currentTime"];
		time += curTime;
		switch (ramp) {
		case 0:		// step
			ap["setValueAtTime"](value, time);
			break;
		case 1:		// linear
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["linearRampToValueAtTime"](value, time);
			break;
		case 2:		// exponential
			ap["setValueAtTime"](ap["value"], curTime);		// to set what to ramp from
			ap["exponentialRampToValueAtTime"](value, time);
			break;
		}
	};
	var filterTypes = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
	function FilterEffect(type, freq, detune, q, gain, mix)
	{
		this.type = "filter";
		this.params = [type, freq, detune, q, gain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = type;
		else
			this.filterNode["type"] = filterTypes[type];
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.filterNode["gain"]["value"] = gain;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
	};
	FilterEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	FilterEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	FilterEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FilterEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 1:		// filter frequency
			this.params[1] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[2] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[3] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is in dB here)
			this.params[4] = value;
			setAudioParam(this.filterNode["gain"], value, ramp, time);
			break;
		}
	};
	function DelayEffect(delayTime, delayGain, mix)
	{
		this.type = "delay";
		this.params = [delayTime, delayGain, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.mainNode = createGain();
		this.delayNode = createDelay(delayTime);
		this.delayNode["delayTime"]["value"] = delayTime;
		this.delayGainNode = createGain();
		this.delayGainNode["gain"]["value"] = delayGain;
		this.inputNode["connect"](this.mainNode);
		this.inputNode["connect"](this.dryNode);
		this.mainNode["connect"](this.wetNode);
		this.mainNode["connect"](this.delayNode);
		this.delayNode["connect"](this.delayGainNode);
		this.delayGainNode["connect"](this.mainNode);
	};
	DelayEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DelayEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.mainNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.delayGainNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DelayEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DelayEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[2] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 4:		// filter/delay gain (note value is passed in dB but needs to be linear here)
			this.params[1] = dbToLinear(value);
			setAudioParam(this.delayGainNode["gain"], dbToLinear(value), ramp, time);
			break;
		case 5:		// delay time
			this.params[0] = value;
			setAudioParam(this.delayNode["delayTime"], value, ramp, time);
			break;
		}
	};
	function ConvolveEffect(buffer, normalize, mix, src)
	{
		this.type = "convolve";
		this.params = [normalize, mix, src];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.convolveNode = context["createConvolver"]();
		if (buffer)
		{
			this.convolveNode["normalize"] = normalize;
			this.convolveNode["buffer"] = buffer;
		}
		this.inputNode["connect"](this.convolveNode);
		this.inputNode["connect"](this.dryNode);
		this.convolveNode["connect"](this.wetNode);
	};
	ConvolveEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	ConvolveEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.convolveNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	ConvolveEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	ConvolveEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function FlangerEffect(delay, modulation, freq, feedback, mix)
	{
		this.type = "flanger";
		this.params = [delay, modulation, freq, feedback, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.feedbackNode = createGain();
		this.feedbackNode["gain"]["value"] = feedback;
		this.delayNode = createDelay(delay + modulation);
		this.delayNode["delayTime"]["value"] = delay;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.delayNode);
		this.inputNode["connect"](this.dryNode);
		this.delayNode["connect"](this.wetNode);
		this.delayNode["connect"](this.feedbackNode);
		this.feedbackNode["connect"](this.delayNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.delayNode["delayTime"]);
		startSource(this.oscNode);
	};
	FlangerEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	FlangerEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.delayNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.feedbackNode["disconnect"]();
	};
	FlangerEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	FlangerEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 6:		// modulation
			this.params[1] = value / 1000;
			setAudioParam(this.oscGainNode["gain"], value / 1000, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[2] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		case 8:		// feedback
			this.params[3] = value / 100;
			setAudioParam(this.feedbackNode["gain"], value / 100, ramp, time);
			break;
		}
	};
	function PhaserEffect(freq, detune, q, modulation, modfreq, mix)
	{
		this.type = "phaser";
		this.params = [freq, detune, q, modulation, modfreq, mix];
		this.inputNode = createGain();
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - (mix / 2);
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix / 2;
		this.filterNode = context["createBiquadFilter"]();
		if (typeof this.filterNode["type"] === "number")
			this.filterNode["type"] = 7;	// all-pass
		else
			this.filterNode["type"] = "allpass";
		this.filterNode["frequency"]["value"] = freq;
		if (this.filterNode["detune"])		// iOS 6 doesn't have detune yet
			this.filterNode["detune"]["value"] = detune;
		this.filterNode["Q"]["value"] = q;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = modfreq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = modulation;
		this.inputNode["connect"](this.filterNode);
		this.inputNode["connect"](this.dryNode);
		this.filterNode["connect"](this.wetNode);
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.filterNode["frequency"]);
		startSource(this.oscNode);
	};
	PhaserEffect.prototype.connectTo = function (node)
	{
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
	};
	PhaserEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.filterNode["disconnect"]();
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.dryNode["disconnect"]();
		this.wetNode["disconnect"]();
	};
	PhaserEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	PhaserEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[5] = value;
			setAudioParam(this.wetNode["gain"], value / 2, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - (value / 2), ramp, time);
			break;
		case 1:		// filter frequency
			this.params[0] = value;
			setAudioParam(this.filterNode["frequency"], value, ramp, time);
			break;
		case 2:		// filter detune
			this.params[1] = value;
			setAudioParam(this.filterNode["detune"], value, ramp, time);
			break;
		case 3:		// filter Q
			this.params[2] = value;
			setAudioParam(this.filterNode["Q"], value, ramp, time);
			break;
		case 6:		// modulation
			this.params[3] = value;
			setAudioParam(this.oscGainNode["gain"], value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[4] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function GainEffect(g)
	{
		this.type = "gain";
		this.params = [g];
		this.node = createGain();
		this.node["gain"]["value"] = g;
	};
	GainEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	GainEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	GainEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	GainEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 4:		// gain
			this.params[0] = dbToLinear(value);
			setAudioParam(this.node["gain"], dbToLinear(value), ramp, time);
			break;
		}
	};
	function TremoloEffect(freq, mix)
	{
		this.type = "tremolo";
		this.params = [freq, mix];
		this.node = createGain();
		this.node["gain"]["value"] = 1 - (mix / 2);
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscGainNode = createGain();
		this.oscGainNode["gain"]["value"] = mix / 2;
		this.oscNode["connect"](this.oscGainNode);
		this.oscGainNode["connect"](this.node["gain"]);
		startSource(this.oscNode);
	};
	TremoloEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	TremoloEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.oscGainNode["disconnect"]();
		this.node["disconnect"]();
	};
	TremoloEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	TremoloEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.node["gain"]["value"], 1 - (value / 2), ramp, time);
			setAudioParam(this.oscGainNode["gain"]["value"], value / 2, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function RingModulatorEffect(freq, mix)
	{
		this.type = "ringmod";
		this.params = [freq, mix];
		this.inputNode = createGain();
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.ringNode = createGain();
		this.ringNode["gain"]["value"] = 0;
		this.oscNode = context["createOscillator"]();
		this.oscNode["frequency"]["value"] = freq;
		this.oscNode["connect"](this.ringNode["gain"]);
		startSource(this.oscNode);
		this.inputNode["connect"](this.ringNode);
		this.inputNode["connect"](this.dryNode);
		this.ringNode["connect"](this.wetNode);
	};
	RingModulatorEffect.prototype.connectTo = function (node_)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node_);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node_);
	};
	RingModulatorEffect.prototype.remove = function ()
	{
		this.oscNode["disconnect"]();
		this.ringNode["disconnect"]();
		this.inputNode["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	RingModulatorEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	RingModulatorEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[1] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		case 7:		// modulation frequency
			this.params[0] = value;
			setAudioParam(this.oscNode["frequency"], value, ramp, time);
			break;
		}
	};
	function DistortionEffect(threshold, headroom, drive, makeupgain, mix)
	{
		this.type = "distortion";
		this.params = [threshold, headroom, drive, makeupgain, mix];
		this.inputNode = createGain();
		this.preGain = createGain();
		this.postGain = createGain();
		this.setDrive(drive, dbToLinear_nocap(makeupgain));
		this.wetNode = createGain();
		this.wetNode["gain"]["value"] = mix;
		this.dryNode = createGain();
		this.dryNode["gain"]["value"] = 1 - mix;
		this.waveShaper = context["createWaveShaper"]();
		this.curve = new Float32Array(65536);
		this.generateColortouchCurve(threshold, headroom);
		this.waveShaper.curve = this.curve;
		this.inputNode["connect"](this.preGain);
		this.inputNode["connect"](this.dryNode);
		this.preGain["connect"](this.waveShaper);
		this.waveShaper["connect"](this.postGain);
		this.postGain["connect"](this.wetNode);
	};
	DistortionEffect.prototype.setDrive = function (drive, makeupgain)
	{
		if (drive < 0.01)
			drive = 0.01;
		this.preGain["gain"]["value"] = drive;
		this.postGain["gain"]["value"] = Math.pow(1 / drive, 0.6) * makeupgain;
	};
	function e4(x, k)
	{
		return 1.0 - Math.exp(-k * x);
	}
	DistortionEffect.prototype.shape = function (x, linearThreshold, linearHeadroom)
	{
		var maximum = 1.05 * linearHeadroom * linearThreshold;
		var kk = (maximum - linearThreshold);
		var sign = x < 0 ? -1 : +1;
		var absx = x < 0 ? -x : x;
		var shapedInput = absx < linearThreshold ? absx : linearThreshold + kk * e4(absx - linearThreshold, 1.0 / kk);
		shapedInput *= sign;
		return shapedInput;
	};
	DistortionEffect.prototype.generateColortouchCurve = function (threshold, headroom)
	{
		var linearThreshold = dbToLinear_nocap(threshold);
		var linearHeadroom = dbToLinear_nocap(headroom);
		var n = 65536;
		var n2 = n / 2;
		var x = 0;
		for (var i = 0; i < n2; ++i) {
			x = i / n2;
			x = this.shape(x, linearThreshold, linearHeadroom);
			this.curve[n2 + i] = x;
			this.curve[n2 - i - 1] = -x;
		}
	};
	DistortionEffect.prototype.connectTo = function (node)
	{
		this.wetNode["disconnect"]();
		this.wetNode["connect"](node);
		this.dryNode["disconnect"]();
		this.dryNode["connect"](node);
	};
	DistortionEffect.prototype.remove = function ()
	{
		this.inputNode["disconnect"]();
		this.preGain["disconnect"]();
		this.waveShaper["disconnect"]();
		this.postGain["disconnect"]();
		this.wetNode["disconnect"]();
		this.dryNode["disconnect"]();
	};
	DistortionEffect.prototype.getInputNode = function ()
	{
		return this.inputNode;
	};
	DistortionEffect.prototype.setParam = function(param, value, ramp, time)
	{
		switch (param) {
		case 0:		// mix
			value = value / 100;
			if (value < 0) value = 0;
			if (value > 1) value = 1;
			this.params[4] = value;
			setAudioParam(this.wetNode["gain"], value, ramp, time);
			setAudioParam(this.dryNode["gain"], 1 - value, ramp, time);
			break;
		}
	};
	function CompressorEffect(threshold, knee, ratio, attack, release)
	{
		this.type = "compressor";
		this.params = [threshold, knee, ratio, attack, release];
		this.node = context["createDynamicsCompressor"]();
		try {
			this.node["threshold"]["value"] = threshold;
			this.node["knee"]["value"] = knee;
			this.node["ratio"]["value"] = ratio;
			this.node["attack"]["value"] = attack;
			this.node["release"]["value"] = release;
		}
		catch (e) {}
	};
	CompressorEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	CompressorEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	CompressorEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	CompressorEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	function AnalyserEffect(fftSize, smoothing)
	{
		this.type = "analyser";
		this.params = [fftSize, smoothing];
		this.node = context["createAnalyser"]();
		this.node["fftSize"] = fftSize;
		this.node["smoothingTimeConstant"] = smoothing;
		this.freqBins = new Float32Array(this.node["frequencyBinCount"]);
		this.signal = new Uint8Array(fftSize);
		this.peak = 0;
		this.rms = 0;
	};
	AnalyserEffect.prototype.tick = function ()
	{
		this.node["getFloatFrequencyData"](this.freqBins);
		this.node["getByteTimeDomainData"](this.signal);
		var fftSize = this.node["fftSize"];
		var i = 0;
		this.peak = 0;
		var rmsSquaredSum = 0;
		var s = 0;
		for ( ; i < fftSize; i++)
		{
			s = (this.signal[i] - 128) / 128;
			if (s < 0)
				s = -s;
			if (this.peak < s)
				this.peak = s;
			rmsSquaredSum += s * s;
		}
		this.peak = linearToDb(this.peak);
		this.rms = linearToDb(Math.sqrt(rmsSquaredSum / fftSize));
	};
	AnalyserEffect.prototype.connectTo = function (node_)
	{
		this.node["disconnect"]();
		this.node["connect"](node_);
	};
	AnalyserEffect.prototype.remove = function ()
	{
		this.node["disconnect"]();
	};
	AnalyserEffect.prototype.getInputNode = function ()
	{
		return this.node;
	};
	AnalyserEffect.prototype.setParam = function(param, value, ramp, time)
	{
	};
	var OT_POS_SAMPLES = 4;
	function ObjectTracker()
	{
		this.obj = null;
		this.loadUid = 0;
		this.speeds = [];
		this.lastX = 0;
		this.lastY = 0;
		this.moveAngle = 0;
	};
	ObjectTracker.prototype.setObject = function (obj_)
	{
		this.obj = obj_;
		if (this.obj)
		{
			this.lastX = this.obj.x;
			this.lastY = this.obj.y;
		}
		this.speeds.length = 0;
	};
	ObjectTracker.prototype.hasObject = function ()
	{
		return !!this.obj;
	};
	ObjectTracker.prototype.tick = function (dt)
	{
		if (!this.obj || dt === 0)
			return;
		this.moveAngle = cr.angleTo(this.lastX, this.lastY, this.obj.x, this.obj.y);
		var s = cr.distanceTo(this.lastX, this.lastY, this.obj.x, this.obj.y) / dt;
		if (this.speeds.length < OT_POS_SAMPLES)
			this.speeds.push(s);
		else
		{
			this.speeds.shift();
			this.speeds.push(s);
		}
		this.lastX = this.obj.x;
		this.lastY = this.obj.y;
	};
	ObjectTracker.prototype.getSpeed = function ()
	{
		if (!this.speeds.length)
			return 0;
		var i, len, sum = 0;
		for (i = 0, len = this.speeds.length; i < len; i++)
		{
			sum += this.speeds[i];
		}
		return sum / this.speeds.length;
	};
	ObjectTracker.prototype.getVelocityX = function ()
	{
		return Math.cos(this.moveAngle) * this.getSpeed();
	};
	ObjectTracker.prototype.getVelocityY = function ()
	{
		return Math.sin(this.moveAngle) * this.getSpeed();
	};
	var iOShadtouch = false;	// has had touch input on iOS to work around web audio API muting
	function C2AudioBuffer(src_, is_music)
	{
		this.src = src_;
		this.myapi = api;
		this.is_music = is_music;
		this.added_end_listener = false;
		var self = this;
		this.outNode = null;
		this.mediaSourceNode = null;
		this.panWhenReady = [];		// for web audio API positioned sounds
		this.seekWhenReady = 0;
		this.pauseWhenReady = false;
		this.supportWebAudioAPI = false;
		if (api === API_WEBAUDIO && is_music)
		{
			this.myapi = API_HTML5;
			this.outNode = createGain();
		}
		this.bufferObject = null;			// actual audio object
		this.audioData = null;				// web audio api: ajax request result (compressed audio that needs decoding)
		var request;
		switch (this.myapi) {
		case API_HTML5:
			this.bufferObject = new Audio();
			if (api === API_WEBAUDIO && context["createMediaElementSource"] && !audRuntime.isFirefox && !/wiiu/i.test(navigator.userAgent))
			{
				this.supportWebAudioAPI = true;		// can be routed through web audio api
				this.bufferObject.addEventListener("canplay", function ()
				{
					if (!self.mediaSourceNode)		// protect against this event firing twice
					{
						self.mediaSourceNode = context["createMediaElementSource"](self.bufferObject);
						self.mediaSourceNode["connect"](self.outNode);
					}
				});
			}
			this.bufferObject.autoplay = false;	// this is only a source buffer, not an instance
			this.bufferObject.preload = "auto";
			this.bufferObject.src = src_;
			break;
		case API_WEBAUDIO:
			request = new XMLHttpRequest();
			request.open("GET", src_, true);
			request.responseType = "arraybuffer";
			request.onload = function () {
				self.audioData = request.response;
				self.decodeAudioBuffer();
			};
			request.send();
			break;
		case API_PHONEGAP:
			this.bufferObject = true;
			break;
		case API_APPMOBI:
			this.bufferObject = true;
			break;
		}
	};
	C2AudioBuffer.prototype.decodeAudioBuffer = function ()
	{
		if (this.bufferObject || !this.audioData)
			return;		// audio already decoded or AJAX request not yet complete
		var self = this;
		if (context["decodeAudioData"])
		{
			context["decodeAudioData"](this.audioData, function (buffer) {
					self.bufferObject = buffer;
					var p, i, len, a;
					if (!cr.is_undefined(self.playTagWhenReady) && !silent)
					{
						if (self.panWhenReady.length)
						{
							for (i = 0, len = self.panWhenReady.length; i < len; i++)
							{
								p = self.panWhenReady[i];
								a = new C2AudioInstance(self, p.thistag);
								a.setPannerEnabled(true);
								if (typeof p.objUid !== "undefined")
								{
									p.obj = audRuntime.getObjectByUID(p.objUid);
									if (!p.obj)
										continue;
								}
								if (p.obj)
								{
									var px = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, true);
									var py = cr.rotatePtAround(p.obj.x, p.obj.y, -p.obj.layer.getAngle(), listenerX, listenerY, false);
									a.setPan(px, py, cr.to_degrees(p.obj.angle - p.obj.layer.getAngle()), p.ia, p.oa, p.og);
									a.setObject(p.obj);
								}
								else
								{
									a.setPan(p.x, p.y, p.a, p.ia, p.oa, p.og);
								}
								a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
								if (self.pauseWhenReady)
									a.pause();
								audioInstances.push(a);
							}
							self.panWhenReady.length = 0;
						}
						else
						{
							a = new C2AudioInstance(self, self.playTagWhenReady);
							a.play(self.loopWhenReady, self.volumeWhenReady, self.seekWhenReady);
							if (self.pauseWhenReady)
								a.pause();
							audioInstances.push(a);
						}
					}
					else if (!cr.is_undefined(self.convolveWhenReady))
					{
						var convolveNode = self.convolveWhenReady.convolveNode;
						convolveNode["normalize"] = self.normalizeWhenReady;
						convolveNode["buffer"] = buffer;
					}
			});
		}
		else
		{
			this.bufferObject = context["createBuffer"](this.audioData, false);
			if (!cr.is_undefined(this.playTagWhenReady) && !silent)
			{
				var a = new C2AudioInstance(this, this.playTagWhenReady);
				a.play(this.loopWhenReady, this.volumeWhenReady, this.seekWhenReady);
				if (this.pauseWhenReady)
					a.pause();
				audioInstances.push(a);
			}
			else if (!cr.is_undefined(this.convolveWhenReady))
			{
				var convolveNode = this.convolveWhenReady.convolveNode;
				convolveNode["normalize"] = this.normalizeWhenReady;
				convolveNode["buffer"] = this.bufferObject;
			}
		}
	};
	C2AudioBuffer.prototype.isLoaded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.bufferObject["readyState"] === 4;	// HAVE_ENOUGH_DATA
		case API_WEBAUDIO:
			return !!this.audioData;			// null until AJAX request completes
		case API_PHONEGAP:
			return true;
		case API_APPMOBI:
			return true;
		}
		return false;
	};
	function C2AudioInstance(buffer_, tag_)
	{
		var self = this;
		this.tag = tag_;
		this.fresh = true;
		this.stopped = true;
		this.src = buffer_.src;
		this.buffer = buffer_;
		this.myapi = api;
		this.is_music = buffer_.is_music;
		this.playbackRate = 1;
		this.pgended = true;			// for PhoneGap only: ended flag
		this.resume_me = false;			// make sure resumes when leaving suspend
		this.is_paused = false;
		this.resume_position = 0;		// for web audio api to resume from correct playback position
		this.looping = false;
		this.is_muted = false;
		this.is_silent = false;
		this.volume = 1;
		this.mutevol = 1;
		this.startTime = audRuntime.kahanTime.sum;
		this.gainNode = null;
		this.pannerNode = null;
		this.pannerEnabled = false;
		this.objectTracker = null;
		this.panX = 0;
		this.panY = 0;
		this.panAngle = 0;
		this.panConeInner = 0;
		this.panConeOuter = 0;
		this.panConeOuterGain = 0;
		this.instanceObject = null;
		var add_end_listener = false;
		if (this.myapi === API_WEBAUDIO && this.buffer.myapi === API_HTML5 && !this.buffer.supportWebAudioAPI)
			this.myapi = API_HTML5;
		switch (this.myapi) {
		case API_HTML5:
			if (this.is_music)
			{
				this.instanceObject = buffer_.bufferObject;
				add_end_listener = !buffer_.added_end_listener;
				buffer_.added_end_listener = true;
			}
			else
			{
				this.instanceObject = new Audio();
				this.instanceObject.autoplay = false;
				this.instanceObject.src = buffer_.bufferObject.src;
				add_end_listener = true;
			}
			if (add_end_listener)
			{
				this.instanceObject.addEventListener('ended', function () {
						audTag = self.tag;
						self.stopped = true;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				});
			}
			break;
		case API_WEBAUDIO:
			this.gainNode = createGain();
			this.gainNode["connect"](getDestinationForTag(tag_));
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (buffer_.bufferObject)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = buffer_.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
			}
			else
			{
				this.instanceObject = this.buffer.bufferObject;		// reference the audio element
				this.buffer.outNode["connect"](this.gainNode);
			}
			break;
		case API_PHONEGAP:
			this.instanceObject = new window["Media"](appPath + this.src, null, null, function (status) {
					if (status === window["Media"]["MEDIA_STOPPED"])
					{
						self.pgended = true;
						self.stopped = true;
						audTag = self.tag;
						audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
					}
			});
			break;
		case API_APPMOBI:
			this.instanceObject = true;
			break;
		}
	};
	C2AudioInstance.prototype.hasEnded = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			return this.instanceObject.ended;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh && !this.stopped && this.instanceObject["loop"])
					return false;
				if (this.is_paused)
					return false;
				return (audRuntime.kahanTime.sum - this.startTime) > this.buffer.bufferObject["duration"];
			}
			else
				return this.instanceObject.ended;
		case API_PHONEGAP:
			return this.pgended;
		case API_APPMOBI:
			true;	// recycling an AppMobi sound does not matter because it will just do another throwaway playSound
		}
		return true;
	};
	C2AudioInstance.prototype.canBeRecycled = function ()
	{
		if (this.fresh || this.stopped)
			return true;		// not yet used or is not playing
		return this.hasEnded();
	};
	C2AudioInstance.prototype.setPannerEnabled = function (enable_)
	{
		if (api !== API_WEBAUDIO)
			return;
		if (!this.pannerEnabled && enable_)
		{
			if (!this.gainNode)
				return;
			if (!this.pannerNode)
			{
				this.pannerNode = context["createPanner"]();
				if (typeof this.pannerNode["panningModel"] === "number")
					this.pannerNode["panningModel"] = panningModel;
				else
					this.pannerNode["panningModel"] = ["equalpower", "HRTF", "soundfield"][panningModel];
				if (typeof this.pannerNode["distanceModel"] === "number")
					this.pannerNode["distanceModel"] = distanceModel;
				else
					this.pannerNode["distanceModel"] = ["linear", "inverse", "exponential"][distanceModel];
				this.pannerNode["refDistance"] = refDistance;
				this.pannerNode["maxDistance"] = maxDistance;
				this.pannerNode["rolloffFactor"] = rolloffFactor;
			}
			this.gainNode["disconnect"]();
			this.gainNode["connect"](this.pannerNode);
			this.pannerNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = true;
		}
		else if (this.pannerEnabled && !enable_)
		{
			if (!this.gainNode)
				return;
			this.pannerNode["disconnect"]();
			this.gainNode["disconnect"]();
			this.gainNode["connect"](getDestinationForTag(this.tag));
			this.pannerEnabled = false;
		}
	};
	C2AudioInstance.prototype.setPan = function (x, y, angle, innerangle, outerangle, outergain)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		this.pannerNode["setPosition"](x, y, 0);
		this.pannerNode["setOrientation"](Math.cos(cr.to_radians(angle)), Math.sin(cr.to_radians(angle)), 0);
		this.pannerNode["coneInnerAngle"] = innerangle;
		this.pannerNode["coneOuterAngle"] = outerangle;
		this.pannerNode["coneOuterGain"] = outergain;
		this.panX = x;
		this.panY = y;
		this.panAngle = angle;
		this.panConeInner = innerangle;
		this.panConeOuter = outerangle;
		this.panConeOuterGain = outergain;
	};
	C2AudioInstance.prototype.setObject = function (o)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO)
			return;
		if (!this.objectTracker)
			this.objectTracker = new ObjectTracker();
		this.objectTracker.setObject(o);
	};
	C2AudioInstance.prototype.tick = function (dt)
	{
		if (!this.pannerEnabled || api !== API_WEBAUDIO || !this.objectTracker || !this.objectTracker.hasObject() || !this.isPlaying())
		{
			return;
		}
		this.objectTracker.tick(dt);
		var inst = this.objectTracker.obj;
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		this.pannerNode["setPosition"](px, py, 0);
		var a = 0;
		if (typeof this.objectTracker.obj.angle !== "undefined")
		{
			a = inst.angle - inst.layer.getAngle();
			this.pannerNode["setOrientation"](Math.cos(a), Math.sin(a), 0);
		}
		px = cr.rotatePtAround(this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), -inst.layer.getAngle(), 0, 0, true);
		py = cr.rotatePtAround(this.objectTracker.getVelocityX(), this.objectTracker.getVelocityY(), -inst.layer.getAngle(), 0, 0, false);
		this.pannerNode["setVelocity"](px, py, 0);
	};
	C2AudioInstance.prototype.play = function (looping, vol, fromPosition)
	{
		var instobj = this.instanceObject;
		this.looping = looping;
		this.volume = vol;
		var seekPos = fromPosition || 0;
		switch (this.myapi) {
		case API_HTML5:
			if (instobj.playbackRate !== 1.0)
				instobj.playbackRate = 1.0;
			if (instobj.volume !== vol * masterVolume)
				instobj.volume = vol * masterVolume;
			if (instobj.loop !== looping)
				instobj.loop = looping;
			if (instobj.muted)
				instobj.muted = false;
			if (instobj.currentTime !== seekPos)
			{
				try {
					instobj.currentTime = seekPos;
				}
				catch (err)
				{
;
				}
			}
			if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
				musicPlayNextTouch.push(this);
			else
			{
				try {
					this.instanceObject.play();
				}
				catch (e) {}	// sometimes throws on WP8.1... try not to kill the app
			}
			break;
		case API_WEBAUDIO:
			this.muted = false;
			this.mutevol = 1;
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (!this.fresh)
				{
					this.instanceObject = context["createBufferSource"]();
					this.instanceObject["buffer"] = this.buffer.bufferObject;
					this.instanceObject["connect"](this.gainNode);
				}
				this.instanceObject.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (seekPos === 0)
					startSource(this.instanceObject);
				else
					startSourceAt(this.instanceObject, seekPos, this.getDuration());
			}
			else
			{
				if (instobj.playbackRate !== 1.0)
					instobj.playbackRate = 1.0;
				if (instobj.loop !== looping)
					instobj.loop = looping;
				this.gainNode["gain"]["value"] = vol * masterVolume;
				if (instobj.currentTime !== seekPos)
				{
					try {
						instobj.currentTime = seekPos;
					}
					catch (err)
					{
;
					}
				}
				if (this.is_music && isMusicWorkaround && !audRuntime.isInUserInputEvent)
					musicPlayNextTouch.push(this);
				else
					instobj.play();
			}
			break;
		case API_PHONEGAP:
			if ((!this.fresh && this.stopped) || seekPos !== 0)
				instobj["seekTo"](seekPos);
			instobj["play"]();
			this.pgended = false;
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["playSound"](this.src, looping);
			else
				AppMobi["player"]["playSound"](this.src, looping);
			break;
		}
		this.playbackRate = 1;
		this.startTime = audRuntime.kahanTime.sum - seekPos;
		this.fresh = false;
		this.stopped = false;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.stop = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
				stopSource(this.instanceObject);
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["stop"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.stopped = true;
		this.is_paused = false;
	};
	C2AudioInstance.prototype.pause = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			if (!this.instanceObject.paused)
				this.instanceObject.pause();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.resume_position = this.getPlaybackTime();
				if (this.looping)
					this.resume_position = this.resume_position % this.getDuration();
				stopSource(this.instanceObject);
			}
			else
			{
				if (!this.instanceObject.paused)
					this.instanceObject.pause();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["pause"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["stopSound"](this.src);
			break;
		}
		this.is_paused = true;
	};
	C2AudioInstance.prototype.resume = function ()
	{
		if (this.fresh || this.stopped || this.hasEnded() || !this.is_paused)
			return;
		switch (this.myapi) {
		case API_HTML5:
			this.instanceObject.play();
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				this.instanceObject = context["createBufferSource"]();
				this.instanceObject["buffer"] = this.buffer.bufferObject;
				this.instanceObject["connect"](this.gainNode);
				this.instanceObject.loop = this.looping;
				this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
				this.startTime = audRuntime.kahanTime.sum - this.resume_position;
				startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
			}
			else
			{
				this.instanceObject.play();
			}
			break;
		case API_PHONEGAP:
			this.instanceObject["play"]();
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["resumeSound"](this.src);
			break;
		}
		this.is_paused = false;
	};
	C2AudioInstance.prototype.seek = function (pos)
	{
		if (this.fresh || this.stopped || this.hasEnded())
			return;
		switch (this.myapi) {
		case API_HTML5:
			try {
				this.instanceObject.currentTime = pos;
			}
			catch (e) {}
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					this.resume_position = pos;
				else
				{
					this.pause();
					this.resume_position = pos;
					this.resume();
				}
			}
			else
			{
				try {
					this.instanceObject.currentTime = pos;
				}
				catch (e) {}
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["seekSound"](this.src, pos);
			break;
		}
	};
	C2AudioInstance.prototype.reconnect = function (toNode)
	{
		if (this.myapi !== API_WEBAUDIO)
			return;
		if (this.pannerEnabled)
		{
			this.pannerNode["disconnect"]();
			this.pannerNode["connect"](toNode);
		}
		else
		{
			this.gainNode["disconnect"]();
			this.gainNode["connect"](toNode);
		}
	};
	C2AudioInstance.prototype.getDuration = function ()
	{
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.duration !== "undefined")
				return this.instanceObject.duration;
			else
				return 0;
		case API_WEBAUDIO:
			return this.buffer.bufferObject["duration"];
		case API_PHONEGAP:
			return this.instanceObject["getDuration"]();
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				return AppMobi["context"]["getDurationSound"](this.src);
			else
				return 0;
		}
		return 0;
	};
	C2AudioInstance.prototype.getPlaybackTime = function ()
	{
		var duration = this.getDuration();
		var ret = 0;
		switch (this.myapi) {
		case API_HTML5:
			if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.is_paused)
					return this.resume_position;
				else
					ret = audRuntime.kahanTime.sum - this.startTime;
			}
			else if (typeof this.instanceObject.currentTime !== "undefined")
				ret = this.instanceObject.currentTime;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				ret = AppMobi["context"]["getPlaybackTimeSound"](this.src);
			break;
		}
		if (!this.looping && ret > duration)
			ret = duration;
		return ret;
	};
	C2AudioInstance.prototype.isPlaying = function ()
	{
		return !this.is_paused && !this.fresh && !this.stopped && !this.hasEnded();
	};
	C2AudioInstance.prototype.setVolume = function (v)
	{
		this.volume = v;
		this.updateVolume();
	};
	C2AudioInstance.prototype.updateVolume = function ()
	{
		var volToSet = this.volume * masterVolume;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.volume && this.instanceObject.volume !== volToSet)
				this.instanceObject.volume = volToSet;
			break;
		case API_WEBAUDIO:
			this.gainNode["gain"]["value"] = volToSet * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.getVolume = function ()
	{
		return this.volume;
	};
	C2AudioInstance.prototype.doSetMuted = function (m)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.muted !== !!m)
				this.instanceObject.muted = !!m;
			break;
		case API_WEBAUDIO:
			this.mutevol = (m ? 0 : 1);
			this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setMuted = function (m)
	{
		this.is_muted = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setSilent = function (m)
	{
		this.is_silent = !!m;
		this.doSetMuted(this.is_muted || this.is_silent);
	};
	C2AudioInstance.prototype.setLooping = function (l)
	{
		this.looping = l;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_WEBAUDIO:
			if (this.instanceObject.loop !== !!l)
				this.instanceObject.loop = !!l;
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			if (audRuntime.isDirectCanvas)
				AppMobi["context"]["setLoopingSound"](this.src, l);
			break;
		}
	};
	C2AudioInstance.prototype.setPlaybackRate = function (r)
	{
		this.playbackRate = r;
		this.updatePlaybackRate();
	};
	C2AudioInstance.prototype.updatePlaybackRate = function ()
	{
		var r = this.playbackRate;
		if ((timescale_mode === 1 && !this.is_music) || timescale_mode === 2)
			r *= audRuntime.timescale;
		switch (this.myapi) {
		case API_HTML5:
			if (this.instanceObject.playbackRate !== r)
				this.instanceObject.playbackRate = r;
			break;
		case API_WEBAUDIO:
			if (this.buffer.myapi === API_WEBAUDIO)
			{
				if (this.instanceObject["playbackRate"]["value"] !== r)
					this.instanceObject["playbackRate"]["value"] = r;
			}
			else
			{
				if (this.instanceObject.playbackRate !== r)
					this.instanceObject.playbackRate = r;
			}
			break;
		case API_PHONEGAP:
			break;
		case API_APPMOBI:
			break;
		}
	};
	C2AudioInstance.prototype.setSuspended = function (s)
	{
		switch (this.myapi) {
		case API_HTML5:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_WEBAUDIO:
			if (s)
			{
				if (this.isPlaying())
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.resume_position = this.getPlaybackTime();
						if (this.looping)
							this.resume_position = this.resume_position % this.getDuration();
						stopSource(this.instanceObject);
					}
					else
						this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
				{
					if (this.buffer.myapi === API_WEBAUDIO)
					{
						this.instanceObject = context["createBufferSource"]();
						this.instanceObject["buffer"] = this.buffer.bufferObject;
						this.instanceObject["connect"](this.gainNode);
						this.instanceObject.loop = this.looping;
						this.gainNode["gain"]["value"] = masterVolume * this.volume * this.mutevol;
						this.startTime = audRuntime.kahanTime.sum - this.resume_position;
						startSourceAt(this.instanceObject, this.resume_position, this.getDuration());
					}
					else
					{
						this.instanceObject["play"]();
					}
				}
			}
			break;
		case API_PHONEGAP:
			if (s)
			{
				if (this.isPlaying())
				{
					this.instanceObject["pause"]();
					this.resume_me = true;
				}
				else
					this.resume_me = false;
			}
			else
			{
				if (this.resume_me)
					this.instanceObject["play"]();
			}
			break;
		case API_APPMOBI:
			break;
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		audRuntime = this.runtime;
		audInst = this;
		this.listenerTracker = null;
		this.listenerZ = -600;
		if ((this.runtime.isiOS || (this.runtime.isAndroid && (this.runtime.isChrome || this.runtime.isAndroidStockBrowser))) && !this.runtime.isCrosswalk && !this.runtime.isDomFree)
		{
			isMusicWorkaround = true;
		}
		context = null;
		if (typeof AudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new AudioContext();
		}
		else if (typeof webkitAudioContext !== "undefined")
		{
			api = API_WEBAUDIO;
			context = new webkitAudioContext();
		}
		if ((this.runtime.isiOS && api === API_WEBAUDIO) || isMusicWorkaround)
		{
			document.addEventListener("touchstart", function ()
			{
				var i, len, m;
				if (!iOShadtouch && context)
				{
					var buffer = context["createBuffer"](1, 1, 22050);
					var source = context["createBufferSource"]();
					source["buffer"] = buffer;
					source["connect"](context["destination"]);
					startSource(source);
					iOShadtouch = true;
				}
				if (isMusicWorkaround)
				{
					if (!silent)
					{
						for (i = 0, len = musicPlayNextTouch.length; i < len; ++i)
						{
							m = musicPlayNextTouch[i];
							if (!m.stopped && !m.is_paused)
								m.instanceObject.play();
						}
					}
					musicPlayNextTouch.length = 0;
				}
			}, true);
		}
		if (api !== API_WEBAUDIO)
		{
			if (this.runtime.isPhoneGap)
				api = API_PHONEGAP;
			else if (this.runtime.isAppMobi)
				api = API_APPMOBI;
		}
		if (api === API_PHONEGAP)
		{
			appPath = location.href;
			var i = appPath.lastIndexOf("/");
			if (i > -1)
				appPath = appPath.substr(0, i + 1);
			appPath = appPath.replace("file://", "");
		}
		if (this.runtime.isSafari && this.runtime.isWindows && typeof Audio === "undefined")
		{
			alert("It looks like you're using Safari for Windows without Quicktime.  Audio cannot be played until Quicktime is installed.");
			this.runtime.DestroyInstance(this);
		}
		else
		{
			if (this.runtime.isDirectCanvas)
				useOgg = this.runtime.isAndroid;		// AAC on iOS, OGG on Android
			else
			{
				try {
					useOgg = !!(new Audio().canPlayType('audio/ogg; codecs="vorbis"'));
				}
				catch (e)
				{
					useOgg = false;
				}
			}
			switch (api) {
			case API_HTML5:
;
				break;
			case API_WEBAUDIO:
;
				break;
			case API_PHONEGAP:
;
				break;
			case API_APPMOBI:
;
				break;
			default:
;
			}
			this.runtime.tickMe(this);
		}
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function ()
	{
		timescale_mode = this.properties[0];	// 0 = off, 1 = sounds only, 2 = all
		this.saveload = this.properties[1];		// 0 = all, 1 = sounds only, 2 = music only, 3 = none
		panningModel = this.properties[2];		// 0 = equalpower, 1 = hrtf, 3 = soundfield
		distanceModel = this.properties[3];		// 0 = linear, 1 = inverse, 2 = exponential
		this.listenerZ = -this.properties[4];
		refDistance = this.properties[5];
		maxDistance = this.properties[6];
		rolloffFactor = this.properties[7];
		this.listenerTracker = new ObjectTracker();
		if (api === API_WEBAUDIO)
		{
			context["listener"]["speedOfSound"] = this.properties[8];
			context["listener"]["dopplerFactor"] = this.properties[9];
			context["listener"]["setPosition"](this.runtime.draw_width / 2, this.runtime.draw_height / 2, this.listenerZ);
			context["listener"]["setOrientation"](0, 0, 1, 0, -1, 0);
			window["c2OnAudioMicStream"] = function (localMediaStream, tag)
			{
				if (micSource)
					micSource["disconnect"]();
				micTag = tag.toLowerCase();
				micSource = context["createMediaStreamSource"](localMediaStream);
				micSource["connect"](getDestinationForTag(micTag));
			};
		}
		this.runtime.addSuspendCallback(function(s)
		{
			audInst.onSuspend(s);
		});
		var self = this;
		this.runtime.addDestroyCallback(function (inst)
		{
			self.onInstanceDestroyed(inst);
		});
	};
	instanceProto.onInstanceDestroyed = function (inst)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.objectTracker)
			{
				if (a.objectTracker.obj === inst)
				{
					a.objectTracker.obj = null;
					if (a.pannerEnabled && a.isPlaying() && a.looping)
						a.stop();
				}
			}
		}
		if (this.listenerTracker.obj === inst)
			this.listenerTracker.obj = null;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"silent": silent,
			"masterVolume": masterVolume,
			"listenerZ": this.listenerZ,
			"listenerUid": this.listenerTracker.hasObject() ? this.listenerTracker.obj.uid : -1,
			"playing": [],
			"effects": {}
		};
		var playingarr = o["playing"];
		var i, len, a, d, p, panobj, playbackTime;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (!a.isPlaying())
				continue;				// no need to save stopped sounds
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			if (a.is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!a.is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			playbackTime = a.getPlaybackTime();
			if (a.looping)
				playbackTime = playbackTime % a.getDuration();
			d = {
				"tag": a.tag,
				"buffersrc": a.buffer.src,
				"is_music": a.is_music,
				"playbackTime": playbackTime,
				"volume": a.volume,
				"looping": a.looping,
				"muted": a.is_muted,
				"playbackRate": a.playbackRate,
				"paused": a.is_paused,
				"resume_position": a.resume_position
			};
			if (a.pannerEnabled)
			{
				d["pan"] = {};
				panobj = d["pan"];
				if (a.objectTracker && a.objectTracker.hasObject())
				{
					panobj["objUid"] = a.objectTracker.obj.uid;
				}
				else
				{
					panobj["x"] = a.panX;
					panobj["y"] = a.panY;
					panobj["a"] = a.panAngle;
				}
				panobj["ia"] = a.panConeInner;
				panobj["oa"] = a.panConeOuter;
				panobj["og"] = a.panConeOuterGain;
			}
			playingarr.push(d);
		}
		var fxobj = o["effects"];
		var fxarr;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				fxarr = [];
				for (i = 0, len = effects[p].length; i < len; i++)
				{
					fxarr.push({ "type": effects[p][i].type, "params": effects[p][i].params });
				}
				fxobj[p] = fxarr;
			}
		}
		return o;
	};
	var objectTrackerUidsToLoad = [];
	instanceProto.loadFromJSON = function (o)
	{
		var setSilent = o["silent"];
		masterVolume = o["masterVolume"];
		this.listenerZ = o["listenerZ"];
		this.listenerTracker.setObject(null);
		var listenerUid = o["listenerUid"];
		if (listenerUid !== -1)
		{
			this.listenerTracker.loadUid = listenerUid;
			objectTrackerUidsToLoad.push(this.listenerTracker);
		}
		var playingarr = o["playing"];
		var i, len, d, src, is_music, tag, playbackTime, looping, vol, b, a, p, pan, panObjUid;
		if (this.saveload !== 3)
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
			{
				a = audioInstances[i];
				if (a.is_music && this.saveload === 1)
					continue;		// only saving/loading sound: leave music playing
				if (!a.is_music && this.saveload === 2)
					continue;		// only saving/loading music: leave sound playing
				a.stop();
			}
		}
		var fxarr, fxtype, fxparams, fx;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				for (i = 0, len = effects[p].length; i < len; i++)
					effects[p][i].remove();
			}
		}
		cr.wipe(effects);
		for (p in o["effects"])
		{
			if (o["effects"].hasOwnProperty(p))
			{
				fxarr = o["effects"][p];
				for (i = 0, len = fxarr.length; i < len; i++)
				{
					fxtype = fxarr[i]["type"];
					fxparams = fxarr[i]["params"];
					switch (fxtype) {
					case "filter":
						addEffectForTag(p, new FilterEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "delay":
						addEffectForTag(p, new DelayEffect(fxparams[0], fxparams[1], fxparams[2]));
						break;
					case "convolve":
						src = fxparams[2];
						b = this.getAudioBuffer(src, false);
						if (b.bufferObject)
						{
							fx = new ConvolveEffect(b.bufferObject, fxparams[0], fxparams[1], src);
						}
						else
						{
							fx = new ConvolveEffect(null, fxparams[0], fxparams[1], src);
							b.normalizeWhenReady = fxparams[0];
							b.convolveWhenReady = fx;
						}
						addEffectForTag(p, fx);
						break;
					case "flanger":
						addEffectForTag(p, new FlangerEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "phaser":
						addEffectForTag(p, new PhaserEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4], fxparams[5]));
						break;
					case "gain":
						addEffectForTag(p, new GainEffect(fxparams[0]));
						break;
					case "tremolo":
						addEffectForTag(p, new TremoloEffect(fxparams[0], fxparams[1]));
						break;
					case "ringmod":
						addEffectForTag(p, new RingModulatorEffect(fxparams[0], fxparams[1]));
						break;
					case "distortion":
						addEffectForTag(p, new DistortionEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "compressor":
						addEffectForTag(p, new CompressorEffect(fxparams[0], fxparams[1], fxparams[2], fxparams[3], fxparams[4]));
						break;
					case "analyser":
						addEffectForTag(p, new AnalyserEffect(fxparams[0], fxparams[1]));
						break;
					}
				}
			}
		}
		for (i = 0, len = playingarr.length; i < len; i++)
		{
			if (this.saveload === 3)	// not saving/loading any sounds/music
				continue;
			d = playingarr[i];
			src = d["buffersrc"];
			is_music = d["is_music"];
			tag = d["tag"];
			playbackTime = d["playbackTime"];
			looping = d["looping"];
			vol = d["volume"];
			pan = d["pan"];
			panObjUid = (pan && pan.hasOwnProperty("objUid")) ? pan["objUid"] : -1;
			if (is_music && this.saveload === 1)	// not saving/loading music
				continue;
			if (!is_music && this.saveload === 2)	// not saving/loading sound
				continue;
			a = this.getAudioInstance(src, tag, is_music, looping, vol);
			if (!a)
			{
				b = this.getAudioBuffer(src, is_music);
				b.seekWhenReady = playbackTime;
				b.pauseWhenReady = d["paused"];
				if (pan)
				{
					if (panObjUid !== -1)
					{
						b.panWhenReady.push({ objUid: panObjUid, ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
					else
					{
						b.panWhenReady.push({ x: pan["x"], y: pan["y"], a: pan["a"], ia: pan["ia"], oa: pan["oa"], og: pan["og"], thistag: tag });
					}
				}
				continue;
			}
			a.resume_position = d["resume_position"];
			a.setPannerEnabled(!!pan);
			a.play(looping, vol, playbackTime);
			a.updatePlaybackRate();
			a.updateVolume();
			a.doSetMuted(a.is_muted || a.is_silent);
			if (d["paused"])
				a.pause();
			if (d["muted"])
				a.setMuted(true);
			a.doSetMuted(a.is_muted || a.is_silent);
			if (pan)
			{
				if (panObjUid !== -1)
				{
					a.objectTracker = a.objectTracker || new ObjectTracker();
					a.objectTracker.loadUid = panObjUid;
					objectTrackerUidsToLoad.push(a.objectTracker);
				}
				else
				{
					a.setPan(pan["x"], pan["y"], pan["a"], pan["ia"], pan["oa"], pan["og"]);
				}
			}
		}
		if (setSilent && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (!setSilent && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	instanceProto.afterLoad = function ()
	{
		var i, len, ot, inst;
		for (i = 0, len = objectTrackerUidsToLoad.length; i < len; i++)
		{
			ot = objectTrackerUidsToLoad[i];
			inst = this.runtime.getObjectByUID(ot.loadUid);
			ot.setObject(inst);
			ot.loadUid = -1;
			if (inst)
			{
				listenerX = inst.x;
				listenerY = inst.y;
			}
		}
		objectTrackerUidsToLoad.length = 0;
	};
	instanceProto.onSuspend = function (s)
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].setSuspended(s);
	};
	instanceProto.tick = function ()
	{
		var dt = this.runtime.dt;
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			a.tick(dt);
			if (a.myapi !== API_HTML5 && a.myapi !== API_APPMOBI)
			{
				if (!a.fresh && !a.stopped && a.hasEnded())
				{
					a.stopped = true;
					audTag = a.tag;
					audRuntime.trigger(cr.plugins_.Audio.prototype.cnds.OnEnded, audInst);
				}
			}
			if (timescale_mode !== 0)
				a.updatePlaybackRate();
		}
		var p, arr, f;
		for (p in effects)
		{
			if (effects.hasOwnProperty(p))
			{
				arr = effects[p];
				for (i = 0, len = arr.length; i < len; i++)
				{
					f = arr[i];
					if (f.tick)
						f.tick();
				}
			}
		}
		if (api === API_WEBAUDIO && this.listenerTracker.hasObject())
		{
			this.listenerTracker.tick(dt);
			listenerX = this.listenerTracker.obj.x;
			listenerY = this.listenerTracker.obj.y;
			context["listener"]["setPosition"](this.listenerTracker.obj.x, this.listenerTracker.obj.y, this.listenerZ);
			context["listener"]["setVelocity"](this.listenerTracker.getVelocityX(), this.listenerTracker.getVelocityY(), 0);
		}
	};
	instanceProto.getAudioBuffer = function (src_, is_music)
	{
		var i, len, a, ret = null, j, k, lenj, ai;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			a = audioBuffers[i];
			if (a.src === src_)
			{
				ret = a;
				break;
			}
		}
		if (!ret)
		{
			ret = new C2AudioBuffer(src_, is_music);
			audioBuffers.push(ret);
		}
		return ret;
	};
	instanceProto.getAudioInstance = function (src_, tag, is_music, looping, vol)
	{
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (a.src === src_ && (a.canBeRecycled() || is_music))
			{
				a.tag = tag;
				return a;
			}
		}
		var b = this.getAudioBuffer(src_, is_music);
		if (!b.bufferObject)
		{
			if (tag !== "<preload>")
			{
				b.playTagWhenReady = tag;
				b.loopWhenReady = looping;
				b.volumeWhenReady = vol;
			}
			return null;
		}
		a = new C2AudioInstance(b, tag);
		audioInstances.push(a);
		return a;
	};
	var taggedAudio = [];
	function getAudioByTag(tag)
	{
		taggedAudio.length = 0;
		if (!tag.length)
		{
			if (!lastAudio || lastAudio.hasEnded())
				return;
			else
			{
				taggedAudio.length = 1;
				taggedAudio[0] = lastAudio;
				return;
			}
		}
		var i, len, a;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			a = audioInstances[i];
			if (cr.equals_nocase(tag, a.tag))
				taggedAudio.push(a);
		}
	};
	function reconnectEffects(tag)
	{
		var i, len, arr, n, toNode = context["destination"];
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				toNode = arr[0].getInputNode();
				for (i = 0, len = arr.length; i < len; i++)
				{
					n = arr[i];
					if (i + 1 === len)
						n.connectTo(context["destination"]);
					else
						n.connectTo(arr[i + 1].getInputNode());
				}
			}
		}
		getAudioByTag(tag);
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].reconnect(toNode);
		if (micSource && micTag === tag)
		{
			micSource["disconnect"]();
			micSource["connect"](toNode);
		}
	};
	function addEffectForTag(tag, fx)
	{
		if (!effects.hasOwnProperty(tag))
			effects[tag] = [fx];
		else
			effects[tag].push(fx);
		reconnectEffects(tag);
	};
	function Cnds() {};
	Cnds.prototype.OnEnded = function (t)
	{
		return cr.equals_nocase(audTag, t);
	};
	Cnds.prototype.PreloadsComplete = function ()
	{
		var i, len;
		for (i = 0, len = audioBuffers.length; i < len; i++)
		{
			if (!audioBuffers[i].isLoaded())
				return false;
		}
		return true;
	};
	Cnds.prototype.AdvancedAudioSupported = function ()
	{
		return api === API_WEBAUDIO;
	};
	Cnds.prototype.IsSilent = function ()
	{
		return silent;
	};
	Cnds.prototype.IsAnyPlaying = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
		{
			if (audioInstances[i].isPlaying())
				return true;
		}
		return false;
	};
	Cnds.prototype.IsTagPlaying = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (taggedAudio[i].isPlaying())
				return true;
		}
		return false;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Play = function (file, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPosition = function (file, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObject = function (file, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayByName = function (folder, filename, looping, vol, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
			return;
		lastAudio.setPannerEnabled(false);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtPositionByName = function (folder, filename, looping, vol, x_, y_, angle_, innerangle_, outerangle_, outergain_, tag)
	{
		if (silent)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ x: x_, y: y_, a: angle_, ia: innerangle_, oa: outerangle_, og: dbToLinear(outergain_), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		lastAudio.setPan(x_, y_, angle_, innerangle_, outerangle_, dbToLinear(outergain_));
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.PlayAtObjectByName = function (folder, filename, looping, vol, obj, innerangle, outerangle, outergain, tag)
	{
		if (silent || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst)
			return;
		var v = dbToLinear(vol);
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		lastAudio = this.getAudioInstance(src, tag, is_music, looping!==0, v);
		if (!lastAudio)
		{
			var b = this.getAudioBuffer(src, is_music);
			b.panWhenReady.push({ obj: inst, ia: innerangle, oa: outerangle, og: dbToLinear(outergain), thistag: tag });
			return;
		}
		lastAudio.setPannerEnabled(true);
		var px = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, true);
		var py = cr.rotatePtAround(inst.x, inst.y, -inst.layer.getAngle(), listenerX, listenerY, false);
		lastAudio.setPan(px, py, cr.to_degrees(inst.angle - inst.layer.getAngle()), innerangle, outerangle, dbToLinear(outergain));
		lastAudio.setObject(inst);
		lastAudio.play(looping!==0, v);
	};
	Acts.prototype.SetLooping = function (tag, looping)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setLooping(looping === 0);
	};
	Acts.prototype.SetMuted = function (tag, muted)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setMuted(muted === 0);
	};
	Acts.prototype.SetVolume = function (tag, vol)
	{
		getAudioByTag(tag);
		var v = dbToLinear(vol);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setVolume(v);
	};
	Acts.prototype.Preload = function (file)
	{
		if (silent)
			return;
		var is_music = file[1];
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.PreloadByName = function (folder, filename)
	{
		if (silent)
			return;
		var is_music = (folder === 1);
		var src = this.runtime.files_subfolder + filename.toLowerCase() + (useOgg ? ".ogg" : ".m4a");
		if (api === API_APPMOBI)
		{
			if (this.runtime.isDirectCanvas)
				AppMobi["context"]["loadSound"](src);
			else
				AppMobi["player"]["loadSound"](src);
			return;
		}
		else if (api === API_PHONEGAP)
		{
			return;
		}
		this.getAudioInstance(src, "<preload>", is_music, false);
	};
	Acts.prototype.SetPlaybackRate = function (tag, rate)
	{
		getAudioByTag(tag);
		if (rate < 0.0)
			rate = 0;
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].setPlaybackRate(rate);
	};
	Acts.prototype.Stop = function (tag)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
			taggedAudio[i].stop();
	};
	Acts.prototype.StopAll = function ()
	{
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].stop();
	};
	Acts.prototype.SetPaused = function (tag, state)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			if (state === 0)
				taggedAudio[i].pause();
			else
				taggedAudio[i].resume();
		}
	};
	Acts.prototype.Seek = function (tag, pos)
	{
		getAudioByTag(tag);
		var i, len;
		for (i = 0, len = taggedAudio.length; i < len; i++)
		{
			taggedAudio[i].seek(pos);
		}
	};
	Acts.prototype.SetSilent = function (s)
	{
		var i, len;
		if (s === 2)					// toggling
			s = (silent ? 1 : 0);		// choose opposite state
		if (s === 0 && !silent)			// setting silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(true);
			silent = true;
		}
		else if (s === 1 && silent)		// setting not silent
		{
			for (i = 0, len = audioInstances.length; i < len; i++)
				audioInstances[i].setSilent(false);
			silent = false;
		}
	};
	Acts.prototype.SetMasterVolume = function (vol)
	{
		masterVolume = dbToLinear(vol);
		var i, len;
		for (i = 0, len = audioInstances.length; i < len; i++)
			audioInstances[i].updateVolume();
	};
	Acts.prototype.AddFilterEffect = function (tag, type, freq, detune, q, gain, mix)
	{
		if (api !== API_WEBAUDIO || type < 0 || type >= filterTypes.length || !context["createBiquadFilter"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FilterEffect(type, freq, detune, q, gain, mix));
	};
	Acts.prototype.AddDelayEffect = function (tag, delay, gain, mix)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DelayEffect(delay, dbToLinear(gain), mix));
	};
	Acts.prototype.AddFlangerEffect = function (tag, delay, modulation, freq, feedback, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new FlangerEffect(delay / 1000, modulation / 1000, freq, feedback / 100, mix));
	};
	Acts.prototype.AddPhaserEffect = function (tag, freq, detune, q, mod, modfreq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new PhaserEffect(freq, detune, q, mod, modfreq, mix));
	};
	Acts.prototype.AddConvolutionEffect = function (tag, file, norm, mix)
	{
		if (api !== API_WEBAUDIO || !context["createConvolver"])
			return;
		var doNormalize = (norm === 0);
		var src = this.runtime.files_subfolder + file[0] + (useOgg ? ".ogg" : ".m4a");
		var b = this.getAudioBuffer(src, false);
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		var fx;
		if (b.bufferObject)
		{
			fx = new ConvolveEffect(b.bufferObject, doNormalize, mix, src);
		}
		else
		{
			fx = new ConvolveEffect(null, doNormalize, mix, src);
			b.normalizeWhenReady = doNormalize;
			b.convolveWhenReady = fx;
		}
		addEffectForTag(tag, fx);
	};
	Acts.prototype.AddGainEffect = function (tag, g)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(dbToLinear(g)));
	};
	Acts.prototype.AddMuteEffect = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new GainEffect(0));	// re-use gain effect with 0 gain
	};
	Acts.prototype.AddTremoloEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new TremoloEffect(freq, mix));
	};
	Acts.prototype.AddRingModEffect = function (tag, freq, mix)
	{
		if (api !== API_WEBAUDIO || !context["createOscillator"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new RingModulatorEffect(freq, mix));
	};
	Acts.prototype.AddDistortionEffect = function (tag, threshold, headroom, drive, makeupgain, mix)
	{
		if (api !== API_WEBAUDIO || !context["createWaveShaper"])
			return;
		tag = tag.toLowerCase();
		mix = mix / 100;
		if (mix < 0) mix = 0;
		if (mix > 1) mix = 1;
		addEffectForTag(tag, new DistortionEffect(threshold, headroom, drive, makeupgain, mix));
	};
	Acts.prototype.AddCompressorEffect = function (tag, threshold, knee, ratio, attack, release)
	{
		if (api !== API_WEBAUDIO || !context["createDynamicsCompressor"])
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new CompressorEffect(threshold, knee, ratio, attack / 1000, release / 1000));
	};
	Acts.prototype.AddAnalyserEffect = function (tag, fftSize, smoothing)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		addEffectForTag(tag, new AnalyserEffect(fftSize, smoothing));
	};
	Acts.prototype.RemoveEffects = function (tag)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		var i, len, arr;
		if (effects.hasOwnProperty(tag))
		{
			arr = effects[tag];
			if (arr.length)
			{
				for (i = 0, len = arr.length; i < len; i++)
					arr[i].remove();
				arr.length = 0;
				reconnectEffects(tag);
			}
		}
	};
	Acts.prototype.SetEffectParameter = function (tag, index, param, value, ramp, time)
	{
		if (api !== API_WEBAUDIO)
			return;
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var arr;
		if (!effects.hasOwnProperty(tag))
			return;
		arr = effects[tag];
		if (index < 0 || index >= arr.length)
			return;
		arr[index].setParam(param, value, ramp, time);
	};
	Acts.prototype.SetListenerObject = function (obj_)
	{
		if (!obj_ || api !== API_WEBAUDIO)
			return;
		var inst = obj_.getFirstPicked();
		if (!inst)
			return;
		this.listenerTracker.setObject(inst);
		listenerX = inst.x;
		listenerY = inst.y;
	};
	Acts.prototype.SetListenerZ = function (z)
	{
		this.listenerZ = z;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.Duration = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getDuration());
		else
			ret.set_float(0);
	};
	Exps.prototype.PlaybackTime = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
			ret.set_float(taggedAudio[0].getPlaybackTime());
		else
			ret.set_float(0);
	};
	Exps.prototype.Volume = function (ret, tag)
	{
		getAudioByTag(tag);
		if (taggedAudio.length)
		{
			var v = taggedAudio[0].getVolume();
			ret.set_float(linearToDb(v));
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.MasterVolume = function (ret)
	{
		ret.set_float(masterVolume);
	};
	Exps.prototype.EffectCount = function (ret, tag)
	{
		tag = tag.toLowerCase();
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		ret.set_int(arr ? arr.length : 0);
	};
	function getAnalyser(tag, index)
	{
		var arr = null;
		if (effects.hasOwnProperty(tag))
			arr = effects[tag];
		if (arr && index >= 0 && index < arr.length && arr[index].freqBins)
			return arr[index];
		else
			return null;
	};
	Exps.prototype.AnalyserFreqBinCount = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		ret.set_int(analyser ? analyser.node["frequencyBinCount"] : 0);
	};
	Exps.prototype.AnalyserFreqBinAt = function (ret, tag, index, bin)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		bin = Math.floor(bin);
		var analyser = getAnalyser(tag, index);
		if (!analyser)
			ret.set_float(0);
		else if (bin < 0 || bin >= analyser.node["frequencyBinCount"])
			ret.set_float(0);
		else
			ret.set_float(analyser.freqBins[bin]);
	};
	Exps.prototype.AnalyserPeakLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.peak);
		else
			ret.set_float(0);
	};
	Exps.prototype.AnalyserRMSLevel = function (ret, tag, index)
	{
		tag = tag.toLowerCase();
		index = Math.floor(index);
		var analyser = getAnalyser(tag, index);
		if (analyser)
			ret.set_float(analyser.rms);
		else
			ret.set_float(0);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Browser = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Browser.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		window.addEventListener("resize", function () {
			self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnResize, self);
		});
		if (typeof navigator.onLine !== "undefined")
		{
			window.addEventListener("online", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOnline, self);
			});
			window.addEventListener("offline", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnOffline, self);
			});
		}
		if (typeof window.applicationCache !== "undefined")
		{
			window.applicationCache.addEventListener('updateready', function() {
				self.runtime.loadingprogress = 1;
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			window.applicationCache.addEventListener('progress', function(e) {
				self.runtime.loadingprogress = e["loaded"] / e["total"];
			});
		}
		if (!this.runtime.isDirectCanvas)
		{
			document.addEventListener("appMobi.device.update.available", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnUpdateReady, self);
			});
			document.addEventListener("backbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
			});
			document.addEventListener("menubutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
			});
			document.addEventListener("searchbutton", function() {
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnSearchButton, self);
			});
			document.addEventListener("tizenhwkey", function (e) {
				var ret;
				switch (e["keyName"]) {
				case "back":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
					if (!ret)
					{
						if (window["tizen"])
							window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
					}
					break;
				case "menu":
					ret = self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnMenuButton, self);
					if (!ret)
						e.preventDefault();
					break;
				}
			});
		}
		if (this.runtime.isWindowsPhone81)
		{
			WinJS["Application"]["onbackclick"] = function (e)
			{
				return !!self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnBackButton, self);
			};
		}
		this.runtime.addSuspendCallback(function(s) {
			if (s)
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageHidden, self);
			}
			else
			{
				self.runtime.trigger(cr.plugins_.Browser.prototype.cnds.OnPageVisible, self);
			}
		});
		this.is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	};
	function Cnds() {};
	Cnds.prototype.CookiesEnabled = function()
	{
		return navigator ? navigator.cookieEnabled : false;
	};
	Cnds.prototype.IsOnline = function()
	{
		return navigator ? navigator.onLine : false;
	};
	Cnds.prototype.HasJava = function()
	{
		return navigator ? navigator.javaEnabled() : false;
	};
	Cnds.prototype.OnOnline = function()
	{
		return true;
	};
	Cnds.prototype.OnOffline = function()
	{
		return true;
	};
	Cnds.prototype.IsDownloadingUpdate = function ()
	{
		if (typeof window["applicationCache"] === "undefined")
			return false;
		else
			return window["applicationCache"]["status"] === window["applicationCache"]["DOWNLOADING"];
	};
	Cnds.prototype.OnUpdateReady = function ()
	{
		return true;
	};
	Cnds.prototype.PageVisible = function ()
	{
		return !this.runtime.isSuspended;
	};
	Cnds.prototype.OnPageVisible = function ()
	{
		return true;
	};
	Cnds.prototype.OnPageHidden = function ()
	{
		return true;
	};
	Cnds.prototype.OnResize = function ()
	{
		return true;
	};
	Cnds.prototype.IsFullscreen = function ()
	{
		return !!(document["mozFullScreen"] || document["webkitIsFullScreen"] || document["fullScreen"] || this.runtime.isNodeFullscreen);
	};
	Cnds.prototype.OnBackButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnMenuButton = function ()
	{
		return true;
	};
	Cnds.prototype.OnSearchButton = function ()
	{
		return true;
	};
	Cnds.prototype.IsMetered = function ()
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			return false;
		return connection["metered"];
	};
	Cnds.prototype.IsCharging = function ()
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			return true;
		return battery["charging"];
	};
	Cnds.prototype.IsPortraitLandscape = function (p)
	{
		var current = (window.innerWidth <= window.innerHeight ? 0 : 1);
		return current === p;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Alert = function (msg)
	{
		if (!this.runtime.isDomFree)
			alert(msg.toString());
	};
	Acts.prototype.Close = function ()
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["forceToFinish"]();
		else if (window["tizen"])
			window["tizen"]["application"]["getCurrentApplication"]()["exit"]();
		else if (navigator["app"] && navigator["app"]["exitApp"])
			navigator["app"]["exitApp"]();
		else if (navigator["device"] && navigator["device"]["exitApp"])
			navigator["device"]["exitApp"]();
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.close();
	};
	Acts.prototype.Focus = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["focus"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.focus();
	};
	Acts.prototype.Blur = function ()
	{
		if (this.runtime.isNodeWebkit)
		{
			var win = window["nwgui"]["Window"]["get"]();
			win["blur"]();
		}
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.blur();
	};
	Acts.prototype.GoBack = function ()
	{
		if (navigator["app"] && navigator["app"]["backHistory"])
			navigator["app"]["backHistory"]();
		else if (!this.is_arcade && !this.runtime.isDomFree && window.back)
			window.back();
	};
	Acts.prototype.GoForward = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.forward)
			window.forward();
	};
	Acts.prototype.GoHome = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree && window.home)
			window.home();
	};
	Acts.prototype.GoToURL = function (url)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (this.runtime.isEjecta)
			ejecta["openURL"](url);
		else if (this.runtime.isWinJS)
			Windows["System"]["Launcher"]["launchUriAsync"](new Windows["Foundation"]["Uri"](url));
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.location = url;
	};
	Acts.prototype.GoToURLWindow = function (url, tag)
	{
		if (this.runtime.isCocoonJs)
			CocoonJS["App"]["openURL"](url);
		else if (this.runtime.isEjecta)
			ejecta["openURL"](url);
		else if (this.runtime.isWinJS)
			Windows["System"]["Launcher"]["launchUriAsync"](new Windows["Foundation"]["Uri"](url));
		else if (!this.is_arcade && !this.runtime.isDomFree)
			window.open(url, tag);
	};
	Acts.prototype.Reload = function ()
	{
		if (!this.is_arcade && !this.runtime.isDomFree)
			window.location.reload();
	};
	var firstRequestFullscreen = true;
	var crruntime = null;
	function onFullscreenError()
	{
		if (typeof jQuery !== "undefined")
		{
			crruntime["setSize"](jQuery(window).width(), jQuery(window).height());
		}
	};
	Acts.prototype.RequestFullScreen = function (stretchmode)
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Requesting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (stretchmode >= 2)
			stretchmode += 1;
		if (stretchmode === 6)
			stretchmode = 2;
		if (this.runtime.isNodeWebkit)
		{
			if (!this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["enterFullscreen"]();
				this.runtime.isNodeFullscreen = true;
				this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			}
		}
		else
		{
			if (document["mozFullScreen"] || document["webkitIsFullScreen"] || !!document["msFullscreenElement"] || document["fullScreen"])
			{
				return;
			}
			this.runtime.fullscreen_scaling = (stretchmode >= 2 ? stretchmode : 0);
			var elem = this.runtime.canvasdiv || this.runtime.canvas;
			if (firstRequestFullscreen)
			{
				firstRequestFullscreen = false;
				crruntime = this.runtime;
				elem.addEventListener("mozfullscreenerror", onFullscreenError);
				elem.addEventListener("webkitfullscreenerror", onFullscreenError);
				elem.addEventListener("msfullscreenerror", onFullscreenError);
				elem.addEventListener("fullscreenerror", onFullscreenError);
			}
			if (!cr.is_undefined(elem["requestFullscreen"]))
				elem["requestFullscreen"]();
			else if (!cr.is_undefined(elem["webkitRequestFullScreen"]))
			{
				if (typeof Element !== "undefined" && typeof Element["ALLOW_KEYBOARD_INPUT"] !== "undefined")
					elem["webkitRequestFullScreen"](Element["ALLOW_KEYBOARD_INPUT"]);
				else
					elem["webkitRequestFullScreen"]();
			}
			else if (!cr.is_undefined(elem["mozRequestFullScreen"]))
				elem["mozRequestFullScreen"]();
			else if (!cr.is_undefined(elem["msRequestFullscreen"]))
				elem["msRequestFullscreen"]();
		}
	};
	Acts.prototype.CancelFullScreen = function ()
	{
		if (this.runtime.isDomFree)
		{
			cr.logexport("[Construct 2] Exiting fullscreen is not supported on this platform - the request has been ignored");
			return;
		}
		if (this.runtime.isNodeWebkit)
		{
			if (this.runtime.isNodeFullscreen)
			{
				window["nwgui"]["Window"]["get"]()["leaveFullscreen"]();
				this.runtime.isNodeFullscreen = false;
			}
		}
		else
		{
			if (!cr.is_undefined(document["exitFullscreen"]))
				document["exitFullscreen"]();
			else if (!cr.is_undefined(document["webkitCancelFullScreen"]))
				document["webkitCancelFullScreen"]();
			else if (!cr.is_undefined(document["mozCancelFullScreen"]))
				document["mozCancelFullScreen"]();
			else if (!cr.is_undefined(document["msExitFullscreen"]))
				document["msExitFullscreen"]();
		}
	};
	Acts.prototype.Vibrate = function (pattern_)
	{
		try {
			var arr = pattern_.split(",");
			var i, len;
			for (i = 0, len = arr.length; i < len; i++)
			{
				arr[i] = parseInt(arr[i], 10);
			}
			if (navigator["vibrate"])
				navigator["vibrate"](arr);
			else if (navigator["mozVibrate"])
				navigator["mozVibrate"](arr);
			else if (navigator["webkitVibrate"])
				navigator["webkitVibrate"](arr);
			else if (navigator["msVibrate"])
				navigator["msVibrate"](arr);
		}
		catch (e) {}
	};
	Acts.prototype.InvokeDownload = function (url_, filename_)
	{
		var a = document.createElement("a");
		if (typeof a["download"] === "undefined")
		{
			window.open(url_);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = url_;
			a["download"] = filename_;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.InvokeDownloadString = function (str_, mimetype_, filename_)
	{
		var datauri = "data:" + mimetype_ + "," + encodeURIComponent(str_);
		var a = document.createElement("a");
		if (typeof a["download"] === "undefined")
		{
			window.open(datauri);
		}
		else
		{
			var body = document.getElementsByTagName("body")[0];
			a.textContent = filename_;
			a.href = datauri;
			a["download"] = filename_;
			body.appendChild(a);
			var clickEvent = document.createEvent("MouseEvent");
			clickEvent.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
			a.dispatchEvent(clickEvent);
			body.removeChild(a);
		}
	};
	Acts.prototype.ConsoleLog = function (type_, msg_)
	{
		if (typeof console === "undefined")
			return;
		if (type_ === 0 && console.log)
			console.log(msg_.toString());
		if (type_ === 1 && console.warn)
			console.warn(msg_.toString());
		if (type_ === 2 && console.error)
			console.error(msg_.toString());
	};
	Acts.prototype.ConsoleGroup = function (name_)
	{
		if (console && console.group)
			console.group(name_);
	};
	Acts.prototype.ConsoleGroupEnd = function ()
	{
		if (console && console.groupEnd)
			console.groupEnd();
	};
	Acts.prototype.ExecJs = function (js_)
	{
		if (eval)
			eval(js_);
	};
	var orientations = [
		"portrait",
		"landscape",
		"portrait-primary",
		"portrait-secondary",
		"landscape-primary",
		"landscape-secondary"
	];
	Acts.prototype.LockOrientation = function (o)
	{
		o = Math.floor(o);
		if (o < 0 || o >= orientations.length)
			return;
		this.runtime.autoLockOrientation = false;
		var orientation = orientations[o];
		if (screen["lockOrientation"])
			screen["lockOrientation"](orientation);
		else if (screen["webkitLockOrientation"])
			screen["webkitLockOrientation"](orientation);
		else if (screen["mozLockOrientation"])
			screen["mozLockOrientation"](orientation);
		else if (screen["msLockOrientation"])
			screen["msLockOrientation"](orientation);
	};
	Acts.prototype.UnlockOrientation = function ()
	{
		this.runtime.autoLockOrientation = false;
		if (screen["unlockOrientation"])
			screen["unlockOrientation"]();
		else if (screen["webkitUnlockOrientation"])
			screen["webkitUnlockOrientation"]();
		else if (screen["mozUnlockOrientation"])
			screen["mozUnlockOrientation"]();
		else if (screen["msUnlockOrientation"])
			screen["msUnlockOrientation"]();
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.URL = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.toString());
	};
	Exps.prototype.Protocol = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.protocol);
	};
	Exps.prototype.Domain = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hostname);
	};
	Exps.prototype.PathName = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.pathname);
	};
	Exps.prototype.Hash = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.hash);
	};
	Exps.prototype.Referrer = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.referrer);
	};
	Exps.prototype.Title = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : document.title);
	};
	Exps.prototype.Name = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appName);
	};
	Exps.prototype.Version = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.appVersion);
	};
	Exps.prototype.Language = function (ret)
	{
		if (navigator && navigator.language)
			ret.set_string(navigator.language);
		else
			ret.set_string("");
	};
	Exps.prototype.Platform = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.platform);
	};
	Exps.prototype.Product = function (ret)
	{
		if (navigator && navigator.product)
			ret.set_string(navigator.product);
		else
			ret.set_string("");
	};
	Exps.prototype.Vendor = function (ret)
	{
		if (navigator && navigator.vendor)
			ret.set_string(navigator.vendor);
		else
			ret.set_string("");
	};
	Exps.prototype.UserAgent = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : navigator.userAgent);
	};
	Exps.prototype.QueryString = function (ret)
	{
		ret.set_string(this.runtime.isDomFree ? "" : window.location.search);
	};
	Exps.prototype.QueryParam = function (ret, paramname)
	{
		if (this.runtime.isDomFree)
		{
			ret.set_string("");
			return;
		}
		var match = RegExp('[?&]' + paramname + '=([^&]*)').exec(window.location.search);
		if (match)
			ret.set_string(decodeURIComponent(match[1].replace(/\+/g, ' ')));
		else
			ret.set_string("");
	};
	Exps.prototype.Bandwidth = function (ret)
	{
		var connection = navigator["connection"] || navigator["mozConnection"] || navigator["webkitConnection"];
		if (!connection)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(connection["bandwidth"]);
	};
	Exps.prototype.BatteryLevel = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(1);
		else
			ret.set_float(battery["level"]);
	};
	Exps.prototype.BatteryTimeLeft = function (ret)
	{
		var battery = navigator["battery"] || navigator["mozBattery"] || navigator["webkitBattery"];
		if (!battery)
			ret.set_float(Number.POSITIVE_INFINITY);
		else
			ret.set_float(battery["dischargingTime"]);
	};
	Exps.prototype.ExecJS = function (ret, js_)
	{
		if (!eval)
		{
			ret.set_any(0);
			return;
		}
		var result = eval(js_);
		if (typeof result === "number")
			ret.set_any(result);
		else if (typeof result === "string")
			ret.set_any(result);
		else if (typeof result === "boolean")
			ret.set_any(result ? 1 : 0);
		else
			ret.set_any(0);
	};
	Exps.prototype.ScreenWidth = function (ret)
	{
		ret.set_int(screen.width);
	};
	Exps.prototype.ScreenHeight = function (ret)
	{
		ret.set_int(screen.height);
	};
	Exps.prototype.DevicePixelRatio = function (ret)
	{
		ret.set_float(this.runtime.devicePixelRatio);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Keyboard = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Keyboard.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.keyMap = new Array(256);	// stores key up/down state
		this.usedKeys = new Array(256);
		this.triggerKey = 0;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).keydown(
				function(info) {
					self.onKeyDown(info);
				}
			);
			jQuery(document).keyup(
				function(info) {
					self.onKeyUp(info);
				}
			);
		}
	};
	var keysToBlockWhenFramed = [32, 33, 34, 35, 36, 37, 38, 39, 40, 44];
	instanceProto.onKeyDown = function (info)
	{
		var alreadyPreventedDefault = false;
		if (window != window.top && keysToBlockWhenFramed.indexOf(info.which) > -1)
		{
			info.preventDefault();
			alreadyPreventedDefault = true;
			info.stopPropagation();
		}
		if (this.keyMap[info.which])
		{
			if (this.usedKeys[info.which] && !alreadyPreventedDefault)
				info.preventDefault();
			return;
		}
		this.keyMap[info.which] = true;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCode, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2)
		{
			this.usedKeys[info.which] = true;
			if (!alreadyPreventedDefault)
				info.preventDefault();
		}
	};
	instanceProto.onKeyUp = function (info)
	{
		this.keyMap[info.which] = false;
		this.triggerKey = info.which;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKeyReleased, this);
		var eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
		var eventRan2 = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyCodeReleased, this);
		this.runtime.isInUserInputEvent = false;
		if (eventRan || eventRan2 || this.usedKeys[info.which])
		{
			this.usedKeys[info.which] = true;
			info.preventDefault();
		}
	};
	instanceProto.saveToJSON = function ()
	{
		return { "triggerKey": this.triggerKey };
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.triggerKey = o["triggerKey"];
	};
	function Cnds() {};
	Cnds.prototype.IsKeyDown = function(key)
	{
		return this.keyMap[key];
	};
	Cnds.prototype.OnKey = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnAnyKey = function(key)
	{
		return true;
	};
	Cnds.prototype.OnAnyKeyReleased = function(key)
	{
		return true;
	};
	Cnds.prototype.OnKeyReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.IsKeyCodeDown = function(key)
	{
		key = Math.floor(key);
		if (key < 0 || key >= this.keyMap.length)
			return false;
		return this.keyMap[key];
	};
	Cnds.prototype.OnKeyCode = function(key)
	{
		return (key === this.triggerKey);
	};
	Cnds.prototype.OnKeyCodeReleased = function(key)
	{
		return (key === this.triggerKey);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LastKeyCode = function (ret)
	{
		ret.set_int(this.triggerKey);
	};
	function fixedStringFromCharCode(kc)
	{
		kc = Math.floor(kc);
		switch (kc) {
		case 8:		return "backspace";
		case 9:		return "tab";
		case 13:	return "enter";
		case 16:	return "shift";
		case 17:	return "control";
		case 18:	return "alt";
		case 19:	return "pause";
		case 20:	return "capslock";
		case 27:	return "esc";
		case 33:	return "pageup";
		case 34:	return "pagedown";
		case 35:	return "end";
		case 36:	return "home";
		case 37:	return "←";
		case 38:	return "↑";
		case 39:	return "→";
		case 40:	return "↓";
		case 45:	return "insert";
		case 46:	return "del";
		case 91:	return "left window key";
		case 92:	return "right window key";
		case 93:	return "select";
		case 96:	return "numpad 0";
		case 97:	return "numpad 1";
		case 98:	return "numpad 2";
		case 99:	return "numpad 3";
		case 100:	return "numpad 4";
		case 101:	return "numpad 5";
		case 102:	return "numpad 6";
		case 103:	return "numpad 7";
		case 104:	return "numpad 8";
		case 105:	return "numpad 9";
		case 106:	return "numpad *";
		case 107:	return "numpad +";
		case 109:	return "numpad -";
		case 110:	return "numpad .";
		case 111:	return "numpad /";
		case 112:	return "F1";
		case 113:	return "F2";
		case 114:	return "F3";
		case 115:	return "F4";
		case 116:	return "F5";
		case 117:	return "F6";
		case 118:	return "F7";
		case 119:	return "F8";
		case 120:	return "F9";
		case 121:	return "F10";
		case 122:	return "F11";
		case 123:	return "F12";
		case 144:	return "numlock";
		case 145:	return "scroll lock";
		case 186:	return ";";
		case 187:	return "=";
		case 188:	return ",";
		case 189:	return "-";
		case 190:	return ".";
		case 191:	return "/";
		case 192:	return "'";
		case 219:	return "[";
		case 220:	return "\\";
		case 221:	return "]";
		case 222:	return "#";
		case 223:	return "`";
		default:	return String.fromCharCode(kc);
		}
	};
	Exps.prototype.StringFromKeyCode = function (ret, kc)
	{
		ret.set_string(fixedStringFromCharCode(kc));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Mouse = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Mouse.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.buttonMap = new Array(4);		// mouse down states
		this.mouseXcanvas = 0;				// mouse position relative to canvas
		this.mouseYcanvas = 0;
		this.triggerButton = 0;
		this.triggerType = 0;
		this.triggerDir = 0;
		this.handled = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		var self = this;
		if (!this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
			jQuery(document).dblclick(
				function(info) {
					self.onDoubleClick(info);
				}
			);
			var wheelevent = function(info) {
								self.onWheel(info);
							};
			document.addEventListener("mousewheel", wheelevent, false);
			document.addEventListener("DOMMouseScroll", wheelevent, false);
		}
	};
	var dummyoffset = {left: 0, top: 0};
	instanceProto.onMouseMove = function(info)
	{
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		this.mouseXcanvas = info.pageX - offset.left;
		this.mouseYcanvas = info.pageY - offset.top;
	};
	instanceProto.mouseInGame = function ()
	{
		if (this.runtime.fullscreen_mode > 0)
			return true;
		return this.mouseXcanvas >= 0 && this.mouseYcanvas >= 0
		    && this.mouseXcanvas < this.runtime.width && this.mouseYcanvas < this.runtime.height;
	};
	instanceProto.onMouseDown = function(info)
	{
		if (!this.mouseInGame())
			return;
		if (this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.buttonMap[info.which] = true;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 0;					// single click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onMouseUp = function(info)
	{
		if (!this.buttonMap[info.which])
			return;
		if (this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		this.buttonMap[info.which] = false;
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onDoubleClick = function(info)
	{
		if (!this.mouseInGame())
			return;
		info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		this.triggerButton = info.which - 1;	// 1-based
		this.triggerType = 1;					// double click
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onWheel = function (info)
	{
		var delta = info.wheelDelta ? info.wheelDelta : info.detail ? -info.detail : 0;
		this.triggerDir = (delta < 0 ? 0 : 1);
		this.handled = false;
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnWheel, this);
		this.runtime.isInUserInputEvent = false;
		if (this.handled)
			info.preventDefault();
	};
	function Cnds() {};
	Cnds.prototype.OnClick = function (button, type)
	{
		return button === this.triggerButton && type === this.triggerType;
	};
	Cnds.prototype.OnAnyClick = function ()
	{
		return true;
	};
	Cnds.prototype.IsButtonDown = function (button)
	{
		return this.buttonMap[button + 1];	// jQuery uses 1-based buttons for some reason
	};
	Cnds.prototype.OnRelease = function (button)
	{
		return button === this.triggerButton;
	};
	Cnds.prototype.IsOverObject = function (obj)
	{
		var cnd = this.runtime.getCurrentCondition();
		var mx = this.mouseXcanvas;
		var my = this.mouseYcanvas;
		return cr.xor(this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.inverted), cnd.inverted);
	};
	Cnds.prototype.OnObjectClicked = function (button, type, obj)
	{
		if (button !== this.triggerButton || type !== this.triggerType)
			return false;	// wrong click type
		return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
	};
	Cnds.prototype.OnWheel = function (dir)
	{
		this.handled = true;
		return dir === this.triggerDir;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetCursor = function (c)
	{
		var cursor_style = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
		if (this.runtime.canvas && this.runtime.canvas.style)
			this.runtime.canvas.style.cursor = cursor_style;
	};
	Acts.prototype.SetCursorSprite = function (obj)
	{
		if (this.runtime.isDomFree || this.runtime.isMobile || !obj)
			return;
		var inst = obj.getFirstPicked();
		if (!inst || !inst.curFrame)
			return;
		var frame = inst.curFrame;
		var datauri = frame.getDataUri();
		var cursor_style = "url(" + datauri + ") " + Math.round(frame.hotspotX * frame.width) + " " + Math.round(frame.hotspotY * frame.height) + ", auto";
		jQuery(this.runtime.canvas).css("cursor", cursor_style);
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.X = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.mouseXcanvas, this.mouseYcanvas, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		ret.set_float(this.mouseXcanvas);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		ret.set_float(this.mouseYcanvas);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Particles = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Particles.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.webGL_texture = null;
		this.runtime.waitForImageLoad(this.texture_img);
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	function Particle(owner)
	{
		this.owner = owner;
		this.active = false;
		this.x = 0;
		this.y = 0;
		this.speed = 0;
		this.angle = 0;
		this.opacity = 1;
		this.grow = 0;
		this.size = 0;
		this.gs = 0;			// gravity speed
		this.age = 0;
		cr.seal(this);
	};
	Particle.prototype.init = function ()
	{
		var owner = this.owner;
		this.x = owner.x - (owner.xrandom / 2) + (Math.random() * owner.xrandom);
		this.y = owner.y - (owner.yrandom / 2) + (Math.random() * owner.yrandom);
		this.speed = owner.initspeed - (owner.speedrandom / 2) + (Math.random() * owner.speedrandom);
		this.angle = owner.angle - (owner.spraycone / 2) + (Math.random() * owner.spraycone);
		this.opacity = owner.initopacity;
		this.size = owner.initsize - (owner.sizerandom / 2) + (Math.random() * owner.sizerandom);
		this.grow = owner.growrate - (owner.growrandom / 2) + (Math.random() * owner.growrandom);
		this.gs = 0;
		this.age = 0;
	};
	Particle.prototype.tick = function (dt)
	{
		var owner = this.owner;
		this.x += Math.cos(this.angle) * this.speed * dt;
		this.y += Math.sin(this.angle) * this.speed * dt;
		this.y += this.gs * dt;
		this.speed += owner.acc * dt;
		this.size += this.grow * dt;
		this.gs += owner.g * dt;
		this.age += dt;
		if (this.size < 1)
		{
			this.active = false;
			return;
		}
		if (owner.lifeanglerandom !== 0)
			this.angle += (Math.random() * owner.lifeanglerandom * dt) - (owner.lifeanglerandom * dt / 2);
		if (owner.lifespeedrandom !== 0)
			this.speed += (Math.random() * owner.lifespeedrandom * dt) - (owner.lifespeedrandom * dt / 2);
		if (owner.lifeopacityrandom !== 0)
		{
			this.opacity += (Math.random() * owner.lifeopacityrandom * dt) - (owner.lifeopacityrandom * dt / 2);
			if (this.opacity < 0)
				this.opacity = 0;
			else if (this.opacity > 1)
				this.opacity = 1;
		}
		if (owner.destroymode <= 1 && this.age >= owner.timeout)
		{
			this.active = false;
		}
		if (owner.destroymode === 2 && this.speed <= 0)
		{
			this.active = false;
		}
	};
	Particle.prototype.draw = function (ctx)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (curopacity === 0)
			return;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		ctx.globalAlpha = curopacity;
		var drawx = this.x - this.size / 2;
		var drawy = this.y - this.size / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		ctx.drawImage(this.owner.type.texture_img, drawx, drawy, this.size, this.size);
	};
	Particle.prototype.drawGL = function (glw)
	{
		var curopacity = this.owner.opacity * this.opacity;
		if (this.owner.destroymode === 0)
			curopacity *= 1 - (this.age / this.owner.timeout);
		var drawsize = this.size;
		var scaleddrawsize = drawsize * this.owner.particlescale;
		var drawx = this.x - drawsize / 2;
		var drawy = this.y - drawsize / 2;
		if (this.owner.runtime.pixel_rounding)
		{
			drawx = (drawx + 0.5) | 0;
			drawy = (drawy + 0.5) | 0;
		}
		if (scaleddrawsize < 1 || curopacity === 0)
			return;
		if (scaleddrawsize < glw.minPointSize || scaleddrawsize > glw.maxPointSize)
		{
			glw.setOpacity(curopacity);
			glw.quad(drawx, drawy, drawx + drawsize, drawy, drawx + drawsize, drawy + drawsize, drawx, drawy + drawsize);
		}
		else
			glw.point(this.x, this.y, scaleddrawsize, curopacity);
	};
	Particle.prototype.left = function ()
	{
		return this.x - this.size / 2;
	};
	Particle.prototype.right = function ()
	{
		return this.x + this.size / 2;
	};
	Particle.prototype.top = function ()
	{
		return this.y - this.size / 2;
	};
	Particle.prototype.bottom = function ()
	{
		return this.y + this.size / 2;
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var deadparticles = [];
	instanceProto.onCreate = function()
	{
		var props = this.properties;
		this.rate = props[0];
		this.spraycone = cr.to_radians(props[1]);
		this.spraytype = props[2];			// 0 = continuous, 1 = one-shot
		this.spraying = true;				// for continuous mode only
		this.initspeed = props[3];
		this.initsize = props[4];
		this.initopacity = props[5] / 100.0;
		this.growrate = props[6];
		this.xrandom = props[7];
		this.yrandom = props[8];
		this.speedrandom = props[9];
		this.sizerandom = props[10];
		this.growrandom = props[11];
		this.acc = props[12];
		this.g = props[13];
		this.lifeanglerandom = props[14];
		this.lifespeedrandom = props[15];
		this.lifeopacityrandom = props[16];
		this.destroymode = props[17];		// 0 = fade, 1 = timeout, 2 = stopped
		this.timeout = props[18];
		this.particleCreateCounter = 0;
		this.particlescale = 1;
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		this.add_bbox_changed_callback(function (self) {
			self.bbox.set(self.particleBoxLeft, self.particleBoxTop, self.particleBoxRight, self.particleBoxBottom);
			self.bquad.set_from_rect(self.bbox);
			self.bbox_changed = false;
			self.update_collision_cell();
		});
		if (!this.recycled)
			this.particles = [];
		this.runtime.tickMe(this);
		this.type.loadTextures();
		if (this.spraytype === 1)
		{
			for (var i = 0; i < this.rate; i++)
				this.allocateParticle().opacity = 0;
		}
		this.first_tick = true;		// for re-init'ing one-shot particles on first tick so they assume any new angle/position
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"r": this.rate,
			"sc": this.spraycone,
			"st": this.spraytype,
			"s": this.spraying,
			"isp": this.initspeed,
			"isz": this.initsize,
			"io": this.initopacity,
			"gr": this.growrate,
			"xr": this.xrandom,
			"yr": this.yrandom,
			"spr": this.speedrandom,
			"szr": this.sizerandom,
			"grnd": this.growrandom,
			"acc": this.acc,
			"g": this.g,
			"lar": this.lifeanglerandom,
			"lsr": this.lifespeedrandom,
			"lor": this.lifeopacityrandom,
			"dm": this.destroymode,
			"to": this.timeout,
			"pcc": this.particleCreateCounter,
			"ft": this.first_tick,
			"p": []
		};
		var i, len, p;
		var arr = o["p"];
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			arr.push([p.x, p.y, p.speed, p.angle, p.opacity, p.grow, p.size, p.gs, p.age]);
		}
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.rate = o["r"];
		this.spraycone = o["sc"];
		this.spraytype = o["st"];
		this.spraying = o["s"];
		this.initspeed = o["isp"];
		this.initsize = o["isz"];
		this.initopacity = o["io"];
		this.growrate = o["gr"];
		this.xrandom = o["xr"];
		this.yrandom = o["yr"];
		this.speedrandom = o["spr"];
		this.sizerandom = o["szr"];
		this.growrandom = o["grnd"];
		this.acc = o["acc"];
		this.g = o["g"];
		this.lifeanglerandom = o["lar"];
		this.lifespeedrandom = o["lsr"];
		this.lifeopacityrandom = o["lor"];
		this.destroymode = o["dm"];
		this.timeout = o["to"];
		this.particleCreateCounter = o["pcc"];
		this.first_tick = o["ft"];
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
		var i, len, p, d;
		var arr = o["p"];
		for (i = 0, len = arr.length; i < len; i++)
		{
			p = this.allocateParticle();
			d = arr[i];
			p.x = d[0];
			p.y = d[1];
			p.speed = d[2];
			p.angle = d[3];
			p.opacity = d[4];
			p.grow = d[5];
			p.size = d[6];
			p.gs = d[7];
			p.age = d[8];
		}
	};
	instanceProto.onDestroy = function ()
	{
		deadparticles.push.apply(deadparticles, this.particles);
		this.particles.length = 0;
	};
	instanceProto.allocateParticle = function ()
	{
		var p;
		if (deadparticles.length)
		{
			p = deadparticles.pop();
			p.owner = this;
		}
		else
			p = new Particle(this);
		this.particles.push(p);
		p.active = true;
		return p;
	};
	instanceProto.tick = function()
	{
		var dt = this.runtime.getDt(this);
		var i, len, p, n, j;
		if (this.spraytype === 0 && this.spraying)
		{
			this.particleCreateCounter += dt * this.rate;
			n = cr.floor(this.particleCreateCounter);
			this.particleCreateCounter -= n;
			for (i = 0; i < n; i++)
			{
				p = this.allocateParticle();
				p.init();
			}
		}
		this.particleBoxLeft = this.x;
		this.particleBoxTop = this.y;
		this.particleBoxRight = this.x;
		this.particleBoxBottom = this.y;
		for (i = 0, j = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			this.particles[j] = p;
			this.runtime.redraw = true;
			if (this.spraytype === 1 && this.first_tick)
				p.init();
			p.tick(dt);
			if (!p.active)
			{
				deadparticles.push(p);
				continue;
			}
			if (p.left() < this.particleBoxLeft)
				this.particleBoxLeft = p.left();
			if (p.right() > this.particleBoxRight)
				this.particleBoxRight = p.right();
			if (p.top() < this.particleBoxTop)
				this.particleBoxTop = p.top();
			if (p.bottom() > this.particleBoxBottom)
				this.particleBoxBottom = p.bottom();
			j++;
		}
		this.particles.length = j;
		this.set_bbox_changed();
		this.first_tick = false;
		if (this.spraytype === 1 && this.particles.length === 0)
			this.runtime.DestroyInstance(this);
	};
	instanceProto.draw = function (ctx)
	{
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.draw(ctx);
			}
		}
	};
	instanceProto.drawGL = function (glw)
	{
		this.particlescale = this.layer.getScale();
		glw.setTexture(this.type.webGL_texture);
		var i, len, p, layer = this.layer;
		for (i = 0, len = this.particles.length; i < len; i++)
		{
			p = this.particles[i];
			if (p.right() >= layer.viewLeft && p.bottom() >= layer.viewTop && p.left() <= layer.viewRight && p.top() <= layer.viewBottom)
			{
				p.drawGL(glw);
			}
		}
	};
	function Cnds() {};
	Cnds.prototype.IsSpraying = function ()
	{
		return this.spraying;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetSpraying = function (set_)
	{
		this.spraying = (set_ !== 0);
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.SetRate = function (x)
	{
		this.rate = x;
		var diff, i;
		if (this.spraytype === 1 && this.first_tick)
		{
			if (x < this.particles.length)
			{
				diff = this.particles.length - x;
				for (i = 0; i < diff; i++)
					deadparticles.push(this.particles.pop());
			}
			else if (x > this.particles.length)
			{
				diff = x - this.particles.length;
				for (i = 0; i < diff; i++)
					this.allocateParticle().opacity = 0;
			}
		}
	};
	Acts.prototype.SetSprayCone = function (x)
	{
		this.spraycone = cr.to_radians(x);
	};
	Acts.prototype.SetInitSpeed = function (x)
	{
		this.initspeed = x;
	};
	Acts.prototype.SetInitSize = function (x)
	{
		this.initsize = x;
	};
	Acts.prototype.SetInitOpacity = function (x)
	{
		this.initopacity = x / 100;
	};
	Acts.prototype.SetGrowRate = function (x)
	{
		this.growrate = x;
	};
	Acts.prototype.SetXRandomiser = function (x)
	{
		this.xrandom = x;
	};
	Acts.prototype.SetYRandomiser = function (x)
	{
		this.yrandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.speedrandom = x;
	};
	Acts.prototype.SetSizeRandomiser = function (x)
	{
		this.sizerandom = x;
	};
	Acts.prototype.SetGrowRateRandomiser = function (x)
	{
		this.growrandom = x;
	};
	Acts.prototype.SetParticleAcc = function (x)
	{
		this.acc = x;
	};
	Acts.prototype.SetGravity = function (x)
	{
		this.g = x;
	};
	Acts.prototype.SetAngleRandomiser = function (x)
	{
		this.lifeanglerandom = x;
	};
	Acts.prototype.SetSpeedRandomiser = function (x)
	{
		this.lifespeedrandom = x;
	};
	Acts.prototype.SetOpacityRandomiser = function (x)
	{
		this.lifeopacityrandom = x;
	};
	Acts.prototype.SetTimeout = function (x)
	{
		this.timeout = x;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ParticleCount = function (ret)
	{
		ret.set_int(this.particles.length);
	};
	Exps.prototype.Rate = function (ret)
	{
		ret.set_float(this.rate);
	};
	Exps.prototype.SprayCone = function (ret)
	{
		ret.set_float(cr.to_degrees(this.spraycone));
	};
	Exps.prototype.InitSpeed = function (ret)
	{
		ret.set_float(this.initspeed);
	};
	Exps.prototype.InitSize = function (ret)
	{
		ret.set_float(this.initsize);
	};
	Exps.prototype.InitOpacity = function (ret)
	{
		ret.set_float(this.initopacity * 100);
	};
	Exps.prototype.InitGrowRate = function (ret)
	{
		ret.set_float(this.growrate);
	};
	Exps.prototype.XRandom = function (ret)
	{
		ret.set_float(this.xrandom);
	};
	Exps.prototype.YRandom = function (ret)
	{
		ret.set_float(this.yrandom);
	};
	Exps.prototype.InitSpeedRandom = function (ret)
	{
		ret.set_float(this.speedrandom);
	};
	Exps.prototype.InitSizeRandom = function (ret)
	{
		ret.set_float(this.sizerandom);
	};
	Exps.prototype.InitGrowRandom = function (ret)
	{
		ret.set_float(this.growrandom);
	};
	Exps.prototype.ParticleAcceleration = function (ret)
	{
		ret.set_float(this.acc);
	};
	Exps.prototype.Gravity = function (ret)
	{
		ret.set_float(this.g);
	};
	Exps.prototype.ParticleAngleRandom = function (ret)
	{
		ret.set_float(this.lifeanglerandom);
	};
	Exps.prototype.ParticleSpeedRandom = function (ret)
	{
		ret.set_float(this.lifespeedrandom);
	};
	Exps.prototype.ParticleOpacityRandom = function (ret)
	{
		ret.set_float(this.lifeopacityrandom);
	};
	Exps.prototype.Timeout = function (ret)
	{
		ret.set_float(this.timeout);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Rex_Function = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Rex_Function.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
        this.fnObj = new cr.plugins_.Rex_Function.FunctionKlass(this, this.properties[0]);
        this.adapter = new cr.plugins_.Rex_Function.FunctionAdapterKlass(this);
        this.check_name = "FUNCTION";
	};
	instanceProto.CallFn = function(name, args)
	{
        if ((typeof(args) == "object") || (typeof(args) == "undefined"))
        {
            this.fnObj["_CallFn"](name, args);
        }
        else
        {
            this.fnObj["_ExeCmd"](arguments);
        }
        return this.fnObj["result"];
	};
	instanceProto.ExecuteCommands = function (command_string)
	{
        if (command_string == "")
            return;
        var cmds = CSVToArray(command_string);
        var cmd_cnt = cmds.length;
        var i;
        var cmd, j, arg_len, mcmd;
        for(i=0; i<cmd_cnt; i++)
        {
           cmd = cmds[i];
           arg_len = cmd.length;
           for(j=1; j<arg_len; j++)
           {
               mcmd = cmd[j];
               cmd[j] = (mcmd != "")?
                        eval("("+mcmd+")"):
                        null;
           }
           this._ExeCmd(cmd);
        }
        return this.fnObj["result"];
	};
	instanceProto.InjectJS = function(name, fn)
	{
        this.fnObj["InjectJS"](name, fn);
	};
	instanceProto.AddParams = function(param)
	{
        if (param)
            this.fnObj["param"] = this.hash_copy(param, this.fnObj["param"]);
	};
	instanceProto.GetReturns = function()
	{
        return this.fnObj["ret"];
	};
	instanceProto._ExeCmd = function(_args)
	{
        var args = (typeof _args === "string")? arguments:_args;
        return this.fnObj["_ExeCmd"](args);
	};
    instanceProto.hash_copy = function (obj_in, obj_src)
    {
        var obj_out = (obj_src == null)? {}:obj_src;
        var key;
        for (key in obj_in)
            obj_out[key] = obj_in[key];
        return obj_out;
    };
    var CSVToArray = function ( strData, strDelimiter ){
        strDelimiter = (strDelimiter || ",");
        var objPattern = new RegExp(
                (
                        "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
                        "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                        "([^\"\\" + strDelimiter + "\\r\\n]*))"
                ),
                "gi"
                );
        var arrData = [[]];
        var arrMatches = null;
        while (arrMatches = objPattern.exec( strData )){
                var strMatchedDelimiter = arrMatches[ 1 ];
                if (
                        strMatchedDelimiter.length &&
                        (strMatchedDelimiter != strDelimiter)
                        ){
                        arrData.push( [] );
                }
                if (arrMatches[ 2 ]){
                        var strMatchedValue = arrMatches[ 2 ].replace(
                                new RegExp( "\"\"", "g" ),
                                "\""
                                );
                } else {
                        var strMatchedValue = arrMatches[ 3 ];
                }
                arrData[ arrData.length - 1 ].push( strMatchedValue );
        }
        return( arrData );
    };
    var clean_hashtable = function (hash_table)
	{
        var key;
        for (key in hash_table)
            delete hash_table[key];
	};
	function Cnds() {};
	pluginProto.cnds = new Cnds();
	Cnds.prototype.OnFunctionCalled = function (name)
	{
        var is_my_call = (this.fnObj["fn_name"] == name);
        this.fnObj["is_echo"] |= is_my_call;
		return is_my_call;
	};
	function Acts() {};
	pluginProto.acts = new Acts();
	Acts.prototype.CallFunction = function (name)
	{
        this.CallFn(name);
	};
	Acts.prototype.CleanParameters = function ()
	{
        clean_hashtable(this.fnObj["param"]);
	};
	Acts.prototype.SetParameter = function (index, value)
	{
        this.fnObj["param"][index] = value;
	};
	Acts.prototype.CleanRetruns = function ()
	{
        clean_hashtable(this.fnObj["ret"]);
	};
	Acts.prototype.SetReturn = function (index, value)
	{
        this.fnObj["ret"][index] = value;
	};
	Acts.prototype.CreateJSFunctionObject = function (name, code_string)
	{
        var fn = eval("("+code_string+")");
        this.InjectJS(name, fn);
	};
	Acts.prototype.SetResult = function (value)
	{
        this.fnObj["result"] = value;
	};
	Acts.prototype.ExecuteCommands = function (command_string)
	{
        this.ExecuteCommands(command_string);
	};
	Acts.prototype.InjectJSFunctionObjects = function (code_string)
	{
        var fn = eval("("+code_string+")");
        var fns = fn(this.fnObj);
	};
	function Exps() {};
	pluginProto.exps = new Exps();
    Exps.prototype.Param = function (ret, index)
	{
        var value = this.fnObj["param"][index];
        if (value == null)
        {
            value = 0;
            if (this.fnObj["is_debug_mode"])
            {
                alert ("Can not find parameter '" + index + "'");
            }
        }
	    ret.set_any(value);
	};
    Exps.prototype.Ret = function (ret, index)
	{
        var value = this.fnObj["ret"][index];
        if (value == null)
        {
            value = 0;
            if (this.fnObj["is_debug_mode"])
            {
                alert ("Can not find return value '" + index + "'");
            }
        }
	    ret.set_any(value);
	};
    Exps.prototype.Eval = function (ret, code_string)
	{
	    ret.set_any( eval( "("+code_string+")" ) );
	};
    Exps.prototype.Result = function (ret)
	{
	    ret.set_any( this.fnObj["result"] );
	};
    Exps.prototype.Call = function (ret)
	{
        var args = Array.prototype.slice.call(arguments,1);
	    ret.set_any( this._ExeCmd(args) );
	};
}());
(function ()
{
    cr.plugins_.Rex_Function.FunctionKlass = function(plugin, is_debug_mode)
    {
        this["plugin"] = plugin;
        this["is_debug_mode"] = is_debug_mode;
        this["fn_name"] = "";
        this["_fn_name_stack"] = [];
        this["param"] = {};
        this["ret"] = {};
        this["result"] = 0;
        this["is_echo"] = false;
		this["JSFns"] = {};
    };
    var FunctionKlassProto = cr.plugins_.Rex_Function.FunctionKlass.prototype;
	FunctionKlassProto["CallFn"] = function()   // (name, param0, param1...)
	{
        return this["_ExeCmd"](arguments);
	};
	FunctionKlassProto["InjectJS"] = function(name, fn)
	{
        if (this["is_debug_mode"] && this["JSFns"][name] != null)
            alert ("JS function '" + name + "' has existed.");
        this["JSFns"][name] = fn;
	};
	FunctionKlassProto["_ExeCmd"] = function(args)
	{
        var arg_len = args.length;
        var i, arg;
        for (i=1; i<arg_len; i++)
        {
            arg = args[i];
            if (arg != null)
                this["param"][i-1] = arg;
        }
        this["_CallFn"](args[0] || "");
        return this["result"];
	};
	FunctionKlassProto["_CallFn"] = function(name, args)
	{
        if (args)
            this["param"] = this["plugin"].hash_copy(args, this["param"]);
        this["is_echo"] = false;
        var is_break = this["_CallJS"](name);
        if (!is_break)
        {
            this["_CallC2Event"](name);
        }
        if ((!this["is_echo"]) && this["is_debug_mode"])
        {
            alert ("Can not find function '" + name + "'");
        }
	};
	FunctionKlassProto["_CallC2Event"] = function(name)
	{
	    this["_fn_name_stack"].push(this["fn_name"]);
        this["fn_name"] = name;
	    this["plugin"].runtime.trigger(cr.plugins_.Rex_Function.prototype.cnds.OnFunctionCalled, this["plugin"]);
	    this["fn_name"] = this["_fn_name_stack"].pop();
	};
 	FunctionKlassProto["_CallJS"] = function(name)
	{
        var is_break = false;
	    var fn_obj = this["JSFns"][name];
        if (fn_obj != null)
        {
            this["is_echo"] = true;
            is_break = fn_obj(this);
        }
        return is_break;
	};
    cr.plugins_.Rex_Function.FunctionAdapterKlass = function(plugin)
    {
        this["_plugin"] = plugin;
    };
    var FunctionAdapterKlassProto = cr.plugins_.Rex_Function.FunctionAdapterKlass.prototype;
	FunctionAdapterKlassProto["CallFn"] = function(name, args)
	{
	    return this["_plugin"].CallFn(name, args);
	};
	FunctionAdapterKlassProto["GetReturns"] = function()
	{
	    return this["_plugin"].GetReturns();
	};
	FunctionAdapterKlassProto["InjectJS"] = function(name, fn)
	{
	    this["_plugin"].InjectJS(name, fn);
	};
}());
;
;
cr.plugins_.Sprite = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Sprite.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	function frame_getDataUri()
	{
		if (this.datauri.length === 0)
		{
			var tmpcanvas = document.createElement("canvas");
			tmpcanvas.width = this.width;
			tmpcanvas.height = this.height;
			var tmpctx = tmpcanvas.getContext("2d");
			if (this.spritesheeted)
			{
				tmpctx.drawImage(this.texture_img, this.offx, this.offy, this.width, this.height,
										 0, 0, this.width, this.height);
			}
			else
			{
				tmpctx.drawImage(this.texture_img, 0, 0, this.width, this.height);
			}
			this.datauri = tmpcanvas.toDataURL("image/png");
		}
		return this.datauri;
	};
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		var i, leni, j, lenj;
		var anim, frame, animobj, frameobj, wt, uv;
		this.all_frames = [];
		this.has_loaded_textures = false;
		for (i = 0, leni = this.animations.length; i < leni; i++)
		{
			anim = this.animations[i];
			animobj = {};
			animobj.name = anim[0];
			animobj.speed = anim[1];
			animobj.loop = anim[2];
			animobj.repeatcount = anim[3];
			animobj.repeatto = anim[4];
			animobj.pingpong = anim[5];
			animobj.sid = anim[6];
			animobj.frames = [];
			for (j = 0, lenj = anim[7].length; j < lenj; j++)
			{
				frame = anim[7][j];
				frameobj = {};
				frameobj.texture_file = frame[0];
				frameobj.texture_filesize = frame[1];
				frameobj.offx = frame[2];
				frameobj.offy = frame[3];
				frameobj.width = frame[4];
				frameobj.height = frame[5];
				frameobj.duration = frame[6];
				frameobj.hotspotX = frame[7];
				frameobj.hotspotY = frame[8];
				frameobj.image_points = frame[9];
				frameobj.poly_pts = frame[10];
				frameobj.pixelformat = frame[11];
				frameobj.spritesheeted = (frameobj.width !== 0);
				frameobj.datauri = "";		// generated on demand and cached
				frameobj.getDataUri = frame_getDataUri;
				uv = {};
				uv.left = 0;
				uv.top = 0;
				uv.right = 1;
				uv.bottom = 1;
				frameobj.sheetTex = uv;
				frameobj.webGL_texture = null;
				wt = this.runtime.findWaitingTexture(frame[0]);
				if (wt)
				{
					frameobj.texture_img = wt;
				}
				else
				{
					frameobj.texture_img = new Image();
					frameobj.texture_img["idtkLoadDisposed"] = true;
					frameobj.texture_img.src = frame[0];
					frameobj.texture_img.cr_src = frame[0];
					frameobj.texture_img.cr_filesize = frame[1];
					frameobj.texture_img.c2webGL_texture = null;
					this.runtime.waitForImageLoad(frameobj.texture_img);
				}
				cr.seal(frameobj);
				animobj.frames.push(frameobj);
				this.all_frames.push(frameobj);
			}
			cr.seal(animobj);
			this.animations[i] = animobj;		// swap array data for object
		}
	};
	typeProto.updateAllCurrentTexture = function ()
	{
		var i, len, inst;
		for (i = 0, len = this.instances.length; i < len; i++)
		{
			inst = this.instances[i];
			inst.curWebGLTexture = inst.curFrame.webGL_texture;
		}
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.texture_img.c2webGL_texture = null;
			frame.webGL_texture = null;
		}
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.updateAllCurrentTexture();
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.has_loaded_textures || !this.runtime.glwrap)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			frame.webGL_texture = this.runtime.glwrap.loadTexture(frame.texture_img, false, this.runtime.linearSampling, frame.pixelformat);
		}
		this.has_loaded_textures = true;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.has_loaded_textures)
			return;
		var i, len, frame;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frame = this.all_frames[i];
			this.runtime.glwrap.deleteTexture(frame.webGL_texture);
			frame.webGL_texture = null;
		}
		this.has_loaded_textures = false;
	};
	var already_drawn_images = [];
	typeProto.preloadCanvas2D = function (ctx)
	{
		var i, len, frameimg;
		already_drawn_images.length = 0;
		for (i = 0, len = this.all_frames.length; i < len; ++i)
		{
			frameimg = this.all_frames[i].texture_img;
			if (already_drawn_images.indexOf(frameimg) !== -1)
					continue;
			ctx.drawImage(frameimg, 0, 0);
			already_drawn_images.push(frameimg);
		}
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		var poly_pts = this.type.animations[0].frames[0].poly_pts;
		if (this.recycled)
			this.collision_poly.set_pts(poly_pts);
		else
			this.collision_poly = new cr.CollisionPoly(poly_pts);
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);	// 0=visible, 1=invisible
		this.isTicking = false;
		this.inAnimTrigger = false;
		this.collisionsEnabled = (this.properties[3] !== 0);
		if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		this.cur_animation = this.getAnimationByName(this.properties[1]) || this.type.animations[0];
		this.cur_frame = this.properties[2];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		var curanimframe = this.cur_animation.frames[this.cur_frame];
		this.collision_poly.set_pts(curanimframe.poly_pts);
		this.hotspotX = curanimframe.hotspotX;
		this.hotspotY = curanimframe.hotspotY;
		this.cur_anim_speed = this.cur_animation.speed;
		if (this.recycled)
			this.animTimer.reset();
		else
			this.animTimer = new cr.KahanAdder();
		this.frameStart = this.getNowTime();
		this.animPlaying = true;
		this.animRepeats = 0;
		this.animForwards = true;
		this.animTriggerName = "";
		this.changeAnimName = "";
		this.changeAnimFrom = 0;
		this.changeAnimFrame = -1;
		this.type.loadTextures();
		var i, leni, j, lenj;
		var anim, frame, uv, maintex;
		for (i = 0, leni = this.type.animations.length; i < leni; i++)
		{
			anim = this.type.animations[i];
			for (j = 0, lenj = anim.frames.length; j < lenj; j++)
			{
				frame = anim.frames[j];
				if (frame.width === 0)
				{
					frame.width = frame.texture_img.width;
					frame.height = frame.texture_img.height;
				}
				if (frame.spritesheeted)
				{
					maintex = frame.texture_img;
					uv = frame.sheetTex;
					uv.left = frame.offx / maintex.width;
					uv.top = frame.offy / maintex.height;
					uv.right = (frame.offx + frame.width) / maintex.width;
					uv.bottom = (frame.offy + frame.height) / maintex.height;
					if (frame.offx === 0 && frame.offy === 0 && frame.width === maintex.width && frame.height === maintex.height)
					{
						frame.spritesheeted = false;
					}
				}
			}
		}
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
	};
	instanceProto.saveToJSON = function ()
	{
		var o = {
			"a": this.cur_animation.sid,
			"f": this.cur_frame,
			"cas": this.cur_anim_speed,
			"fs": this.frameStart,
			"ar": this.animRepeats,
			"at": this.animTimer.sum
		};
		if (!this.animPlaying)
			o["ap"] = this.animPlaying;
		if (!this.animForwards)
			o["af"] = this.animForwards;
		return o;
	};
	instanceProto.loadFromJSON = function (o)
	{
		var anim = this.getAnimationBySid(o["a"]);
		if (anim)
			this.cur_animation = anim;
		this.cur_frame = o["f"];
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		this.cur_anim_speed = o["cas"];
		this.frameStart = o["fs"];
		this.animRepeats = o["ar"];
		this.animTimer.reset();
		this.animTimer.sum = o["at"];
		this.animPlaying = o.hasOwnProperty("ap") ? o["ap"] : true;
		this.animForwards = o.hasOwnProperty("af") ? o["af"] : true;
		this.curFrame = this.cur_animation.frames[this.cur_frame];
		this.curWebGLTexture = this.curFrame.webGL_texture;
		this.collision_poly.set_pts(this.curFrame.poly_pts);
		this.hotspotX = this.curFrame.hotspotX;
		this.hotspotY = this.curFrame.hotspotY;
	};
	instanceProto.animationFinish = function (reverse)
	{
		this.cur_frame = reverse ? 0 : this.cur_animation.frames.length - 1;
		this.animPlaying = false;
		this.animTriggerName = this.cur_animation.name;
		this.inAnimTrigger = true;
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
		this.inAnimTrigger = false;
		this.animRepeats = 0;
	};
	instanceProto.getNowTime = function()
	{
		return this.animTimer.sum;
	};
	instanceProto.tick = function()
	{
		this.animTimer.add(this.runtime.getDt(this));
		if (this.changeAnimName.length)
			this.doChangeAnim();
		if (this.changeAnimFrame >= 0)
			this.doChangeAnimFrame();
		var now = this.getNowTime();
		var cur_animation = this.cur_animation;
		var prev_frame = cur_animation.frames[this.cur_frame];
		var next_frame;
		var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
		if (this.animPlaying && now >= this.frameStart + cur_frame_time)
		{
			if (this.animForwards)
			{
				this.cur_frame++;
			}
			else
			{
				this.cur_frame--;
			}
			this.frameStart += cur_frame_time;
			if (this.cur_frame >= cur_animation.frames.length)
			{
				if (cur_animation.pingpong)
				{
					this.animForwards = false;
					this.cur_frame = cur_animation.frames.length - 2;
				}
				else if (cur_animation.loop)
				{
					this.cur_frame = cur_animation.repeatto;
				}
				else
				{
					this.animRepeats++;
					if (this.animRepeats >= cur_animation.repeatcount)
					{
						this.animationFinish(false);
					}
					else
					{
						this.cur_frame = cur_animation.repeatto;
					}
				}
			}
			if (this.cur_frame < 0)
			{
				if (cur_animation.pingpong)
				{
					this.cur_frame = 1;
					this.animForwards = true;
					if (!cur_animation.loop)
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
					}
				}
				else
				{
					if (cur_animation.loop)
					{
						this.cur_frame = cur_animation.repeatto;
					}
					else
					{
						this.animRepeats++;
						if (this.animRepeats >= cur_animation.repeatcount)
						{
							this.animationFinish(true);
						}
						else
						{
							this.cur_frame = cur_animation.repeatto;
						}
					}
				}
			}
			if (this.cur_frame < 0)
				this.cur_frame = 0;
			else if (this.cur_frame >= cur_animation.frames.length)
				this.cur_frame = cur_animation.frames.length - 1;
			if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed))
			{
				this.frameStart = now;
			}
			next_frame = cur_animation.frames[this.cur_frame];
			this.OnFrameChanged(prev_frame, next_frame);
			this.runtime.redraw = true;
		}
	};
	instanceProto.getAnimationByName = function (name_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (cr.equals_nocase(a.name, name_))
				return a;
		}
		return null;
	};
	instanceProto.getAnimationBySid = function (sid_)
	{
		var i, len, a;
		for (i = 0, len = this.type.animations.length; i < len; i++)
		{
			a = this.type.animations[i];
			if (a.sid === sid_)
				return a;
		}
		return null;
	};
	instanceProto.doChangeAnim = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var anim = this.getAnimationByName(this.changeAnimName);
		this.changeAnimName = "";
		if (!anim)
			return;
		if (cr.equals_nocase(anim.name, this.cur_animation.name) && this.animPlaying)
			return;
		this.cur_animation = anim;
		this.cur_anim_speed = anim.speed;
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (this.changeAnimFrom === 1)
			this.cur_frame = 0;
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		this.animForwards = true;
		this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
		this.runtime.redraw = true;
	};
	instanceProto.doChangeAnimFrame = function ()
	{
		var prev_frame = this.cur_animation.frames[this.cur_frame];
		var prev_frame_number = this.cur_frame;
		this.cur_frame = cr.floor(this.changeAnimFrame);
		if (this.cur_frame < 0)
			this.cur_frame = 0;
		if (this.cur_frame >= this.cur_animation.frames.length)
			this.cur_frame = this.cur_animation.frames.length - 1;
		if (prev_frame_number !== this.cur_frame)
		{
			this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
			this.frameStart = this.getNowTime();
			this.runtime.redraw = true;
		}
		this.changeAnimFrame = -1;
	};
	instanceProto.OnFrameChanged = function (prev_frame, next_frame)
	{
		var oldw = prev_frame.width;
		var oldh = prev_frame.height;
		var neww = next_frame.width;
		var newh = next_frame.height;
		if (oldw != neww)
			this.width *= (neww / oldw);
		if (oldh != newh)
			this.height *= (newh / oldh);
		this.hotspotX = next_frame.hotspotX;
		this.hotspotY = next_frame.hotspotY;
		this.collision_poly.set_pts(next_frame.poly_pts);
		this.set_bbox_changed();
		this.curFrame = next_frame;
		this.curWebGLTexture = next_frame.webGL_texture;
		var i, len, b;
		for (i = 0, len = this.behavior_insts.length; i < len; i++)
		{
			b = this.behavior_insts[i];
			if (b.onSpriteFrameChanged)
				b.onSpriteFrameChanged(prev_frame, next_frame);
		}
		this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		var cur_frame = this.curFrame;
		var spritesheeted = cur_frame.spritesheeted;
		var cur_image = cur_frame.texture_img;
		var myx = this.x;
		var myy = this.y;
		var w = this.width;
		var h = this.height;
		if (this.angle === 0 && w >= 0 && h >= 0)
		{
			myx -= this.hotspotX * w;
			myy -= this.hotspotY * h;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 myx, myy, w, h);
			}
			else
			{
				ctx.drawImage(cur_image, myx, myy, w, h);
			}
		}
		else
		{
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			var widthfactor = w > 0 ? 1 : -1;
			var heightfactor = h > 0 ? 1 : -1;
			ctx.translate(myx, myy);
			if (widthfactor !== 1 || heightfactor !== 1)
				ctx.scale(widthfactor, heightfactor);
			ctx.rotate(this.angle * widthfactor * heightfactor);
			var drawx = 0 - (this.hotspotX * cr.abs(w))
			var drawy = 0 - (this.hotspotY * cr.abs(h));
			if (spritesheeted)
			{
				ctx.drawImage(cur_image, cur_frame.offx, cur_frame.offy, cur_frame.width, cur_frame.height,
										 drawx, drawy, cr.abs(w), cr.abs(h));
			}
			else
			{
				ctx.drawImage(cur_image, drawx, drawy, cr.abs(w), cr.abs(h));
			}
			ctx.restore();
		}
		/*
		ctx.strokeStyle = "#f00";
		ctx.lineWidth = 3;
		ctx.beginPath();
		this.collision_poly.cache_poly(this.width, this.height, this.angle);
		var i, len, ax, ay, bx, by;
		for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
		{
			ax = this.collision_poly.pts_cache[i*2] + this.x;
			ay = this.collision_poly.pts_cache[i*2+1] + this.y;
			bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
			by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
			ctx.moveTo(ax, ay);
			ctx.lineTo(bx, by);
		}
		ctx.stroke();
		ctx.closePath();
		*/
		/*
		if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
		{
			this.behavior_insts[0].draw(ctx);
		}
		*/
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.curWebGLTexture);
		glw.setOpacity(this.opacity);
		var cur_frame = this.curFrame;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, cur_frame.sheetTex);
			else
				glw.quad(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy);
		}
		else
		{
			if (cur_frame.spritesheeted)
				glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, cur_frame.sheetTex);
			else
				glw.quad(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly);
		}
	};
	instanceProto.getImagePointIndexByName = function(name_)
	{
		var cur_frame = this.curFrame;
		var i, len;
		for (i = 0, len = cur_frame.image_points.length; i < len; i++)
		{
			if (cr.equals_nocase(name_, cur_frame.image_points[i][0]))
				return i;
		}
		return -1;
	};
	instanceProto.getImagePoint = function(imgpt, getX)
	{
		var cur_frame = this.curFrame;
		var image_points = cur_frame.image_points;
		var index;
		if (cr.is_string(imgpt))
			index = this.getImagePointIndexByName(imgpt);
		else
			index = imgpt - 1;	// 0 is origin
		index = cr.floor(index);
		if (index < 0 || index >= image_points.length)
			return getX ? this.x : this.y;	// return origin
		var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
		var y = image_points[index][2];
		y = (y - cur_frame.hotspotY) * this.height;
		var cosa = Math.cos(this.angle);
		var sina = Math.sin(this.angle);
		var x_temp = (x * cosa) - (y * sina);
		y = (y * cosa) + (x * sina);
		x = x_temp;
		x += this.x;
		y += this.y;
		return getX ? x : y;
	};
	function Cnds() {};
	var arrCache = [];
	function allocArr()
	{
		if (arrCache.length)
			return arrCache.pop();
		else
			return [0, 0, 0];
	};
	function freeArr(a)
	{
		a[0] = 0;
		a[1] = 0;
		a[2] = 0;
		arrCache.push(a);
	};
	function makeCollKey(a, b)
	{
		if (a < b)
			return "" + a + "," + b;
		else
			return "" + b + "," + a;
	};
	function collmemory_add(collmemory, a, b, tickcount)
	{
		var a_uid = a.uid;
		var b_uid = b.uid;
		var key = makeCollKey(a_uid, b_uid);
		if (collmemory.hasOwnProperty(key))
		{
			collmemory[key][2] = tickcount;
			return;
		}
		var arr = allocArr();
		arr[0] = a_uid;
		arr[1] = b_uid;
		arr[2] = tickcount;
		collmemory[key] = arr;
	};
	function collmemory_remove(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			freeArr(collmemory[key]);
			delete collmemory[key];
		}
	};
	function collmemory_removeInstance(collmemory, inst)
	{
		var uid = inst.uid;
		var p, entry;
		for (p in collmemory)
		{
			if (collmemory.hasOwnProperty(p))
			{
				entry = collmemory[p];
				if (entry[0] === uid || entry[1] === uid)
				{
					freeArr(collmemory[p]);
					delete collmemory[p];
				}
			}
		}
	};
	var last_coll_tickcount = -2;
	function collmemory_has(collmemory, a, b)
	{
		var key = makeCollKey(a.uid, b.uid);
		if (collmemory.hasOwnProperty(key))
		{
			last_coll_tickcount = collmemory[key][2];
			return true;
		}
		else
		{
			last_coll_tickcount = -2;
			return false;
		}
	};
	var candidates = [];
	Cnds.prototype.OnCollision = function (rtype)
	{
		if (!rtype)
			return false;
		var runtime = this.runtime;
		var cnd = runtime.getCurrentCondition();
		var ltype = cnd.type;
		if (!cnd.extra.collmemory)
		{
			cnd.extra.collmemory = {};
			runtime.addDestroyCallback((function (collmemory) {
				return function(inst) {
					collmemory_removeInstance(collmemory, inst);
				};
			})(cnd.extra.collmemory));
		}
		var collmemory = cnd.extra.collmemory;
		var lsol = ltype.getCurrentSol();
		var rsol = rtype.getCurrentSol();
		var linstances = lsol.getObjects();
		var rinstances;
		var l, linst, r, rinst;
		var curlsol, currsol;
		var tickcount = this.runtime.tickcount;
		var lasttickcount = tickcount - 1;
		var exists, run;
		var current_event = runtime.getCurrentEventStack().current_event;
		var orblock = current_event.orblock;
		for (l = 0; l < linstances.length; l++)
		{
			linst = linstances[l];
			if (rsol.select_all)
			{
				linst.update_bbox();
				this.runtime.getCollisionCandidates(linst.layer, rtype, linst.bbox, candidates);
				rinstances = candidates;
			}
			else
				rinstances = rsol.getObjects();
			for (r = 0; r < rinstances.length; r++)
			{
				rinst = rinstances[r];
				if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst))
				{
					exists = collmemory_has(collmemory, linst, rinst);
					run = (!exists || (last_coll_tickcount < lasttickcount));
					collmemory_add(collmemory, linst, rinst, tickcount);
					if (run)
					{
						runtime.pushCopySol(current_event.solModifiers);
						curlsol = ltype.getCurrentSol();
						currsol = rtype.getCurrentSol();
						curlsol.select_all = false;
						currsol.select_all = false;
						if (ltype === rtype)
						{
							curlsol.instances.length = 2;	// just use lsol, is same reference as rsol
							curlsol.instances[0] = linst;
							curlsol.instances[1] = rinst;
							ltype.applySolToContainer();
						}
						else
						{
							curlsol.instances.length = 1;
							currsol.instances.length = 1;
							curlsol.instances[0] = linst;
							currsol.instances[0] = rinst;
							ltype.applySolToContainer();
							rtype.applySolToContainer();
						}
						current_event.retrigger();
						runtime.popSol(current_event.solModifiers);
					}
				}
				else
				{
					collmemory_remove(collmemory, linst, rinst);
				}
			}
			candidates.length = 0;
		}
		return false;
	};
	var rpicktype = null;
	var rtopick = new cr.ObjectSet();
	var needscollisionfinish = false;
	function DoOverlapCondition(rtype, offx, offy)
	{
		if (!rtype)
			return false;
		var do_offset = (offx !== 0 || offy !== 0);
		var oldx, oldy, ret = false, r, lenr, rinst;
		var cnd = this.runtime.getCurrentCondition();
		var ltype = cnd.type;
		var inverted = cnd.inverted;
		var rsol = rtype.getCurrentSol();
		var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
		var rinstances;
		if (rsol.select_all)
		{
			this.update_bbox();
			this.runtime.getCollisionCandidates(this.layer, rtype, this.bbox, candidates);
			rinstances = candidates;
		}
		else if (orblock)
			rinstances = rsol.else_instances;
		else
			rinstances = rsol.instances;
		rpicktype = rtype;
		needscollisionfinish = (ltype !== rtype && !inverted);
		if (do_offset)
		{
			oldx = this.x;
			oldy = this.y;
			this.x += offx;
			this.y += offy;
			this.set_bbox_changed();
		}
		for (r = 0, lenr = rinstances.length; r < lenr; r++)
		{
			rinst = rinstances[r];
			if (this.runtime.testOverlap(this, rinst))
			{
				ret = true;
				if (inverted)
					break;
				if (ltype !== rtype)
					rtopick.add(rinst);
			}
		}
		if (do_offset)
		{
			this.x = oldx;
			this.y = oldy;
			this.set_bbox_changed();
		}
		candidates.length = 0;
		return ret;
	};
	typeProto.finish = function (do_pick)
	{
		if (!needscollisionfinish)
			return;
		if (do_pick)
		{
			var orblock = this.runtime.getCurrentEventStack().current_event.orblock;
			var sol = rpicktype.getCurrentSol();
			var topick = rtopick.valuesRef();
			var i, len, inst;
			if (sol.select_all)
			{
				sol.select_all = false;
				sol.instances.length = topick.length;
				for (i = 0, len = topick.length; i < len; i++)
				{
					sol.instances[i] = topick[i];
				}
				if (orblock)
				{
					sol.else_instances.length = 0;
					for (i = 0, len = rpicktype.instances.length; i < len; i++)
					{
						inst = rpicktype.instances[i];
						if (!rtopick.contains(inst))
							sol.else_instances.push(inst);
					}
				}
			}
			else
			{
				if (orblock)
				{
					var initsize = sol.instances.length;
					sol.instances.length = initsize + topick.length;
					for (i = 0, len = topick.length; i < len; i++)
					{
						sol.instances[initsize + i] = topick[i];
						cr.arrayFindRemove(sol.else_instances, topick[i]);
					}
				}
				else
				{
					cr.shallowAssignArray(sol.instances, topick);
				}
			}
			rpicktype.applySolToContainer();
		}
		rtopick.clear();
		needscollisionfinish = false;
	};
	Cnds.prototype.IsOverlapping = function (rtype)
	{
		return DoOverlapCondition.call(this, rtype, 0, 0);
	};
	Cnds.prototype.IsOverlappingOffset = function (rtype, offx, offy)
	{
		return DoOverlapCondition.call(this, rtype, offx, offy);
	};
	Cnds.prototype.IsAnimPlaying = function (animname)
	{
		if (this.changeAnimName.length)
			return cr.equals_nocase(this.changeAnimName, animname);
		else
			return cr.equals_nocase(this.cur_animation.name, animname);
	};
	Cnds.prototype.CompareFrame = function (cmp, framenum)
	{
		return cr.do_cmp(this.cur_frame, cmp, framenum);
	};
	Cnds.prototype.CompareAnimSpeed = function (cmp, x)
	{
		var s = (this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
		return cr.do_cmp(s, cmp, x);
	};
	Cnds.prototype.OnAnimFinished = function (animname)
	{
		return cr.equals_nocase(this.animTriggerName, animname);
	};
	Cnds.prototype.OnAnyAnimFinished = function ()
	{
		return true;
	};
	Cnds.prototype.OnFrameChanged = function ()
	{
		return true;
	};
	Cnds.prototype.IsMirrored = function ()
	{
		return this.width < 0;
	};
	Cnds.prototype.IsFlipped = function ()
	{
		return this.height < 0;
	};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	Cnds.prototype.IsCollisionEnabled = function ()
	{
		return this.collisionsEnabled;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.Spawn = function (obj, layer, imgpt)
	{
		if (!obj || !layer)
			return;
		var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
		if (!inst)
			return;
		if (typeof inst.angle !== "undefined")
		{
			inst.angle = this.angle;
			inst.set_bbox_changed();
		}
		this.runtime.isInOnDestroy++;
		var i, len, s;
		this.runtime.trigger(Object.getPrototypeOf(obj.plugin).cnds.OnCreated, inst);
		if (inst.is_contained)
		{
			for (i = 0, len = inst.siblings.length; i < len; i++)
			{
				s = inst.siblings[i];
				this.runtime.trigger(Object.getPrototypeOf(s.type.plugin).cnds.OnCreated, s);
			}
		}
		this.runtime.isInOnDestroy--;
		var cur_act = this.runtime.getCurrentAction();
		var reset_sol = false;
		if (cr.is_undefined(cur_act.extra.Spawn_LastExec) || cur_act.extra.Spawn_LastExec < this.runtime.execcount)
		{
			reset_sol = true;
			cur_act.extra.Spawn_LastExec = this.runtime.execcount;
		}
		var sol;
		if (obj != this.type)
		{
			sol = obj.getCurrentSol();
			sol.select_all = false;
			if (reset_sol)
			{
				sol.instances.length = 1;
				sol.instances[0] = inst;
			}
			else
				sol.instances.push(inst);
			if (inst.is_contained)
			{
				for (i = 0, len = inst.siblings.length; i < len; i++)
				{
					s = inst.siblings[i];
					sol = s.type.getCurrentSol();
					sol.select_all = false;
					if (reset_sol)
					{
						sol.instances.length = 1;
						sol.instances[0] = s;
					}
					else
						sol.instances.push(s);
				}
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.StopAnim = function ()
	{
		this.animPlaying = false;
	};
	Acts.prototype.StartAnim = function (from)
	{
		this.animPlaying = true;
		this.frameStart = this.getNowTime();
		if (from === 1 && this.cur_frame !== 0)
		{
			this.changeAnimFrame = 0;
			if (!this.inAnimTrigger)
				this.doChangeAnimFrame();
		}
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetAnim = function (animname, from)
	{
		this.changeAnimName = animname;
		this.changeAnimFrom = from;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnim();
	};
	Acts.prototype.SetAnimFrame = function (framenumber)
	{
		this.changeAnimFrame = framenumber;
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
		if (!this.inAnimTrigger)
			this.doChangeAnimFrame();
	};
	Acts.prototype.SetAnimSpeed = function (s)
	{
		this.cur_anim_speed = cr.abs(s);
		this.animForwards = (s >= 0);
		if (!this.isTicking)
		{
			this.runtime.tickMe(this);
			this.isTicking = true;
		}
	};
	Acts.prototype.SetMirrored = function (m)
	{
		var neww = cr.abs(this.width) * (m === 0 ? -1 : 1);
		if (this.width === neww)
			return;
		this.width = neww;
		this.set_bbox_changed();
	};
	Acts.prototype.SetFlipped = function (f)
	{
		var newh = cr.abs(this.height) * (f === 0 ? -1 : 1);
		if (this.height === newh)
			return;
		this.height = newh;
		this.set_bbox_changed();
	};
	Acts.prototype.SetScale = function (s)
	{
		var cur_frame = this.curFrame;
		var mirror_factor = (this.width < 0 ? -1 : 1);
		var flip_factor = (this.height < 0 ? -1 : 1);
		var new_width = cur_frame.width * s * mirror_factor;
		var new_height = cur_frame.height * s * flip_factor;
		if (this.width !== new_width || this.height !== new_height)
		{
			this.width = new_width;
			this.height = new_height;
			this.set_bbox_changed();
		}
	};
	Acts.prototype.LoadURL = function (url_, resize_)
	{
		var img = new Image();
		var self = this;
		var curFrame_ = this.curFrame;
		img.onload = function ()
		{
			if (curFrame_.texture_img.src === img.src)
			{
				if (self.runtime.glwrap && self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.runtime.redraw = true;
				self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
				return;
			}
			curFrame_.texture_img = img;
			curFrame_.offx = 0;
			curFrame_.offy = 0;
			curFrame_.width = img.width;
			curFrame_.height = img.height;
			curFrame_.spritesheeted = false;
			curFrame_.datauri = "";
			if (self.runtime.glwrap)
			{
				if (curFrame_.webGL_texture)
					self.runtime.glwrap.deleteTexture(curFrame_.webGL_texture);
				curFrame_.webGL_texture = self.runtime.glwrap.loadTexture(img, false, self.runtime.linearSampling);
				if (self.curFrame === curFrame_)
					self.curWebGLTexture = curFrame_.webGL_texture;
				self.type.updateAllCurrentTexture();
			}
			if (resize_ === 0)		// resize to image size
			{
				self.width = img.width;
				self.height = img.height;
				self.set_bbox_changed();
			}
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	Acts.prototype.SetCollisions = function (set_)
	{
		if (this.collisionsEnabled === (set_ !== 0))
			return;		// no change
		this.collisionsEnabled = (set_ !== 0);
		if (this.collisionsEnabled)
			this.set_bbox_changed();		// needs to be added back to cells
		else
		{
			if (this.collcells.right >= this.collcells.left)
				this.type.collision_grid.update(this, this.collcells, null);
			this.collcells.set(0, 0, -1, -1);
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.AnimationFrame = function (ret)
	{
		ret.set_int(this.cur_frame);
	};
	Exps.prototype.AnimationFrameCount = function (ret)
	{
		ret.set_int(this.cur_animation.frames.length);
	};
	Exps.prototype.AnimationName = function (ret)
	{
		ret.set_string(this.cur_animation.name);
	};
	Exps.prototype.AnimationSpeed = function (ret)
	{
		ret.set_float(this.animForwards ? this.cur_anim_speed : -this.cur_anim_speed);
	};
	Exps.prototype.ImagePointX = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, true));
	};
	Exps.prototype.ImagePointY = function (ret, imgpt)
	{
		ret.set_float(this.getImagePoint(imgpt, false));
	};
	Exps.prototype.ImagePointCount = function (ret)
	{
		ret.set_int(this.curFrame.image_points.length);
	};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.curFrame.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.curFrame.height);
	};
	pluginProto.exps = new Exps();
}());
/* global cr,log,assert2 */
/* jshint globalstrict: true */
/* jshint strict: true */
;
;
var jText = '';
cr.plugins_.SpriteFontPlus = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.SpriteFontPlus.prototype;
	pluginProto.onCreate = function ()
	{
	};
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.runtime.wait_for_textures.push(this.texture_img);
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, false, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onDestroy = function()
	{
		freeAllLines (this.lines);
		freeAllClip  (this.clipList);
		freeAllClipUV(this.clipUV);
		cr.wipe(this.characterWidthList);
	};
	instanceProto.onCreate = function()
	{
		this.texture_img      = this.type.texture_img;
		this.characterWidth   = this.properties[0];
		this.characterHeight  = this.properties[1];
		this.characterSet     = this.properties[2];
		this.text             = this.properties[3];
		this.characterScale   = this.properties[4];
		this.visible          = (this.properties[5] === 0);	// 0=visible, 1=invisible
		this.halign           = this.properties[6]/2.0;			// 0=left, 1=center, 2=right
		this.valign           = this.properties[7]/2.0;			// 0=top, 1=center, 2=bottom
		this.wrapbyword       = (this.properties[9] === 0);	// 0=word, 1=character
		this.characterSpacing = this.properties[10];
		this.lineHeight       = this.properties[11];
		this.textWidth  = 0;
		this.textHeight = 0;
		this.charWidthJSON	  = this.properties[12];
		this.spaceWidth 	  = this.properties[13];
		jText = this.charWidthJSON;
		if (this.recycled)
		{
			this.lines.length = 0;
			cr.wipe(this.clipList);
			cr.wipe(this.clipUV);
			cr.wipe(this.characterWidthList);
		}
		else
		{
			this.lines = [];
			this.clipList = {};
			this.clipUV = {};
			this.characterWidthList = {};
		}
		try{
			if(this.charWidthJSON){
				if(this.charWidthJSON.indexOf('""c2array""') !== -1) {
					var jStr = jQuery.parseJSON(this.charWidthJSON.replace(/""/g,'"'));
					var l = jStr.size[1];
					for(var s = 0; s < l; s++) {
						var cs = jStr.data[1][s][0];
						var w = jStr.data[0][s][0];
						for(var c = 0; c < cs.length; c++) {
							this.characterWidthList[cs.charAt(c)] = w
						}
					}
				} else {
					var jStr = jQuery.parseJSON(this.charWidthJSON);
					var l = jStr.length;
					for(var s = 0; s < l; s++) {
						var cs = jStr[s][1];
						var w = jStr[s][0];
						for(var c = 0; c < cs.length; c++) {
							this.characterWidthList[cs.charAt(c)] = w
						}
					}
				}
			}
			if(this.spaceWidth !== -1) {
				this.characterWidthList[' '] = this.spaceWidth;
			}
		}
		catch(e){
			if(window.console && window.console.log && false) {
				window.console.log('SpriteFont+ Failure: ' + e);
			}
		}
		this.text_changed = true;
		this.lastwrapwidth = this.width;
		if (this.runtime.glwrap)
		{
			if (!this.type.webGL_texture)
			{
				this.type.webGL_texture = this.runtime.glwrap.loadTexture(this.type.texture_img, false, this.runtime.linearSampling, this.type.texture_pixelformat);
			}
			this.webGL_texture = this.type.webGL_texture;
		}
		this.SplitSheet();
	};
	instanceProto.saveToJSON = function ()
	{
		var save = {
			"t": this.text,
			"csc": this.characterScale,
			"csp": this.characterSpacing,
			"lh": this.lineHeight,
			"tw": this.textWidth,
			"th": this.textHeight,
			"lrt": this.last_render_tick,
			"cw": {}
		};
		for (var ch in this.characterWidthList)
			save["cw"][ch] = this.characterWidthList[ch];
		return save;
	};
	instanceProto.loadFromJSON = function (o)
	{
		this.text = o["t"];
		this.characterScale = o["csc"];
		this.characterSpacing = o["csp"];
		this.lineHeight = o["lh"];
		this.textWidth = o["tw"];
		this.textHeight = o["th"];
		this.last_render_tick = o["lrt"];
		for(var ch in o["cw"])
			this.characterWidthList[ch] = o["cw"][ch];
		this.text_changed = true;
		this.lastwrapwidth = this.width;
	};
	function trimRight(text)
	{
		return text.replace(/\s\s*$/, '');
	}
	var MAX_CACHE_SIZE = 1000;
	function alloc(cache,Constructor)
	{
		if (cache.length)
			return cache.pop();
		else
			return new Constructor();
	}
	function free(cache,data)
	{
		if (cache.length < MAX_CACHE_SIZE)
		{
			cache.push(data);
		}
	}
	function freeAll(cache,dataList,isArray)
	{
		if (isArray) {
			var i, len;
			for (i = 0, len = dataList.length; i < len; i++)
			{
				free(cache,dataList[i]);
			}
			dataList.length = 0;
		} else {
			var prop;
			for(prop in dataList) {
				if(Object.prototype.hasOwnProperty.call(dataList,prop)) {
					free(cache,dataList[prop]);
					delete dataList[prop];
				}
			}
		}
	}
	function addLine(inst,lineIndex,cur_line) {
		var lines = inst.lines;
		var line;
		cur_line = trimRight(cur_line);
		if (lineIndex >= lines.length)
			lines.push(allocLine());
		line = lines[lineIndex];
		line.text = cur_line;
		line.width = inst.measureWidth(cur_line);
		inst.textWidth = cr.max(inst.textWidth,line.width);
	}
	var linesCache = [];
	function allocLine()       { return alloc(linesCache,Object); }
	function freeLine(l)       { free(linesCache,l); }
	function freeAllLines(arr) { freeAll(linesCache,arr,true); }
	function addClip(obj,property,x,y,w,h) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipCache,Object);
		}
		obj[property].x = x;
		obj[property].y = y;
		obj[property].w = w;
		obj[property].h = h;
	}
	var clipCache = [];
	function allocClip()      { return alloc(clipCache,Object); }
	function freeAllClip(obj) { freeAll(clipCache,obj,false);}
	function addClipUV(obj,property,left,top,right,bottom) {
		if (obj[property] === undefined) {
			obj[property] = alloc(clipUVCache,cr.rect);
		}
		obj[property].left   = left;
		obj[property].top    = top;
		obj[property].right  = right;
		obj[property].bottom = bottom;
	}
	var clipUVCache = [];
	function allocClipUV()      { return alloc(clipUVCache,cr.rect);}
	function freeAllClipUV(obj) { freeAll(clipUVCache,obj,false);}
	instanceProto.SplitSheet = function() {
		var texture      = this.texture_img;
		var texWidth     = texture.width;
		var texHeight    = texture.height;
		var charWidth    = this.characterWidth;
		var charHeight   = this.characterHeight;
		var charU        = charWidth /texWidth;
		var charV        = charHeight/texHeight;
		var charSet      = this.characterSet ;
		var cols = Math.floor(texWidth/charWidth);
		var rows = Math.floor(texHeight/charHeight);
		for ( var c = 0; c < charSet.length; c++) {
			if  (c >= cols * rows) break;
			var x = c%cols;
			var y = Math.floor(c/cols);
			var letter = charSet.charAt(c);
			if (this.runtime.glwrap) {
				addClipUV(
					this.clipUV, letter,
					x * charU ,
					y * charV ,
					(x+1) * charU ,
					(y+1) * charV
				);
			} else {
				addClip(
					this.clipList, letter,
					x * charWidth,
					y * charHeight,
					charWidth,
					charHeight
				);
			}
		}
	};
	/*
     *	Word-Wrapping
     */
	var wordsCache = [];
	pluginProto.TokeniseWords = function (text)
	{
		wordsCache.length = 0;
		var cur_word = "";
		var ch;
		var i = 0;
		while (i < text.length)
		{
			ch = text.charAt(i);
			if (ch === "\n")
			{
				if (cur_word.length)
				{
					wordsCache.push(cur_word);
					cur_word = "";
				}
				wordsCache.push("\n");
				++i;
			}
			else if (ch === " " || ch === "\t" || ch === "-")
			{
				do {
					cur_word += text.charAt(i);
					i++;
				}
				while (i < text.length && (text.charAt(i) === " " || text.charAt(i) === "\t"));
				wordsCache.push(cur_word);
				cur_word = "";
			}
			else if (i < text.length)
			{
				cur_word += ch;
				i++;
			}
		}
		if (cur_word.length)
			wordsCache.push(cur_word);
	};
	pluginProto.WordWrap = function (inst)
	{
		var text = inst.text;
		var lines = inst.lines;
		if (!text || !text.length)
		{
			freeAllLines(lines);
			return;
		}
		var width = inst.width;
		if (width <= 2.0)
		{
			freeAllLines(lines);
			return;
		}
		var charWidth = inst.characterWidth;
		var charScale = inst.characterScale;
		var charSpacing = inst.characterSpacing;
		if ( (text.length * (charWidth * charScale + charSpacing) - charSpacing) <= width && text.indexOf("\n") === -1)
		{
			var all_width = inst.measureWidth(text);
			if (all_width <= width)
			{
				freeAllLines(lines);
				lines.push(allocLine());
				lines[0].text = text;
				lines[0].width = all_width;
				inst.textWidth  = all_width;
				inst.textHeight = inst.characterHeight * charScale + inst.lineHeight;
				return;
			}
		}
		var wrapbyword = inst.wrapbyword;
		this.WrapText(inst);
		inst.textHeight = lines.length * (inst.characterHeight * charScale + inst.lineHeight);
	};
	pluginProto.WrapText = function (inst)
	{
		var wrapbyword = inst.wrapbyword;
		var text       = inst.text;
		var lines      = inst.lines;
		var width      = inst.width;
		var wordArray;
		if (wrapbyword) {
			this.TokeniseWords(text);	// writes to wordsCache
			wordArray = wordsCache;
		} else {
			wordArray = text;
		}
		var cur_line = "";
		var prev_line;
		var line_width;
		var i;
		var lineIndex = 0;
		var line;
		var ignore_newline = false;
		for (i = 0; i < wordArray.length; i++)
		{
			if (wordArray[i] === "\n")
			{
				if (ignore_newline === true) {
					ignore_newline = false;
				} else {
					addLine(inst,lineIndex,cur_line);
					lineIndex++;
				}
				cur_line = "";
				continue;
			}
			ignore_newline = false;
			prev_line = cur_line;
			cur_line += wordArray[i];
			line_width = inst.measureWidth(trimRight(cur_line));
			if (line_width > width)
			{
				if (prev_line === "") {
					addLine(inst,lineIndex,cur_line);
					cur_line = "";
					ignore_newline = true;
				} else {
					addLine(inst,lineIndex,prev_line);
					cur_line = wordArray[i];
				}
				lineIndex++;
				if (!wrapbyword && cur_line === " ")
					cur_line = "";
			}
		}
		if (trimRight(cur_line).length)
		{
			addLine(inst,lineIndex,cur_line);
			lineIndex++;
		}
		for (i = lineIndex; i < lines.length; i++)
			freeLine(lines[i]);
		lines.length = lineIndex;
	};
	instanceProto.measureWidth = function(text) {
		var spacing = this.characterSpacing;
		var len     = text.length;
		var width   = 0;
		for (var i = 0; i < len; i++) {
			width += this.getCharacterWidth(text.charAt(i)) * this.characterScale + spacing;
		}
		width -= (width > 0) ? spacing : 0;
		return width;
	};
	/***/
	instanceProto.getCharacterWidth = function(character) {
		var widthList = this.characterWidthList;
		if (widthList[character] !== undefined) {
			return widthList[character];
		} else {
			return this.characterWidth;
		}
	};
	instanceProto.rebuildText = function() {
		if (this.text_changed || this.width !== this.lastwrapwidth) {
			this.textWidth = 0;
			this.textHeight = 0;
			this.type.plugin.WordWrap(this);
			this.text_changed = false;
			this.lastwrapwidth = this.width;
		}
	};
	var EPSILON = 0.00001;
	instanceProto.draw = function(ctx, glmode)
	{
		var texture = this.texture_img;
		if (this.text !== "" && texture != null) {
			this.rebuildText();
			if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
				return;
			}
			ctx.globalAlpha = this.opacity;
			var myx = this.x;
			var myy = this.y;
			if (this.runtime.pixel_rounding)
			{
				myx = (myx + 0.5) | 0;
				myy = (myy + 0.5) | 0;
			}
			ctx.save();
			ctx.translate(myx, myy);
			ctx.rotate(this.angle);
			var ha         = this.halign;
			var va         = this.valign;
			var scale      = this.characterScale;
			var charHeight = this.characterHeight * scale;
			var lineHeight = this.lineHeight;
			var charSpace  = this.characterSpacing;
			var lines = this.lines;
			var textHeight = this.textHeight;
			var halign;
			var valign = va * cr.max(0,(this.height - textHeight));
			var offx = -(this.hotspotX * this.width);
			var offy = -(this.hotspotY * this.height);
			offy += valign;
			var drawX ;
			var drawY = offy;
			for(var i = 0; i < lines.length; i++) {
				var line = lines[i].text;
				var len  = lines[i].width;
				halign = ha * cr.max(0,this.width - len);
				drawX = offx + halign;
				drawY += lineHeight;
				for(var j = 0; j < line.length; j++) {
					var letter = line.charAt(j);
					var clip = this.clipList[letter];
					if ( drawX + this.getCharacterWidth(letter) * scale > this.width + EPSILON ) {
						break;
					}
					if (clip !== undefined) {
						ctx.drawImage( this.texture_img,
									 clip.x, clip.y, clip.w, clip.h,
									 Math.round(drawX),Math.round(drawY),clip.w*scale,clip.h*scale);
					}
					drawX  += this.getCharacterWidth(letter) * scale + charSpace;
				}
				drawY += charHeight;
				if ( drawY + charHeight + lineHeight > this.height) {
					break;
				}
			}
			ctx.restore();
		}
	};
	var dQuad = new cr.quad();
	function rotateQuad(quad,cosa,sina) {
		var x_temp;
		x_temp   = (quad.tlx * cosa) - (quad.tly * sina);
		quad.tly = (quad.tly * cosa) + (quad.tlx * sina);
		quad.tlx = x_temp;
		x_temp    = (quad.trx * cosa) - (quad.try_ * sina);
		quad.try_ = (quad.try_ * cosa) + (quad.trx * sina);
		quad.trx  = x_temp;
		x_temp   = (quad.blx * cosa) - (quad.bly * sina);
		quad.bly = (quad.bly * cosa) + (quad.blx * sina);
		quad.blx = x_temp;
		x_temp    = (quad.brx * cosa) - (quad.bry * sina);
		quad.bry = (quad.bry * cosa) + (quad.brx * sina);
		quad.brx  = x_temp;
	}
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		if (this.text !== "") {
			this.rebuildText();
			if (this.height < this.characterHeight*this.characterScale + this.lineHeight) {
				return;
			}
			this.update_bbox();
			var q = this.bquad;
			var ox = 0;
			var oy = 0;
			if (this.runtime.pixel_rounding)
			{
				ox = ((this.x + 0.5) | 0) - this.x;
				oy = ((this.y + 0.5) | 0) - this.y;
			}
			var angle      = this.angle;
			var ha         = this.halign;
			var va         = this.valign;
			var scale      = this.characterScale;
			var charHeight = this.characterHeight * scale;   // to precalculate in onCreate or on change
			var lineHeight = this.lineHeight;
			var charSpace  = this.characterSpacing;
			var lines = this.lines;
			var textHeight = this.textHeight;
			var cosa,sina;
			if (angle !== 0)
			{
				cosa = Math.cos(angle);
				sina = Math.sin(angle);
			}
			var halign;
			var valign = va * cr.max(0,(this.height - textHeight));
			var offx = q.tlx + ox;
			var offy = q.tly + oy;
			var drawX ;
			var drawY = valign;
			for(var i = 0; i < lines.length; i++) {
				var line       = lines[i].text;
				var lineWidth  = lines[i].width;
				halign = ha * cr.max(0,this.width - lineWidth);
				drawX = halign;
				drawY += lineHeight;
				for(var j = 0; j < line.length; j++) {
					var letter = line.charAt(j);
					var clipUV = this.clipUV[letter];
					if ( drawX + this.getCharacterWidth(letter) * scale  > this.width + EPSILON) {
						break;
					}
					if (clipUV !== undefined) {
						var clipWidth  = this.characterWidth*scale;
						var clipHeight = this.characterHeight*scale;
						dQuad.tlx  = drawX;
						dQuad.tly  = drawY;
						dQuad.trx  = drawX + clipWidth;
						dQuad.try_ = drawY ;
						dQuad.blx  = drawX;
						dQuad.bly  = drawY + clipHeight;
						dQuad.brx  = drawX + clipWidth;
						dQuad.bry  = drawY + clipHeight;
						if(angle !== 0)
						{
							rotateQuad(dQuad,cosa,sina);
						}
						dQuad.offset(offx,offy);
						glw.quadTex(
							dQuad.tlx, dQuad.tly,
							dQuad.trx, dQuad.try_,
							dQuad.brx, dQuad.bry,
							dQuad.blx, dQuad.bly,
							clipUV
						);
					}
					drawX  += this.getCharacterWidth(letter) * scale + charSpace;
				}
				drawY += charHeight;
				if ( drawY + charHeight + lineHeight > this.height) {
					break;
				}
			}
		}
	};
	function Cnds() {}
	Cnds.prototype.CompareText = function(text_to_compare, case_sensitive)
	{
		if (case_sensitive)
			return this.text == text_to_compare;
		else
			return cr.equals_nocase(this.text, text_to_compare);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {}
	Acts.prototype.SetText = function(param)
	{
		if (cr.is_number(param) && param < 1e9)
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_set = param.toString();
		if (this.text !== text_to_set)
		{
			this.text = text_to_set;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.AppendText = function(param)
	{
		if (cr.is_number(param))
			param = Math.round(param * 1e10) / 1e10;	// round to nearest ten billionth - hides floating point errors
		var text_to_append = param.toString();
		if (text_to_append)	// not empty
		{
			this.text += text_to_append;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetScale = function(param)
	{
		if (param !== this.characterScale) {
			this.characterScale = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterSpacing = function(param)
	{
		if (param !== this.CharacterSpacing) {
			this.characterSpacing = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetLineHeight = function(param)
	{
		if (param !== this.lineHeight) {
			this.lineHeight = param;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	instanceProto.SetCharWidth = function(character,width) {
		var w = parseInt(width,10);
		if (this.characterWidthList[character] !== w) {
			this.characterWidthList[character] = w;
			this.text_changed = true;
			this.runtime.redraw = true;
		}
	};
	Acts.prototype.SetCharacterWidth = function(characterSet,width)
	{
		if (characterSet !== "") {
			for(var c = 0; c < characterSet.length; c++) {
				this.SetCharWidth(characterSet.charAt(c),width);
			}
		}
	};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	pluginProto.acts = new Acts();
	function Exps() {}
	Exps.prototype.CharacterWidth = function(ret,character)
	{
		ret.set_int(this.getCharacterWidth(character));
	};
	Exps.prototype.CharacterHeight = function(ret)
	{
		ret.set_int(this.characterHeight);
	};
	Exps.prototype.CharacterScale = function(ret)
	{
		ret.set_float(this.characterScale);
	};
	Exps.prototype.CharacterSpacing = function(ret)
	{
		ret.set_int(this.characterSpacing);
	};
	Exps.prototype.LineHeight = function(ret)
	{
		ret.set_int(this.lineHeight);
	};
	Exps.prototype.Text = function(ret)
	{
		ret.set_string(this.text);
	};
	Exps.prototype.TextWidth = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textWidth);
	};
	Exps.prototype.TextHeight = function (ret)
	{
		this.rebuildText();
		ret.set_float(this.textHeight);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.TiledBg = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.TiledBg.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
		if (this.is_family)
			return;
		this.texture_img = new Image();
		this.texture_img["idtkLoadDisposed"] = true;
		this.texture_img.src = this.texture_file;
		this.texture_img.cr_filesize = this.texture_filesize;
		this.runtime.waitForImageLoad(this.texture_img);
		this.pattern = null;
		this.webGL_texture = null;
	};
	typeProto.onLostWebGLContext = function ()
	{
		if (this.is_family)
			return;
		this.webGL_texture = null;
	};
	typeProto.onRestoreWebGLContext = function ()
	{
		if (this.is_family || !this.instances.length)
			return;
		if (!this.webGL_texture)
		{
			this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
		}
		var i, len;
		for (i = 0, len = this.instances.length; i < len; i++)
			this.instances[i].webGL_texture = this.webGL_texture;
	};
	typeProto.loadTextures = function ()
	{
		if (this.is_family || this.webGL_texture || !this.runtime.glwrap)
			return;
		this.webGL_texture = this.runtime.glwrap.loadTexture(this.texture_img, true, this.runtime.linearSampling, this.texture_pixelformat);
	};
	typeProto.unloadTextures = function ()
	{
		if (this.is_family || this.instances.length || !this.webGL_texture)
			return;
		this.runtime.glwrap.deleteTexture(this.webGL_texture);
		this.webGL_texture = null;
	};
	typeProto.preloadCanvas2D = function (ctx)
	{
		ctx.drawImage(this.texture_img, 0, 0);
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	instanceProto.onCreate = function()
	{
		this.visible = (this.properties[0] === 0);							// 0=visible, 1=invisible
		this.rcTex = new cr.rect(0, 0, 0, 0);
		this.has_own_texture = false;										// true if a texture loaded in from URL
		this.texture_img = this.type.texture_img;
		if (this.runtime.glwrap)
		{
			this.type.loadTextures();
			this.webGL_texture = this.type.webGL_texture;
		}
		else
		{
			if (!this.type.pattern)
				this.type.pattern = this.runtime.ctx.createPattern(this.type.texture_img, "repeat");
			this.pattern = this.type.pattern;
		}
	};
	instanceProto.afterLoad = function ()
	{
		this.has_own_texture = false;
		this.texture_img = this.type.texture_img;
	};
	instanceProto.onDestroy = function ()
	{
		if (this.runtime.glwrap && this.has_own_texture && this.webGL_texture)
		{
			this.runtime.glwrap.deleteTexture(this.webGL_texture);
			this.webGL_texture = null;
		}
	};
	instanceProto.draw = function(ctx)
	{
		ctx.globalAlpha = this.opacity;
		ctx.save();
		ctx.fillStyle = this.pattern;
		var myx = this.x;
		var myy = this.y;
		if (this.runtime.pixel_rounding)
		{
			myx = (myx + 0.5) | 0;
			myy = (myy + 0.5) | 0;
		}
		var drawX = -(this.hotspotX * this.width);
		var drawY = -(this.hotspotY * this.height);
		var offX = drawX % this.texture_img.width;
		var offY = drawY % this.texture_img.height;
		if (offX < 0)
			offX += this.texture_img.width;
		if (offY < 0)
			offY += this.texture_img.height;
		ctx.translate(myx, myy);
		ctx.rotate(this.angle);
		ctx.translate(offX, offY);
		ctx.fillRect(drawX - offX,
					 drawY - offY,
					 this.width,
					 this.height);
		ctx.restore();
	};
	instanceProto.drawGL = function(glw)
	{
		glw.setTexture(this.webGL_texture);
		glw.setOpacity(this.opacity);
		var rcTex = this.rcTex;
		rcTex.right = this.width / this.texture_img.width;
		rcTex.bottom = this.height / this.texture_img.height;
		var q = this.bquad;
		if (this.runtime.pixel_rounding)
		{
			var ox = ((this.x + 0.5) | 0) - this.x;
			var oy = ((this.y + 0.5) | 0) - this.y;
			glw.quadTex(q.tlx + ox, q.tly + oy, q.trx + ox, q.try_ + oy, q.brx + ox, q.bry + oy, q.blx + ox, q.bly + oy, rcTex);
		}
		else
			glw.quadTex(q.tlx, q.tly, q.trx, q.try_, q.brx, q.bry, q.blx, q.bly, rcTex);
	};
	function Cnds() {};
	Cnds.prototype.OnURLLoaded = function ()
	{
		return true;
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEffect = function (effect)
	{
		this.compositeOp = cr.effectToCompositeOp(effect);
		cr.setGLBlend(this, effect, this.runtime.gl);
		this.runtime.redraw = true;
	};
	Acts.prototype.LoadURL = function (url_)
	{
		var img = new Image();
		var self = this;
		img.onload = function ()
		{
			self.texture_img = img;
			if (self.runtime.glwrap)
			{
				if (self.has_own_texture && self.webGL_texture)
					self.runtime.glwrap.deleteTexture(self.webGL_texture);
				self.webGL_texture = self.runtime.glwrap.loadTexture(img, true, self.runtime.linearSampling);
			}
			else
			{
				self.pattern = self.runtime.ctx.createPattern(img, "repeat");
			}
			self.has_own_texture = true;
			self.runtime.redraw = true;
			self.runtime.trigger(cr.plugins_.TiledBg.prototype.cnds.OnURLLoaded, self);
		};
		if (url_.substr(0, 5) !== "data:")
			img.crossOrigin = 'anonymous';
		img.src = url_;
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.ImageWidth = function (ret)
	{
		ret.set_float(this.texture_img.width);
	};
	Exps.prototype.ImageHeight = function (ret)
	{
		ret.set_float(this.texture_img.height);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.Touch = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var pluginProto = cr.plugins_.Touch.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
		this.touches = [];
		this.mouseDown = false;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var dummyoffset = {left: 0, top: 0};
	instanceProto.findTouch = function (id)
	{
		var i, len;
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			if (this.touches[i]["id"] === id)
				return i;
		}
		return -1;
	};
	var appmobi_accx = 0;
	var appmobi_accy = 0;
	var appmobi_accz = 0;
	function AppMobiGetAcceleration(evt)
	{
		appmobi_accx = evt.x;
		appmobi_accy = evt.y;
		appmobi_accz = evt.z;
	};
	var pg_accx = 0;
	var pg_accy = 0;
	var pg_accz = 0;
	function PhoneGapGetAcceleration(evt)
	{
		pg_accx = evt.x;
		pg_accy = evt.y;
		pg_accz = evt.z;
	};
	var theInstance = null;
	instanceProto.onCreate = function()
	{
		theInstance = this;
		this.isWindows8 = !!(typeof window["c2isWindows8"] !== "undefined" && window["c2isWindows8"]);
		this.orient_alpha = 0;
		this.orient_beta = 0;
		this.orient_gamma = 0;
		this.acc_g_x = 0;
		this.acc_g_y = 0;
		this.acc_g_z = 0;
		this.acc_x = 0;
		this.acc_y = 0;
		this.acc_z = 0;
		this.curTouchX = 0;
		this.curTouchY = 0;
		this.trigger_index = 0;
		this.trigger_id = 0;
		this.useMouseInput = (this.properties[0] !== 0);
		var elem = (this.runtime.fullscreen_mode > 0) ? document : this.runtime.canvas;
		var elem2 = document;
		if (this.runtime.isDirectCanvas)
			elem2 = elem = window["Canvas"];
		else if (this.runtime.isCocoonJs)
			elem2 = elem = window;
		var self = this;
		if (window.navigator["pointerEnabled"])
		{
			elem.addEventListener("pointerdown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("pointermove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("pointerup",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("pointercancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				this.runtime.canvas.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("gesturehold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else if (window.navigator["msPointerEnabled"])
		{
			elem.addEventListener("MSPointerDown",
				function(info) {
					self.onPointerStart(info);
				},
				false
			);
			elem.addEventListener("MSPointerMove",
				function(info) {
					self.onPointerMove(info);
				},
				false
			);
			elem2.addEventListener("MSPointerUp",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			elem2.addEventListener("MSPointerCancel",
				function(info) {
					self.onPointerEnd(info);
				},
				false
			);
			if (this.runtime.canvas)
			{
				this.runtime.canvas.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
				document.addEventListener("MSGestureHold", function(e) {
					e.preventDefault();
				}, false);
			}
		}
		else
		{
			elem.addEventListener("touchstart",
				function(info) {
					self.onTouchStart(info);
				},
				false
			);
			elem.addEventListener("touchmove",
				function(info) {
					self.onTouchMove(info);
				},
				false
			);
			elem2.addEventListener("touchend",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
			elem2.addEventListener("touchcancel",
				function(info) {
					self.onTouchEnd(info);
				},
				false
			);
		}
		if (this.isWindows8)
		{
			var win8accelerometerFn = function(e) {
					var reading = e["reading"];
					self.acc_x = reading["accelerationX"];
					self.acc_y = reading["accelerationY"];
					self.acc_z = reading["accelerationZ"];
				};
			var win8inclinometerFn = function(e) {
					var reading = e["reading"];
					self.orient_alpha = reading["yawDegrees"];
					self.orient_beta = reading["pitchDegrees"];
					self.orient_gamma = reading["rollDegrees"];
				};
			var accelerometer = Windows["Devices"]["Sensors"]["Accelerometer"]["getDefault"]();
            if (accelerometer)
			{
                accelerometer["reportInterval"] = Math.max(accelerometer["minimumReportInterval"], 16);
				accelerometer.addEventListener("readingchanged", win8accelerometerFn);
            }
			var inclinometer = Windows["Devices"]["Sensors"]["Inclinometer"]["getDefault"]();
			if (inclinometer)
			{
				inclinometer["reportInterval"] = Math.max(inclinometer["minimumReportInterval"], 16);
				inclinometer.addEventListener("readingchanged", win8inclinometerFn);
			}
			document.addEventListener("visibilitychange", function(e) {
				if (document["hidden"] || document["msHidden"])
				{
					if (accelerometer)
						accelerometer.removeEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.removeEventListener("readingchanged", win8inclinometerFn);
				}
				else
				{
					if (accelerometer)
						accelerometer.addEventListener("readingchanged", win8accelerometerFn);
					if (inclinometer)
						inclinometer.addEventListener("readingchanged", win8inclinometerFn);
				}
			}, false);
		}
		else
		{
			window.addEventListener("deviceorientation", function (eventData) {
				self.orient_alpha = eventData["alpha"] || 0;
				self.orient_beta = eventData["beta"] || 0;
				self.orient_gamma = eventData["gamma"] || 0;
			}, false);
			window.addEventListener("devicemotion", function (eventData) {
				if (eventData["accelerationIncludingGravity"])
				{
					self.acc_g_x = eventData["accelerationIncludingGravity"]["x"] || 0;
					self.acc_g_y = eventData["accelerationIncludingGravity"]["y"] || 0;
					self.acc_g_z = eventData["accelerationIncludingGravity"]["z"] || 0;
				}
				if (eventData["acceleration"])
				{
					self.acc_x = eventData["acceleration"]["x"] || 0;
					self.acc_y = eventData["acceleration"]["y"] || 0;
					self.acc_z = eventData["acceleration"]["z"] || 0;
				}
			}, false);
		}
		if (this.useMouseInput && !this.runtime.isDomFree)
		{
			jQuery(document).mousemove(
				function(info) {
					self.onMouseMove(info);
				}
			);
			jQuery(document).mousedown(
				function(info) {
					self.onMouseDown(info);
				}
			);
			jQuery(document).mouseup(
				function(info) {
					self.onMouseUp(info);
				}
			);
		}
		if (this.runtime.isAppMobi && !this.runtime.isDirectCanvas)
		{
			AppMobi["accelerometer"]["watchAcceleration"](AppMobiGetAcceleration, { "frequency": 40, "adjustForRotation": true });
		}
		if (this.runtime.isPhoneGap && navigator["accelerometer"] && navigator["accelerometer"]["watchAcceleration"])
		{
			navigator["accelerometer"]["watchAcceleration"](PhoneGapGetAcceleration, null, { "frequency": 40 });
		}
		this.runtime.tick2Me(this);
	};
	instanceProto.onPointerMove = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		var nowtime = cr.performance_now();
		if (i >= 0)
		{
			var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
			var t = this.touches[i];
			if (nowtime - t.time < 2)
				return;
			t.lasttime = t.time;
			t.lastx = t.x;
			t.lasty = t.y;
			t.time = nowtime;
			t.x = info.pageX - offset.left;
			t.y = info.pageY - offset.top;
		}
	};
	instanceProto.onPointerStart = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var touchx = info.pageX - offset.left;
		var touchy = info.pageY - offset.top;
		var nowtime = cr.performance_now();
		this.trigger_index = this.touches.length;
		this.trigger_id = info["pointerId"];
		this.touches.push({ time: nowtime,
							x: touchx,
							y: touchy,
							lasttime: nowtime,
							lastx: touchx,
							lasty: touchy,
							"id": info["pointerId"],
							startindex: this.trigger_index
						});
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
		this.curTouchX = touchx;
		this.curTouchY = touchy;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onPointerEnd = function (info)
	{
		if (info["pointerType"] === info["MSPOINTER_TYPE_MOUSE"] || info["pointerType"] === "mouse")
			return;
		if (info.preventDefault)
			info.preventDefault();
		var i = this.findTouch(info["pointerId"]);
		this.trigger_index = (i >= 0 ? this.touches[i].startindex : -1);
		this.trigger_id = (i >= 0 ? this.touches[i]["id"] : -1);
		this.runtime.isInUserInputEvent = true;
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
		this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
		this.runtime.isInUserInputEvent = false;
		if (i >= 0)
		{
			this.touches.splice(i, 1);
		}
	};
	instanceProto.onTouchMove = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var nowtime = cr.performance_now();
		var i, len, t, u;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			var j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
				u = this.touches[j];
				if (nowtime - u.time < 2)
					continue;
				u.lasttime = u.time;
				u.lastx = u.x;
				u.lasty = u.y;
				u.time = nowtime;
				u.x = t.pageX - offset.left;
				u.y = t.pageY - offset.top;
			}
		}
	};
	instanceProto.onTouchStart = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		var offset = this.runtime.isDomFree ? dummyoffset : jQuery(this.runtime.canvas).offset();
		var nowtime = cr.performance_now();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j !== -1)
				continue;
			var touchx = t.pageX - offset.left;
			var touchy = t.pageY - offset.top;
			this.trigger_index = this.touches.length;
			this.trigger_id = t["identifier"];
			this.touches.push({ time: nowtime,
								x: touchx,
								y: touchy,
								lasttime: nowtime,
								lastx: touchx,
								lasty: touchy,
								"id": t["identifier"],
								startindex: this.trigger_index
							});
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchStart, this);
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchStart, this);
			this.curTouchX = touchx;
			this.curTouchY = touchy;
			this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchObject, this);
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.onTouchEnd = function (info)
	{
		if (info.preventDefault)
			info.preventDefault();
		this.runtime.isInUserInputEvent = true;
		var i, len, t, j;
		for (i = 0, len = info.changedTouches.length; i < len; i++)
		{
			t = info.changedTouches[i];
			j = this.findTouch(t["identifier"]);
			if (j >= 0)
			{
				this.trigger_index = this.touches[j].startindex;
				this.trigger_id = this.touches[j]["id"];
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnNthTouchEnd, this);
				this.runtime.trigger(cr.plugins_.Touch.prototype.cnds.OnTouchEnd, this);
				this.touches.splice(j, 1);
			}
		}
		this.runtime.isInUserInputEvent = false;
	};
	instanceProto.getAlpha = function ()
	{
		if (this.runtime.isAppMobi && this.orient_alpha === 0 && appmobi_accz !== 0)
			return appmobi_accz * 90;
		else if (this.runtime.isPhoneGap  && this.orient_alpha === 0 && pg_accz !== 0)
			return pg_accz * 90;
		else
			return this.orient_alpha;
	};
	instanceProto.getBeta = function ()
	{
		if (this.runtime.isAppMobi && this.orient_beta === 0 && appmobi_accy !== 0)
			return appmobi_accy * -90;
		else if (this.runtime.isPhoneGap  && this.orient_beta === 0 && pg_accy !== 0)
			return pg_accy * -90;
		else
			return this.orient_beta;
	};
	instanceProto.getGamma = function ()
	{
		if (this.runtime.isAppMobi && this.orient_gamma === 0 && appmobi_accx !== 0)
			return appmobi_accx * 90;
		else if (this.runtime.isPhoneGap  && this.orient_gamma === 0 && pg_accx !== 0)
			return pg_accx * 90;
		else
			return this.orient_gamma;
	};
	var noop_func = function(){};
	instanceProto.onMouseDown = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchStart(fakeinfo);
		this.mouseDown = true;
	};
	instanceProto.onMouseMove = function(info)
	{
		if (!this.mouseDown)
			return;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchMove(fakeinfo);
	};
	instanceProto.onMouseUp = function(info)
	{
		if (info.preventDefault && this.runtime.had_a_click && !this.runtime.isMobile)
			info.preventDefault();
		this.runtime.had_a_click = true;
		var t = { pageX: info.pageX, pageY: info.pageY, "identifier": 0 };
		var fakeinfo = { changedTouches: [t] };
		this.onTouchEnd(fakeinfo);
		this.mouseDown = false;
	};
	instanceProto.tick2 = function()
	{
		var i, len, t;
		var nowtime = cr.performance_now();
		for (i = 0, len = this.touches.length; i < len; i++)
		{
			t = this.touches[i];
			if (t.time <= nowtime - 50)
				t.lasttime = nowtime;
		}
	};
	function Cnds() {};
	Cnds.prototype.OnTouchStart = function ()
	{
		return true;
	};
	Cnds.prototype.OnTouchEnd = function ()
	{
		return true;
	};
	Cnds.prototype.IsInTouch = function ()
	{
		return this.touches.length;
	};
	Cnds.prototype.OnTouchObject = function (type)
	{
		if (!type)
			return false;
		return this.runtime.testAndSelectCanvasPointOverlap(type, this.curTouchX, this.curTouchY, false);
	};
	Cnds.prototype.IsTouchingObject = function (type)
	{
		if (!type)
			return false;
		var sol = type.getCurrentSol();
		var instances = sol.getObjects();
		var px, py;
		var touching = [];
		var i, leni, j, lenj;
		for (i = 0, leni = instances.length; i < leni; i++)
		{
			var inst = instances[i];
			inst.update_bbox();
			for (j = 0, lenj = this.touches.length; j < lenj; j++)
			{
				var touch = this.touches[j];
				px = inst.layer.canvasToLayer(touch.x, touch.y, true);
				py = inst.layer.canvasToLayer(touch.x, touch.y, false);
				if (inst.contains_pt(px, py))
				{
					touching.push(inst);
					break;
				}
			}
		}
		if (touching.length)
		{
			sol.select_all = false;
			sol.instances = touching;
			type.applySolToContainer();
			return true;
		}
		else
			return false;
	};
	Cnds.prototype.CompareTouchSpeed = function (index, cmp, s)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
			return false;
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		var speed = 0;
		if (timediff > 0)
			speed = dist / timediff;
		return cr.do_cmp(speed, cmp, s);
	};
	Cnds.prototype.OrientationSupported = function ()
	{
		return typeof window["DeviceOrientationEvent"] !== "undefined";
	};
	Cnds.prototype.MotionSupported = function ()
	{
		return typeof window["DeviceMotionEvent"] !== "undefined";
	};
	Cnds.prototype.CompareOrientation = function (orientation_, cmp_, angle_)
	{
		var v = 0;
		if (orientation_ === 0)
			v = this.getAlpha();
		else if (orientation_ === 1)
			v = this.getBeta();
		else
			v = this.getGamma();
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.CompareAcceleration = function (acceleration_, cmp_, angle_)
	{
		var v = 0;
		if (acceleration_ === 0)
			v = this.acc_g_x;
		else if (acceleration_ === 1)
			v = this.acc_g_y;
		else if (acceleration_ === 2)
			v = this.acc_g_z;
		else if (acceleration_ === 3)
			v = this.acc_x;
		else if (acceleration_ === 4)
			v = this.acc_y;
		else if (acceleration_ === 5)
			v = this.acc_z;
		return cr.do_cmp(v, cmp_, angle_);
	};
	Cnds.prototype.OnNthTouchStart = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.OnNthTouchEnd = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return touch_ === this.trigger_index;
	};
	Cnds.prototype.HasNthTouch = function (touch_)
	{
		touch_ = Math.floor(touch_);
		return this.touches.length >= touch_ + 1;
	};
	pluginProto.cnds = new Cnds();
	function Exps() {};
	Exps.prototype.TouchCount = function (ret)
	{
		ret.set_int(this.touches.length);
	};
	Exps.prototype.X = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxX = layer.parallaxX;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxX = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxX = oldParallaxX;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, true));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.XAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.XForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxX, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxX = layer.parallaxX;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxX = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxX = oldParallaxX;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, true));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.Y = function (ret, layerparam)
	{
		if (this.touches.length)
		{
			var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
			if (cr.is_undefined(layerparam))
			{
				layer = this.runtime.getLayerByNumber(0);
				oldScale = layer.scale;
				oldZoomRate = layer.zoomRate;
				oldParallaxY = layer.parallaxY;
				oldAngle = layer.angle;
				layer.scale = this.runtime.running_layout.scale;
				layer.zoomRate = 1.0;
				layer.parallaxY = 1.0;
				layer.angle = this.runtime.running_layout.angle;
				ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				layer.scale = oldScale;
				layer.zoomRate = oldZoomRate;
				layer.parallaxY = oldParallaxY;
				layer.angle = oldAngle;
			}
			else
			{
				if (cr.is_number(layerparam))
					layer = this.runtime.getLayerByNumber(layerparam);
				else
					layer = this.runtime.getLayerByName(layerparam);
				if (layer)
					ret.set_float(layer.canvasToLayer(this.touches[0].x, this.touches[0].y, false));
				else
					ret.set_float(0);
			}
		}
		else
			ret.set_float(0);
	};
	Exps.prototype.YAt = function (ret, index, layerparam)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(this.touches[index].x, this.touches[index].y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.YForID = function (ret, id, layerparam)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var layer, oldScale, oldZoomRate, oldParallaxY, oldAngle;
		if (cr.is_undefined(layerparam))
		{
			layer = this.runtime.getLayerByNumber(0);
			oldScale = layer.scale;
			oldZoomRate = layer.zoomRate;
			oldParallaxY = layer.parallaxY;
			oldAngle = layer.angle;
			layer.scale = this.runtime.running_layout.scale;
			layer.zoomRate = 1.0;
			layer.parallaxY = 1.0;
			layer.angle = this.runtime.running_layout.angle;
			ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			layer.scale = oldScale;
			layer.zoomRate = oldZoomRate;
			layer.parallaxY = oldParallaxY;
			layer.angle = oldAngle;
		}
		else
		{
			if (cr.is_number(layerparam))
				layer = this.runtime.getLayerByNumber(layerparam);
			else
				layer = this.runtime.getLayerByName(layerparam);
			if (layer)
				ret.set_float(layer.canvasToLayer(touch.x, touch.y, false));
			else
				ret.set_float(0);
		}
	};
	Exps.prototype.AbsoluteX = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].x);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteXAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].x);
	};
	Exps.prototype.AbsoluteXForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.x);
	};
	Exps.prototype.AbsoluteY = function (ret)
	{
		if (this.touches.length)
			ret.set_float(this.touches[0].y);
		else
			ret.set_float(0);
	};
	Exps.prototype.AbsoluteYAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		ret.set_float(this.touches[index].y);
	};
	Exps.prototype.AbsoluteYForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(touch.y);
	};
	Exps.prototype.SpeedAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		var dist = cr.distanceTo(t.x, t.y, t.lastx, t.lasty);
		var timediff = (t.time - t.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.SpeedForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		var dist = cr.distanceTo(touch.x, touch.y, touch.lastx, touch.lasty);
		var timediff = (touch.time - touch.lasttime) / 1000;
		if (timediff === 0)
			ret.set_float(0);
		else
			ret.set_float(dist / timediff);
	};
	Exps.prototype.AngleAt = function (ret, index)
	{
		index = Math.floor(index);
		if (index < 0 || index >= this.touches.length)
		{
			ret.set_float(0);
			return;
		}
		var t = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(t.lastx, t.lasty, t.x, t.y)));
	};
	Exps.prototype.AngleForID = function (ret, id)
	{
		var index = this.findTouch(id);
		if (index < 0)
		{
			ret.set_float(0);
			return;
		}
		var touch = this.touches[index];
		ret.set_float(cr.to_degrees(cr.angleTo(touch.lastx, touch.lasty, touch.x, touch.y)));
	};
	Exps.prototype.Alpha = function (ret)
	{
		ret.set_float(this.getAlpha());
	};
	Exps.prototype.Beta = function (ret)
	{
		ret.set_float(this.getBeta());
	};
	Exps.prototype.Gamma = function (ret)
	{
		ret.set_float(this.getGamma());
	};
	Exps.prototype.AccelerationXWithG = function (ret)
	{
		ret.set_float(this.acc_g_x);
	};
	Exps.prototype.AccelerationYWithG = function (ret)
	{
		ret.set_float(this.acc_g_y);
	};
	Exps.prototype.AccelerationZWithG = function (ret)
	{
		ret.set_float(this.acc_g_z);
	};
	Exps.prototype.AccelerationX = function (ret)
	{
		ret.set_float(this.acc_x);
	};
	Exps.prototype.AccelerationY = function (ret)
	{
		ret.set_float(this.acc_y);
	};
	Exps.prototype.AccelerationZ = function (ret)
	{
		ret.set_float(this.acc_z);
	};
	Exps.prototype.TouchIndex = function (ret)
	{
		ret.set_int(this.trigger_index);
	};
	Exps.prototype.TouchID = function (ret)
	{
		ret.set_float(this.trigger_id);
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.WebStorage = function(runtime)
{
	this.runtime = runtime;
};
(function()
{
	var pluginProto = cr.plugins_.WebStorage.prototype;
	pluginProto.Type = function(plugin)
	{
		this.plugin = plugin;
		this.runtime = plugin.runtime;
	};
	var typeProto = pluginProto.Type.prototype;
	typeProto.onCreate = function()
	{
	};
	pluginProto.Instance = function(type)
	{
		this.type = type;
		this.runtime = type.runtime;
	};
	var instanceProto = pluginProto.Instance.prototype;
	var prefix = "";
	var is_arcade = (typeof window["is_scirra_arcade"] !== "undefined");
	if (is_arcade)
		prefix = "arcade" + window["scirra_arcade_id"];
	var logged_sessionnotsupported = false;
	function LogSessionNotSupported()
	{
		if (logged_sessionnotsupported)
			return;
		cr.logexport("[Construct 2] Webstorage plugin: session storage is not supported on this platform. Try using local storage or global variables instead.");
		logged_sessionnotsupported = true;
	};
	instanceProto.onCreate = function()
	{
	};
	function Cnds() {};
	Cnds.prototype.LocalStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.SessionStorageEnabled = function()
	{
		return true;
	};
	Cnds.prototype.LocalStorageExists = function(key)
	{
		return localStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.SessionStorageExists = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return false;
		}
		return sessionStorage.getItem(prefix + key) != null;
	};
	Cnds.prototype.OnQuotaExceeded = function ()
	{
		return true;
	};
	Cnds.prototype.CompareKeyText = function (key, text_to_compare, case_sensitive)
	{
		var value = localStorage.getItem(prefix + key) || "";
		if (case_sensitive)
			return value == text_to_compare;
		else
			return cr.equals_nocase(value, text_to_compare);
	};
	Cnds.prototype.CompareKeyNumber = function (key, cmp, x)
	{
		var value = localStorage.getItem(prefix + key) || "";
		return cr.do_cmp(parseFloat(value), cmp, x);
	};
	pluginProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.StoreLocal = function(key, data)
	{
		try {
			localStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.StoreSession = function(key,data)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		try {
			sessionStorage.setItem(prefix + key, data);
		}
		catch (e)
		{
			this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
		}
	};
	Acts.prototype.RemoveLocal = function(key)
	{
		localStorage.removeItem(prefix + key);
	};
	Acts.prototype.RemoveSession = function(key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		sessionStorage.removeItem(prefix + key);
	};
	Acts.prototype.ClearLocal = function()
	{
		if (!is_arcade)
			localStorage.clear();
	};
	Acts.prototype.ClearSession = function()
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			return;
		}
		if (!is_arcade)
			sessionStorage.clear();
	};
	Acts.prototype.JSONLoad = function (json_, mode_)
	{
		var d;
		try {
			d = JSON.parse(json_);
		}
		catch(e) { return; }
		if (!d["c2dictionary"])			// presumably not a c2dictionary object
			return;
		var o = d["data"];
		if (mode_ === 0 && !is_arcade)	// 'set' mode: must clear webstorage first
			localStorage.clear();
		var p;
		for (p in o)
		{
			if (o.hasOwnProperty(p))
			{
				try {
					localStorage.setItem(prefix + p, o[p]);
				}
				catch (e)
				{
					this.runtime.trigger(cr.plugins_.WebStorage.prototype.cnds.OnQuotaExceeded, this);
					return;
				}
			}
		}
	};
	pluginProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.LocalValue = function(ret,key)
	{
		ret.set_string(localStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.SessionValue = function(ret,key)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		ret.set_string(sessionStorage.getItem(prefix + key) || "");
	};
	Exps.prototype.LocalCount = function(ret)
	{
		ret.set_int(is_arcade ? 0 : localStorage.length);
	};
	Exps.prototype.SessionCount = function(ret)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_int(0);
			return;
		}
		ret.set_int(is_arcade ? 0 : sessionStorage.length);
	};
	Exps.prototype.LocalAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.getItem(localStorage.key(n)) || "");
	};
	Exps.prototype.SessionAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.getItem(sessionStorage.key(n)) || "");
	};
	Exps.prototype.LocalKeyAt = function(ret,n)
	{
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(localStorage.key(n) || "");
	};
	Exps.prototype.SessionKeyAt = function(ret,n)
	{
		if (this.runtime.isCocoonJs || !sessionStorage)
		{
			LogSessionNotSupported();
			ret.set_string("");
			return;
		}
		if (is_arcade)
			ret.set_string("");
		else
			ret.set_string(sessionStorage.key(n) || "");
	};
	Exps.prototype.AsJSON = function (ret)
	{
		var o = {}, i, len, k;
		for (i = 0, len = localStorage.length; i < len; i++)
		{
			k = localStorage.key(i);
			if (is_arcade)
			{
				if (k.substr(0, prefix.length) === prefix)
				{
					o[k.substr(prefix.length)] = localStorage.getItem(k);
				}
			}
			else
				o[k] = localStorage.getItem(k);
		}
		ret.set_string(JSON.stringify({
			"c2dictionary": true,
			"data": o
		}));
	};
	pluginProto.exps = new Exps();
}());
;
;
cr.plugins_.pix_spilgames = function(runtime) {
    this.runtime = runtime;
};
(function (w) {
    var self,
        typeProto,
        pluginProto,
        instanceProto;
    /**
     * Proto
     */
    pluginProto = cr.plugins_.pix_spilgames.prototype;
    pluginProto.Type = function(plugin) {
        this.plugin = plugin;
        this.runtime = plugin.runtime;
    };
    typeProto = pluginProto.Type.prototype;
    typeProto.onCreate = function() {};
    pluginProto.Instance = function(type) {
        this.type = type;
        this.runtime = type.runtime;
    };
    instanceProto = pluginProto.Instance.prototype;
    instanceProto.onCreate = function() {
        self = this;
        self.API = null;
        self.apiReady = false;
        self.apiVersion = null;
        self.branding = {};
        self.gamePaused = false;
		var SpilData = {
			id: this.properties[0]
		};
        
    };
    /**
     * Conditions
     */
    function Cnds() {};
	Cnds.prototype.apiLoaded = function() {
        return (self.API) ? true : false;
    };
    Cnds.prototype.apiReady = function() {
        return self.apiReady;
    };
    Cnds.prototype.isPaused = function() {
        return self.gamePaused;
    };
    Cnds.prototype.isSplashScreenEnabled = function() {
		
    };
	Cnds.prototype.pauseGame = function() {
		return true;
	};
	Cnds.prototype.resumeGame = function() {
		return true;
	};
	Cnds.prototype.startGame = function() {
		return true;
	};
    pluginProto.cnds = new Cnds();
    /**
     * Actions
     */
	function _isLinkAvailable(type) {
       
    }
    function _getOutgoingLink(type) {
		
    }
    function _getLogo() {
       
    }
    function _getSplashScreen() {
       
    }
	function _triggerPause() {
		self.gamePaused = 1;
		self.runtime.trigger(cr.plugins_.pix_spilgames.prototype.cnds.pauseGame, self);
	}
	function _triggerResume() {
		self.gamePaused = 0;
		self.runtime.trigger(cr.plugins_.pix_spilgames.prototype.cnds.resumeGame, self);
	}
	function _triggerStart() {
		self.runtime.trigger(cr.plugins_.pix_spilgames.prototype.cnds.startGame, self);
	}
    function Acts() {};
    Acts.prototype.showSplash = function() {
		_triggerStart();
	};
	Acts.prototype.openOutgoingLink = function(type) {
        if(_getOutgoingLink(type)) {
            _getOutgoingLink(type).call(this);
        } else {
            (function() {}).call(this);
        }
    };
    Acts.prototype.requestGameBreak = function() {
       
    };
    pluginProto.acts = new Acts();
    /**
     * Expressions
     */
    function Exps() {};
    Exps.prototype.logoImage = function(ret) {
		if (!self.branding["logo"]){
			_getLogo();
		}
		var src = (self.branding["logo"] && self.branding["logo"]["image"]) ? self.branding["logo"]["image"] : '';
        ret.set_string(src);
    };
	Exps.prototype.version = function(ret) {
        ret.set_string(self.apiVersion);
    };
    pluginProto.exps = new Exps();
}(window));
;
;
cr.behaviors.Anchor = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.Anchor.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.anch_left = this.properties[0];		// 0 = left, 1 = right
		this.anch_top = this.properties[1];			// 0 = top, 1 = bottom
		this.anch_right = this.properties[2];		// 0 = none, 1 = right
		this.anch_bottom = this.properties[3];		// 0 = none, 1 = bottom
		this.inst.update_bbox();
		this.xleft = this.inst.bbox.left;
		this.ytop = this.inst.bbox.top;
		this.xright = this.runtime.original_width - this.inst.bbox.left;
		this.ybottom = this.runtime.original_height - this.inst.bbox.top;
		this.rdiff = this.runtime.original_width - this.inst.bbox.right;
		this.bdiff = this.runtime.original_height - this.inst.bbox.bottom;
		this.enabled = (this.properties[4] !== 0);
	};
	behinstProto.saveToJSON = function ()
	{
		return {
			"xleft": this.xleft,
			"ytop": this.ytop,
			"xright": this.xright,
			"ybottom": this.ybottom,
			"rdiff": this.rdiff,
			"bdiff": this.bdiff,
			"enabled": this.enabled
		};
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.xleft = o["xleft"];
		this.ytop = o["ytop"];
		this.xright = o["xright"];
		this.ybottom = o["ybottom"];
		this.rdiff = o["rdiff"];
		this.bdiff = o["bdiff"];
		this.enabled = o["enabled"];
	};
	behinstProto.tick = function ()
	{
		if (!this.enabled)
			return;
		var n;
		var layer = this.inst.layer;
		var inst = this.inst;
		var bbox = this.inst.bbox;
		if (this.anch_left === 0)
		{
			inst.update_bbox();
			n = (layer.viewLeft + this.xleft) - bbox.left;
			if (n !== 0)
			{
				inst.x += n;
				inst.set_bbox_changed();
			}
		}
		else if (this.anch_left === 1)
		{
			inst.update_bbox();
			n = (layer.viewRight - this.xright) - bbox.left;
			if (n !== 0)
			{
				inst.x += n;
				inst.set_bbox_changed();
			}
		}
		if (this.anch_top === 0)
		{
			inst.update_bbox();
			n = (layer.viewTop + this.ytop) - bbox.top;
			if (n !== 0)
			{
				inst.y += n;
				inst.set_bbox_changed();
			}
		}
		else if (this.anch_top === 1)
		{
			inst.update_bbox();
			n = (layer.viewBottom - this.ybottom) - bbox.top;
			if (n !== 0)
			{
				inst.y += n;
				inst.set_bbox_changed();
			}
		}
		if (this.anch_right === 1)
		{
			inst.update_bbox();
			n = (layer.viewRight - this.rdiff) - bbox.right;
			if (n !== 0)
			{
				inst.width += n;
				if (inst.width < 0)
					inst.width = 0;
				inst.set_bbox_changed();
			}
		}
		if (this.anch_bottom === 1)
		{
			inst.update_bbox();
			n = (layer.viewBottom - this.bdiff) - bbox.bottom;
			if (n !== 0)
			{
				inst.height += n;
				if (inst.height < 0)
					inst.height = 0;
				inst.set_bbox_changed();
			}
		}
	};
	function Cnds() {};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		if (this.enabled && e === 0)
			this.enabled = false;
		else if (!this.enabled && e !== 0)
		{
			this.inst.update_bbox();
			this.xleft = this.inst.bbox.left;
			this.ytop = this.inst.bbox.top;
			this.xright = this.runtime.original_width - this.inst.bbox.left;
			this.ybottom = this.runtime.original_height - this.inst.bbox.top;
			this.rdiff = this.runtime.original_width - this.inst.bbox.right;
			this.bdiff = this.runtime.original_height - this.inst.bbox.bottom;
			this.enabled = true;
		}
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	behaviorProto.exps = new Exps();
}());
var Box2D = {};
Box2D.Dynamics         = {};
Box2D.Dynamics.Joints  = {};
Box2D.Common           = {};
Box2D.Common.Math      = {};
Box2D.Collision        = {};
Box2D.Collision.Shapes = {};
function c2inherit(derived, base)
{
	for (var i in base.prototype)
	{
		if (base.prototype.hasOwnProperty(i))
			derived.prototype[i] = base.prototype[i];
	}
};
if (navigator["isCocoonJS"] && typeof window["cr_cjs_accelerated_physics"] !== "undefined")
{
	cr.logexport("Using CocoonJS native physics");
	if ( !window.ext || typeof window.ext.IDTK_SRV_BOX2D === 'undefined' ){
		console.log("The CocoonJS binding for Box2D has been ignored because ext.IDTK_SRV_BOX2D is not available");
	}else
	{
	(function (){
		var B2Vec2 = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			this.x = x_;
			this.y = y_;
		};
		Box2D.Common.Math.b2Vec2 = B2Vec2;
		B2Vec2._freeCache = [];
		B2Vec2.Get = function(x, y) {
			if (Box2D.Common.Math.b2Vec2._freeCache.length > 0) {
				var vec = Box2D.Common.Math.b2Vec2._freeCache.pop();
				vec.Set(x, y);
				return vec;
			}
			return new Box2D.Common.Math.b2Vec2(x, y);
		};
		B2Vec2.Free = function(vec) {
			if (Box2D.Common.Math.b2Vec2._freeCache.length < 10000)
				Box2D.Common.Math.b2Vec2._freeCache.push(vec);
		}
		B2Vec2.prototype.SetZero = function () {
			this.x = 0.0;
			this.y = 0.0;
		};
		B2Vec2.prototype.Set = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			this.x = x_;
			this.y = y_;
		};
		B2Vec2.prototype.SetV = function (v) {
			this.x = v.x;
			this.y = v.y;
		};
		B2Vec2.Make = function (x_, y_) {
			if (x_ === undefined){x_ = 0;}
			if (y_ === undefined){y_ = 0;}
			return B2Vec2.Get(x_, y_);
		};
		B2Vec2.prototype.Copy = function () {
			return B2Vec2.Get(this.x, this.y);
		};
		B2Vec2.prototype.Add = function (v) {
			this.x += v.x;
			this.y += v.y;
		};
		B2Vec2.prototype.Subtract = function (v) {
			this.x -= v.x;
			this.y -= v.y;
		};
		B2Vec2.prototype.Multiply = function (a) {
			if (a === undefined){
				a = 0;
			}
			this.x *= a;
			this.y *= a;
		};
		B2Vec2.prototype.Length = function () {
			return Math.sqrt(this.x * this.x + this.y * this.y);
		};
		B2Vec2.prototype.LengthSquared = function () {
			return (this.x * this.x + this.y * this.y);
		};
		B2Vec2.prototype.Normalize = function () {
			var length = Math.sqrt(this.x * this.x + this.y * this.y);
			if (length < Number.MIN_VALUE) {
				return 0.0;
			}
			var invLength = 1.0 / length;
			this.x *= invLength;
			this.y *= invLength;
			return length;
		};
		B2Vec2.prototype.NegativeSelf = function () {
			this.x = (-this.x);
			this.y = (-this.y);
		};
		var B2Mat22 = function () {
			this.col1 = B2Vec2.Get(0,0);
			this.col2 = B2Vec2.Get(0,0);
			this.SetIdentity();
		};
		Box2D.Common.Math.b2Mat22 = B2Mat22 ;
		B2Mat22.FromAngle = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			var mat = new B2Mat22();
			mat.Set(angle);
			return mat;
		};
		B2Mat22.FromVV = function (c1, c2) {
			var mat = new B2Mat22();
			mat.SetVV(c1, c2);
			return mat;
		};
		B2Mat22.prototype.Set = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			var c = Math.cos(angle);
			var s = Math.sin(angle);
			this.col1.x = c;
			this.col2.x = (-s);
			this.col1.y = s;
			this.col2.y = c;
		};
		B2Mat22.prototype.SetVV = function (c1, c2) {
			this.col1.SetV(c1);
			this.col2.SetV(c2);
		};
		B2Mat22.prototype.Copy = function () {
			var mat = new B2Mat22();
			mat.SetM(this);
			return mat;
		};
		B2Mat22.prototype.SetM = function (m) {
			this.col1.SetV(m.col1);
			this.col2.SetV(m.col2);
		};
		B2Mat22.prototype.AddM = function (m) {
			this.col1.x += m.col1.x;
			this.col1.y += m.col1.y;
			this.col2.x += m.col2.x;
			this.col2.y += m.col2.y;
		};
		B2Mat22.prototype.SetIdentity = function () {
			this.col1.x = 1.0;
			this.col2.x = 0.0;
			this.col1.y = 0.0;
			this.col2.y = 1.0;
		};
		B2Mat22.prototype.SetZero = function () {
			this.col1.x = 0.0;
			this.col2.x = 0.0;
			this.col1.y = 0.0;
			this.col2.y = 0.0;
		};
		B2Mat22.prototype.GetAngle = function () {
			return Math.atan2(this.col1.y, this.col1.x);
		};
		B2Mat22.prototype.GetInverse = function (out) {
			var a = this.col1.x;
			var b = this.col2.x;
			var c = this.col1.y;
			var d = this.col2.y;
			var det = a * d - b * c;
			if (det !== 0.0) {
				det = 1.0 / det;
			}
			out.col1.x = det * d;
			out.col2.x = (-det * b);
			out.col1.y = (-det * c);
			out.col2.y = det * a;
			return out;
		};
		B2Mat22.prototype.Solve = function (out, bX, bY) {
			if (bX === undefined){bX = 0;}
			if (bY === undefined){bY = 0;}
			var a11 = this.col1.x;
			var a12 = this.col2.x;
			var a21 = this.col1.y;
			var a22 = this.col2.y;
			var det = a11 * a22 - a12 * a21;
			if (det !== 0.0) {
				det = 1.0 / det;
			}
			out.x = det * (a22 * bX - a12 * bY);
			out.y = det * (a11 * bY - a21 * bX);
			return out;
		};
		B2Mat22.prototype.Abs = function () {
			this.col1.Abs();
			this.col2.Abs();
		};
		var B2Transform = function (pos, r) {
			this.position = B2Vec2.Get(0,0);
			this.R = new B2Mat22();
			if (pos === undefined){pos = null;}
			if (r === undefined){r = null;}
			if (pos) {
				this.position.SetV(pos);
				this.R.SetM(r);
			}
		};
		Box2D.Common.Math.b2Transform = B2Transform ;
		B2Transform.prototype.Initialize = function (pos, r) {
			this.position.SetV(pos);
			this.R.SetM(r);
		};
		B2Transform.prototype.SetIdentity = function () {
			this.position.SetZero();
			this.R.SetIdentity();
		};
		B2Transform.prototype.Set = function (x) {
			this.position.SetV(x.position);
			this.R.SetM(x.R);
		};
		B2Transform.prototype.SetAngle = function () {
			return Math.atan2(this.R.col1.y, this.R.col1.x);
		};
		var b2Math = function () {};
		Box2D.Common.Math.b2Math = b2Math ;
		b2Math.IsValid = function (x) {
			if (x === undefined){
				x = 0;
			}
			return isFinite(x);
		};
		b2Math.Dot = function (a, b) {
			return a.x * b.x + a.y * b.y;
		};
		b2Math.CrossVV = function (a, b) {
			return a.x * b.y - a.y * b.x;
		};
		b2Math.CrossVF = function (a, s) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get(s * a.y, (-s * a.x));
			return v;
		};
		b2Math.CrossFV = function (s, a) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get((-s * a.y), s * a.x);
			return v;
		};
		b2Math.MulMV = function (A, v) {
			var u = B2Vec2.Get(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
			return u;
		};
		b2Math.MulTMV = function (A, v) {
			var u = B2Vec2.Get(b2Math.Dot(v, A.col1), b2Math.Dot(v, A.col2));
			return u;
		};
		b2Math.MulX = function (T, v) {
			var a = b2Math.MulMV(T.R, v);
			a.x += T.position.x;
			a.y += T.position.y;
			return a;
		};
		b2Math.MulXT = function (T, v) {
			var a = b2Math.SubtractVV(v, T.position);
			var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
			a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
			a.x = tX;
			return a;
		};
		b2Math.AddVV = function (a, b) {
			var v = B2Vec2.Get(a.x + b.x, a.y + b.y);
			return v;
		};
		b2Math.SubtractVV = function (a, b) {
			var v = B2Vec2.Get(a.x - b.x, a.y - b.y);
			return v;
		};
		b2Math.Distance = function (a, b) {
			var cX = a.x - b.x;
			var cY = a.y - b.y;
			return Math.sqrt(cX * cX + cY * cY);
		};
		b2Math.DistanceSquared = function (a, b) {
			var cX = a.x - b.x;
			var cY = a.y - b.y;
			return (cX * cX + cY * cY);
		};
		b2Math.MulFV = function (s, a) {
			if (s === undefined){
				s = 0;
			}
			var v = B2Vec2.Get(s * a.x, s * a.y);
			return v;
		};
		b2Math.AddMM = function (A, B) {
			var C = B2Mat22.FromVV(b2Math.AddVV(A.col1, B.col1), b2Math.AddVV(A.col2, B.col2));
			return C;
		};
		b2Math.MulMM = function (A, B) {
			var C = B2Mat22.FromVV(b2Math.MulMV(A, B.col1), b2Math.MulMV(A, B.col2));
			return C;
		};
		b2Math.MulTMM = function (A, B) {
			var c1 = B2Vec2.Get(b2Math.Dot(A.col1, B.col1), b2Math.Dot(A.col2, B.col1));
			var c2 = B2Vec2.Get(b2Math.Dot(A.col1, B.col2), b2Math.Dot(A.col2, B.col2));
			var C = B2Mat22.FromVV(c1, c2);
			return C;
		};
		b2Math.Abs = function (a) {
			if (a === undefined){
				a = 0;
			}
			return a > 0.0 ? a : (-a);
		};
		b2Math.AbsV = function (a) {
			var b = B2Vec2.Get(b2Math.Abs(a.x), b2Math.Abs(a.y));
			return b;
		};
		b2Math.AbsM = function (A) {
			var B = B2Mat22.FromVV(b2Math.AbsV(A.col1), b2Math.AbsV(A.col2));
			return B;
		};
		b2Math.Min = function (a, b) {
			if (a === undefined){a = 0;}
			if (b === undefined){b = 0;}
			return a < b ? a : b;
		};
		b2Math.MinV = function (a, b) {
			var c = B2Vec2.Get(b2Math.Min(a.x, b.x), b2Math.Min(a.y, b.y));
			return c;
		};
		b2Math.Max = function (a, b) {
			if (a === undefined){a = 0;}
			if (b === undefined){b = 0;}
			return a > b ? a : b;
		};
		b2Math.MaxV = function (a, b) {
			var c = B2Vec2.Get(b2Math.Max(a.x, b.x), b2Math.Max(a.y, b.y));
			return c;
		};
		b2Math.Clamp = function (a, low, high) {
			if (a === undefined){a = 0;}
			if (low === undefined){low = 0;}
			if (high === undefined){high = 0;}
			return a < low ? low : a > high ? high : a;
		};
		b2Math.ClampV = function (a, low, high) {
			return b2Math.MaxV(low, b2Math.MinV(a, high));
		};
		b2Math.Swap = function (a, b) {
			var tmp = a[0];
			a[0] = b[0];
			b[0] = tmp;
		};
		b2Math.Random = function () {
			return Math.random() * 2 - 1;
		};
		b2Math.RandomRange = function (lo, hi) {
			if (lo === undefined){lo = 0;}
			if (hi === undefined){hi = 0;}
			var r = Math.random();
			r = (hi - lo) * r + lo;
			return r;
		};
		/* jshint -W016 */
		b2Math.NextPowerOfTwo = function (x) {
			if (x === undefined){x = 0;}
			x |= (x >> 1) & 0x7FFFFFFF;
			x |= (x >> 2) & 0x3FFFFFFF;
			x |= (x >> 4) & 0x0FFFFFFF;
			x |= (x >> 8) & 0x00FFFFFF;
			x |= (x >> 16) & 0x0000FFFF;
			return x + 1;
		};
		b2Math.IsPowerOfTwo = function (x) {
			if (x === undefined){x = 0;}
			var result = x > 0 && (x & (x - 1)) === 0;
			return result;
		};
		/* jshint +W016 */
		b2Math.b2Vec2_zero = new B2Vec2(0.0, 0.0);
		b2Math.b2Mat22_identity = B2Mat22.FromVV(new B2Vec2(1.0, 0.0), new B2Vec2(0.0, 1.0));
		b2Math.b2Transform_identity = new B2Transform(b2Math.b2Vec2_zero, b2Math.b2Mat22_identity);
		var B2DebugDraw = function(){
			this.e_aabbBit = 0x0004;
			this.e_centerOfMassBit = 0x0010;
			this.e_controllerBit = 0x0020;
			this.e_jointBit = 0x0002;
			this.e_pairBit  = 0x0008;
			this.e_shapeBit = 0x000;
		};
		Box2D.Dynamics.b2DebugDraw = B2DebugDraw ;
		B2DebugDraw.prototype.AppendFlags      = function(){};
		B2DebugDraw.prototype.ClearFlags       = function(){};
		B2DebugDraw.prototype.DrawCircle       = function(){};
		B2DebugDraw.prototype.DrawPolygon      = function(){};
		B2DebugDraw.prototype.DrawSegment      = function(){};
		B2DebugDraw.prototype.DrawSolidCircle  = function(){};
		B2DebugDraw.prototype.DrawSolidPolygon = function(){};
		B2DebugDraw.prototype.DrawTransform    = function(){};
		B2DebugDraw.prototype.GetAlpha         = function(){};
		B2DebugDraw.prototype.GetDrawScale     = function(){};
		B2DebugDraw.prototype.GetFillAlpha     = function(){};
		B2DebugDraw.prototype.GetFlags         = function(){};
		B2DebugDraw.prototype.GetLineThickness = function(){};
		B2DebugDraw.prototype.GetSprite        = function(){};
		B2DebugDraw.prototype.GetXFormScale    = function(){};
		B2DebugDraw.prototype.SetAlpha         = function(){};
		B2DebugDraw.prototype.SetDrawScale     = function(){};
		B2DebugDraw.prototype.SetFillAlpha     = function(){};
		B2DebugDraw.prototype.SetFlags         = function(){};
		B2DebugDraw.prototype.SetLineThickness = function(){};
		B2DebugDraw.prototype.SetSprite        = function(){};
		B2DebugDraw.prototype.SetXFormScale    = function(){};
		var B2BodyDef  = function () {
			this.position = B2Vec2.Get(0,0);
			this.linearVelocity = B2Vec2.Get(0,0);
			this.userData = null;
			this.angle = 0.0;
			this.linearVelocity.Set(0, 0);
			this.angularVelocity = 0.0;
			this.linearDamping = 0.0;
			this.angularDamping = 0.0;
			this.allowSleep = true;
			this.awake = true;
			this.fixedRotation = false;
			this.bullet = false;
			this.type = B2Body.b2_staticBody;
			this.active = true;
			this.inertiaScale = 1.0;
		};
		Box2D.Dynamics.b2BodyDef = B2BodyDef;
		var B2Fixture = function(body,userData, fixtureID, def ) {
			this.m_body = body ;
			this.m_userData = userData ;
			this.m_fixtureID = fixtureID ;
			this.m_shape = {} ;
			this.m_shape.m_centroid = B2Vec2.Get(0,0) ;
			this.m_isSensor = false ;
			this.m_density  = def.density ;
			this.m_friction = def.friction ;
			this.m_restitution = def.restitution ;
			this.m_isSensor = def.isSensor ;
		};
		Box2D.Dynamics.b2Fixture = B2Fixture ;
		B2Fixture.prototype.GetBody = function(){ return this.m_body ; } ;
		B2Fixture.prototype.GetShape = function() {
			console.log( "fixture.GetShape not yet supported in CocoonJS Box2D binding" ) ;
			return null ;
		} ;
		B2Fixture.prototype.GetUserData = function() { return this.m_userData ; } ;
		B2Fixture.prototype.SetSensor = function(isSensor) {
			this.m_isSensor = isSensor;
			window.ext.IDTK_SRV_BOX2D.makeCall( "setSensor" , this.m_body.m_world.m_worldID , this.m_fixtureID , this.m_isSensor) ;
		};
		B2Fixture.prototype.IsSensor = function() { return this.m_isSensor ; } ;
		B2Fixture.prototype.SetDensity     = function( density     ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setDensity"     , this.m_body.m_world.m_worldID , this.m_fixtureID , density     ) ; this.m_density = density         ; } ;
		B2Fixture.prototype.SetFriction    = function( friction    ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setFriction"    , this.m_body.m_world.m_worldID , this.m_fixtureID , friction    ) ; this.m_friction = friction       ; } ;
		B2Fixture.prototype.SetRestitution = function( restitution ) { window.ext.IDTK_SRV_BOX2D.makeCall( "setRestitution" , this.m_body.m_world.m_worldID , this.m_fixtureID , restitution ) ; this.m_restitution = restitution ; } ;
		B2Fixture.prototype.GetDensity     = function() { return this.m_density     ; } ;
		B2Fixture.prototype.GetFriction    = function() { return this.m_friction    ; } ;
		B2Fixture.prototype.GetRestitution = function() { return this.m_restitution ; } ;
		var B2Body = function (bd, world) {
			var userData = bd.userData ;
			bd.userData = null;
			this.m_world    = world;
			this.m_xf       = new B2Transform( bd.position , B2Mat22.FromAngle(bd.angle));
			this.m_fixtures = [] ;
			this.m_active   = bd.active ;
			if( bd.type === B2Body.b2_staticBody ){
				bd.density = 0;
			}
			this.m_bodyID = window.ext.IDTK_SRV_BOX2D.makeCall( "createBody" , world.m_worldID , bd ) ;
			this.m_userData = userData;
			bd.userData = userData ;
		};
		Box2D.Dynamics.b2Body = B2Body ;
		B2Body.prototype.CreateFixture = function (def) {
			var userData = def.userData;
			def.userData = null ;
			var fixtureID = window.ext.IDTK_SRV_BOX2D.makeCall( "createFixture" , this.m_world.m_worldID , this.m_bodyID , def ) ;
			def.userData = userData;
			var fixture = new B2Fixture( this , userData , fixtureID , def ) ;
			this.m_world.m_fixturesList[fixtureID] = fixture ;
			this.m_fixtures.push( fixture ) ;
			return fixture;
		};
		B2Body.prototype.GetFixtureList = function(){
			if( this.m_fixtures.length === 0 ){
				return null ;
			}
			return this.m_fixtures[0] ;
		};
		B2Body.prototype.DestroyFixture = function( fixture ){
			window.ext.IDTK_SRV_BOX2D.makeCall( "deleteFixture" , this.m_world.m_worldID , fixture.m_fixtureID ) ;
			delete this.m_world.m_fixturesList[fixture.m_fixtureID] ;
		};
		B2Body.prototype.SetPositionAndAngle = function (position, angle) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "setBodyTransform" , this.m_world.m_worldID , this.m_bodyID , position.x , position.y , angle ) ;
			this.m_xf.R.Set(angle) ;
			this.m_xf.position.SetV(position) ;
		};
		B2Body.prototype.GetPosition = function () { return this.m_xf.position ; } ;
		B2Body.prototype.SetPosition = function (position) { this.SetPositionAndAngle(position, this.GetAngle()) ; } ;
		B2Body.prototype.GetLinearVelocity  = function(){
			var v = window.ext.IDTK_SRV_BOX2D.makeCall( "getLinearVelocity" , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(v[0],v[1]);
		};
		B2Body.prototype.GetWorldCenter = function(){
			var p = window.ext.IDTK_SRV_BOX2D.makeCall( "getWorldCenter"  , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(p[0],p[1]);
		};
		B2Body.prototype.GetLocalCenter = function(){
			var p = window.ext.IDTK_SRV_BOX2D.makeCall( "getLocalCenter"  , this.m_world.m_worldID , this.m_bodyID ) ;
			return B2Vec2.Get(p[0],p[1]);
		};
		B2Body.prototype.GetLocalPoint = function (worldPoint) {
			return b2Math.MulXT(this.m_xf, worldPoint);
		};
		B2Body.prototype.ApplyImpulse = function( impulse , point , wake ) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "applyImpulse" , this.m_world.m_worldID , this.m_bodyID , impulse.x , impulse.y , point.x , point.y , wake ) ;
		};
		B2Body.prototype.GetMass			= function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "getMass" , this.m_world.m_worldID , this.m_bodyID ) ; }
		B2Body.prototype.IsAwake			= function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "isAwake"			, this.m_world.m_worldID , this.m_bodyID ) ; } ;
		B2Body.prototype.GetAngularVelocity = function( )			   { return window.ext.IDTK_SRV_BOX2D.makeCall( "getAngularVelocity" , this.m_world.m_worldID , this.m_bodyID ) ; } ;
		B2Body.prototype.SetFixedRotation   = function( fixed )				{ window.ext.IDTK_SRV_BOX2D.makeCall( "setFixedRotation"   , this.m_world.m_worldID , this.m_bodyID , fixed   ) ; } ;
		B2Body.prototype.SetAwake		   = function( state )				{ window.ext.IDTK_SRV_BOX2D.makeCall( "setAwake"		   , this.m_world.m_worldID , this.m_bodyID , state   ) ; } ;
		B2Body.prototype.SetLinearVelocity  = function( vel   )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setLinearVelocity"  , this.m_world.m_worldID , this.m_bodyID , vel.x   , vel.y ) ; } ;
		B2Body.prototype.ApplyForceToCenter = function( force , wake )         { window.ext.IDTK_SRV_BOX2D.makeCall( "applyForceToCenter" , this.m_world.m_worldID , this.m_bodyID , force.x , force.y , wake ) ; } ;
		B2Body.prototype.ApplyForce         = function( force , point , wake ) { window.ext.IDTK_SRV_BOX2D.makeCall( "applyForce"         , this.m_world.m_worldID , this.m_bodyID , force.x , force.y , point.x , point.y , wake ) ; } ;
		B2Body.prototype.ApplyTorque        = function( torque, wake )         { window.ext.IDTK_SRV_BOX2D.makeCall( "applyTorque"        , this.m_world.m_worldID , this.m_bodyID , torque , wake ) ; } ;
		B2Body.prototype.SetLinearDamping   = function( damp  )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setLinearDamping"   , this.m_world.m_worldID , this.m_bodyID , damp    ) ; } ;
		B2Body.prototype.SetAngularVelocity = function( angvel)                { window.ext.IDTK_SRV_BOX2D.makeCall( "setAngularVelocity" , this.m_world.m_worldID , this.m_bodyID , angvel  ) ; } ;
		B2Body.prototype.SetType            = function( type  )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setType"            , this.m_world.m_worldID , this.m_bodyID , type    ) } ;
		B2Body.prototype.SetActive          = function( state )                { window.ext.IDTK_SRV_BOX2D.makeCall( "setActive"          , this.m_world.m_worldID , this.m_bodyID , state   ) ; this.m_active = state ; } ;
		B2Body.prototype.IsActive           = function( ) { return this.m_active ; } ;
		B2Body.prototype.GetAngle = function () { return this.m_xf.R.GetAngle() ; } ;
		B2Body.prototype.SetAngle = function (angle) {
			if (angle === undefined){
				angle = 0;
			}
			this.SetPositionAndAngle(this.GetPosition(), angle);
		};
		B2Body.prototype.GetContactList = function () {
			var contacts = window.ext.IDTK_SRV_BOX2D.makeCall( "getObjectContacts" , this.m_world.m_worldID , this.m_bodyID ) ;
			var result = [];
			for(var i = 0 ; i < contacts.length ; i++){
				result.push(this.m_world.m_bodyList[contacts[i]]);
			}
			return result;
		};
		B2Body.prototype.SetUserData = function (data) { this.m_userData = data ; } ;
		B2Body.prototype.GetUserData = function () { return this.m_userData ; } ;
		B2Body.prototype.GetWorld    = function () { return this.m_world ; } ;
		Box2D.Dynamics.b2Body.b2_staticBody    = 0;
		Box2D.Dynamics.b2Body.b2_kinematicBody = 1;
		Box2D.Dynamics.b2Body.b2_dynamicBody   = 2;
		var B2Contact = function (fixtureA , fixtureB , touching ) {
			this.m_fixtureA = fixtureA ;
			this.m_fixtureB = fixtureB ;
			this.m_touching = touching ;
		};
		Box2D.Dynamics.b2Contact = B2Contact ;
		B2Contact.prototype.GetFixtureA = function(){ return this.m_fixtureA ; } ;
		B2Contact.prototype.GetFixtureB = function(){ return this.m_fixtureB ; } ;
		B2Contact.prototype.IsTouching  = function(){ return this.m_touching ; } ;
		var B2ContactListener = function () {};
		Box2D.Dynamics.b2ContactListener = B2ContactListener ;
		B2ContactListener.prototype.BeginContact = function (/*contact*/) {} ;// NOTE: Only this one is called at the moment
		B2ContactListener.prototype.EndContact   = function (/*contact*/) {} ;
		B2ContactListener.prototype.PreSolve     = function (/*contact, oldManifold*/) {} ;
		B2ContactListener.prototype.PostSolve    = function (/*contact, impulse*/) {} ;
		Box2D.Dynamics.b2ContactListener.b2_defaultListener = new B2ContactListener();
		var B2ContactFilter = function() {} ;
		Box2D.Dynamics.b2ContactFilter = B2ContactFilter ;
		var B2World = function (gravity, doSleep) {
			this.m_bodyList = [];
			this.m_jointList = [];
			this.m_fixturesList = [];
			this.m_contactListener = null ;
			this.m_jointsList = [] ;
			this.m_worldID = window.ext.IDTK_SRV_BOX2D.makeCall( "createWorld" , gravity.x , gravity.y , doSleep );
		};
		Box2D.Dynamics.b2World = B2World;
		B2World.prototype.SetContactListener = function (listener) { this.m_contactListener = listener ; } ;
		B2World.prototype.SetContactFilter = function(filter){
			var _filter = filter ;
			var world = this ;
			var callbackFunc = function(a , b){
				var fa = world.m_fixturesList[a];
				var fb = world.m_fixturesList[b];
				return _filter.ShouldCollide(fa,fb);
			}
			window.ext.IDTK_SRV_BOX2D.makeCall("setContactFilter", this.m_worldID, callbackFunc ) ;
		};
		B2World.prototype.CreateBody = function (def) {
			var b = new B2Body(def, this);
			this.m_bodyList[b.m_bodyID] = b;
			return b;
		};
		B2World.prototype.DestroyBody = function (b) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "deleteBody" , this.m_worldID , b.m_bodyID ) ;
			delete this.m_bodyList[b.m_bodyID];
			for( var i =0 ; i < b.m_fixtures.length ; ++i ){
				delete this.m_fixturesList[b.m_fixtures[i].m_fixtureID] ;
			}
		};
		B2World.prototype.CreateJoint = function (def) {
			if( def.bodyA.m_bodyID === def.bodyB.m_bodyID ){
				return ;
			}
			var bodyA = def.bodyA ;
			var bodyB = def.bodyB ;
			def.bodyA = bodyA.m_bodyID ;
			def.bodyB = bodyB.m_bodyID ;
			var jointFunc = "createDistanceJoint" ;
			if( def.type === B2Joint.e_revoluteJoint ) {
				jointFunc = "createRevoluteJoint" ;
			}
			var joint = new B2Joint(def) ;
			joint.m_jointID = window.ext.IDTK_SRV_BOX2D.makeCall( jointFunc , this.m_worldID , def ) ;
			def.bodyA = bodyA ;
			def.bodyB = bodyB ;
			this.m_jointsList.push( joint ) ;
			return joint ;
		};
		B2World.prototype.DestroyJoint = function (joint) {
			window.ext.IDTK_SRV_BOX2D.makeCall( "destroyJoint" , this.m_worldID , joint.m_jointID ) ;
		};
		B2World.prototype.GetJointList = function () {
			if( this.m_jointsList.length === 0 ){
				return null ;
			}
			for( var i = 0 ; i < this.m_jointsList.length - 1 ; ++i ){
				this.m_jointsList[i].next = this.m_jointsList[i+1] ;
			}
			this.m_jointsList[this.m_jointsList.length-1].next = null ;
			return this.m_jointsList[0];
		};
		B2World.prototype.SetContinuousPhysics = function (continuous) { window.ext.IDTK_SRV_BOX2D.makeCall( "setContinuous" , this.m_worldID, continuous ) ; } ;
		B2World.prototype.SetGravity           = function (gravity) { window.ext.IDTK_SRV_BOX2D.makeCall( "setGravity" , this.m_worldID, gravity.x , gravity.y ) ; } ;
		B2World.prototype.Step = function (dt, velocityIterations, positionIterations) {
			var i;
			var transforms = window.ext.IDTK_SRV_BOX2D.makeCall( "step" , this.m_worldID, dt , velocityIterations , positionIterations );
			var count = transforms[0]; // Array returns [ <number of elements> , elem1.bodyID , elem1.posX , elem1.posY , elem1.angle, elem2.bodyID , ....]
			for( i = 1; i <= count * 4 ; i+=4 ){
				var body = this.m_bodyList[ transforms[i+0] ];
				if( body === null ){ // end of the transforms array
					break ;
				}
				body.m_xf.position.Set(transforms[i+1] ,transforms[i+2] ) ;
				body.m_xf.R.Set(transforms[i+3]);
			}
			if( this.m_contactListener !== null ){
				var contacts = window.ext.IDTK_SRV_BOX2D.makeCall( "getLastContacts" , this.m_worldID );
				count = contacts[0];
				for( i = 1 ; i<= count*3 ; i+=3 ){
					var f1 = contacts[i+0];
					var f2 = contacts[i+1];
					var touching = contacts[i+2];
					var fix1 = this.m_fixturesList[f1];
					var fix2 = this.m_fixturesList[f2];
					if( (typeof(fix1) === 'undefined' ) || (typeof(fix2) === 'undefined' ) ){
						console.log("One of the fixtures in a contact DOESN'T EXIST!!");
						continue ;
					}
					this.m_contactListener.BeginContact( new B2Contact(fix1,fix2,touching) ) ;
				}
			}
		};
		B2World.prototype.ClearForces = function () {
			window.ext.IDTK_SRV_BOX2D.makeCall( "clearForces" , this.m_worldID );
		};
		B2World.prototype.SetDebugDraw = function(/*d*/){} ;
		B2World.prototype.DrawDebugData = function(){};
		Box2D.Collision.Shapes.b2CircleShape = function (radius)
		{
			this.radius = radius ;
			this.type = "circle";
		};
		Box2D.Collision.Shapes.b2PolygonShape = function ()
		{
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsBox = function (width,height)
		{
			this.type = "box";
			this.width  = width  ;
			this.height = height ;
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsEdge = function (v1, v2)
		{
			this.type = "edge";
			this.p1x = v1.x;
			this.p1y = v1.y;
			this.p2x = v2.x;
			this.p2y = v2.y;
		};
		Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsArray = function ( vec , length )
		{
			this.type = "polygon";
			this.vertices = [] ;
			for( var i = 0; i < length ; i++ )
			{
				this.vertices.push( vec[i].x );
				this.vertices.push( vec[i].y );
			}
		};
		var b2FixtureDef = function () {
			this.shape = null;
			this.userData = null;
			this.friction = 0.2;
			this.restitution = 0.0;
			this.density = 0.0;
			this.isSensor = false;
			this.filter = {
				categoryBits : 1 ,
				maskBits : 0xFFFF ,
				groupIndex : 0
			} ;
		};
		Box2D.Dynamics.b2FixtureDef = b2FixtureDef ;
		var B2Joint = function( def ) {
			this.bodyA = def.bodyA;
			this.bodyB = def.bodyB;
			this.userData = def.userData ;
			this.type = def.type ;
			this.next = null ;
		};
		Box2D.Dynamics.Joints.b2Joint = B2Joint ;
		B2Joint.prototype.GetBodyA    = function() { return this.bodyA    ; } ;
		B2Joint.prototype.GetBodyB    = function() { return this.bodyB    ; } ;
		B2Joint.prototype.GetUserData = function() { return this.userData ; } ;
		B2Joint.prototype.GetType     = function() { return this.type     ; } ;
		B2Joint.prototype.GetNext     = function() { return this.next     ; } ;
		B2Joint.e_distanceJoint = 0 ;
		B2Joint.e_revoluteJoint = 1 ;
		var B2DistanceJointDef = function( bA , bB , anchorA , anchorB ) {
			this.type = B2Joint.e_distanceJoint ;
			this.localAnchorA = B2Vec2.Get(0,0) ;
			this.localAnchorB = B2Vec2.Get(0,0) ;
			this.userData = null ;
			if( bA !== undefined ){this.bodyA = bA ;}
			if( bB !== undefined ){this.bodyB = bB ;}
			if( anchorA !== undefined ){this.localAnchorA.SetV(anchorA) ;}
			if( anchorB !== undefined ){this.localAnchorB.SetV(anchorB) ;}
			if( anchorA !== undefined && anchorB !== undefined ){
				var dX = anchorB.x - anchorA.x ;
				var dY = anchorB.y - anchorA.y ;
				this.length = Math.sqrt(dX * dX + dY * dY) ;
			}
			this.frequencyHz  = 0.0 ;
			this.dampingRatio = 0.0 ;
		};
		Box2D.Dynamics.Joints.b2DistanceJointDef = B2DistanceJointDef ;
		var B2RevoluteJointDef = function( bA , bB , anchorA , anchorB ) {
			this.type = B2Joint.e_revoluteJoint ;
			this.localAnchorA = new B2Vec2() ;
			this.localAnchorB = new B2Vec2() ;
			this.userData = null ;
			if( bA !== undefined ){this.bodyA = bA ;}
			if( bB !== undefined ){this.bodyB = bB ;}
			if( anchorA !== undefined ){this.localAnchorA.SetV(anchorA) ;}
			if( anchorB !== undefined ){this.localAnchorB.SetV(anchorB) ;}
			this.referenceAngle = 0.0;
			this.lowerAngle = 0.0;
			this.upperAngle = 0.0;
			this.maxMotorTorque = 0.0;
			this.motorSpeed = 0.0;
			this.enableLimit = false;
			this.enableMotor = false;
		};
		B2RevoluteJointDef.prototype.Initialize = function (bA, bB, anchor) {
			this.bodyA = bA;
			this.bodyB = bB;
			this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
			this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
			this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
		};
		Box2D.Dynamics.Joints.b2RevoluteJointDef = B2RevoluteJointDef ;
	})();
	}
}
else
{
	Box2D.Collision.b2Collision = {};
	Box2D.Collision.b2Distance = {};
	Box2D.Common.b2Settings = {};
	Box2D.Common.Math.b2Math = {};
	Box2D.Consts = {};
	Box2D.Dynamics.Contacts = {};
	Box2D.Dynamics.Controllers = {};
	/**
	 * Creates a callback function
	 * @param {!Object} context The context ('this' variable) of the callback function
	 * @param {function(...[*])} fn The function to execute with the given context for the returned callback
	 * @return {function()} The callback function
	 */
	Box2D.generateCallback = function(context, fn) {
		return function() {
			fn.apply(context, arguments);
		};
	};
	/**
	 * @type {number}
	 * @const
	 */
	Box2D.Consts.MIN_VALUE_SQUARED = Number.MIN_VALUE * Number.MIN_VALUE;
	/**
	 * @param {number} friction1
	 * @param {number} friction2
	 */
	Box2D.Common.b2Settings.b2MixFriction = function (friction1, friction2) {
		return Math.sqrt(friction1 * friction2);
	};
	/**
	 * @param {number} restitution1
	 * @param {number} restitution2
	 */
	Box2D.Common.b2Settings.b2MixRestitution = function (restitution1, restitution2) {
		return restitution1 > restitution2 ? restitution1 : restitution2;
	};
	Box2D.Common.b2Settings.VERSION = "2.1alpha-illandril";
	Box2D.Common.b2Settings.USHRT_MAX = 0x0000ffff;
	Box2D.Common.b2Settings.b2_maxManifoldPoints = 2;
	Box2D.Common.b2Settings.b2_aabbExtension = 0.1;
	Box2D.Common.b2Settings.b2_aabbMultiplier = 2.0;
	Box2D.Common.b2Settings.b2_polygonRadius = 2.0 * Box2D.Common.b2Settings.b2_linearSlop;
	Box2D.Common.b2Settings.b2_linearSlop = 0.005;
	Box2D.Common.b2Settings.b2_angularSlop = 2.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_toiSlop = 8.0 * Box2D.Common.b2Settings.b2_linearSlop;
	Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland = 32;
	Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland = 32;
	Box2D.Common.b2Settings.b2_velocityThreshold = 1.0;
	Box2D.Common.b2Settings.b2_maxLinearCorrection = 0.2;
	Box2D.Common.b2Settings.b2_maxAngularCorrection = 8.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_maxTranslation = 2.0;
	Box2D.Common.b2Settings.b2_maxTranslationSquared = Box2D.Common.b2Settings.b2_maxTranslation * Box2D.Common.b2Settings.b2_maxTranslation;
	Box2D.Common.b2Settings.b2_maxRotation = 0.5 * Math.PI;
	Box2D.Common.b2Settings.b2_maxRotationSquared = Box2D.Common.b2Settings.b2_maxRotation * Box2D.Common.b2Settings.b2_maxRotation;
	Box2D.Common.b2Settings.b2_contactBaumgarte = 0.2;
	Box2D.Common.b2Settings.b2_timeToSleep = 0.5;
	Box2D.Common.b2Settings.b2_linearSleepTolerance = 0.01;
	Box2D.Common.b2Settings.b2_linearSleepToleranceSquared = Box2D.Common.b2Settings.b2_linearSleepTolerance * Box2D.Common.b2Settings.b2_linearSleepTolerance;
	Box2D.Common.b2Settings.b2_angularSleepTolerance = 2.0 / 180.0 * Math.PI;
	Box2D.Common.b2Settings.b2_angularSleepToleranceSquared = Box2D.Common.b2Settings.b2_angularSleepTolerance * Box2D.Common.b2Settings.b2_angularSleepTolerance;
	Box2D.Common.b2Settings.MIN_VALUE_SQUARED = Number.MIN_VALUE * Number.MIN_VALUE;
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Dot = function (a, b) {
	  return a.x * b.x + a.y * b.y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.CrossVV = function (a, b) {
	  return a.x * b.y - a.y * b.x;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {number} s
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.CrossVF = function (a, s) {
	  return Box2D.Common.Math.b2Vec2.Get(s * a.y, (-s * a.x));
	};
	/**
	 * @param {number} s
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.CrossFV = function (s, a) {
	  return Box2D.Common.Math.b2Vec2.Get((-s * a.y), s * a.x);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulMV = function (A, v) {
	  return Box2D.Common.Math.b2Vec2.Get(A.col1.x * v.x + A.col2.x * v.y, A.col1.y * v.x + A.col2.y * v.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulTMV = function (A, v) {
	  return Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(v, A.col1), Box2D.Common.Math.b2Math.Dot(v, A.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} T
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulX = function (T, v) {
	  var a = Box2D.Common.Math.b2Math.MulMV(T.R, v);
	  a.x += T.position.x;
	  a.y += T.position.y;
	  return a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} T
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulXT = function (T, v) {
	  var a = Box2D.Common.Math.b2Math.SubtractVV(v, T.position);
	  var tX = (a.x * T.R.col1.x + a.y * T.R.col1.y);
	  a.y = (a.x * T.R.col2.x + a.y * T.R.col2.y);
	  a.x = tX;
	  return a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.AddVV = function (a, b) {
	  return Box2D.Common.Math.b2Vec2.Get(a.x + b.x, a.y + b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.SubtractVV = function (a, b) {
	  return Box2D.Common.Math.b2Vec2.Get(a.x - b.x, a.y - b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Distance = function (a, b) {
	  var cX = a.x - b.x;
	  var cY = a.y - b.y;
	  return Math.sqrt(Box2D.Common.Math.b2Math.DistanceSquared(a,b));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.DistanceSquared = function (a, b) {
	  var cX = a.x - b.x;
	  var cY = a.y - b.y;
	  return (cX * cX + cY * cY);
	};
	/**
	 * @param {number} s
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.MulFV = function (s, a) {
	  return Box2D.Common.Math.b2Vec2.Get(s * a.x, s * a.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.AddMM = function (A, B) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AddVV(A.col1, B.col1), Box2D.Common.Math.b2Math.AddVV(A.col2, B.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.MulMM = function (A, B) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.MulMV(A, B.col1), Box2D.Common.Math.b2Math.MulMV(A, B.col2));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @param {!Box2D.Common.Math.b2Mat22} B
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.MulTMM = function (A, B) {
	  var c1 = Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(A.col1, B.col1), Box2D.Common.Math.b2Math.Dot(A.col2, B.col1));
	  var c2 = Box2D.Common.Math.b2Vec2.Get(Box2D.Common.Math.b2Math.Dot(A.col1, B.col2), Box2D.Common.Math.b2Math.Dot(A.col2, B.col2));
	  return Box2D.Common.Math.b2Mat22.FromVV(c1, c2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.AbsV = function (a) {
	  return Box2D.Common.Math.b2Vec2.Get(Math.abs(a.x), Math.abs(a.y));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} A
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Math.AbsM = function (A) {
	  return Box2D.Common.Math.b2Mat22.FromVV(Box2D.Common.Math.b2Math.AbsV(A.col1), Box2D.Common.Math.b2Math.AbsV(A.col2));
	};
	/**
	 * @param {number} a
	 * @param {number} low
	 * @param {number} high
	 * @return {number}
	 */
	Box2D.Common.Math.b2Math.Clamp = function (a, low, high) {
	  return a < low ? low : a > high ? high : a;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} a
	 * @param {!Box2D.Common.Math.b2Vec2} low
	 * @param {!Box2D.Common.Math.b2Vec2} high
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Math.ClampV = function (a, low, high) {
		var x = Box2D.Common.Math.b2Math.Clamp(a.x, low.x, high.x);
		var y = Box2D.Common.Math.b2Math.Clamp(a.y, low.y, high.y);
	  return Box2D.Common.Math.b2Vec2.Get(x, y);
	};
	/**
	 * @constructor
	 */
	Box2D.Common.Math.b2Mat22 = function() {
		this.col1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.col2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.SetIdentity();
	};
	/**
	 * @param {number} angle
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.FromAngle = function(angle) {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.Set(angle);
		return mat;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} c1
	 * @param {!Box2D.Common.Math.b2Vec2} c2
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.FromVV = function(c1, c2) {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.SetVV(c1, c2);
		return mat;
	};
	/**
	 * @param {number} angle
	 */
	Box2D.Common.Math.b2Mat22.prototype.Set = function(angle) {
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		this.col1.Set(c, s);
		this.col2.Set(-s, c);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} c1
	 * @param {!Box2D.Common.Math.b2Vec2} c2
	 */
	Box2D.Common.Math.b2Mat22.prototype.SetVV = function(c1, c2) {
		this.col1.SetV(c1);
		this.col2.SetV(c2);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.prototype.Copy = function() {
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.SetM(this);
		return mat;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} m
	 */
	Box2D.Common.Math.b2Mat22.prototype.SetM = function(m) {
		this.col1.SetV(m.col1);
		this.col2.SetV(m.col2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} m
	 */
	Box2D.Common.Math.b2Mat22.prototype.AddM = function(m) {
		this.col1.Add(m.col1);
		this.col2.Add(m.col2);
	};
	Box2D.Common.Math.b2Mat22.prototype.SetIdentity = function() {
		this.col1.Set(1, 0);
		this.col2.Set(0, 1);
	};
	Box2D.Common.Math.b2Mat22.prototype.SetZero = function() {
		this.col1.Set(0, 0);
		this.col2.Set(0, 0);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Mat22.prototype.GetAngle = function() {
		return Math.atan2(this.col1.y, this.col1.x);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat22} out
	 * @return {!Box2D.Common.Math.b2Mat22}
	 */
	Box2D.Common.Math.b2Mat22.prototype.GetInverse = function(out) {
		var det = this.col1.x * this.col2.y - this.col2.x * this.col1.y;
		if (det !== 0) {
			det = 1 / det;
		}
		out.col1.x = det * this.col2.y;
		out.col2.x = -det * this.col2.x;
		out.col1.y = -det * this.col1.y;
		out.col2.y = det * this.col1.x;
		return out;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} out
	 * @param {number} bX
	 * @param {number} bY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Mat22.prototype.Solve = function(out, bX, bY) {
		var det = this.col1.x * this.col2.y - this.col2.x * this.col1.y;
		if (det !== 0) {
			det = 1 / det;
		}
		out.x = det * (this.col2.y * bX - this.col2.x * bY);
		out.y = det * (this.col1.x * bY - this.col1.y * bX);
		return out;
	};
	Box2D.Common.Math.b2Mat22.prototype.Abs = function() {
		this.col1.Abs();
		this.col2.Abs();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3=} c1
	 * @param {!Box2D.Common.Math.b2Vec3=} c2
	 * @param {!Box2D.Common.Math.b2Vec3=} c3
	 * @constructor
	 */
	Box2D.Common.Math.b2Mat33 = function(c1, c2, c3) {
		this.col1 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.col2 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.col3 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		if (c1) {
			this.col1.SetV(c1);
		}
		if (c2) {
			this.col2.SetV(c2);
		}
		if (c3) {
			this.col3.SetV(c3);
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} c1
	 * @param {!Box2D.Common.Math.b2Vec3} c2
	 * @param {!Box2D.Common.Math.b2Vec3} c3
	 */
	Box2D.Common.Math.b2Mat33.prototype.SetVVV = function(c1, c2, c3) {
		this.col1.SetV(c1);
		this.col2.SetV(c2);
		this.col3.SetV(c3);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Mat33}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Copy = function() {
		return new Box2D.Common.Math.b2Mat33(this.col1, this.col2, this.col3);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat33} m
	 */
	Box2D.Common.Math.b2Mat33.prototype.SetM = function(m) {
		this.col1.SetV(m.col1);
		this.col2.SetV(m.col2);
		this.col3.SetV(m.col3);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Mat33} m
	 */
	Box2D.Common.Math.b2Mat33.prototype.AddM = function(m) {
		this.col1.x += m.col1.x;
		this.col1.y += m.col1.y;
		this.col1.z += m.col1.z;
		this.col2.x += m.col2.x;
		this.col2.y += m.col2.y;
		this.col2.z += m.col2.z;
		this.col3.x += m.col3.x;
		this.col3.y += m.col3.y;
		this.col3.z += m.col3.z;
	};
	Box2D.Common.Math.b2Mat33.prototype.SetIdentity = function() {
		this.col1.Set(1,0,0);
		this.col2.Set(0,1,0);
		this.col3.Set(0,0,1);
	};
	Box2D.Common.Math.b2Mat33.prototype.SetZero = function() {
		this.col1.Set(0,0,0);
		this.col2.Set(0,0,0);
		this.col3.Set(0,0,0);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} out
	 * @param {number} bX
	 * @param {number} bY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Solve22 = function(out, bX, bY) {
		var a11 = this.col1.x;
		var a12 = this.col2.x;
		var a21 = this.col1.y;
		var a22 = this.col2.y;
		var det = a11 * a22 - a12 * a21;
		if (det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (a22 * bX - a12 * bY);
		out.y = det * (a11 * bY - a21 * bX);
		return out;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} out
	 * @param {number} bX
	 * @param {number} bY
	 * @param {number} bZ
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Mat33.prototype.Solve33 = function(out, bX, bY, bZ) {
		var a11 = this.col1.x;
		var a21 = this.col1.y;
		var a31 = this.col1.z;
		var a12 = this.col2.x;
		var a22 = this.col2.y;
		var a32 = this.col2.z;
		var a13 = this.col3.x;
		var a23 = this.col3.y;
		var a33 = this.col3.z;
		var det = a11 * (a22 * a33 - a32 * a23) + a21 * (a32 * a13 - a12 * a33) + a31 * (a12 * a23 - a22 * a13);
		if (det != 0.0) {
			det = 1.0 / det;
		}
		out.x = det * (bX * (a22 * a33 - a32 * a23) + bY * (a32 * a13 - a12 * a33) + bZ * (a12 * a23 - a22 * a13));
		out.y = det * (a11 * (bY * a33 - bZ * a23) + a21 * (bZ * a13 - bX * a33) + a31 * (bX * a23 - bY * a13));
		out.z = det * (a11 * (a22 * bZ - a32 * bY) + a21 * (a32 * bX - a12 * bZ) + a31 * (a12 * bY - a22 * bX));
		return out;
	}
	/**
	 * @constructor
	 */
	Box2D.Common.Math.b2Sweep = function() {
		this.localCenter = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.c0 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.c = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Common.Math.b2Sweep.prototype.Set = function(other) {
		this.localCenter.SetV(other.localCenter);
		this.c0.SetV(other.c0);
		this.c.SetV(other.c);
		this.a0 = other.a0;
		this.a = other.a;
		this.t0 = other.t0;
	};
	Box2D.Common.Math.b2Sweep.prototype.Copy = function() {
		var copy = new Box2D.Common.Math.b2Sweep();
		copy.localCenter.SetV(this.localCenter);
		copy.c0.SetV(this.c0);
		copy.c.SetV(this.c);
		copy.a0 = this.a0;
		copy.a = this.a;
		copy.t0 = this.t0;
		return copy;
	};
	Box2D.Common.Math.b2Sweep.prototype.GetTransform = function(xf, alpha) {
		if (alpha === undefined) alpha = 0;
		xf.position.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
		xf.position.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
		var angle = (1.0 - alpha) * this.a0 + alpha * this.a;
		xf.R.Set(angle);
		var tMat = xf.R;
		xf.position.x -= (tMat.col1.x * this.localCenter.x + tMat.col2.x * this.localCenter.y);
		xf.position.y -= (tMat.col1.y * this.localCenter.x + tMat.col2.y * this.localCenter.y);
	};
	Box2D.Common.Math.b2Sweep.prototype.Advance = function(t) {
		if (t === undefined) t = 0;
		if (this.t0 < t && 1.0 - this.t0 > Number.MIN_VALUE) {
			var alpha = (t - this.t0) / (1.0 - this.t0);
			this.c0.x = (1.0 - alpha) * this.c0.x + alpha * this.c.x;
			this.c0.y = (1.0 - alpha) * this.c0.y + alpha * this.c.y;
			this.a0 = (1.0 - alpha) * this.a0 + alpha * this.a;
			this.t0 = t;
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2=} pos
	 * @param {!Box2D.Common.Math.b2Mat22=} r
	 * @constructor
	 */
	Box2D.Common.Math.b2Transform = function(pos, r) {
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.R = new Box2D.Common.Math.b2Mat22();
		if (pos) {
			this.position.SetV(pos);
		}
		if (r) {
			this.R.SetM(r);
		}
	};
	Box2D.Common.Math.b2Transform.prototype.Initialize = function(pos, r) {
		this.position.SetV(pos);
		this.R.SetM(r);
	};
	Box2D.Common.Math.b2Transform.prototype.SetIdentity = function() {
		this.position.SetZero();
		this.R.SetIdentity();
	};
	Box2D.Common.Math.b2Transform.prototype.Set = function(x) {
		this.position.SetV(x.position);
		this.R.SetM(x.R);
	};
	Box2D.Common.Math.b2Transform.prototype.GetAngle = function() {
		return Math.atan2(this.R.col1.y, this.R.col1.x);
	};
	/**
	 * @private
	 * @param {number} x
	 * @param {number} y
	 * @constructor
	 */
	Box2D.Common.Math.b2Vec2 = function(x, y) {
		this.x = x;
		this.y = y;
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Common.Math.b2Vec2._freeCache = [];
	/**
	 * @param {number} x
	 * @param {number} y
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.Get = function(x, y) {
		if (Box2D.Common.Math.b2Vec2._freeCache.length > 0) {
			var vec = Box2D.Common.Math.b2Vec2._freeCache.pop();
			vec.Set(x, y);
			return vec;
		}
		return new Box2D.Common.Math.b2Vec2(x, y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} vec
	 */
	Box2D.Common.Math.b2Vec2.Free = function(vec) {
		Box2D.Common.Math.b2Vec2._freeCache.push(vec);
	};
	Box2D.Common.Math.b2Vec2.prototype.SetZero = function() {
		this.x = 0.0;
		this.y = 0.0;
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 */
	Box2D.Common.Math.b2Vec2.prototype.Set = function(x, y) {
		this.x = x;
		this.y = y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.SetV = function(v) {
		this.x = v.x;
		this.y = v.y;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.prototype.GetNegative = function() {
		return Box2D.Common.Math.b2Vec2.Get((-this.x), (-this.y));
	};
	Box2D.Common.Math.b2Vec2.prototype.NegativeSelf = function() {
		this.x = (-this.x);
		this.y = (-this.y);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Copy = function() {
		return Box2D.Common.Math.b2Vec2.Get(this.x, this.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.Add = function(v) {
		this.x += v.x;
		this.y += v.y;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v
	 */
	Box2D.Common.Math.b2Vec2.prototype.Subtract = function(v) {
		this.x -= v.x;
		this.y -= v.y;
	};
	/**
	 * @param {number} a
	 */
	Box2D.Common.Math.b2Vec2.prototype.Multiply = function(a) {
		this.x *= a;
		this.y *= a;
	};
	/**
	 * @param {Box2D.Common.Math.b2Mat22} A
	 */
	Box2D.Common.Math.b2Vec2.prototype.MulM = function(A) {
		var tX = this.x;
		this.x = A.col1.x * tX + A.col2.x * this.y;
		this.y = A.col1.y * tX + A.col2.y * this.y;
	};
	/**
	 * @param {Box2D.Common.Math.b2Mat22} A
	 */
	Box2D.Common.Math.b2Vec2.prototype.MulTM = function(A) {
		var tX = this.x * A.col1.x + this.y * A.col1.y;
		this.y = this.x * A.col2.x + this.y * A.col2.y;
		this.x = tX;
	};
	/**
	 * @param {number} s
	 */
	Box2D.Common.Math.b2Vec2.prototype.CrossVF = function(s) {
		var tX = this.x;
		this.x = s * this.y;
		this.y = (-s * tX);
	};
	/**
	 * @param {number} s
	 */
	Box2D.Common.Math.b2Vec2.prototype.CrossFV = function(s) {
		var tX = this.x;
		this.x = (-s * this.y);
		this.y = s * tX;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 */
	Box2D.Common.Math.b2Vec2.prototype.MinV = function(b) {
		this.x = Math.min(this.x, b.x);
		this.y = Math.min(this.y, b.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} b
	 */
	Box2D.Common.Math.b2Vec2.prototype.MaxV = function(b) {
		this.x = Math.max(this.x, b.x);
		this.y = Math.max(this.y, b.y);
	};
	Box2D.Common.Math.b2Vec2.prototype.Abs = function() {
		this.x = Math.abs(this.x);
		this.y = Math.abs(this.y);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Length = function() {
		return Math.sqrt(this.LengthSquared());
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.LengthSquared = function() {
		return (this.x * this.x + this.y * this.y);
	};
	/**
	 * @return {number}
	 */
	Box2D.Common.Math.b2Vec2.prototype.Normalize = function() {
		var length = this.Length();
		if (length < Number.MIN_VALUE) {
			return 0.0;
		}
		var invLength = 1.0 / length;
		this.x *= invLength;
		this.y *= invLength;
		return length;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Common.Math.b2Vec2.prototype.IsValid = function () {
	  return isFinite(this.x) && isFinite(this.y);
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 * @param {number} z
	 * @constructor
	 */
	Box2D.Common.Math.b2Vec3 = function(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
	};
	Box2D.Common.Math.b2Vec3.prototype.SetZero = function() {
		this.x = 0;
		this.y = 0;
		this.z = 0;
	};
	/**
	 * @param {number} x
	 * @param {number} y
	 * @param {number} z
	 */
	Box2D.Common.Math.b2Vec3.prototype.Set = function(x, y, z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.SetV = function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Vec3.prototype.GetNegative = function() {
		return new Box2D.Common.Math.b2Vec3((-this.x), (-this.y), (-this.z));
	};
	Box2D.Common.Math.b2Vec3.prototype.NegativeSelf = function() {
		this.x = (-this.x);
		this.y = (-this.y);
		this.z = (-this.z);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec3}
	 */
	Box2D.Common.Math.b2Vec3.prototype.Copy = function() {
		return new Box2D.Common.Math.b2Vec3(this.x, this.y, this.z);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.Add = function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec3} v
	 */
	Box2D.Common.Math.b2Vec3.prototype.Subtract = function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
	};
	/**
	 * @param {number} a
	 */
	Box2D.Common.Math.b2Vec3.prototype.Multiply = function(a) {
		this.x *= a;
		this.y *= a;
		this.z *= a;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2Shape = function() {
		this.m_radius = Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.GetTypeName = function(){};
	/**
	 * @return {!Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.Copy = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.Set = function(other) {
		this.m_radius = other.m_radius;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.TestPoint = function(){};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.RayCast = function(){};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeAABB = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeMass = function(){};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.ComputeSubmergedArea = function(){};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2Shape.prototype.SetDistanceProxy = function(){};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} shape1
	 * @param {!Box2D.Common.Math.b2Transform} transform1
	 * @param {!Box2D.Collision.Shapes.b2Shape} shape2
	 * @param {!Box2D.Common.Math.b2Transform} transform2
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2Shape.TestOverlap = function(shape1, transform1, shape2, transform2) {
		var input = new Box2D.Collision.b2DistanceInput();
		input.proxyA = new Box2D.Collision.b2DistanceProxy();
		input.proxyA.Set(shape1);
		input.proxyB = new Box2D.Collision.b2DistanceProxy();
		input.proxyB.Set(shape2);
		input.transformA = transform1;
		input.transformB = transform2;
		input.useRadii = true;
		var simplexCache = new Box2D.Collision.b2SimplexCache();
		simplexCache.count = 0;
		var output = new Box2D.Collision.b2DistanceOutput();
		Box2D.Collision.b2Distance.Distance(output, simplexCache, input);
		return output.distance < 10.0 * Number.MIN_VALUE;
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_startsInsideCollide = -1;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_missCollide = 0;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Collision.Shapes.b2Shape.e_hitCollide = 1;
	/**
	 * @param {number} radius
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2CircleShape = function(radius) {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {number} */
		this.m_radius = radius;
		/** @type {number} */
		this.m_radiusSquared = radius * radius;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_p = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Collision.Shapes.b2CircleShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2CircleShape.NAME;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2CircleShape}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.Copy = function() {
		var s = new Box2D.Collision.Shapes.b2CircleShape(this.m_radius);
		s.Set(this);
		return s;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.Set = function(other) {
		Box2D.Collision.Shapes.b2Shape.prototype.Set.call(this, other);
		if (other instanceof Box2D.Collision.Shapes.b2CircleShape) {
			this.m_p.SetV(other.m_p);
		}
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.TestPoint = function(transform, p) {
		var tMat = transform.R;
		var dX = p.x - (transform.position.x + (transform.R.col1.x * this.m_p.x + transform.R.col2.x * this.m_p.y));
		var dY = p.y - (transform.position.y + (transform.R.col1.y * this.m_p.x + transform.R.col2.y * this.m_p.y));
		return (dX * dX + dY * dY) <= this.m_radiusSquared;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.RayCast = function(output, input, transform) {
		var tMat = transform.R;
		var positionX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var positionY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		var sX = input.p1.x - positionX;
		var sY = input.p1.y - positionY;
		var b = (sX * sX + sY * sY) - this.m_radiusSquared;
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var c = (sX * rX + sY * rY);
		var rr = (rX * rX + rY * rY);
		var sigma = c * c - rr * b;
		if (sigma < 0.0 || rr < Number.MIN_VALUE) {
			return false;
		}
		var a = (-(c + Math.sqrt(sigma)));
		if (0.0 <= a && a <= input.maxFraction * rr) {
			a /= rr;
			output.fraction = a;
			output.normal.x = sX + a * rX;
			output.normal.y = sY + a * rY;
			output.normal.Normalize();
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeAABB = function(aabb, transform) {
		var tMat = transform.R;
		var pX = transform.position.x + (tMat.col1.x * this.m_p.x + tMat.col2.x * this.m_p.y);
		var pY = transform.position.y + (tMat.col1.y * this.m_p.x + tMat.col2.y * this.m_p.y);
		aabb.lowerBound_.Set(pX - this.m_radius, pY - this.m_radius);
		aabb.upperBound_.Set(pX + this.m_radius, pY + this.m_radius);
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeMass = function(massData, density) {
		massData.mass = density * Math.PI * this.m_radiusSquared;
		massData.center.SetV(this.m_p);
		massData.I = massData.mass * (0.5 * this.m_radiusSquared + (this.m_p.x * this.m_p.x + this.m_p.y * this.m_p.y));
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		var p = Box2D.Common.Math.b2Math.MulX(xf, this.m_p);
		var l = (-(Box2D.Common.Math.b2Math.Dot(normal, p) - offset));
		if (l < (-this.m_radius) + Number.MIN_VALUE) {
			return 0;
		}
		if (l > this.m_radius) {
			c.SetV(p);
			return Math.PI * this.m_radiusSquared;
		}
		var l2 = l * l;
		var area = this.m_radiusSquared * (Math.asin(l / this.m_radius) + Math.PI / 2) + l * Math.sqrt(this.m_radiusSquared - l2);
		var com = (-2 / 3 * Math.pow(this.m_radiusSquared - l2, 1.5) / area);
		c.x = p.x + normal.x * com;
		c.y = p.y + normal.y * com;
		return area;
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetDistanceProxy = function(proxy) {
		proxy.m_vertices = [this.m_p];
		proxy.m_count = 1;
		proxy.m_radius = this.m_radius;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetLocalPosition = function() {
		return this.m_p;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetLocalPosition = function(position) {
		this.m_p.SetV(position);
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.GetRadius = function() {
		return this.m_radius;
	};
	/**
	 * @param {number} radius
	 */
	Box2D.Collision.Shapes.b2CircleShape.prototype.SetRadius = function(radius) {
		this.m_radius = radius;
		this.m_radiusSquared = radius * radius;
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2CircleShape.NAME = 'b2CircleShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2EdgeChainDef = function() {
		/** @type {number} */
		this.vertexCount = 0;
		/** @type {boolean} */
		this.isALoop = true;
		/** @type {Array.<Box2D.Common.Math.b2Vec2} */
		this.vertices = [];
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape = function(v1, v2) {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {Box2D.Collision.Shapes.b2EdgeShape} */
		this.m_prevEdge = null;
		/** @type {Box2D.Collision.Shapes.b2EdgeShape} */
		this.m_nextEdge = null;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_v1 = v1;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_v2 = v2;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_direction = Box2D.Common.Math.b2Vec2.Get(this.m_v2.x - this.m_v1.x, this.m_v2.y - this.m_v1.y);
		/** @type {number} */
		this.m_length = this.m_direction.Normalize();
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(this.m_direction.y, -this.m_direction.x);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_coreV1 = Box2D.Common.Math.b2Vec2.Get((-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.x - this.m_direction.x)) + this.m_v1.x, (-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.y - this.m_direction.y)) + this.m_v1.y);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_coreV2 = Box2D.Common.Math.b2Vec2.Get((-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.x + this.m_direction.x)) + this.m_v2.x, (-Box2D.Common.b2Settings.b2_toiSlop * (this.m_normal.y + this.m_direction.y)) + this.m_v2.y);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_cornerDir1 = this.m_normal;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_cornerDir2 = Box2D.Common.Math.b2Vec2.Get(-this.m_normal.x, -this.m_normal.y);
		/** @type {boolean} */
		this.m_cornerConvex1 = false;
		/** @type {boolean} */
		this.m_cornerConvex2 = false;
	};
	c2inherit(Box2D.Collision.Shapes.b2EdgeShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2EdgeShape.NAME;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.TestPoint = function(transform, p) {
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.RayCast = function(output, input, transform) {
		var rX = input.p2.x - input.p1.x;
		var rY = input.p2.y - input.p1.y;
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var nX = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y) - v1Y;
		var nY = (-(transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y) - v1X));
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = (-(rX * nX + rY * nY));
		if (denom > k_slop) {
			var bX = input.p1.x - v1X;
			var bY = input.p1.y - v1Y;
			var a = (bX * nX + bY * nY);
			if (0.0 <= a && a <= input.maxFraction * denom) {
				var mu2 = (-rX * bY) + rY * bX;
				if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					output.fraction = a;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					output.normal.x = nX / nLen;
					output.normal.y = nY / nLen;
					return true;
				}
			}
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeAABB = function(aabb, transform) {
		var tMat = transform.R;
		var v1X = transform.position.x + (tMat.col1.x * this.m_v1.x + tMat.col2.x * this.m_v1.y);
		var v1Y = transform.position.y + (tMat.col1.y * this.m_v1.x + tMat.col2.y * this.m_v1.y);
		var v2X = transform.position.x + (tMat.col1.x * this.m_v2.x + tMat.col2.x * this.m_v2.y);
		var v2Y = transform.position.y + (tMat.col1.y * this.m_v2.x + tMat.col2.y * this.m_v2.y);
		if (v1X < v2X) {
			aabb.lowerBound_.x = v1X;
			aabb.upperBound_.x = v2X;
		} else {
			aabb.lowerBound_.x = v2X;
			aabb.upperBound_.x = v1X;
		}
		if (v1Y < v2Y) {
			aabb.lowerBound_.y = v1Y;
			aabb.upperBound_.y = v2Y;
		} else {
			aabb.lowerBound_.y = v2Y;
			aabb.upperBound_.y = v1Y;
		}
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeMass = function(massData, density) {
		massData.mass = 0;
		massData.center.SetV(this.m_v1);
		massData.I = 0;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		if (offset === undefined) offset = 0;
		var v0 = Box2D.Common.Math.b2Vec2.Get(normal.x * offset, normal.y * offset);
		var v1 = Box2D.Common.Math.b2Math.MulX(xf, this.m_v1);
		var v2 = Box2D.Common.Math.b2Math.MulX(xf, this.m_v2);
		var d1 = Box2D.Common.Math.b2Math.Dot(normal, v1) - offset;
		var d2 = Box2D.Common.Math.b2Math.Dot(normal, v2) - offset;
		if (d1 > 0) {
			if (d2 > 0) {
				return 0;
			} else {
				v1.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
				v1.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
			}
		} else {
			if (d2 > 0) {
				v2.x = (-d2 / (d1 - d2) * v1.x) + d1 / (d1 - d2) * v2.x;
				v2.y = (-d2 / (d1 - d2) * v1.y) + d1 / (d1 - d2) * v2.y;
			}
		}
		c.x = (v0.x + v1.x + v2.x) / 3;
		c.y = (v0.y + v1.y + v2.y) / 3;
		return 0.5 * ((v1.x - v0.x) * (v2.y - v0.y) - (v1.y - v0.y) * (v2.x - v0.x));
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetLength = function() {
		return this.m_length;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetVertex1 = function() {
		return this.m_v1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetVertex2 = function() {
		return this.m_v2;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCoreVertex1 = function() {
		return this.m_coreV1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCoreVertex2 = function() {
		return this.m_coreV2;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetNormalVector = function() {
		return this.m_normal;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetDirectionVector = function() {
		return this.m_direction;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCorner1Vector = function() {
		return this.m_cornerDir1;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetCorner2Vector = function() {
		return this.m_cornerDir2;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Corner1IsConvex = function() {
		return this.m_cornerConvex1;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Corner2IsConvex = function() {
		return this.m_cornerConvex2;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetFirstVertex = function(xf) {
		var tMat = xf.R;
		return Box2D.Common.Math.b2Vec2.Get(xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y), xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y));
	};
	/**
	 * @return {Box2D.Collision.Shapes.b2EdgeShape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetNextEdge = function() {
		return this.m_nextEdge;
	};
	/**
	 * @return {Box2D.Collision.Shapes.b2EdgeShape}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.GetPrevEdge = function() {
		return this.m_prevEdge;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {number} dX
	 * @param {number} dY
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.Support = function(xf, dX, dY) {
		var tMat = xf.R;
		var v1X = xf.position.x + (tMat.col1.x * this.m_coreV1.x + tMat.col2.x * this.m_coreV1.y);
		var v1Y = xf.position.y + (tMat.col1.y * this.m_coreV1.x + tMat.col2.y * this.m_coreV1.y);
		var v2X = xf.position.x + (tMat.col1.x * this.m_coreV2.x + tMat.col2.x * this.m_coreV2.y);
		var v2Y = xf.position.y + (tMat.col1.y * this.m_coreV2.x + tMat.col2.y * this.m_coreV2.y);
		if ((v1X * dX + v1Y * dY) > (v2X * dX + v2Y * dY)) {
			return Box2D.Common.Math.b2Vec2.Get(v1X, v1Y);
		} else {
			return Box2D.Common.Math.b2Vec2.Get(v2X, v2Y);
		}
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2EdgeShape} edge
	 * @param {!Box2D.Common.Math.b2Vec2} core
	 * @param {!Box2D.Common.Math.b2Vec2} cornerDir
	 * @param {boolean} convex
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.SetPrevEdge = function(edge, core, cornerDir, convex) {
		this.m_prevEdge = edge;
		this.m_coreV1 = core;
		this.m_cornerDir1 = cornerDir;
		this.m_cornerConvex1 = convex;
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2EdgeShape} edge
	 * @param {!Box2D.Common.Math.b2Vec2} core
	 * @param {!Box2D.Common.Math.b2Vec2} cornerDir
	 * @param {boolean} convex
	 */
	Box2D.Collision.Shapes.b2EdgeShape.prototype.SetNextEdge = function(edge, core, cornerDir, convex) {
		this.m_nextEdge = edge;
		this.m_coreV2 = core;
		this.m_cornerDir2 = cornerDir;
		this.m_cornerConvex2 = convex;
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2EdgeShape.NAME = 'b2EdgeShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.Shapes.b2MassData = function() {
		/** @type {number} */
		this.mass = 0;
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.I = 0;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape = function() {
		Box2D.Collision.Shapes.b2Shape.call(this);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.m_centroid = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_vertices = [];
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_normals = [];
	};
	c2inherit(Box2D.Collision.Shapes.b2PolygonShape, Box2D.Collision.Shapes.b2Shape);
	/**
	 * @return {string}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetTypeName = function() {
		return Box2D.Collision.Shapes.b2PolygonShape.NAME;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Copy = function() {
		var s = new Box2D.Collision.Shapes.b2PolygonShape();
		s.Set(this);
		return s;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2Shape} other
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Set = function(other) {
		Box2D.Collision.Shapes.b2Shape.prototype.Set.call(this, other);
		if (other instanceof Box2D.Collision.Shapes.b2PolygonShape) {
			this.m_centroid.SetV(other.m_centroid);
			this.m_vertexCount = other.m_vertexCount;
			this.Reserve(this.m_vertexCount);
			for (var i = 0; i < this.m_vertexCount; i++) {
				this.m_vertices[i].SetV(other.m_vertices[i]);
				this.m_normals[i].SetV(other.m_normals[i]);
			}
		}
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsArray = function(vertices) {
		this.SetAsVector(vertices);
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsArray = function(vertices) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsArray(vertices);
		return polygonShape;
	};
	/**
	 * @param {Array.<!Box2D.Common.Math.b2Vec2>} vertices
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsVector = function(vertices) {
		var vertexCount = vertices.length;
;
		this.m_vertexCount = vertexCount;
		this.Reserve(vertexCount);
		var i = 0;
		for (i = 0; i < this.m_vertexCount; i++) {
			this.m_vertices[i].SetV(vertices[i]);
		}
		for (i = 0; i < this.m_vertexCount; ++i) {
			var i1 = i;
			var i2 = i + 1 < this.m_vertexCount ? i + 1 : 0;
			var edge = Box2D.Common.Math.b2Math.SubtractVV(this.m_vertices[i2], this.m_vertices[i1]);
;
			this.m_normals[i].SetV(Box2D.Common.Math.b2Math.CrossVF(edge, 1.0));
			this.m_normals[i].Normalize();
		}
		this.m_centroid = Box2D.Collision.Shapes.b2PolygonShape.ComputeCentroid(this.m_vertices, this.m_vertexCount);
	};
	/**
	 * @param {Array.<Box2D.Common.Math.b2Vec2>} vertices
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsVector = function(vertices) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsVector(vertices);
		return polygonShape;
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsBox = function(hx, hy) {
		this.m_vertexCount = 4;
		this.Reserve(4);
		this.m_vertices[0].Set((-hx), (-hy));
		this.m_vertices[1].Set(hx, (-hy));
		this.m_vertices[2].Set(hx, hy);
		this.m_vertices[3].Set((-hx), hy);
		this.m_normals[0].Set(0.0, (-1.0));
		this.m_normals[1].Set(1.0, 0.0);
		this.m_normals[2].Set(0.0, 1.0);
		this.m_normals[3].Set((-1.0), 0.0);
		this.m_centroid.SetZero();
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsBox = function(hx, hy) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsBox(hx, hy);
		return polygonShape;
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @param {!Box2D.Common.Math.b2Vec2} center
	 * @param {number} angle
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsOrientedBox = function(hx, hy, center, angle) {
		this.m_vertexCount = 4;
		this.Reserve(4);
		this.m_vertices[0].Set((-hx), (-hy));
		this.m_vertices[1].Set(hx, (-hy));
		this.m_vertices[2].Set(hx, hy);
		this.m_vertices[3].Set((-hx), hy);
		this.m_normals[0].Set(0.0, (-1.0));
		this.m_normals[1].Set(1.0, 0.0);
		this.m_normals[2].Set(0.0, 1.0);
		this.m_normals[3].Set((-1.0), 0.0);
		this.m_centroid = center;
		var mat = new Box2D.Common.Math.b2Mat22();
		mat.Set(angle);
		var xf = new Box2D.Common.Math.b2Transform(center, mat);
		for (var i = 0; i < this.m_vertexCount; ++i) {
			this.m_vertices[i] = Box2D.Common.Math.b2Math.MulX(xf, this.m_vertices[i]);
			this.m_normals[i] = Box2D.Common.Math.b2Math.MulMV(xf.R, this.m_normals[i]);
		}
	};
	/**
	 * @param {number} hx
	 * @param {number} hy
	 * @param {!Box2D.Common.Math.b2Vec2} center
	 * @param {number} angle
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsOrientedBox = function(hx, hy, center, angle) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsOrientedBox(hx, hy, center, angle);
		return polygonShape;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetAsEdge = function(v1, v2) {
		this.m_vertexCount = 2;
		this.Reserve(2);
		this.m_vertices[0].SetV(v1);
		this.m_vertices[1].SetV(v2);
		this.m_centroid.x = 0.5 * (v1.x + v2.x);
		this.m_centroid.y = 0.5 * (v1.y + v2.y);
		this.m_normals[0] = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(v2, v1), 1.0);
		this.m_normals[0].Normalize();
		this.m_normals[1].x = (-this.m_normals[0].x);
		this.m_normals[1].y = (-this.m_normals[0].y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} v1
	 * @param {!Box2D.Common.Math.b2Vec2} v2
	 * @return {!Box2D.Collision.Shapes.b2PolygonShape}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.AsEdge = function(v1, v2) {
		var polygonShape = new Box2D.Collision.Shapes.b2PolygonShape();
		polygonShape.SetAsEdge(v1, v2);
		return polygonShape;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.TestPoint = function(xf, p) {
		var tVec;
		var tMat = xf.R;
		var tX = p.x - xf.position.x;
		var tY = p.y - xf.position.y;
		var pLocalX = (tX * tMat.col1.x + tY * tMat.col1.y);
		var pLocalY = (tX * tMat.col2.x + tY * tMat.col2.y);
		for (var i = 0; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			tX = pLocalX - tVec.x;
			tY = pLocalY - tVec.y;
			tVec = this.m_normals[i];
			var dot = (tVec.x * tX + tVec.y * tY);
			if (dot > 0.0) {
				return false;
			}
		}
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @param {!Box2D.Common.Math.b2Transform} transform
	 * @return {boolean}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.RayCast = function(output, input, transform) {
		var lower = 0.0;
		var upper = input.maxFraction;
		var tX = 0;
		var tY = 0;
		var tMat;
		var tVec;
		tX = input.p1.x - transform.position.x;
		tY = input.p1.y - transform.position.y;
		tMat = transform.R;
		var p1X = (tX * tMat.col1.x + tY * tMat.col1.y);
		var p1Y = (tX * tMat.col2.x + tY * tMat.col2.y);
		tX = input.p2.x - transform.position.x;
		tY = input.p2.y - transform.position.y;
		tMat = transform.R;
		var p2X = (tX * tMat.col1.x + tY * tMat.col1.y);
		var p2Y = (tX * tMat.col2.x + tY * tMat.col2.y);
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var index = -1;
		for (var i = 0; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			tX = tVec.x - p1X;
			tY = tVec.y - p1Y;
			tVec = this.m_normals[i];
			var numerator = (tVec.x * tX + tVec.y * tY);
			var denominator = (tVec.x * dX + tVec.y * dY);
			if (denominator == 0.0) {
				if (numerator < 0.0) {
					return false;
				}
			} else {
				if (denominator < 0.0 && numerator < lower * denominator) {
					lower = numerator / denominator;
					index = i;
				} else if (denominator > 0.0 && numerator < upper * denominator) {
					upper = numerator / denominator;
				}
			}
			if (upper < lower - Number.MIN_VALUE) {
				return false;
			}
		}
		if (index >= 0) {
			output.fraction = lower;
			tMat = transform.R;
			tVec = this.m_normals[index];
			output.normal.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			output.normal.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeAABB = function(aabb, xf) {
		var tMat = xf.R;
		var tVec = this.m_vertices[0];
		var lowerX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var lowerY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var upperX = lowerX;
		var upperY = lowerY;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			tVec = this.m_vertices[i];
			var vX = xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			var vY = xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			lowerX = lowerX < vX ? lowerX : vX;
			lowerY = lowerY < vY ? lowerY : vY;
			upperX = upperX > vX ? upperX : vX;
			upperY = upperY > vY ? upperY : vY;
		}
		aabb.lowerBound_.x = lowerX - this.m_radius;
		aabb.lowerBound_.y = lowerY - this.m_radius;
		aabb.upperBound_.x = upperX + this.m_radius;
		aabb.upperBound_.y = upperY + this.m_radius;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 * @param {number} density
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeMass = function(massData, density) {
		if (this.m_vertexCount == 2) {
			massData.center.x = 0.5 * (this.m_vertices[0].x + this.m_vertices[1].x);
			massData.center.y = 0.5 * (this.m_vertices[0].y + this.m_vertices[1].y);
			massData.mass = 0.0;
			massData.I = 0.0;
			return;
		}
		var centerX = 0.0;
		var centerY = 0.0;
		var area = 0.0;
		var I = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var k_inv3 = 1.0 / 3.0;
		for (var i = 0; i < this.m_vertexCount; ++i) {
			var p2 = this.m_vertices[i];
			var p3 = i + 1 < this.m_vertexCount ? this.m_vertices[i + 1] : this.m_vertices[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = e1X * e2Y - e1Y * e2X;
			var triangleArea = 0.5 * D;
			area += triangleArea;
			centerX += triangleArea * k_inv3 * (p1X + p2.x + p3.x);
			centerY += triangleArea * k_inv3 * (p1Y + p2.y + p3.y);
			var px = p1X;
			var py = p1Y;
			var ex1 = e1X;
			var ey1 = e1Y;
			var ex2 = e2X;
			var ey2 = e2Y;
			var intx2 = k_inv3 * (0.25 * (ex1 * ex1 + ex2 * ex1 + ex2 * ex2) + (px * ex1 + px * ex2)) + 0.5 * px * px;
			var inty2 = k_inv3 * (0.25 * (ey1 * ey1 + ey2 * ey1 + ey2 * ey2) + (py * ey1 + py * ey2)) + 0.5 * py * py;
			I += D * (intx2 + inty2);
		}
		massData.mass = density * area;
		centerX *= 1.0 / area;
		centerY *= 1.0 / area;
		massData.center.Set(centerX, centerY);
		massData.I = density * I;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Common.Math.b2Vec2} c
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.ComputeSubmergedArea = function(normal, offset, xf, c) {
		var normalL = Box2D.Common.Math.b2Math.MulTMV(xf.R, normal);
		var offsetL = offset - Box2D.Common.Math.b2Math.Dot(normal, xf.position);
		var depths = [];
		var diveCount = 0;
		var intoIndex = -1;
		var outoIndex = -1;
		var lastSubmerged = false;
		var i = 0;
		for (i = 0; i < this.m_vertexCount; ++i) {
			depths[i] = Box2D.Common.Math.b2Math.Dot(normalL, this.m_vertices[i]) - offsetL;
			var isSubmerged = depths[i] < (-Number.MIN_VALUE);
			if (i > 0) {
				if (isSubmerged) {
					if (!lastSubmerged) {
						intoIndex = i - 1;
						diveCount++;
					}
				} else {
					if (lastSubmerged) {
						outoIndex = i - 1;
						diveCount++;
					}
				}
			}
			lastSubmerged = isSubmerged;
		}
		switch (diveCount) {
		case 0:
			if (lastSubmerged) {
				var md = new Box2D.Collision.Shapes.b2MassData();
				this.ComputeMass(md, 1);
				c.SetV(Box2D.Common.Math.b2Math.MulX(xf, md.center));
				return md.mass;
			} else {
				return 0;
			}
			break;
		case 1:
			if (intoIndex == (-1)) {
				intoIndex = this.m_vertexCount - 1;
			} else {
				outoIndex = this.m_vertexCount - 1;
			}
			break;
		}
		var intoIndex2 = ((intoIndex + 1) % this.m_vertexCount);
		var outoIndex2 = ((outoIndex + 1) % this.m_vertexCount);
		var intoLamdda = (0 - depths[intoIndex]) / (depths[intoIndex2] - depths[intoIndex]);
		var outoLamdda = (0 - depths[outoIndex]) / (depths[outoIndex2] - depths[outoIndex]);
		var intoVec = Box2D.Common.Math.b2Vec2.Get(this.m_vertices[intoIndex].x * (1 - intoLamdda) + this.m_vertices[intoIndex2].x * intoLamdda, this.m_vertices[intoIndex].y * (1 - intoLamdda) + this.m_vertices[intoIndex2].y * intoLamdda);
		var outoVec = Box2D.Common.Math.b2Vec2.Get(this.m_vertices[outoIndex].x * (1 - outoLamdda) + this.m_vertices[outoIndex2].x * outoLamdda, this.m_vertices[outoIndex].y * (1 - outoLamdda) + this.m_vertices[outoIndex2].y * outoLamdda);
		var area = 0;
		var center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var p2 = this.m_vertices[intoIndex2];
		var p3;
		i = intoIndex2;
		while (i != outoIndex2) {
			i = (i + 1) % this.m_vertexCount;
			if (i == outoIndex2) p3 = outoVec;
			else p3 = this.m_vertices[i];
			var triangleArea = 0.5 * ((p2.x - intoVec.x) * (p3.y - intoVec.y) - (p2.y - intoVec.y) * (p3.x - intoVec.x));
			area += triangleArea;
			center.x += triangleArea * (intoVec.x + p2.x + p3.x) / 3;
			center.y += triangleArea * (intoVec.y + p2.y + p3.y) / 3;
			p2 = p3;
		}
		center.Multiply(1 / area);
		c.SetV(Box2D.Common.Math.b2Math.MulX(xf, center));
		return area;
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceProxy} proxy
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.SetDistanceProxy = function(proxy) {
		proxy.m_vertices = this.m_vertices;
		proxy.m_count = this.m_vertexCount;
		proxy.m_radius = this.m_radius;
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetVertexCount = function() {
		return this.m_vertexCount;
	};
	/**
	 * @return {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetVertices = function() {
		return this.m_vertices;
	};
	/**
	 * @return {Array.<!Box2D.Common.Math.b2Vec2>}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetNormals = function() {
		return this.m_normals;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} d
	 * return {number}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetSupport = function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} d
	 * return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.GetSupportVertex = function(d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_vertexCount; ++i) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return this.m_vertices[bestIndex];
	};
	/**
	 * @param {number} count
	 */
	Box2D.Collision.Shapes.b2PolygonShape.prototype.Reserve = function(count) {
		this.m_vertices = [];
		this.m_normals = [];
		for (var i = this.m_vertices.length; i < count; i++) {
			this.m_vertices[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
			this.m_normals[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {Array.<!Box2D.Common.Math.b2Vec2>} vs
	 * @param {number} count
	 * return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.ComputeCentroid = function(vs, count) {
		var c = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var area = 0.0;
		var p1X = 0.0;
		var p1Y = 0.0;
		var inv3 = 1.0 / 3.0;
		for (var i = 0; i < count; ++i) {
			var p2 = vs[i];
			var p3 = i + 1 < count ? vs[i + 1] : vs[0];
			var e1X = p2.x - p1X;
			var e1Y = p2.y - p1Y;
			var e2X = p3.x - p1X;
			var e2Y = p3.y - p1Y;
			var D = (e1X * e2Y - e1Y * e2X);
			var triangleArea = 0.5 * D;
			area += triangleArea;
			c.x += triangleArea * inv3 * (p1X + p2.x + p3.x);
			c.y += triangleArea * inv3 * (p1Y + p2.y + p3.y);
		}
		c.x *= 1.0 / area;
		c.y *= 1.0 / area;
		return c;
	};
	/** @type {!Box2D.Common.Math.b2Mat22} */
	Box2D.Collision.Shapes.b2PolygonShape.s_mat = new Box2D.Common.Math.b2Mat22();
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.Shapes.b2PolygonShape.NAME = 'b2PolygonShape';
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ContactID = function() {
		/** @type {number} */
		this._key = 0;
		/** @type {number} */
		this._referenceEdge = 0;
		/** @type {number} */
		this._incidentEdge = 0;
		/** @type {number} */
		this._incidentVertex = 0;
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.b2ContactID.prototype.GetKey = function () {
		return this._key;
	};
	/**
	 * @param {number} key
	 */
	Box2D.Collision.b2ContactID.prototype.SetKey = function (key) {
		this._key = key;
		this._referenceEdge = this._key & 0x000000ff;
		this._incidentEdge = ((this._key & 0x0000ff00) >> 8) & 0x000000ff;
		this._incidentVertex = ((this._key & 0x00ff0000) >> 16) & 0x000000ff;
		this._flip = ((this._key & 0xff000000) >> 24) & 0x000000ff;
	};
	/**
	 * @param {!Box2D.Collision.b2ContactID} id
	 */
	Box2D.Collision.b2ContactID.prototype.Set = function (id) {
		this.SetKey(id._key);
	};
	/**
	 * @param {number} edge
	 */
	Box2D.Collision.b2ContactID.prototype.SetReferenceEdge = function(edge) {
		this._referenceEdge = edge;
		this._key = (this._key & 0xffffff00) | (this._referenceEdge & 0x000000ff);
	};
	/**
	 * @param {number} edge
	 */
	Box2D.Collision.b2ContactID.prototype.SetIncidentEdge = function(edge) {
		this._incidentEdge = edge;
		this._key = (this._key & 0xffff00ff) | ((this._incidentEdge << 8) & 0x0000ff00);
	};
	/**
	 * @param {number} vertex
	 */
	Box2D.Collision.b2ContactID.prototype.SetIncidentVertex = function(vertex) {
		this._incidentVertex = vertex;
		this._key = (this._key & 0xff00ffff) | ((this._incidentVertex << 16) & 0x00ff0000);
	};
	/**
	 * @param {number} flip
	 */
	Box2D.Collision.b2ContactID.prototype.SetFlip = function(flip) {
		this._flip = flip;
		this._key = (this._key & 0x00ffffff) | ((this._flip << 24) & 0xff000000);
	};
	Box2D.Collision.b2ContactID.prototype.Copy = function () {
	  var id = new Box2D.Collision.b2ContactID();
	  id.Set(this);
	  return id;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.ClipVertex = function() {
		this.v = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.id = new Box2D.Collision.b2ContactID();
	};
	Box2D.Collision.ClipVertex.prototype.Set = function(other) {
		this.v.SetV(other.v);
		this.id.Set(other.id);
	};
	/**
	 * @const
	 * @type {string}
	 */
	Box2D.Collision.IBroadPhase = 'Box2D.Collision.IBroadPhase';
	/**
	 * @private
	 * @constructor
	 */
	Box2D.Collision.b2AABB = function() {
		this.lowerBound_ = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.upperBound_ = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Collision.b2AABB>}
	 */
	Box2D.Collision.b2AABB._freeCache = [];
	/**
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2AABB.Get = function() {
		if (Box2D.Collision.b2AABB._freeCache.length > 0) {
			var aabb = Box2D.Collision.b2AABB._freeCache.pop();
			aabb.SetZero();
			return aabb;
		}
		return new Box2D.Collision.b2AABB();
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2AABB.Free = function(aabb) {
		Box2D.Collision.b2AABB._freeCache.push(aabb);
	};
	Box2D.Collision.b2AABB.prototype.SetZero = function() {
		this.lowerBound_.Set(0, 0);
		this.upperBound_.Set(0, 0);
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.IsValid = function() {
		var dX = this.upperBound_.x - this.lowerBound_.x;
		if (dX < 0) {
			return false;
		}
		var dY = this.upperBound_.y - this.lowerBound_.y;
		if (dY < 0) {
			return false;
		}
		return this.lowerBound_.IsValid() && this.upperBound_.IsValid();
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.b2AABB.prototype.GetCenter = function() {
		return Box2D.Common.Math.b2Vec2.Get((this.lowerBound_.x + this.upperBound_.x) / 2, (this.lowerBound_.y + this.upperBound_.y) / 2);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} newCenter
	 */
	Box2D.Collision.b2AABB.prototype.SetCenter = function(newCenter) {
		var oldCenter = this.GetCenter();
		this.lowerBound_.Subtract(oldCenter);
		this.upperBound_.Subtract(oldCenter);
		this.lowerBound_.Add(newCenter);
		this.upperBound_.Add(newCenter);
		Box2D.Common.Math.b2Vec2.Free(oldCenter);
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Collision.b2AABB.prototype.GetExtents = function() {
		return Box2D.Common.Math.b2Vec2.Get((this.upperBound_.x - this.lowerBound_.x) / 2, (this.upperBound_.y - this.lowerBound_.y) / 2);
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.Contains = function(aabb) {
		var result = true;
		result = result && this.lowerBound_.x <= aabb.lowerBound_.x;
		result = result && this.lowerBound_.y <= aabb.lowerBound_.y;
		result = result && aabb.upperBound_.x <= this.upperBound_.x;
		result = result && aabb.upperBound_.y <= this.upperBound_.y;
		return result;
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.RayCast = function(output, input) {
		var tmin = (-Number.MAX_VALUE);
		var tmax = Number.MAX_VALUE;
		var dX = input.p2.x - input.p1.x;
		var absDX = Math.abs(dX);
		if (absDX < Number.MIN_VALUE) {
			if (input.p1.x < this.lowerBound_.x || this.upperBound_.x < input.p1.x) {
				return false;
			}
		} else {
			var inv_d = 1.0 / dX;
			var t1 = (this.lowerBound_.x - input.p1.x) * inv_d;
			var t2 = (this.upperBound_.x - input.p1.x) * inv_d;
			var s = (-1.0);
			if (t1 > t2) {
				var t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if (t1 > tmin) {
				output.normal.x = s;
				output.normal.y = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax, t2);
			if (tmin > tmax) return false;
		}
		var dY = input.p2.y - input.p1.y;
		var absDY = Math.abs(dY);
		if (absDY < Number.MIN_VALUE) {
			if (input.p1.y < this.lowerBound_.y || this.upperBound_.y < input.p1.y) {
				return false;
			}
		} else {
			var inv_d = 1.0 / dY;
			var t1 = (this.lowerBound_.y - input.p1.y) * inv_d;
			var t2 = (this.upperBound_.y - input.p1.y) * inv_d;
			var s = (-1.0);
			if (t1 > t2) {
				var t3 = t1;
				t1 = t2;
				t2 = t3;
				s = 1.0;
			}
			if (t1 > tmin) {
				output.normal.y = s;
				output.normal.x = 0;
				tmin = t1;
			}
			tmax = Math.min(tmax, t2);
			if (tmin > tmax) {
				return false;
			}
		}
		output.fraction = tmin;
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} other
	 * @return {boolean}
	 */
	Box2D.Collision.b2AABB.prototype.TestOverlap = function(other) {
		if ( other.lowerBound_.x - this.upperBound_.x > 0 ) { return false; }
		if ( other.lowerBound_.y - this.upperBound_.y > 0 ) { return false; }
		if ( this.lowerBound_.x - other.upperBound_.x > 0 ) { return false; }
		if ( this.lowerBound_.y - other.upperBound_.y > 0 ) { return false; }
		return true;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb1
	 * @param {!Box2D.Collision.b2AABB} aabb2
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2AABB.Combine = function(aabb1, aabb2) {
		var aabb = Box2D.Collision.b2AABB.Get();
		aabb.Combine(aabb1, aabb2);
		return aabb;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb1
	 * @param {!Box2D.Collision.b2AABB} aabb2
	 */
	Box2D.Collision.b2AABB.prototype.Combine = function(aabb1, aabb2) {
		this.lowerBound_.x = Math.min(aabb1.lowerBound_.x, aabb2.lowerBound_.x);
		this.lowerBound_.y = Math.min(aabb1.lowerBound_.y, aabb2.lowerBound_.y);
		this.upperBound_.x = Math.max(aabb1.upperBound_.x, aabb2.upperBound_.x);
		this.upperBound_.y = Math.max(aabb1.upperBound_.y, aabb2.upperBound_.y);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} vOut
	 * @param {!Box2D.Common.Math.b2Vec2} vIn
	 * @param {!Box2D.Common.Math.b2Vec2} normal
	 * @param {number} offset
	 */
	Box2D.Collision.b2Collision.ClipSegmentToLine = function(vOut, vIn, normal, offset) {
		var numOut = 0;
		var vIn0 = vIn[0].v;
		var vIn1 = vIn[1].v;
		var distance0 = normal.x * vIn0.x + normal.y * vIn0.y - offset;
		var distance1 = normal.x * vIn1.x + normal.y * vIn1.y - offset;
		if (distance0 <= 0.0) {
			vOut[numOut++].Set(vIn[0]);
		}
		if (distance1 <= 0.0) {
			vOut[numOut++].Set(vIn[1]);
		}
		if (distance0 * distance1 < 0.0) {
			var interp = distance0 / (distance0 - distance1);
			var tVec = vOut[numOut].v;
			tVec.x = vIn0.x + interp * (vIn1.x - vIn0.x);
			tVec.y = vIn0.y + interp * (vIn1.y - vIn0.y);
			if (distance0 > 0.0) {
				vOut[numOut].id = vIn[0].id;
			} else {
				vOut[numOut].id = vIn[1].id;
			}
			numOut++;
		}
		return numOut;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly1
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @param {number} edge1
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly2
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @return {number}
	 */
	Box2D.Collision.b2Collision.EdgeSeparation = function(poly1, xf1, edge1, poly2, xf2) {
		var normal1WorldX = (xf1.R.col1.x * poly1.m_normals[edge1].x + xf1.R.col2.x * poly1.m_normals[edge1].y);
		var normal1WorldY = (xf1.R.col1.y * poly1.m_normals[edge1].x + xf1.R.col2.y * poly1.m_normals[edge1].y);
		var normal1X = (xf2.R.col1.x * normal1WorldX + xf2.R.col1.y * normal1WorldY);
		var normal1Y = (xf2.R.col2.x * normal1WorldX + xf2.R.col2.y * normal1WorldY);
		var index = 0;
		var minDot = Number.MAX_VALUE;
		for (var i = 0; i < poly2.m_vertexCount; i++) {
			var dot = poly2.m_vertices[i].x * normal1X + poly2.m_vertices[i].y * normal1Y;
			if (dot < minDot) {
				minDot = dot;
				index = i;
			}
		}
		var v1X = xf1.position.x + (xf1.R.col1.x * poly1.m_vertices[edge1].x + xf1.R.col2.x * poly1.m_vertices[edge1].y);
		var v1Y = xf1.position.y + (xf1.R.col1.y * poly1.m_vertices[edge1].x + xf1.R.col2.y * poly1.m_vertices[edge1].y);
		var v2X = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[index].x + xf2.R.col2.x * poly2.m_vertices[index].y);
		var v2Y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[index].x + xf2.R.col2.y * poly2.m_vertices[index].y);
		var separation = (v2X - v1X) * normal1WorldX + (v2Y - v1Y) * normal1WorldY;
		return separation;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly1
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @param {!Box2D.Collision.Shapes.b2PolygonShape} poly2
	 * @param {!Box2D.Common.Math.b2Transform} xf1
	 * @return {{bestEdge: number, separation: number}}
	 */
	Box2D.Collision.b2Collision.FindMaxSeparation = function(poly1, xf1, poly2, xf2) {
		var dX = xf2.position.x + (xf2.R.col1.x * poly2.m_centroid.x + xf2.R.col2.x * poly2.m_centroid.y);
		var dY = xf2.position.y + (xf2.R.col1.y * poly2.m_centroid.x + xf2.R.col2.y * poly2.m_centroid.y);
		dX -= xf1.position.x + (xf1.R.col1.x * poly1.m_centroid.x + xf1.R.col2.x * poly1.m_centroid.y);
		dY -= xf1.position.y + (xf1.R.col1.y * poly1.m_centroid.x + xf1.R.col2.y * poly1.m_centroid.y);
		var dLocal1X = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
		var dLocal1Y = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
		var edge = 0;
		var maxDot = (-Number.MAX_VALUE);
		for (var i = 0; i < poly1.m_vertexCount; ++i) {
			var dot = (poly1.m_normals[i].x * dLocal1X + poly1.m_normals[i].y * dLocal1Y);
			if (dot > maxDot) {
				maxDot = dot;
				edge = i;
			}
		}
		var s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
		var prevEdge = edge - 1;
		if (prevEdge < 0) {
			prevEdge = poly1.m_vertexCount - 1;
		}
		var sPrev = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, prevEdge, poly2, xf2);
		var nextEdge = edge + 1;
		if (nextEdge >= poly1.m_vertexCount) {
			nextEdge = 0;
		}
		var sNext = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, nextEdge, poly2, xf2);
		var bestEdge = 0;
		var bestSeparation = 0;
		if (sPrev > s && sPrev > sNext) {
			bestEdge = prevEdge;
			bestSeparation = sPrev;
			while (true) {
				edge = bestEdge - 1;
				if (edge < 0) {
					edge = poly1.m_vertexCount - 1;
				}
				s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
				if (s > bestSeparation) {
					bestEdge = edge;
					bestSeparation = s;
				} else {
					break;
				}
			}
		} else if (sNext > s) {
			bestEdge = nextEdge;
			bestSeparation = sNext;
			while (true) {
				edge = bestEdge + 1;
				if (edge >= poly1.m_vertexCount) {
					edge = 0;
				}
				s = Box2D.Collision.b2Collision.EdgeSeparation(poly1, xf1, edge, poly2, xf2);
				if (s > bestSeparation) {
					bestEdge = edge;
					bestSeparation = s;
				} else {
					break;
				}
			}
		} else {
			bestEdge = edge;
			bestSeparation = s;
		}
		return {bestEdge: bestEdge, separation: bestSeparation};
	};
	Box2D.Collision.b2Collision.FindIncidentEdge = function(c, poly1, xf1, edge1, poly2, xf2) {
		if (edge1 === undefined) edge1 = 0;
		var normal1X = (xf1.R.col1.x * poly1.m_normals[edge1].x + xf1.R.col2.x * poly1.m_normals[edge1].y);
		var normal1Y = (xf1.R.col1.y * poly1.m_normals[edge1].x + xf1.R.col2.y * poly1.m_normals[edge1].y);
		var tX = (xf2.R.col1.x * normal1X + xf2.R.col1.y * normal1Y);
		normal1Y = (xf2.R.col2.x * normal1X + xf2.R.col2.y * normal1Y);
		normal1X = tX;
		var i1 = 0;
		var minDot = Number.MAX_VALUE;
		for (var i = 0; i < poly2.m_vertexCount; i++) {
			var dot = (normal1X * poly2.m_normals[i].x + normal1Y * poly2.m_normals[i].y);
			if (dot < minDot) {
				minDot = dot;
				i1 = i;
			}
		}
		var i2 = i1 + 1;
		if (i2 >= poly2.m_vertexCount) {
			i2 = 0;
		}
		c[0].v.x = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[i1].x + xf2.R.col2.x * poly2.m_vertices[i1].y);
		c[0].v.y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[i1].x + xf2.R.col2.y * poly2.m_vertices[i1].y);
		c[0].id.SetReferenceEdge(edge1);
		c[0].id.SetIncidentEdge(i1);
		c[0].id.SetIncidentVertex(0);
		c[1].v.x = xf2.position.x + (xf2.R.col1.x * poly2.m_vertices[i2].x + xf2.R.col2.x * poly2.m_vertices[i2].y);
		c[1].v.y = xf2.position.y + (xf2.R.col1.y * poly2.m_vertices[i2].x + xf2.R.col2.y * poly2.m_vertices[i2].y);
		c[1].id.SetReferenceEdge(edge1);
		c[1].id.SetIncidentEdge(i2);
		c[1].id.SetIncidentVertex(1);
	};
	Box2D.Collision.b2Collision.MakeClipPointVector = function() {
		return [new Box2D.Collision.ClipVertex(), new Box2D.Collision.ClipVertex()];
	};
	Box2D.Collision.b2Collision.CollidePolygons = function(manifold, polyA, xfA, polyB, xfB) {
		manifold.m_pointCount = 0;
		var totalRadius = polyA.m_radius + polyB.m_radius;
		var separationEdgeA = Box2D.Collision.b2Collision.FindMaxSeparation(polyA, xfA, polyB, xfB);
		var edge1 = separationEdgeA.bestEdge;
		if (separationEdgeA.separation > totalRadius) {
			return;
		}
		var separationEdgeB = Box2D.Collision.b2Collision.FindMaxSeparation(polyB, xfB, polyA, xfA);
		if (separationEdgeB.separation > totalRadius) {
			return;
		}
		var poly1 = polyA;
		var poly2 = polyB;
		var xf1 = xfA;
		var xf2 = xfB;
		var flip = 0;
		manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
		if (separationEdgeB.separation > 0.98 /* k_relativeTol */ * separationEdgeA.separation + 0.001 /* k_absoluteTol */ ) {
			poly1 = polyB;
			poly2 = polyA;
			xf1 = xfB;
			xf2 = xfA;
			edge1 = separationEdgeB.bestEdge;
			manifold.m_type = Box2D.Collision.b2Manifold.e_faceB;
			flip = 1;
		}
		var incidentEdge = Box2D.Collision.b2Collision.s_incidentEdge;
		Box2D.Collision.b2Collision.FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);
		var local_v11 = poly1.m_vertices[edge1];
		var local_v12;
		if (edge1 + 1 < poly1.m_vertexCount) {
			local_v12 = poly1.m_vertices[edge1 + 1];
		} else {
			local_v12 = poly1.m_vertices[0];
		}
		Box2D.Collision.b2Collision.s_localTangent.Set(local_v12.x - local_v11.x, local_v12.y - local_v11.y);
		Box2D.Collision.b2Collision.s_localTangent.Normalize();
		Box2D.Collision.b2Collision.s_localNormal.x = Box2D.Collision.b2Collision.s_localTangent.y;
		Box2D.Collision.b2Collision.s_localNormal.y = (-Box2D.Collision.b2Collision.s_localTangent.x);
		Box2D.Collision.b2Collision.s_planePoint.Set(0.5 * (local_v11.x + local_v12.x), 0.5 * (local_v11.y + local_v12.y));
		Box2D.Collision.b2Collision.s_tangent.x = (xf1.R.col1.x * Box2D.Collision.b2Collision.s_localTangent.x + xf1.R.col2.x * Box2D.Collision.b2Collision.s_localTangent.y);
		Box2D.Collision.b2Collision.s_tangent.y = (xf1.R.col1.y * Box2D.Collision.b2Collision.s_localTangent.x + xf1.R.col2.y * Box2D.Collision.b2Collision.s_localTangent.y);
		Box2D.Collision.b2Collision.s_tangent2.x = (-Box2D.Collision.b2Collision.s_tangent.x);
		Box2D.Collision.b2Collision.s_tangent2.y = (-Box2D.Collision.b2Collision.s_tangent.y);
		Box2D.Collision.b2Collision.s_normal.x = Box2D.Collision.b2Collision.s_tangent.y;
		Box2D.Collision.b2Collision.s_normal.y = (-Box2D.Collision.b2Collision.s_tangent.x);
		Box2D.Collision.b2Collision.s_v11.x = xf1.position.x + (xf1.R.col1.x * local_v11.x + xf1.R.col2.x * local_v11.y);
		Box2D.Collision.b2Collision.s_v11.y = xf1.position.y + (xf1.R.col1.y * local_v11.x + xf1.R.col2.y * local_v11.y);
		Box2D.Collision.b2Collision.s_v12.x = xf1.position.x + (xf1.R.col1.x * local_v12.x + xf1.R.col2.x * local_v12.y);
		Box2D.Collision.b2Collision.s_v12.y = xf1.position.y + (xf1.R.col1.y * local_v12.x + xf1.R.col2.y * local_v12.y);
		var sideOffset1 = (-Box2D.Collision.b2Collision.s_tangent.x * Box2D.Collision.b2Collision.s_v11.x) - Box2D.Collision.b2Collision.s_tangent.y * Box2D.Collision.b2Collision.s_v11.y + totalRadius;
		if (Box2D.Collision.b2Collision.ClipSegmentToLine(Box2D.Collision.b2Collision.s_clipPoints1, incidentEdge, Box2D.Collision.b2Collision.s_tangent2, sideOffset1) < 2) {
			return;
		}
		var sideOffset2 = Box2D.Collision.b2Collision.s_tangent.x * Box2D.Collision.b2Collision.s_v12.x + Box2D.Collision.b2Collision.s_tangent.y * Box2D.Collision.b2Collision.s_v12.y + totalRadius;
		if (Box2D.Collision.b2Collision.ClipSegmentToLine(Box2D.Collision.b2Collision.s_clipPoints2, Box2D.Collision.b2Collision.s_clipPoints1, Box2D.Collision.b2Collision.s_tangent, sideOffset2) < 2) {
			return;
		}
		manifold.m_localPlaneNormal.SetV(Box2D.Collision.b2Collision.s_localNormal);
		manifold.m_localPoint.SetV(Box2D.Collision.b2Collision.s_planePoint);
		var frontOffset = Box2D.Collision.b2Collision.s_normal.x * Box2D.Collision.b2Collision.s_v11.x + Box2D.Collision.b2Collision.s_normal.y * Box2D.Collision.b2Collision.s_v11.y;
		var pointCount = 0;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; ++i) {
			var separation = Box2D.Collision.b2Collision.s_normal.x * Box2D.Collision.b2Collision.s_clipPoints2[i].v.x + Box2D.Collision.b2Collision.s_normal.y * Box2D.Collision.b2Collision.s_clipPoints2[i].v.y - frontOffset;
			if (separation <= totalRadius) {
				var tX = Box2D.Collision.b2Collision.s_clipPoints2[i].v.x - xf2.position.x;
				var tY = Box2D.Collision.b2Collision.s_clipPoints2[i].v.y - xf2.position.y;
				manifold.m_points[pointCount].m_localPoint.x = (tX * xf2.R.col1.x + tY * xf2.R.col1.y);
				manifold.m_points[pointCount].m_localPoint.y = (tX * xf2.R.col2.x + tY * xf2.R.col2.y);
				manifold.m_points[pointCount].m_id.Set(Box2D.Collision.b2Collision.s_clipPoints2[i].id);
				manifold.m_points[pointCount].m_id.SetFlip(flip);
				pointCount++;
			}
		}
		manifold.m_pointCount = pointCount;
	};
	Box2D.Collision.b2Collision.CollideCircles = function(manifold, circle1, xf1, circle2, xf2) {
		manifold.m_pointCount = 0;
		var p1X = xf1.position.x + (xf1.R.col1.x * circle1.m_p.x + xf1.R.col2.x * circle1.m_p.y);
		var p1Y = xf1.position.y + (xf1.R.col1.y * circle1.m_p.x + xf1.R.col2.y * circle1.m_p.y);
		var p2X = xf2.position.x + (xf2.R.col1.x * circle2.m_p.x + xf2.R.col2.x * circle2.m_p.y);
		var p2Y = xf2.position.y + (xf2.R.col1.y * circle2.m_p.x + xf2.R.col2.y * circle2.m_p.y);
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var distSqr = dX * dX + dY * dY;
		var radius = circle1.m_radius + circle2.m_radius;
		if (distSqr > radius * radius) {
			return;
		}
		manifold.m_type = Box2D.Collision.b2Manifold.e_circles;
		manifold.m_localPoint.SetV(circle1.m_p);
		manifold.m_localPlaneNormal.SetZero();
		manifold.m_pointCount = 1;
		manifold.m_points[0].m_localPoint.SetV(circle2.m_p);
		manifold.m_points[0].m_id.SetKey(0);
	};
	Box2D.Collision.b2Collision.CollidePolygonAndCircle = function(manifold, polygon, xf1, circle, xf2) {
		manifold.m_pointCount = 0;
		var dX = xf2.position.x + (xf2.R.col1.x * circle.m_p.x + xf2.R.col2.x * circle.m_p.y) - xf1.position.x;
		var dY = xf2.position.y + (xf2.R.col1.y * circle.m_p.x + xf2.R.col2.y * circle.m_p.y) - xf1.position.y;
		var cLocalX = (dX * xf1.R.col1.x + dY * xf1.R.col1.y);
		var cLocalY = (dX * xf1.R.col2.x + dY * xf1.R.col2.y);
		var normalIndex = 0;
		var separation = (-Number.MAX_VALUE);
		var radius = polygon.m_radius + circle.m_radius;
		for (var i = 0; i < polygon.m_vertexCount; ++i) {
			var s = polygon.m_normals[i].x * (cLocalX - polygon.m_vertices[i].x) + polygon.m_normals[i].y * (cLocalY - polygon.m_vertices[i].y);
			if (s > radius) {
				return;
			}
			if (s > separation) {
				separation = s;
				normalIndex = i;
			}
		}
		var vertIndex2 = normalIndex + 1;
		if (vertIndex2 >= polygon.m_vertexCount) {
			vertIndex2 = 0;
		}
		var v1 = polygon.m_vertices[normalIndex];
		var v2 = polygon.m_vertices[vertIndex2];
		if (separation < Number.MIN_VALUE) {
			manifold.m_pointCount = 1;
			manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
			manifold.m_localPlaneNormal.SetV(polygon.m_normals[normalIndex]);
			manifold.m_localPoint.x = 0.5 * (v1.x + v2.x);
			manifold.m_localPoint.y = 0.5 * (v1.y + v2.y);
			manifold.m_points[0].m_localPoint.SetV(circle.m_p);
			manifold.m_points[0].m_id.SetKey(0);
		} else {
			var u1 = (cLocalX - v1.x) * (v2.x - v1.x) + (cLocalY - v1.y) * (v2.y - v1.y);
			if (u1 <= 0.0) {
				if ((cLocalX - v1.x) * (cLocalX - v1.x) + (cLocalY - v1.y) * (cLocalY - v1.y) > radius * radius) return;
				manifold.m_pointCount = 1;
				manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
				manifold.m_localPlaneNormal.x = cLocalX - v1.x;
				manifold.m_localPlaneNormal.y = cLocalY - v1.y;
				manifold.m_localPlaneNormal.Normalize();
				manifold.m_localPoint.SetV(v1);
				manifold.m_points[0].m_localPoint.SetV(circle.m_p);
				manifold.m_points[0].m_id.SetKey(0);
			} else {
				var u2 = (cLocalX - v2.x) * (v1.x - v2.x) + (cLocalY - v2.y) * (v1.y - v2.y);
				if (u2 <= 0) {
					if ((cLocalX - v2.x) * (cLocalX - v2.x) + (cLocalY - v2.y) * (cLocalY - v2.y) > radius * radius) return;
					manifold.m_pointCount = 1;
					manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
					manifold.m_localPlaneNormal.x = cLocalX - v2.x;
					manifold.m_localPlaneNormal.y = cLocalY - v2.y;
					manifold.m_localPlaneNormal.Normalize();
					manifold.m_localPoint.SetV(v2);
					manifold.m_points[0].m_localPoint.SetV(circle.m_p);
					manifold.m_points[0].m_id.SetKey(0);
				} else {
					var faceCenterX = 0.5 * (v1.x + v2.x);
					var faceCenterY = 0.5 * (v1.y + v2.y);
					separation = (cLocalX - faceCenterX) * polygon.m_normals[normalIndex].x + (cLocalY - faceCenterY) * polygon.m_normals[normalIndex].y;
					if (separation > radius) return;
					manifold.m_pointCount = 1;
					manifold.m_type = Box2D.Collision.b2Manifold.e_faceA;
					manifold.m_localPlaneNormal.x = polygon.m_normals[normalIndex].x;
					manifold.m_localPlaneNormal.y = polygon.m_normals[normalIndex].y;
					manifold.m_localPlaneNormal.Normalize();
					manifold.m_localPoint.Set(faceCenterX, faceCenterY);
					manifold.m_points[0].m_localPoint.SetV(circle.m_p);
					manifold.m_points[0].m_id.SetKey(0);
				}
			}
		}
	};
	Box2D.Collision.b2Collision.TestOverlap = function(a, b) {
		if (b.lowerBound_.x - a.upperBound_.x > 0) {
			return false;
		}
		if (b.lowerBound_.y - a.upperBound_.y > 0) {
			return false;
		}
		if (a.lowerBound_.x - b.upperBound_.x > 0) {
			return false;
		}
		if (a.lowerBound_.y - b.upperBound_.y > 0) {
			return false;
		}
		return true;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ContactPoint = function() {
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.velocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.id = new Box2D.Collision.b2ContactID();
	};
	/**
	 * @param {!Box2D.Collision.b2DistanceOutput} output
	 * @param {!Box2D.Collision.b2SimplexCache} cache
	 * @param {!Box2D.Collision.b2DistanceInput} input
	 */
	Box2D.Collision.b2Distance.Distance = function(output, cache, input) {
		var s_simplex = new Box2D.Collision.b2Simplex();
		s_simplex.ReadCache(cache, input.proxyA, input.transformA, input.proxyB, input.transformB);
		if (s_simplex.m_count < 1 || s_simplex.m_count > 3) {
;
		}
		var iter = 0;
		while (iter < 20) {
			var save = [];
			for (var i = 0; i < s_simplex.m_count; i++) {
				save[i] = {};
				save[i].indexA = s_simplex.m_vertices[i].indexA;
				save[i].indexB = s_simplex.m_vertices[i].indexB;
			}
			if (s_simplex.m_count == 2) {
				s_simplex.Solve2();
			} else if (s_simplex.m_count == 3) {
				s_simplex.Solve3();
			}
			if (s_simplex.m_count == 3) {
				break;
			}
			var d = s_simplex.GetSearchDirection();
			if (d.LengthSquared() < Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
				break;
			}
			var negD = d.GetNegative();
			s_simplex.m_vertices[s_simplex.m_count].indexA = input.proxyA.GetSupport(Box2D.Common.Math.b2Math.MulTMV(input.transformA.R, negD));
			s_simplex.m_vertices[s_simplex.m_count].wA = Box2D.Common.Math.b2Math.MulX(input.transformA, input.proxyA.GetVertex(s_simplex.m_vertices[s_simplex.m_count].indexA));
			s_simplex.m_vertices[s_simplex.m_count].indexB = input.proxyB.GetSupport(Box2D.Common.Math.b2Math.MulTMV(input.transformB.R, d));
			s_simplex.m_vertices[s_simplex.m_count].wB = Box2D.Common.Math.b2Math.MulX(input.transformB, input.proxyB.GetVertex(s_simplex.m_vertices[s_simplex.m_count].indexB));
			s_simplex.m_vertices[s_simplex.m_count].w = Box2D.Common.Math.b2Math.SubtractVV(s_simplex.m_vertices[s_simplex.m_count].wB, s_simplex.m_vertices[s_simplex.m_count].wA);
			Box2D.Common.Math.b2Vec2.Free(d);
			Box2D.Common.Math.b2Vec2.Free(negD);
			iter++;
			var duplicate = false;
			for (var i = 0; i < save.length; i++) {
				if (s_simplex.m_vertices[s_simplex.m_count].indexA == save[i].indexA && s_simplex.m_vertices[s_simplex.m_count].indexB == save[i].indexB) {
					duplicate = true;
					break;
				}
			}
			if (duplicate) {
				break;
			}
			s_simplex.m_count++;
		}
		s_simplex.GetWitnessPoints(output.pointA, output.pointB);
		output.distance = Box2D.Common.Math.b2Math.SubtractVV(output.pointA, output.pointB).Length();
		s_simplex.WriteCache(cache);
		if (input.useRadii) {
			var rA = input.proxyA.m_radius;
			var rB = input.proxyB.m_radius;
			if (output.distance > rA + rB && output.distance > Number.MIN_VALUE) {
				output.distance -= rA + rB;
				var normal = Box2D.Common.Math.b2Math.SubtractVV(output.pointB, output.pointA);
				normal.Normalize();
				output.pointA.x += rA * normal.x;
				output.pointA.y += rA * normal.y;
				output.pointB.x -= rB * normal.x;
				output.pointB.y -= rB * normal.y;
				Box2D.Common.Math.b2Vec2.Free(normal);
			} else {
				var p = Box2D.Common.Math.b2Vec2.Get(0, 0);
				p.x = 0.5 * (output.pointA.x + output.pointB.x);
				p.y = 0.5 * (output.pointA.y + output.pointB.y);
				output.pointA.x = output.pointB.x = p.x;
				output.pointA.y = output.pointB.y = p.y;
				output.distance = 0.0;
				Box2D.Common.Math.b2Vec2.Free(p);
			}
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceInput = function () {};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceOutput = function () {
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.pointA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.pointB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.distance = 0;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DistanceProxy = function() {};
	Box2D.Collision.b2DistanceProxy.prototype.Set = function (shape) {
		shape.SetDistanceProxy(this);
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetSupport = function (d) {
		var bestIndex = 0;
		var bestValue = this.m_vertices[0].x * d.x + this.m_vertices[0].y * d.y;
		for (var i = 1; i < this.m_count; i++) {
			var value = this.m_vertices[i].x * d.x + this.m_vertices[i].y * d.y;
			if (value > bestValue) {
				bestIndex = i;
				bestValue = value;
			}
		}
		return bestIndex;
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetSupportVertex = function (d) {
		return this.m_vertices[this.GetSupport(d)];
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetVertexCount = function () {
		return this.m_count;
	};
	Box2D.Collision.b2DistanceProxy.prototype.GetVertex = function (index) {
		if (index === undefined) index = 0;
;
		return this.m_vertices[index];
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTree = function() {
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.m_root = null;
		/** @type {number} */
		this.m_path = 0;
		/** @type {number} */
		this.m_insertionCount = 0;
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {Box2D.Dynamics.b2Fixture} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTree.prototype.CreateProxy = function(aabb, fixture) {
		var node = Box2D.Collision.b2DynamicTreeNode.Get(fixture);
		var extendX = Box2D.Common.b2Settings.b2_aabbExtension;
		var extendY = Box2D.Common.b2Settings.b2_aabbExtension;
		node.aabb.lowerBound_.x = aabb.lowerBound_.x - extendX;
		node.aabb.lowerBound_.y = aabb.lowerBound_.y - extendY;
		node.aabb.upperBound_.x = aabb.upperBound_.x + extendX;
		node.aabb.upperBound_.y = aabb.upperBound_.y + extendY;
		this.InsertLeaf(node);
		return node;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 */
	Box2D.Collision.b2DynamicTree.prototype.DestroyProxy = function(proxy) {
		this.RemoveLeaf(proxy);
		proxy.Destroy();
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Vec2} displacement
	 * @return {boolean}
	 */
	Box2D.Collision.b2DynamicTree.prototype.MoveProxy = function(proxy, aabb, displacement) {
;
		if (proxy.aabb.Contains(aabb)) {
			return false;
		}
		this.RemoveLeaf(proxy);
		var extendX = Box2D.Common.b2Settings.b2_aabbExtension + Box2D.Common.b2Settings.b2_aabbMultiplier * Math.abs(displacement.x);
		var extendY = Box2D.Common.b2Settings.b2_aabbExtension + Box2D.Common.b2Settings.b2_aabbMultiplier * Math.abs(displacement.y);
		proxy.aabb.lowerBound_.x = aabb.lowerBound_.x - extendX;
		proxy.aabb.lowerBound_.y = aabb.lowerBound_.y - extendY;
		proxy.aabb.upperBound_.x = aabb.upperBound_.x + extendX;
		proxy.aabb.upperBound_.y = aabb.upperBound_.y + extendY;
		this.InsertLeaf(proxy);
		return true;
	};
	/**
	 * @param {number} iterations
	 */
	Box2D.Collision.b2DynamicTree.prototype.Rebalance = function(iterations) {
		if (this.m_root !== null) {
			for (var i = 0; i < iterations; i++) {
				var node = this.m_root;
				var bit = 0;
				while (!node.IsLeaf()) {
					node = (this.m_path >> bit) & 1 ? node.child2 : node.child1;
					bit = (bit + 1) & 31;
				}
				this.m_path++;
				this.RemoveLeaf(node);
				this.InsertLeaf(node);
			}
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2DynamicTree.prototype.GetFatAABB = function(proxy) {
		return proxy.aabb;
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2DynamicTree.prototype.Query = function(callback, aabb) {
		if (this.m_root !== null) {
			var stack = [];
			stack.push(this.m_root);
			while (stack.length > 0) {
				var node = stack.pop();
				if (node.aabb.TestOverlap(aabb)) {
					if (node.IsLeaf()) {
						if (!callback(node.fixture)) {
							return;
						}
					} else {
						stack.push(node.child1);
						stack.push(node.child2);
					}
				}
			}
		}
	};
	/**
	 * @param {function(!Box2D.Collision.b2RayCastInput, !Box2D.Dynamics.b2Fixture): number} callback
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 */
	Box2D.Collision.b2DynamicTree.prototype.RayCast = function(callback, input) {
		if (this.m_root === null) {
			return;
		}
		var r = Box2D.Common.Math.b2Math.SubtractVV(input.p1, input.p2);
		r.Normalize();
		var v = Box2D.Common.Math.b2Math.CrossFV(1.0, r);
		var abs_v = Box2D.Common.Math.b2Math.AbsV(v);
		var maxFraction = input.maxFraction;
		var tX = input.p1.x + maxFraction * (input.p2.x - input.p1.x);
		var tY = input.p1.y + maxFraction * (input.p2.y - input.p1.y);
		var segmentAABB = Box2D.Collision.b2AABB.Get();
		segmentAABB.lowerBound_.x = Math.min(input.p1.x, tX);
		segmentAABB.lowerBound_.y = Math.min(input.p1.y, tY);
		segmentAABB.upperBound_.x = Math.max(input.p1.x, tX);
		segmentAABB.upperBound_.y = Math.max(input.p1.y, tY);
		var stack = [];
		stack.push(this.m_root);
		while (stack.length > 0) {
			var node = stack.pop();
			if (!node.aabb.TestOverlap(segmentAABB)) {
				continue;
			}
			var c = node.aabb.GetCenter();
			var h = node.aabb.GetExtents();
			var separation = Math.abs(v.x * (input.p1.x - c.x) + v.y * (input.p1.y - c.y)) - abs_v.x * h.x - abs_v.y * h.y;
			if (separation > 0.0) {
				continue;
			}
			if (node.IsLeaf()) {
				var subInput = new Box2D.Collision.b2RayCastInput(input.p1, input.p2, input.maxFraction);
				maxFraction = callback(input, node.fixture);
				if (maxFraction == 0.0) {
					break;
				}
				if (maxFraction > 0.0) {
					tX = input.p1.x + maxFraction * (input.p2.x - input.p1.x);
					tY = input.p1.y + maxFraction * (input.p2.y - input.p1.y);
					segmentAABB.lowerBound_.x = Math.min(input.p1.x, tX);
					segmentAABB.lowerBound_.y = Math.min(input.p1.y, tY);
					segmentAABB.upperBound_.x = Math.max(input.p1.x, tX);
					segmentAABB.upperBound_.y = Math.max(input.p1.y, tY);
				}
			} else {
				stack.push(node.child1);
				stack.push(node.child2);
			}
		}
		Box2D.Collision.b2AABB.Free(segmentAABB);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 */
	Box2D.Collision.b2DynamicTree.prototype.InsertLeaf = function(leaf) {
		this.m_insertionCount++;
		if (this.m_root === null) {
			this.m_root = leaf;
			this.m_root.parent = null;
			return;
		}
		var sibling = this.GetBestSibling(leaf);
		var parent = sibling.parent;
		var node2 = Box2D.Collision.b2DynamicTreeNode.Get();
		node2.parent = parent;
		node2.aabb.Combine(leaf.aabb, sibling.aabb);
		if (parent) {
			if (sibling.parent.child1 == sibling) {
				parent.child1 = node2;
			} else {
				parent.child2 = node2;
			}
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			while (parent) {
				if (parent.aabb.Contains(node2.aabb)) {
					break;
				}
				parent.aabb.Combine(parent.child1.aabb, parent.child2.aabb);
				node2 = parent;
				parent = parent.parent;
			}
		} else {
			node2.child1 = sibling;
			node2.child2 = leaf;
			sibling.parent = node2;
			leaf.parent = node2;
			this.m_root = node2;
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTree.prototype.GetBestSibling = function(leaf) {
		var center = leaf.aabb.GetCenter();
		var sibling = this.m_root;
		while(!sibling.IsLeaf()) {
			var child1 = sibling.child1;
			var child2 = sibling.child2;
			var norm1 = Math.abs((child1.aabb.lowerBound_.x + child1.aabb.upperBound_.x) / 2 - center.x) + Math.abs((child1.aabb.lowerBound_.y + child1.aabb.upperBound_.y) / 2 - center.y);
			var norm2 = Math.abs((child2.aabb.lowerBound_.x + child2.aabb.upperBound_.x) / 2 - center.x) + Math.abs((child2.aabb.lowerBound_.y + child2.aabb.upperBound_.y) / 2 - center.y);
			if (norm1 < norm2) {
				sibling = child1;
			} else {
				sibling = child2;
			}
		}
		Box2D.Common.Math.b2Vec2.Free(center);
		return sibling;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} leaf
	 */
	Box2D.Collision.b2DynamicTree.prototype.RemoveLeaf = function(leaf) {
		if (leaf == this.m_root) {
			this.m_root = null;
			return;
		}
		var node2 = leaf.parent;
		var node1 = node2.parent;
		var sibling;
		if (node2.child1 == leaf) {
			sibling = node2.child2;
		} else {
			sibling = node2.child1;
		}
		if (node1) {
			if (node1.child1 == node2) {
				node1.child1 = sibling;
			} else {
				node1.child2 = sibling;
			}
			sibling.parent = node1;
			while (node1) {
				var oldAABB = node1.aabb;
				node1.aabb.Combine(node1.child1.aabb, node1.child2.aabb);
				if (oldAABB.Contains(node1.aabb)) {
					break;
				}
				node1 = node1.parent;
			}
		} else {
			this.m_root = sibling;
			sibling.parent = null;
		}
		node2.Destroy();
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase = function() {
		/**
		 * @private
		 * @type {!Box2D.Collision.b2DynamicTree}
		 */
		this.m_tree = new Box2D.Collision.b2DynamicTree();
		/**
		 * @private
		 * @type {Array.<!Box2D.Collision.b2DynamicTreeNode>}
		 */
		this.m_moveBuffer = [];
	};
	/**
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {Box2D.Dynamics.b2Fixture} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.CreateProxy = function(aabb, fixture) {
		var proxy = this.m_tree.CreateProxy(aabb, fixture);
		this.BufferMove(proxy);
		return proxy;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.DestroyProxy = function(proxy) {
		this.UnBufferMove(proxy);
		this.m_tree.DestroyProxy(proxy);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @param {!Box2D.Collision.b2AABB} aabb
	 * @param {!Box2D.Common.Math.b2Vec2} displacement
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.MoveProxy = function(proxy, aabb, displacement) {
		var buffer = this.m_tree.MoveProxy(proxy, aabb, displacement);
		if (buffer) {
			this.BufferMove(proxy);
		}
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxyA
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxyB
	 * @return {boolean}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.TestOverlap = function(proxyA, proxyB) {
		var aabbA = this.m_tree.GetFatAABB(proxyA);
		var aabbB = this.m_tree.GetFatAABB(proxyB);
		return aabbA.TestOverlap(aabbB);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeNode} proxy
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetFatAABB = function(proxy) {
		return this.m_tree.GetFatAABB(proxy);
	};
	/**
	 * @return {number}
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.GetProxyCount = function() {
		return this.m_tree.length;
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture, !Box2D.Dynamics.b2Fixture)} callback
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.UpdatePairs = function(callback) {
		var __this = this;
		var pairs = [];
		while (this.m_moveBuffer.length > 0) {
			var queryProxy = this.m_moveBuffer.pop();
			var QueryCallback = function(fixture) {
				if (fixture != queryProxy.fixture) {
					pairs.push(new Box2D.Collision.b2DynamicTreePair(queryProxy.fixture, fixture));
				}
				return true;
			};
			var fatAABB = this.m_tree.GetFatAABB(queryProxy);
			this.m_tree.Query(QueryCallback, fatAABB);
		}
		var i = 0;
		while(i < pairs.length) {
			var primaryPair = pairs[i];
			callback(primaryPair.fixtureA, primaryPair.fixtureB);
			i++;
			while(i < pairs.length) {
				var pair = pairs[i];
				if (!(pair.fixtureA == primaryPair.fixtureA && pair.fixtureB == primaryPair.fixtureB)
					&& !(pair.fixtureA == primaryPair.fixtureB && pair.fixtureB == primaryPair.fixtureA)) {
					break;
				}
				i++;
			}
		}
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Query = function(callback, aabb) {
		this.m_tree.Query(callback, aabb);
	};
	/**
	 * @param {function(!Box2D.Collision.b2RayCastInput, !Box2D.Dynamics.b2Fixture): number} callback
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.RayCast = function(callback, input) {
		this.m_tree.RayCast(callback, input);
	};
	/**
	 * @param {number} iterations
	 */
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.Rebalance = function(iterations) {
		this.m_tree.Rebalance(iterations);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.BufferMove = function(proxy) {
		this.m_moveBuffer.push(proxy);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.prototype.UnBufferMove = function(proxy) {
		cr.arrayFindRemove(this.m_moveBuffer, proxy);
	};
	Box2D.Collision.b2DynamicTreeBroadPhase.__implements = {};
	Box2D.Collision.b2DynamicTreeBroadPhase.__implements[Box2D.Collision.IBroadPhase] = true;
	/**
	 * @private
	 * @param {Box2D.Dynamics.b2Fixture=} fixture
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreeNode = function(fixture) {
		/** @type {!Box2D.Collision.b2AABB} */
		this.aabb = Box2D.Collision.b2AABB.Get();
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.child1 = null;
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.child2 = null;
		/** @type {Box2D.Collision.b2DynamicTreeNode} */
		this.parent = null;
		/** @type {Box2D.Dynamics.b2Fixture} */
		this.fixture = null;
		if (typeof(fixture) != "undefined") {
			this.fixture = fixture;
		}
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Collision.b2DynamicTreeNode>}
	 */
	Box2D.Collision.b2DynamicTreeNode._freeCache = [];
	/**
	 * @param {Box2D.Dynamics.b2Fixture=} fixture
	 * @return {!Box2D.Collision.b2DynamicTreeNode}
	 */
	Box2D.Collision.b2DynamicTreeNode.Get = function(fixture) {
		if (Box2D.Collision.b2DynamicTreeNode._freeCache.length > 0) {
			var node = Box2D.Collision.b2DynamicTreeNode._freeCache.pop();
			if (typeof(fixture) != "undefined") {
				node.fixture = fixture;
			}
			node.aabb.SetZero();
			return node;
		}
		return new Box2D.Collision.b2DynamicTreeNode(fixture);
	};
	Box2D.Collision.b2DynamicTreeNode.prototype.Destroy = function() {
		this.child1 = null;
		this.child2 = null;
		this.parent = null;
		this.fixture = null;
		Box2D.Collision.b2DynamicTreeNode._freeCache.push(this);
	};
	/**
	 * @return boolean
	 */
	Box2D.Collision.b2DynamicTreeNode.prototype.IsLeaf = function () {
		return this.child1 === null;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 */
	Box2D.Collision.b2DynamicTreePair = function(fixtureA, fixtureB) {
		/** @type {!Box2D.Dynamics.b2Fixture} */
		this.fixtureA = fixtureA;
		/** @type {!Box2D.Dynamics.b2Fixture} */
		this.fixtureB = fixtureB;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Manifold = function() {
		this.m_pointCount = 0;
		this.m_type = 0;
		this.m_points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = new Box2D.Collision.b2ManifoldPoint();
		}
		this.m_localPlaneNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2Manifold.prototype.Reset = function() {
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i].Reset();
		}
		this.m_localPlaneNormal.SetZero();
		this.m_localPoint.SetZero();
		this.m_type = 0;
		this.m_pointCount = 0;
	};
	Box2D.Collision.b2Manifold.prototype.Set = function(m) {
		this.m_pointCount = m.m_pointCount;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i].Set(m.m_points[i]);
		}
		this.m_localPlaneNormal.SetV(m.m_localPlaneNormal);
		this.m_localPoint.SetV(m.m_localPoint);
		this.m_type = m.m_type;
	};
	Box2D.Collision.b2Manifold.prototype.Copy = function() {
		var copy = new Box2D.Collision.b2Manifold();
		copy.Set(this);
		return copy;
	};
	Box2D.Collision.b2Manifold.e_circles = 0x0001;
	Box2D.Collision.b2Manifold.e_faceA = 0x0002;
	Box2D.Collision.b2Manifold.e_faceB = 0x0004;
	/**
	 * @constructor
	 */
	Box2D.Collision.b2ManifoldPoint = function() {
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_id = new Box2D.Collision.b2ContactID();
		this.Reset();
	};
	Box2D.Collision.b2ManifoldPoint.prototype.Reset = function() {
		this.m_localPoint.SetZero();
		this.m_normalImpulse = 0.0;
		this.m_tangentImpulse = 0.0;
		this.m_id.SetKey(0);
	};
	Box2D.Collision.b2ManifoldPoint.prototype.Set = function(m) {
		this.m_localPoint.SetV(m.m_localPoint);
		this.m_normalImpulse = m.m_normalImpulse;
		this.m_tangentImpulse = m.m_tangentImpulse;
		this.m_id.Set(m.m_id);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} p1
	 * @param {!Box2D.Common.Math.b2Vec2} p2
	 * @param {number} maxFraction
	 * @constructor
	 */
	Box2D.Collision.b2RayCastInput = function(p1, p2, maxFraction) {
		  this.p1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.p2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  if (maxFraction === undefined) maxFraction = 1;
		  if (p1) this.p1.SetV(p1);
		  if (p2) this.p2.SetV(p2);
		  this.maxFraction = maxFraction;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2RayCastOutput = function() {
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Segment = function() {
		this.p1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.p2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2Segment.prototype.TestSegment = function(lambda, normal, segment, maxLambda) {
		if (maxLambda === undefined) maxLambda = 0;
		var s = segment.p1;
		var rX = segment.p2.x - s.x;
		var rY = segment.p2.y - s.y;
		var dX = this.p2.x - this.p1.x;
		var dY = this.p2.y - this.p1.y;
		var nX = dY;
		var nY = (-dX);
		var k_slop = 100.0 * Number.MIN_VALUE;
		var denom = (-(rX * nX + rY * nY));
		if (denom > k_slop) {
			var bX = s.x - this.p1.x;
			var bY = s.y - this.p1.y;
			var a = (bX * nX + bY * nY);
			if (0.0 <= a && a <= maxLambda * denom) {
				var mu2 = (-rX * bY) + rY * bX;
				if ((-k_slop * denom) <= mu2 && mu2 <= denom * (1.0 + k_slop)) {
					a /= denom;
					var nLen = Math.sqrt(nX * nX + nY * nY);
					nX /= nLen;
					nY /= nLen;
					lambda[0] = a;
					normal.Set(nX, nY);
					return true;
				}
			}
		}
		return false;
	};
	Box2D.Collision.b2Segment.prototype.Extend = function(aabb) {
		this.ExtendForward(aabb);
		this.ExtendBackward(aabb);
	};
	Box2D.Collision.b2Segment.prototype.ExtendForward = function(aabb) {
		var dX = this.p2.x - this.p1.x;
		var dY = this.p2.y - this.p1.y;
		var lambda = Math.min(dX > 0 ? (aabb.upperBound_.x - this.p1.x) / dX : dX < 0 ? (aabb.lowerBound_.x - this.p1.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound_.y - this.p1.y) / dY : dY < 0 ? (aabb.lowerBound_.y - this.p1.y) / dY : Number.POSITIVE_INFINITY);
		this.p2.x = this.p1.x + dX * lambda;
		this.p2.y = this.p1.y + dY * lambda;
	};
	Box2D.Collision.b2Segment.prototype.ExtendBackward = function(aabb) {
		var dX = (-this.p2.x) + this.p1.x;
		var dY = (-this.p2.y) + this.p1.y;
		var lambda = Math.min(dX > 0 ? (aabb.upperBound_.x - this.p2.x) / dX : dX < 0 ? (aabb.lowerBound_.x - this.p2.x) / dX : Number.POSITIVE_INFINITY, dY > 0 ? (aabb.upperBound_.y - this.p2.y) / dY : dY < 0 ? (aabb.lowerBound_.y - this.p2.y) / dY : Number.POSITIVE_INFINITY);
		this.p1.x = this.p2.x + dX * lambda;
		this.p1.y = this.p2.y + dY * lambda;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SeparationFunction = function() {
		this.m_localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Collision.b2SeparationFunction.prototype.Initialize = function(cache, proxyA, transformA, proxyB, transformB) {
		this.m_proxyA = proxyA;
		this.m_proxyB = proxyB;
		var count = cache.count;
;
		var localPointA;
		var localPointA1;
		var localPointA2;
		var localPointB;
		var localPointB1;
		var localPointB2;
		var pointAX = 0;
		var pointAY = 0;
		var pointBX = 0;
		var pointBY = 0;
		var normalX = 0;
		var normalY = 0;
		var tMat;
		var tVec;
		var s = 0;
		var sgn = 0;
		if (count == 1) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_points;
			localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			this.m_axis.x = pointBX - pointAX;
			this.m_axis.y = pointBY - pointAY;
			this.m_axis.Normalize();
		} else if (cache.indexB[0] == cache.indexB[1]) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_faceA;
			localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
			localPointB = this.m_proxyB.GetVertex(cache.indexB[0]);
			this.m_localPoint.x = 0.5 * (localPointA1.x + localPointA2.x);
			this.m_localPoint.y = 0.5 * (localPointA1.y + localPointA2.y);
			this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
			this.m_axis.Normalize();
			tVec = this.m_axis;
			tMat = transformA.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointB;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
			if (s < 0.0) {
				this.m_axis.NegativeSelf();
			}
		} else if (cache.indexA[0] == cache.indexA[0]) {
			this.m_type = Box2D.Collision.b2SeparationFunction.e_faceB;
			localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
			localPointA = this.m_proxyA.GetVertex(cache.indexA[0]);
			this.m_localPoint.x = 0.5 * (localPointB1.x + localPointB2.x);
			this.m_localPoint.y = 0.5 * (localPointB1.y + localPointB2.y);
			this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
			this.m_axis.Normalize();
			tVec = this.m_axis;
			tMat = transformB.R;
			normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tVec = this.m_localPoint;
			tMat = transformB.R;
			pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			tVec = localPointA;
			tMat = transformA.R;
			pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
			pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
			s = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
			if (s < 0.0) {
				this.m_axis.NegativeSelf();
			}
		} else {
			localPointA1 = this.m_proxyA.GetVertex(cache.indexA[0]);
			localPointA2 = this.m_proxyA.GetVertex(cache.indexA[1]);
			localPointB1 = this.m_proxyB.GetVertex(cache.indexB[0]);
			localPointB2 = this.m_proxyB.GetVertex(cache.indexB[1]);
			var dA = Box2D.Common.Math.b2Math.MulMV(transformA.R, Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1));
			var dB = Box2D.Common.Math.b2Math.MulMV(transformB.R, Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1));
			var a = dA.x * dA.x + dA.y * dA.y;
			var e = dB.x * dB.x + dB.y * dB.y;
			var r = Box2D.Common.Math.b2Math.SubtractVV(dB, dA);
			var c = dA.x * r.x + dA.y * r.y;
			var f = dB.x * r.x + dB.y * r.y;
			var b = dA.x * dB.x + dA.y * dB.y;
			var denom = a * e - b * b;
			s = 0.0;
			if (denom != 0.0) {
				s = Box2D.Common.Math.b2Math.Clamp((b * f - c * e) / denom, 0.0, 1.0);
			}
			var t = (b * s + f) / e;
			if (t < 0.0) {
				t = 0.0;
				s = Box2D.Common.Math.b2Math.Clamp((b - c) / a, 0.0, 1.0);
			}
			localPointA = Box2D.Common.Math.b2Vec2.Get(0, 0);
			localPointA.x = localPointA1.x + s * (localPointA2.x - localPointA1.x);
			localPointA.y = localPointA1.y + s * (localPointA2.y - localPointA1.y);
			localPointB = Box2D.Common.Math.b2Vec2.Get(0, 0);
			localPointB.x = localPointB1.x + s * (localPointB2.x - localPointB1.x);
			localPointB.y = localPointB1.y + s * (localPointB2.y - localPointB1.y);
			if (s == 0.0 || s == 1.0) {
				this.m_type = Box2D.Collision.b2SeparationFunction.e_faceB;
				this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointB2, localPointB1), 1.0);
				this.m_axis.Normalize();
				this.m_localPoint = localPointB;
				tVec = this.m_axis;
				tMat = transformB.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointA;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointAX - pointBX) * normalX + (pointAY - pointBY) * normalY;
				if (s < 0.0) {
					this.m_axis.NegativeSelf();
				}
			} else {
				this.m_type = Box2D.Collision.b2SeparationFunction.e_faceA;
				this.m_axis = Box2D.Common.Math.b2Math.CrossVF(Box2D.Common.Math.b2Math.SubtractVV(localPointA2, localPointA1), 1.0);
				this.m_localPoint = localPointA;
				tVec = this.m_axis;
				tMat = transformA.R;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tVec = this.m_localPoint;
				tMat = transformA.R;
				pointAX = transformA.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointAY = transformA.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				tVec = localPointB;
				tMat = transformB.R;
				pointBX = transformB.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
				pointBY = transformB.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
				sgn = (pointBX - pointAX) * normalX + (pointBY - pointAY) * normalY;
				if (s < 0.0) {
					this.m_axis.NegativeSelf();
				}
			}
		}
	};
	Box2D.Collision.b2SeparationFunction.prototype.Evaluate = function(transformA, transformB) {
		var axisA;
		var axisB;
		var localPointA;
		var localPointB;
		var pointA;
		var pointB;
		var seperation = 0;
		var normal;
		switch (this.m_type) {
		case Box2D.Collision.b2SeparationFunction.e_points:
			axisA = Box2D.Common.Math.b2Math.MulTMV(transformA.R, this.m_axis);
			axisB = Box2D.Common.Math.b2Math.MulTMV(transformB.R, this.m_axis.GetNegative());
			localPointA = this.m_proxyA.GetSupportVertex(axisA);
			localPointB = this.m_proxyB.GetSupportVertex(axisB);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, localPointA);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, localPointB);
			seperation = (pointB.x - pointA.x) * this.m_axis.x + (pointB.y - pointA.y) * this.m_axis.y;
			break;
		case Box2D.Collision.b2SeparationFunction.e_faceA:
			normal = Box2D.Common.Math.b2Math.MulMV(transformA.R, this.m_axis);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, this.m_localPoint);
			axisB = Box2D.Common.Math.b2Math.MulTMV(transformB.R, normal.GetNegative());
			localPointB = this.m_proxyB.GetSupportVertex(axisB);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, localPointB);
			seperation = (pointB.x - pointA.x) * normal.x + (pointB.y - pointA.y) * normal.y;
			break;
		case Box2D.Collision.b2SeparationFunction.e_faceB:
			normal = Box2D.Common.Math.b2Math.MulMV(transformB.R, this.m_axis);
			pointB = Box2D.Common.Math.b2Math.MulX(transformB, this.m_localPoint);
			axisA = Box2D.Common.Math.b2Math.MulTMV(transformA.R, normal.GetNegative());
			localPointA = this.m_proxyA.GetSupportVertex(axisA);
			pointA = Box2D.Common.Math.b2Math.MulX(transformA, localPointA);
			seperation = (pointA.x - pointB.x) * normal.x + (pointA.y - pointB.y) * normal.y;
			break;
		default:
;
			break;
		}
		return seperation;
	};
	Box2D.Collision.b2SeparationFunction.e_points = 0x01;
	Box2D.Collision.b2SeparationFunction.e_faceA = 0x02;
	Box2D.Collision.b2SeparationFunction.e_faceB = 0x04;
	/**
	 * @constructor
	 */
	Box2D.Collision.b2Simplex = function() {
		this.m_v1 = new Box2D.Collision.b2SimplexVertex();
		this.m_v2 = new Box2D.Collision.b2SimplexVertex();
		this.m_v3 = new Box2D.Collision.b2SimplexVertex();
		this.m_vertices = [this.m_v1, this.m_v2, this.m_v3];
	};
	Box2D.Collision.b2Simplex.prototype.ReadCache = function(cache, proxyA, transformA, proxyB, transformB) {
;
		var wALocal;
		var wBLocal;
		this.m_count = cache.count;
		var vertices = this.m_vertices;
		for (var i = 0; i < this.m_count; i++) {
			var v = vertices[i];
			v.indexA = cache.indexA[i];
			v.indexB = cache.indexB[i];
			wALocal = proxyA.GetVertex(v.indexA);
			wBLocal = proxyB.GetVertex(v.indexB);
			v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
			v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
			v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
			v.a = 0;
		}
		if (this.m_count > 1) {
			var metric1 = cache.metric;
			var metric2 = this.GetMetric();
			if (metric2 < .5 * metric1 || 2.0 * metric1 < metric2 || metric2 < Number.MIN_VALUE) {
				this.m_count = 0;
			}
		}
		if (this.m_count == 0) {
			v = vertices[0];
			v.indexA = 0;
			v.indexB = 0;
			wALocal = proxyA.GetVertex(0);
			wBLocal = proxyB.GetVertex(0);
			v.wA = Box2D.Common.Math.b2Math.MulX(transformA, wALocal);
			v.wB = Box2D.Common.Math.b2Math.MulX(transformB, wBLocal);
			v.w = Box2D.Common.Math.b2Math.SubtractVV(v.wB, v.wA);
			this.m_count = 1;
		}
	};
	Box2D.Collision.b2Simplex.prototype.WriteCache = function(cache) {
		cache.metric = this.GetMetric();
		cache.count = this.m_count;
		var vertices = this.m_vertices;
		for (var i = 0; i < this.m_count; i++) {
			cache.indexA[i] = vertices[i].indexA;
			cache.indexB[i] = vertices[i].indexB;
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetSearchDirection = function() {
		if (this.m_count == 1) {
			return this.m_v1.w.GetNegative();
		} else if (this.m_count == 2) {
				var e12 = Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w);
				var sgn = Box2D.Common.Math.b2Math.CrossVV(e12, this.m_v1.w.GetNegative());
				if (sgn > 0.0) {
					return Box2D.Common.Math.b2Math.CrossFV(1.0, e12);
				}
				else {
					return Box2D.Common.Math.b2Math.CrossVF(e12, 1.0);
				}
		} else {
;
			return Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetClosestPoint = function() {
		if (this.m_count == 1) {
			return this.m_v1.w;
		} else if (this.m_count == 2) {
			return Box2D.Common.Math.b2Vec2.Get(this.m_v1.a * this.m_v1.w.x + this.m_v2.a * this.m_v2.w.x, this.m_v1.a * this.m_v1.w.y + this.m_v2.a * this.m_v2.w.y);
		} else {
;
			return Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetWitnessPoints = function(pA, pB) {
		if (this.m_count == 1) {
			pA.SetV(this.m_v1.wA);
			pB.SetV(this.m_v1.wB);
		} else if (this.m_count == 2) {
			pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x;
			pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y;
			pB.x = this.m_v1.a * this.m_v1.wB.x + this.m_v2.a * this.m_v2.wB.x;
			pB.y = this.m_v1.a * this.m_v1.wB.y + this.m_v2.a * this.m_v2.wB.y;
		} else if (this.m_count == 3) {
			pB.x = pA.x = this.m_v1.a * this.m_v1.wA.x + this.m_v2.a * this.m_v2.wA.x + this.m_v3.a * this.m_v3.wA.x;
			pB.y = pA.y = this.m_v1.a * this.m_v1.wA.y + this.m_v2.a * this.m_v2.wA.y + this.m_v3.a * this.m_v3.wA.y;
		} else {
;
		}
	};
	Box2D.Collision.b2Simplex.prototype.GetMetric = function() {
		if (this.m_count == 1) {
			return 0.0;
		} else if (this.m_count == 2) {
			return Box2D.Common.Math.b2Math.SubtractVV(this.m_v1.w, this.m_v2.w).Length();
		} else if (this.m_count == 3) {
			return Box2D.Common.Math.b2Math.CrossVV(Box2D.Common.Math.b2Math.SubtractVV(this.m_v2.w, this.m_v1.w), Box2D.Common.Math.b2Math.SubtractVV(this.m_v3.w, this.m_v1.w));
		} else {
;
			return 0.0;
		}
	};
	Box2D.Collision.b2Simplex.prototype.Solve2 = function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
		var d12_2 = (-(w1.x * e12.x + w1.y * e12.y));
		if (d12_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		var d12_1 = (w2.x * e12.x + w2.y * e12.y);
		if (d12_1 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v2);
			return;
		}
		var inv_d12 = 1.0 / (d12_1 + d12_2);
		this.m_v1.a = d12_1 * inv_d12;
		this.m_v2.a = d12_2 * inv_d12;
		this.m_count = 2;
	};
	Box2D.Collision.b2Simplex.prototype.Solve3 = function() {
		var w1 = this.m_v1.w;
		var w2 = this.m_v2.w;
		var w3 = this.m_v3.w;
		var e12 = Box2D.Common.Math.b2Math.SubtractVV(w2, w1);
		var w1e12 = Box2D.Common.Math.b2Math.Dot(w1, e12);
		var w2e12 = Box2D.Common.Math.b2Math.Dot(w2, e12);
		var d12_1 = w2e12;
		var d12_2 = (-w1e12);
		var e13 = Box2D.Common.Math.b2Math.SubtractVV(w3, w1);
		var w1e13 = Box2D.Common.Math.b2Math.Dot(w1, e13);
		var w3e13 = Box2D.Common.Math.b2Math.Dot(w3, e13);
		var d13_1 = w3e13;
		var d13_2 = (-w1e13);
		var e23 = Box2D.Common.Math.b2Math.SubtractVV(w3, w2);
		var w2e23 = Box2D.Common.Math.b2Math.Dot(w2, e23);
		var w3e23 = Box2D.Common.Math.b2Math.Dot(w3, e23);
		var d23_1 = w3e23;
		var d23_2 = (-w2e23);
		var n123 = Box2D.Common.Math.b2Math.CrossVV(e12, e13);
		var d123_1 = n123 * Box2D.Common.Math.b2Math.CrossVV(w2, w3);
		var d123_2 = n123 * Box2D.Common.Math.b2Math.CrossVV(w3, w1);
		var d123_3 = n123 * Box2D.Common.Math.b2Math.CrossVV(w1, w2);
		if (d12_2 <= 0.0 && d13_2 <= 0.0) {
			this.m_v1.a = 1.0;
			this.m_count = 1;
			return;
		}
		if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {
			var inv_d12 = 1.0 / (d12_1 + d12_2);
			this.m_v1.a = d12_1 * inv_d12;
			this.m_v2.a = d12_2 * inv_d12;
			this.m_count = 2;
			return;
		}
		if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {
			var inv_d13 = 1.0 / (d13_1 + d13_2);
			this.m_v1.a = d13_1 * inv_d13;
			this.m_v3.a = d13_2 * inv_d13;
			this.m_count = 2;
			this.m_v2.Set(this.m_v3);
			return;
		}
		if (d12_1 <= 0.0 && d23_2 <= 0.0) {
			this.m_v2.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v2);
			return;
		}
		if (d13_1 <= 0.0 && d23_1 <= 0.0) {
			this.m_v3.a = 1.0;
			this.m_count = 1;
			this.m_v1.Set(this.m_v3);
			return;
		}
		if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {
			var inv_d23 = 1.0 / (d23_1 + d23_2);
			this.m_v2.a = d23_1 * inv_d23;
			this.m_v3.a = d23_2 * inv_d23;
			this.m_count = 2;
			this.m_v1.Set(this.m_v3);
			return;
		}
		var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);
		this.m_v1.a = d123_1 * inv_d123;
		this.m_v2.a = d123_2 * inv_d123;
		this.m_v3.a = d123_3 * inv_d123;
		this.m_count = 3;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SimplexCache = function() {
		this.indexA = [0, 0, 0];
		this.indexB = [0, 0, 0];
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2SimplexVertex = function() {};
	Box2D.Collision.b2SimplexVertex.prototype.Set = function(other) {
		this.wA.SetV(other.wA);
		this.wB.SetV(other.wB);
		this.w.SetV(other.w);
		this.a = other.a;
		this.indexA = other.indexA;
		this.indexB = other.indexB;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2TOIInput = function() {
		this.proxyA = new Box2D.Collision.b2DistanceProxy();
		this.proxyB = new Box2D.Collision.b2DistanceProxy();
		this.sweepA = new Box2D.Common.Math.b2Sweep();
		this.sweepB = new Box2D.Common.Math.b2Sweep();
	};
	Box2D.Collision.b2TimeOfImpact = {};
	Box2D.Collision.b2TimeOfImpact.TimeOfImpact = function(input) {
		Box2D.Collision.b2TimeOfImpact.b2_toiCalls++;
		var proxyA = input.proxyA;
		var proxyB = input.proxyB;
		var sweepA = input.sweepA;
		var sweepB = input.sweepB;
;
;
		var radius = proxyA.m_radius + proxyB.m_radius;
		var tolerance = input.tolerance;
		var alpha = 0.0;
		var k_maxIterations = 1000;
		var iter = 0;
		var target = 0.0;
		Box2D.Collision.b2TimeOfImpact.s_cache.count = 0;
		Box2D.Collision.b2TimeOfImpact.s_distanceInput.useRadii = false;
		for (;;) {
			sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, alpha);
			sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, alpha);
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.proxyA = proxyA;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.proxyB = proxyB;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.transformA = Box2D.Collision.b2TimeOfImpact.s_xfA;
			Box2D.Collision.b2TimeOfImpact.s_distanceInput.transformB = Box2D.Collision.b2TimeOfImpact.s_xfB;
			Box2D.Collision.b2Distance.Distance(Box2D.Collision.b2TimeOfImpact.s_distanceOutput, Box2D.Collision.b2TimeOfImpact.s_cache, Box2D.Collision.b2TimeOfImpact.s_distanceInput);
			if (Box2D.Collision.b2TimeOfImpact.s_distanceOutput.distance <= 0.0) {
				alpha = 1.0;
				break;
			}
			Box2D.Collision.b2TimeOfImpact.s_fcn.Initialize(Box2D.Collision.b2TimeOfImpact.s_cache, proxyA, Box2D.Collision.b2TimeOfImpact.s_xfA, proxyB, Box2D.Collision.b2TimeOfImpact.s_xfB);
			var separation = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
			if (separation <= 0.0) {
				alpha = 1.0;
				break;
			}
			if (iter == 0) {
				if (separation > radius) {
					target = Math.max(radius - tolerance, 0.75 * radius);
				} else {
					target = Math.max(separation - tolerance, 0.02 * radius);
				}
			}
			if (separation - target < 0.5 * tolerance) {
				if (iter == 0) {
					alpha = 1.0;
					break;
				}
				break;
			}
			var newAlpha = alpha; {
				var x1 = alpha;
				var x2 = 1.0;
				var f1 = separation;
				sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, x2);
				sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, x2);
				var f2 = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
				if (f2 >= target) {
					alpha = 1.0;
					break;
				}
				var rootIterCount = 0;
				for (;;) {
					var x = 0;
					if (rootIterCount & 1) {
						x = x1 + (target - f1) * (x2 - x1) / (f2 - f1);
					} else {
						x = 0.5 * (x1 + x2);
					}
					sweepA.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfA, x);
					sweepB.GetTransform(Box2D.Collision.b2TimeOfImpact.s_xfB, x);
					var f = Box2D.Collision.b2TimeOfImpact.s_fcn.Evaluate(Box2D.Collision.b2TimeOfImpact.s_xfA, Box2D.Collision.b2TimeOfImpact.s_xfB);
					if (Math.abs(f - target) < 0.025 * tolerance) {
						newAlpha = x;
						break;
					}
					if (f > target) {
						x1 = x;
						f1 = f;
					} else {
						x2 = x;
						f2 = f;
					}
					rootIterCount++;
					Box2D.Collision.b2TimeOfImpact.b2_toiRootIters++;
					if (rootIterCount == 50) {
						break;
					}
				}
				Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = Math.max(Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters, rootIterCount);
			}
			if (newAlpha < (1.0 + 100.0 * Number.MIN_VALUE) * alpha) {
				break;
			}
			alpha = newAlpha;
			iter++;
			Box2D.Collision.b2TimeOfImpact.b2_toiIters++;
			if (iter == k_maxIterations) {
				break;
			}
		}
		Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = Math.max(Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters, iter);
		return alpha;
	};
	/**
	 * @constructor
	 */
	Box2D.Collision.b2WorldManifold = function() {
		/** @type  {!Box2D.Common.Math.b2Vec2} */
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {Array.<!Box2D.Common.Math.b2Vec2>} */
		this.m_points = [];
		/** @type {number} */
		this.m_pointCount = 0;
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {!Box2D.Collision.b2Manifold} manifold
	 * @param {!Box2D.Common.Math.b2Transform} xfA
	 * @param {number} radiusA
	 * @param {!Box2D.Common.Math.b2Transform} xfB
	 * @param {number} radiusB
	 */
	Box2D.Collision.b2WorldManifold.prototype.Initialize = function(manifold, xfA, radiusA, xfB, radiusB) {
		if (manifold.m_pointCount == 0) {
			return;
		}
		var i = 0;
		var tVec;
		var tMat;
		var normalX = 0;
		var normalY = 0;
		var planePointX = 0;
		var planePointY = 0;
		var clipPointX = 0;
		var clipPointY = 0;
		switch (manifold.m_type) {
			case Box2D.Collision.b2Manifold.e_circles:
				tMat = xfA.R;
				tVec = manifold.m_localPoint;
				var pointAX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				var pointAY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfB.R;
				tVec = manifold.m_points[0].m_localPoint;
				var pointBX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				var pointBY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				var dX = pointBX - pointAX;
				var dY = pointBY - pointAY;
				var d2 = dX * dX + dY * dY;
				if (d2 > Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
					var d = Math.sqrt(d2);
					this.m_normal.x = dX / d;
					this.m_normal.y = dY / d;
				} else {
					this.m_normal.x = 1;
					this.m_normal.y = 0;
				}
				var cAX = pointAX + radiusA * this.m_normal.x;
				var cAY = pointAY + radiusA * this.m_normal.y;
				var cBX = pointBX - radiusB * this.m_normal.x;
				var cBY = pointBY - radiusB * this.m_normal.y;
				this.m_points[0].x = 0.5 * (cAX + cBX);
				this.m_points[0].y = 0.5 * (cAY + cBY);
				break;
			case Box2D.Collision.b2Manifold.e_faceA:
				tMat = xfA.R;
				tVec = manifold.m_localPlaneNormal;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfA.R;
				tVec = manifold.m_localPoint;
				planePointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				planePointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_normal.x = normalX;
				this.m_normal.y = normalY;
				for (i = 0; i < manifold.m_pointCount; i++) {
					tMat = xfB.R;
					tVec = manifold.m_points[i].m_localPoint;
					clipPointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
					clipPointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
					this.m_points[i].x = clipPointX + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalX;
					this.m_points[i].y = clipPointY + 0.5 * (radiusA - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusB) * normalY;
				}
				break;
			case Box2D.Collision.b2Manifold.e_faceB:
				tMat = xfB.R;
				tVec = manifold.m_localPlaneNormal;
				normalX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				normalY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				tMat = xfB.R;
				tVec = manifold.m_localPoint;
				planePointX = xfB.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
				planePointY = xfB.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
				this.m_normal.x = (-normalX);
				this.m_normal.y = (-normalY);
				for (i = 0; i < manifold.m_pointCount; i++) {
					tMat = xfA.R;
					tVec = manifold.m_points[i].m_localPoint;
					clipPointX = xfA.position.x + tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
					clipPointY = xfA.position.y + tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
					this.m_points[i].x = clipPointX + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalX;
					this.m_points[i].y = clipPointY + 0.5 * (radiusB - (clipPointX - planePointX) * normalX - (clipPointY - planePointY) * normalY - radiusA) * normalY;
				}
				break;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2BodyDef} bd
	 * @param {!Box2D.Dynamics.b2World} world
	 * @constructor
	 */
	Box2D.Dynamics.b2Body = function(bd, world) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Body" + Box2D.Dynamics.b2Body.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Transform}
		 */
		this.m_xf = new Box2D.Common.Math.b2Transform();
		this.m_xf.position.SetV(bd.position);
		this.m_xf.R.Set(bd.angle);
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Sweep}
		 */
		this.m_sweep = new Box2D.Common.Math.b2Sweep();
		this.m_sweep.localCenter.SetZero();
		this.m_sweep.t0 = 1.0;
		this.m_sweep.a0 = this.m_sweep.a = bd.angle;
		this.m_sweep.c.x = (this.m_xf.R.col1.x * this.m_sweep.localCenter.x + this.m_xf.R.col2.x * this.m_sweep.localCenter.y);
		this.m_sweep.c.y = (this.m_xf.R.col1.y * this.m_sweep.localCenter.x + this.m_xf.R.col2.y * this.m_sweep.localCenter.y);
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.SetV(this.m_sweep.c);
		/**
		  * @private
		  * @type {!Box2D.Common.Math.b2Vec2}
		  */
		this.m_linearVelocity = bd.linearVelocity.Copy();
		/**
		  * @private
		  * @type {!Box2D.Common.Math.b2Vec2}
		  */
		this.m_force = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_bullet = bd.bullet;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_fixedRotation = bd.fixedRotation;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_allowSleep = bd.allowSleep;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_awake = bd.awake;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_active = bd.active;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2World}
		 */
		this.m_world = world;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Joints.b2Joint}
		 */
		this.m_jointList = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		 this.contactList = new Box2D.Dynamics.Contacts.b2ContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Controllers.b2ControllerList}
		 */
		this.controllerList = new Box2D.Dynamics.Controllers.b2ControllerList();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_controllerCount = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_angularVelocity = bd.angularVelocity;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_linearDamping = bd.linearDamping;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_angularDamping = bd.angularDamping;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_torque = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_sleepTime = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_type = bd.type;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_mass = this.m_type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody ? 1 : 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_invMass = this.m_type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody ? 1 : 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_I = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_invI = 0;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_inertiaScale = bd.inertiaScale;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2FixtureList}
		 */
		this.fixtureList = new Box2D.Dynamics.b2FixtureList();
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2BodyList>}
		 */
		 this.m_lists = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2FixtureDef} def
	 */
	Box2D.Dynamics.b2Body.prototype.CreateFixture = function(def) {
;
		var fixture = new Box2D.Dynamics.b2Fixture(this, this.m_xf, def);
		if (this.m_active) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.CreateProxy(broadPhase, this.m_xf);
		}
		this.fixtureList.AddFixture(fixture);
		fixture.m_body = this;
		if (fixture.m_density > 0.0) {
			this.ResetMassData();
		}
		this.m_world.m_newFixture = true;
		return fixture;
	};
	Box2D.Dynamics.b2Body.prototype.CreateFixture2 = function(shape, density) {
		if (density === undefined) density = 0.0;
		var def = new Box2D.Dynamics.b2FixtureDef();
		def.shape = shape;
		def.density = density;
		return this.CreateFixture(def);
	};
	Box2D.Dynamics.b2Body.prototype.Destroy = function() {
		Box2D.Common.Math.b2Vec2.Free(this.m_linearVelocity);
		Box2D.Common.Math.b2Vec2.Free(this.m_force);
	};
	Box2D.Dynamics.b2Body.prototype.DestroyFixture = function(fixture) {
;
		this.fixtureList.RemoveFixture(fixture);
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			if (fixture == contactNode.contact.m_fixtureA || fixture == contactNode.contact.m_fixtureB) {
				this.m_world.m_contactManager.Destroy(contactNode.contact);
			}
		}
		if (this.m_active) {
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			fixture.DestroyProxy(broadPhase);
		}
		fixture.Destroy();
		fixture.m_body = null;
		this.ResetMassData();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 * @param {number} angle
	 */
	Box2D.Dynamics.b2Body.prototype.SetPositionAndAngle = function(position, angle) {
;
		this.m_xf.R.Set(angle);
		this.m_xf.position.SetV(position);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_sweep.c.x = (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_sweep.c.y = (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		this.m_sweep.c.x += this.m_xf.position.x;
		this.m_sweep.c.y += this.m_xf.position.y;
		this.m_sweep.c0.SetV(this.m_sweep.c);
		this.m_sweep.a0 = this.m_sweep.a = angle;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			node.fixture.Synchronize(broadPhase, this.m_xf, this.m_xf);
		}
		this.m_world.m_contactManager.FindNewContacts();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Dynamics.b2Body.prototype.SetTransform = function(xf) {
		this.SetPositionAndAngle(xf.position, xf.GetAngle());
	};
	/**
	 * @return {!Box2D.Common.Math.b2Transform}
	 */
	Box2D.Dynamics.b2Body.prototype.GetTransform = function() {
		return this.m_xf;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.b2Body.prototype.GetPosition = function() {
		return this.m_xf.position;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} position
	 */
	Box2D.Dynamics.b2Body.prototype.SetPosition = function(position) {
		this.SetPositionAndAngle(position, this.GetAngle());
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetAngle = function() {
		return this.m_sweep.a;
	};
	/**
	 * @param {number} angle
	 */
	Box2D.Dynamics.b2Body.prototype.SetAngle = function(angle) {
		this.SetPositionAndAngle(this.GetPosition(), angle);
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldCenter = function() {
		return this.m_sweep.c;
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalCenter = function() {
		return this.m_sweep.localCenter;
	};
	Box2D.Dynamics.b2Body.prototype.SetLinearVelocity = function(v) {
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			return;
		}
		this.m_linearVelocity.SetV(v);
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocity = function() {
		return this.m_linearVelocity;
	};
	Box2D.Dynamics.b2Body.prototype.SetAngularVelocity = function(omega) {
		if (omega === undefined) omega = 0;
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			return;
		}
		this.m_angularVelocity = omega;
	};
	Box2D.Dynamics.b2Body.prototype.GetAngularVelocity = function() {
		return this.m_angularVelocity;
	};
	Box2D.Dynamics.b2Body.prototype.GetDefinition = function() {
		var bd = new Box2D.Dynamics.b2BodyDef();
		bd.type = this.GetType();
		bd.allowSleep = this.m_allowSleep;
		bd.angle = this.GetAngle();
		bd.angularDamping = this.m_angularDamping;
		bd.angularVelocity = this.m_angularVelocity;
		bd.fixedRotation = this.m_fixedRotation;
		bd.bullet = this.m_bullet;
		bd.active = this.m_active;
		bd.awake = this.m_awake;
		bd.linearDamping = this.m_linearDamping;
		bd.linearVelocity.SetV(this.GetLinearVelocity());
		bd.position = this.GetPosition();
		return bd;
	};
	Box2D.Dynamics.b2Body.prototype.ApplyForce = function(force, point) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_force.x += force.x;
		this.m_force.y += force.y;
		this.m_torque += ((point.x - this.m_sweep.c.x) * force.y - (point.y - this.m_sweep.c.y) * force.x);
	};
	Box2D.Dynamics.b2Body.prototype.ApplyTorque = function(torque) {
		if (torque === undefined) torque = 0;
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_torque += torque;
	};
	Box2D.Dynamics.b2Body.prototype.ApplyImpulse = function(impulse, point) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.SetAwake(true);
		this.m_linearVelocity.x += this.m_invMass * impulse.x;
		this.m_linearVelocity.y += this.m_invMass * impulse.y;
		this.m_angularVelocity += this.m_invI * ((point.x - this.m_sweep.c.x) * impulse.y - (point.y - this.m_sweep.c.y) * impulse.x);
	};
	Box2D.Dynamics.b2Body.prototype.Split = function(callback) {
		var linearVelocity = this.GetLinearVelocity().Copy();
		var angularVelocity = this.GetAngularVelocity();
		var center = this.GetWorldCenter();
		var body1 = this;
		var body2 = this.m_world.CreateBody(this.GetDefinition());
		var prev;
		for (var node = body1.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			var f = node.fixture;
			if (callback(f)) {
				body1.fixtureList.RemoveFixture(f);
				body2.fixtureList.AddFixture(f);
			}
		}
		body1.ResetMassData();
		body2.ResetMassData();
		var center1 = body1.GetWorldCenter();
		var center2 = body2.GetWorldCenter();
		var velocity1 = Box2D.Common.Math.b2Math.AddVV(linearVelocity, Box2D.Common.Math.b2Math.CrossFV(angularVelocity, Box2D.Common.Math.b2Math.SubtractVV(center1, center)));
		var velocity2 = Box2D.Common.Math.b2Math.AddVV(linearVelocity, Box2D.Common.Math.b2Math.CrossFV(angularVelocity, Box2D.Common.Math.b2Math.SubtractVV(center2, center)));
		body1.SetLinearVelocity(velocity1);
		body2.SetLinearVelocity(velocity2);
		body1.SetAngularVelocity(angularVelocity);
		body2.SetAngularVelocity(angularVelocity);
		body1.SynchronizeFixtures();
		body2.SynchronizeFixtures();
		return body2;
	};
	Box2D.Dynamics.b2Body.prototype.Merge = function(other) {
		for (var node = other.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			this.fixtureList.AddFixture(node.fixture);
			other.fixtureList.RemoveFixture(node.fixture);
		}
		other.ResetMassData();
		this.ResetMassData();
		this.SynchronizeFixtures();
	};
	Box2D.Dynamics.b2Body.prototype.GetMass = function() {
		return this.m_mass;
	};
	Box2D.Dynamics.b2Body.prototype.GetInertia = function() {
		return this.m_I;
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2MassData=} massData
	 * @return {!Box2D.Collision.Shapes.b2MassData}
	 */
	Box2D.Dynamics.b2Body.prototype.GetMassData = function(massData) {
		if (!massData) {
			massData = new Box2D.Collision.Shapes.b2MassData();
		}
		massData.mass = this.m_mass;
		massData.I = this.m_I;
		massData.center.SetV(this.m_sweep.localCenter);
		return massData;
	};
	/**
	 * @param {!Box2D.Collision.Shapes.b2MassData} massData
	 */
	Box2D.Dynamics.b2Body.prototype.SetMassData = function(massData) {
;
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return;
		}
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_mass = massData.mass;
		if (this.m_mass <= 0.0) {
			this.m_mass = 1.0;
		}
		this.m_invMass = 1.0 / this.m_mass;
		if (massData.I > 0.0 && !this.m_fixedRotation) {
			this.m_I = massData.I - this.m_mass * (massData.center.x * massData.center.x + massData.center.y * massData.center.y);
			this.m_invI = 1.0 / this.m_I;
		}
		var oldCenter = this.m_sweep.c.Copy();
		this.m_sweep.localCenter.SetV(massData.center);
		this.m_sweep.c0.SetV(Box2D.Common.Math.b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
		this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
	};
	Box2D.Dynamics.b2Body.prototype.ResetMassData = function() {
		this.m_mass = 0.0;
		this.m_invMass = 0.0;
		this.m_I = 0.0;
		this.m_invI = 0.0;
		this.m_sweep.localCenter.SetZero();
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody || this.m_type == Box2D.Dynamics.b2BodyDef.b2_kinematicBody) {
			return;
		}
		var center = Box2D.Common.Math.b2Vec2.Get(0, 0);
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			var f = node.fixture;
			if (f.m_density == 0.0) {
				continue;
			}
			var massData = f.GetMassData();
			this.m_mass += massData.mass;
			center.x += massData.center.x * massData.mass;
			center.y += massData.center.y * massData.mass;
			this.m_I += massData.I;
		}
		if (this.m_mass > 0.0) {
			this.m_invMass = 1.0 / this.m_mass;
			center.x *= this.m_invMass;
			center.y *= this.m_invMass;
		} else {
			this.m_mass = 1.0;
			this.m_invMass = 1.0;
		}
		if (this.m_I > 0.0 && !this.m_fixedRotation) {
			this.m_I -= this.m_mass * (center.x * center.x + center.y * center.y);
			this.m_I *= this.m_inertiaScale;
;
			this.m_invI = 1.0 / this.m_I;
		} else {
			this.m_I = 0.0;
			this.m_invI = 0.0;
		}
		var oldCenter = this.m_sweep.c.Copy();
		this.m_sweep.localCenter.SetV(center);
		this.m_sweep.c0.SetV(Box2D.Common.Math.b2Math.MulX(this.m_xf, this.m_sweep.localCenter));
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_linearVelocity.x += this.m_angularVelocity * (-(this.m_sweep.c.y - oldCenter.y));
		this.m_linearVelocity.y += this.m_angularVelocity * (+(this.m_sweep.c.x - oldCenter.x));
		Box2D.Common.Math.b2Vec2.Free(center);
		Box2D.Common.Math.b2Vec2.Free(oldCenter);
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldPoint = function(localPoint) {
		var A = this.m_xf.R;
		var u = Box2D.Common.Math.b2Vec2.Get(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		u.x += this.m_xf.position.x;
		u.y += this.m_xf.position.y;
		return u;
	};
	Box2D.Dynamics.b2Body.prototype.GetWorldVector = function(localVector) {
		return Box2D.Common.Math.b2Math.MulMV(this.m_xf.R, localVector);
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalPoint = function(worldPoint) {
		return Box2D.Common.Math.b2Math.MulXT(this.m_xf, worldPoint);
	};
	Box2D.Dynamics.b2Body.prototype.GetLocalVector = function(worldVector) {
		return Box2D.Common.Math.b2Math.MulTMV(this.m_xf.R, worldVector);
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocityFromWorldPoint = function(worldPoint) {
		return Box2D.Common.Math.b2Vec2.Get(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
	};
	Box2D.Dynamics.b2Body.prototype.GetLinearVelocityFromLocalPoint = function(localPoint) {
		var A = this.m_xf.R;
		var worldPoint = Box2D.Common.Math.b2Vec2.Get(A.col1.x * localPoint.x + A.col2.x * localPoint.y, A.col1.y * localPoint.x + A.col2.y * localPoint.y);
		worldPoint.x += this.m_xf.position.x;
		worldPoint.y += this.m_xf.position.y;
		var velocity = Box2D.Common.Math.b2Vec2.Get(this.m_linearVelocity.x - this.m_angularVelocity * (worldPoint.y - this.m_sweep.c.y), this.m_linearVelocity.y + this.m_angularVelocity * (worldPoint.x - this.m_sweep.c.x));
		Box2D.Common.Math.b2Vec2.Free(worldPoint);
		return velocity;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetLinearDamping = function() {
		return this.m_linearDamping;
	};
	/**
	 * @param {number} linearDamping
	 */
	Box2D.Dynamics.b2Body.prototype.SetLinearDamping = function(linearDamping) {
		this.m_linearDamping = linearDamping;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetAngularDamping = function() {
		return this.m_angularDamping;
	};
	/**
	 * @param {number} angularDamping
	 */
	Box2D.Dynamics.b2Body.prototype.SetAngularDamping = function(angularDamping) {
		this.m_angularDamping = angularDamping;
	};
	/**
	 * @param {number} type
	 */
	Box2D.Dynamics.b2Body.prototype.SetType = function(type) {
		if (this.m_type == type) {
			return;
		}
		this.m_type = type;
		this.ResetMassData();
		if (this.m_type == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.m_linearVelocity.SetZero();
			this.m_angularVelocity = 0.0;
		}
		this.SetAwake(true);
		this.m_force.SetZero();
		this.m_torque = 0.0;
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.FlagForFiltering();
		}
		for (var i = 0; i < this.m_lists.length; i++) {
			this.m_lists[i].UpdateBody(this);
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Body.prototype.GetType = function() {
		return this.m_type;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetBullet = function(flag) {
		this.m_bullet = flag;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsBullet = function() {
		return this.m_bullet;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetSleepingAllowed = function(flag) {
		this.m_allowSleep = flag;
		if (!flag) {
			this.SetAwake(true);
		}
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetAwake = function(flag) {
		if (this.m_awake != flag) {
			this.m_awake = flag;
			this.m_sleepTime = 0;
			if (!flag) {
				this.m_linearVelocity.SetZero();
				this.m_angularVelocity = 0.0;
				this.m_force.SetZero();
				this.m_torque = 0.0;
			}
			for (var i = 0; i < this.m_lists.length; i++) {
				this.m_lists[i].UpdateBody(this);
			}
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsAwake = function() {
		return this.m_awake;
	};
	/**
	 * @param {boolean} fixed
	 */
	Box2D.Dynamics.b2Body.prototype.SetFixedRotation = function(fixed) {
		this.m_fixedRotation = fixed;
		this.ResetMassData();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsFixedRotation = function() {
		return this.m_fixedRotation;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2Body.prototype.SetActive = function(flag) {
		if (flag == this.m_active) {
			return;
		}
		if (flag) {
			this.m_active = true;
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
				node.fixture.CreateProxy(broadPhase, this.m_xf);
			}
		} else {
			this.m_active = false;
			var broadPhase = this.m_world.m_contactManager.m_broadPhase;
			for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
				node.fixture.DestroyProxy(broadPhase);
			}
			for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				this.m_world.m_contactManager.Destroy(contactNode.contact);
			}
		}
		for (var i = 0; i < this.m_lists.length; i++) {
			this.m_lists[i].UpdateBody(this);
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsActive = function() {
		return this.m_active;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Body.prototype.IsSleepingAllowed = function() {
		return this.m_allowSleep;
	};
	Box2D.Dynamics.b2Body.prototype.GetFixtureList = function() {
		return this.fixtureList;
	};
	Box2D.Dynamics.b2Body.prototype.GetJointList = function() {
		return this.m_jointList;
	};
	Box2D.Dynamics.b2Body.prototype.GetControllerList = function() {
		return this.controllerList;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2Body.prototype.AddController = function(controller) {
		this.controllerList.AddController(controller);
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2Body.prototype.RemoveController = function(controller) {
		this.controllerList.RemoveController(controller);
	};
	Box2D.Dynamics.b2Body.prototype.GetContactList = function() {
		return this.contactList;
	};
	Box2D.Dynamics.b2Body.prototype.GetWorld = function() {
		return this.m_world;
	};
	Box2D.Dynamics.b2Body.prototype.SynchronizeFixtures = function() {
		var xf1 = Box2D.Dynamics.b2Body.s_xf1;
		xf1.R.Set(this.m_sweep.a0);
		var tMat = xf1.R;
		var tVec = this.m_sweep.localCenter;
		xf1.position.x = this.m_sweep.c0.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		xf1.position.y = this.m_sweep.c0.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var f;
		var broadPhase = this.m_world.m_contactManager.m_broadPhase;
		for (var node = this.fixtureList.GetFirstNode(); node; node = node.GetNextNode()) {
			node.fixture.Synchronize(broadPhase, xf1, this.m_xf);
		}
	};
	Box2D.Dynamics.b2Body.prototype.SynchronizeTransform = function() {
		this.m_xf.R.Set(this.m_sweep.a);
		var tMat = this.m_xf.R;
		var tVec = this.m_sweep.localCenter;
		this.m_xf.position.x = this.m_sweep.c.x - (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		this.m_xf.position.y = this.m_sweep.c.y - (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
	};
	Box2D.Dynamics.b2Body.prototype.ShouldCollide = function(other) {
		if (this.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody && other.m_type != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			return false;
		}
		for (var jn = this.m_jointList; jn; jn = jn.next) {
			if (jn.other == other) if (jn.joint.m_collideConnected == false) {
				return false;
			}
		}
		return true;
	};
	/**
	 * @param {number} t
	 */
	Box2D.Dynamics.b2Body.prototype.Advance = function(t) {
		this.m_sweep.Advance(t);
		this.m_sweep.c.SetV(this.m_sweep.c0);
		this.m_sweep.a = this.m_sweep.a0;
		this.SynchronizeTransform();
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.b2Body.NEXT_ID = 0;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyDef = function() {
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.position = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {!Box2D.Common.Math.b2Vec2} */
		this.linearVelocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		/** @type {number} */
		this.angle = 0.0;
		/** @type {number} */
		this.angularVelocity = 0.0;
		/** @type {number} */
		this.linearDamping = 0.0;
		/** @type {number} */
		this.angularDamping = 0.0;
		/** @type {boolean} */
		this.allowSleep = true;
		/** @type {boolean} */
		this.awake = true;
		/** @type {boolean} */
		this.fixedRotation = false;
		/** @type {boolean} */
		this.bullet = false;
		/** @type {number} */
		this.type = Box2D.Dynamics.b2BodyDef.b2_staticBody;
		/** @type {boolean} */
		this.active = true;
		/** @type {number} */
		this.inertiaScale = 1.0;
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_staticBody = 0;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_kinematicBody = 1;
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2BodyDef.b2_dynamicBody = 2;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyList = function() {
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.b2BodyListNode>}
		 */
		this.bodyFirstNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
			this.bodyFirstNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.b2BodyListNode>}
		 */
		this.bodyLastNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
			this.bodyLastNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Object.<Array.<Box2D.Dynamics.b2BodyListNode>>}
		 */
		this.bodyNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.bodyCount = 0;
	};
	/**
	 * @param {number} type
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyList.prototype.GetFirstNode = function(type) {
		return this.bodyFirstNodes[type];
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.AddBody = function(body) {
		var bodyID = body.ID;
		if (this.bodyNodeLookup[bodyID] == null) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.allBodies);
			this.UpdateBody(body);
			body.m_lists.push(this);
			this.bodyCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.UpdateBody = function(body) {
		var type = body.GetType();
		var bodyID = body.ID;
		var awake = body.IsAwake();
		var active = body.IsActive();
		if (type == Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies);
		}
		if (type != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticBodies);
		}
		if (type != Box2D.Dynamics.b2BodyDef.b2_staticBody && active && awake) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies);
		}
		if (awake) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.awakeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.awakeBodies);
		}
		if (active) {
			this.CreateNode(body, bodyID, Box2D.Dynamics.b2BodyList.TYPES.activeBodies);
		} else {
			this.RemoveNode(bodyID, Box2D.Dynamics.b2BodyList.TYPES.activeBodies);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2BodyList.prototype.RemoveBody = function(body) {
		var bodyID = body.ID;
		if (this.bodyNodeLookup[bodyID] != null) {
			cr.arrayFindRemove(body.m_lists, this);
			for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
				this.RemoveNode(bodyID, i);
			}
			delete this.bodyNodeLookup[bodyID];
			this.bodyCount--;
		}
	};
	/**
	 * @param {string} bodyID
	 * @param {number} type
	 */
	Box2D.Dynamics.b2BodyList.prototype.RemoveNode = function(bodyID, type) {
		var nodeList = this.bodyNodeLookup[bodyID];
		if (nodeList == null) {
			return;
		}
		var node = nodeList[type];
		if (node == null) {
			return;
		}
		nodeList[type] = null;
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.bodyFirstNodes[type] = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.bodyLastNodes[type] = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @param {string} bodyID
	 * @param {number} type
	 */
	Box2D.Dynamics.b2BodyList.prototype.CreateNode = function(body, bodyID, type) {
		var nodeList = this.bodyNodeLookup[bodyID];
		if (nodeList == null) {
			nodeList = [];
			for(var i = 0; i <= Box2D.Dynamics.b2BodyList.TYPES.allBodies; i++) {
				nodeList[i] = null;
			}
			this.bodyNodeLookup[bodyID] = nodeList;
		}
		if (nodeList[type] == null) {
			nodeList[type] = new Box2D.Dynamics.b2BodyListNode(body);
			var prevNode = this.bodyLastNodes[type];
			if (prevNode != null) {
				prevNode.SetNextNode(nodeList[type]);
			} else {
				this.bodyFirstNodes[type] = nodeList[type];
			}
			nodeList[type].SetPreviousNode(prevNode);
			this.bodyLastNodes[type] = nodeList[type];
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2BodyList.prototype.GetBodyCount = function() {
		return this.bodyCount;
	};
	/**
	 * @enum {number}
	 */
	Box2D.Dynamics.b2BodyList.TYPES = {
		dynamicBodies: 0,
		nonStaticBodies: 1,
		activeBodies: 2,
		nonStaticActiveAwakeBodies: 3,
		awakeBodies: 4,
		allBodies: 5 // Assumed to be last by above code
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @constructor
	 */
	Box2D.Dynamics.b2BodyListNode = function(body) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.body = body;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2BodyListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2BodyListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.b2BodyListNode} node
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.b2BodyListNode} node
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetBody = function() {
		return this.body;
	};
	/**
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.b2BodyListNode}
	 */
	Box2D.Dynamics.b2BodyListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactFilter = function() {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2ContactFilter.prototype.ShouldCollide = function(fixtureA, fixtureB) {
		var filter1 = fixtureA.GetFilterData();
		var filter2 = fixtureB.GetFilterData();
		if (filter1.groupIndex == filter2.groupIndex && filter1.groupIndex != 0) {
			return filter1.groupIndex > 0;
		}
		return (filter1.maskBits & filter2.categoryBits) != 0 && (filter1.categoryBits & filter2.maskBits) != 0;
	};
	/** @type {!Box2D.Dynamics.b2ContactFilter} */
	Box2D.Dynamics.b2ContactFilter.b2_defaultFilter = new Box2D.Dynamics.b2ContactFilter();
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactImpulse = function () {
		this.normalImpulses = [];
		this.tangentImpulses = [];
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactListener = function () {};
	Box2D.Dynamics.b2ContactListener.prototype.BeginContact = function (contact) {};
	Box2D.Dynamics.b2ContactListener.prototype.EndContact = function (contact) {};
	Box2D.Dynamics.b2ContactListener.prototype.PreSolve = function (contact, oldManifold) {};
	Box2D.Dynamics.b2ContactListener.prototype.PostSolve = function (contact, impulse) {};
	/**
	 * @param {!Box2D.Dynamics.b2World} world
	 * @constructor
	 */
	Box2D.Dynamics.b2ContactManager = function(world) {
		/**
		 * @private
		 * @const
		 * @type {!Box2D.Dynamics.b2World}
		 */
		this.m_world = world;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactFilter}
		 */
		this.m_contactFilter = Box2D.Dynamics.b2ContactFilter.b2_defaultFilter;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactListener}
		 */
		this.m_contactListener = Box2D.Dynamics.b2ContactListener.b2_defaultListener;
		/**
		 * @private
		 * @const
		 * @type {!Box2D.Dynamics.Contacts.b2ContactFactory}
		 */
		this.m_contactFactory = new Box2D.Dynamics.Contacts.b2ContactFactory();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2DynamicTreeBroadPhase}
		 */
		this.m_broadPhase = new Box2D.Collision.b2DynamicTreeBroadPhase();
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.b2ContactManager.prototype.AddPair = function (fixtureA, fixtureB) {
	  var bodyA = fixtureA.GetBody();
	  var bodyB = fixtureB.GetBody();
	  if (bodyA == bodyB) {
		  return;
	  }
	  if (!bodyB.ShouldCollide(bodyA)) {
		 return;
	  }
	  if (!this.m_contactFilter.ShouldCollide(fixtureA, fixtureB)) {
		 return;
	  }
	  for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
		var fA = contactNode.contact.m_fixtureA;
		if (fA == fixtureA) {
			var fB = contactNode.contact.m_fixtureB;
			if (fB == fixtureB) {
				return;
			}
		} else if (fA == fixtureB) {
			var fB = contactNode.contact.m_fixtureB;
			if (fB == fixtureA) {
				return;
			}
		}
	  }
	  var c = this.m_contactFactory.Create(fixtureA, fixtureB);
	};
	Box2D.Dynamics.b2ContactManager.prototype.FindNewContacts = function () {
		var self = this;
		/** @type {function(!Box2D.Dynamics.b2Fixture, !Box2D.Dynamics.b2Fixture)} */
		var addPairCallback = function(fixtureA, fixtureB) {
			self.AddPair(fixtureA, fixtureB)
		};
		this.m_broadPhase.UpdatePairs(addPairCallback);
	};
	Box2D.Dynamics.b2ContactManager.prototype.Destroy = function (c) {
		var fixtureA = c.m_fixtureA;
		var fixtureB = c.m_fixtureB;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		if (c.touching) {
			this.m_contactListener.EndContact(c);
		}
		if (c.m_manifold.m_pointCount > 0) {
			c.m_fixtureA.GetBody().SetAwake(true);
			c.m_fixtureB.GetBody().SetAwake(true);
		}
		c.RemoveFromLists();
		this.m_contactFactory.Destroy(c);
	};
	Box2D.Dynamics.b2ContactManager.prototype.Collide = function() {
		for (var contactNode = this.m_world.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var c = contactNode.contact;
			var fixtureA = c.m_fixtureA;
			var fixtureB = c.m_fixtureB;
			var bodyA = fixtureA.GetBody();
			var bodyB = fixtureB.GetBody();
			if (bodyA.IsAwake() == false && bodyB.IsAwake() == false) {
				continue;
			}
			if (c.IsFiltering()) {
				if (bodyB.ShouldCollide(bodyA) == false) {
					this.Destroy(c);
					continue;
				}
				if (this.m_contactFilter.ShouldCollide(fixtureA, fixtureB) == false) {
					this.Destroy(c);
					continue;
				}
				c.ClearFiltering();
			}
			var proxyA = fixtureA.m_proxy;
			var proxyB = fixtureB.m_proxy;
			var overlap = this.m_broadPhase.TestOverlap(proxyA, proxyB);
			if (overlap == false) {
				this.Destroy(c);
				continue;
			}
			c.Update(this.m_contactListener);
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2DestructionListener = function () {};
	Box2D.Dynamics.b2DestructionListener.prototype.SayGoodbyeJoint = function (joint) {};
	Box2D.Dynamics.b2DestructionListener.prototype.SayGoodbyeFixture = function (fixture) {};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FilterData = function () {
	  this.categoryBits = 0x0001;
	  this.maskBits = 0xFFFF;
	  this.groupIndex = 0;
	};
	/**
	 * @return {!Box2D.Dynamics.b2FilterData}
	 */
	Box2D.Dynamics.b2FilterData.prototype.Copy = function () {
	  var copy = new Box2D.Dynamics.b2FilterData();
	  copy.categoryBits = this.categoryBits;
	  copy.maskBits = this.maskBits;
	  copy.groupIndex = this.groupIndex;
	  return copy;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 * @param {!Box2D.Dynamics.b2FixtureDef} def
	 * @constructor
	 */
	Box2D.Dynamics.b2Fixture = function(body, xf, def) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Fixture" + Box2D.Dynamics.b2Fixture.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2FilterData}
		 */
		this.m_filter = def.filter.Copy();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2AABB}
		 */
		this.m_aabb = Box2D.Collision.b2AABB.Get();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.m_body = body;
		/**
		 * @private
		 * @type {!Box2D.Collision.Shapes.b2Shape}
		 */
		this.m_shape = def.shape.Copy();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_density = def.density;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_friction = def.friction;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_restitution = def.restitution;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_isSensor = def.isSensor;
	};
	/**
	 * @return {!Box2D.Collision.Shapes.b2Shape}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetShape = function() {
		return this.m_shape;
	};
	/**
	 * @param {boolean} sensor
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetSensor = function(sensor) {
		if (this.m_isSensor == sensor) {
			return;
		}
		this.m_isSensor = sensor;
		if (this.m_body == null) {
			return;
		}
		for (var contactNode = this.m_body.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var fixtureA = contactNode.contact.m_fixtureA;
			var fixtureB = contactNode.contact.m_fixtureB;
			if (fixtureA == this || fixtureB == this) {
				contactNode.contact.SetSensor(fixtureA.sensor || fixtureB.sensor);
			}
		}
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.IsSensor = function() {
		return this.m_isSensor;
	};
	/**
	 * @param {!Box2D.Dynamics.b2FilterData} filter
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetFilterData = function(filter) {
		this.m_filter = filter.Copy();
		if (this.m_body == null) {
			return;
		}
		for (var contactNode = this.m_body.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			if (contactNode.contact.m_fixtureA == this || contactNode.contact.m_fixtureB == this) {
				contactNode.contact.FlagForFiltering();
			}
		}
	};
	/**
	 * @return {!Box2D.Dynamics.b2FilterData}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetFilterData = function() {
		return this.m_filter.Copy();
	};
	/**
	 * @return {Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetBody = function() {
		return this.m_body;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.TestPoint = function(p) {
		return this.m_shape.TestPoint(this.m_body.GetTransform(), p);
	};
	/**
	 * @param {!Box2D.Collision.b2RayCastOutput} output
	 * @param {!Box2D.Collision.b2RayCastInput} input
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2Fixture.prototype.RayCast = function(output, input) {
		return this.m_shape.RayCast(output, input, this.m_body.GetTransform());
	};
	/**
	 * @param {Box2D.Collision.Shapes.b2MassData=} massData
	 * @return {!Box2D.Collision.Shapes.b2MassData}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetMassData = function(massData) {
		if (!massData) {
			massData = new Box2D.Collision.Shapes.b2MassData();
		}
		this.m_shape.ComputeMass(massData, this.m_density);
		return massData;
	};
	/**
	 * @param {number} density
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetDensity = function(density) {
		this.m_density = density;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetDensity = function() {
		return this.m_density;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetFriction = function() {
		return this.m_friction;
	};
	/**
	 * @param {number} friction
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetFriction = function(friction) {
		this.m_friction = friction;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetRestitution = function() {
		return this.m_restitution;
	};
	/**
	 * @param {number} restitution
	 */
	Box2D.Dynamics.b2Fixture.prototype.SetRestitution = function(restitution) {
		this.m_restitution = restitution;
	};
	/**
	 * @return {!Box2D.Collision.b2AABB}
	 */
	Box2D.Dynamics.b2Fixture.prototype.GetAABB = function() {
		return this.m_aabb;
	};
	Box2D.Dynamics.b2Fixture.prototype.Destroy = function() {
		Box2D.Collision.b2AABB.Free(this.m_aabb);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 * @param {!Box2D.Common.Math.b2Transform} xf
	 */
	Box2D.Dynamics.b2Fixture.prototype.CreateProxy = function(broadPhase, xf) {
		this.m_shape.ComputeAABB(this.m_aabb, xf);
		this.m_proxy = broadPhase.CreateProxy(this.m_aabb, this);
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 */
	Box2D.Dynamics.b2Fixture.prototype.DestroyProxy = function(broadPhase) {
		if (this.m_proxy == null) {
			return;
		}
		broadPhase.DestroyProxy(this.m_proxy);
		this.m_proxy = null;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 * @param {!Box2D.Common.Math.b2Transform} transform1
	 * @param {!Box2D.Common.Math.b2Transform} transform2
	 */
	Box2D.Dynamics.b2Fixture.prototype.Synchronize = function(broadPhase, transform1, transform2) {
		if (!this.m_proxy) return;
		var aabb1 = Box2D.Collision.b2AABB.Get();
		var aabb2 = Box2D.Collision.b2AABB.Get();
		this.m_shape.ComputeAABB(aabb1, transform1);
		this.m_shape.ComputeAABB(aabb2, transform2);
		this.m_aabb.Combine(aabb1, aabb2);
		Box2D.Collision.b2AABB.Free(aabb1);
		Box2D.Collision.b2AABB.Free(aabb2);
		var displacement = Box2D.Common.Math.b2Math.SubtractVV(transform2.position, transform1.position);
		broadPhase.MoveProxy(this.m_proxy, this.m_aabb, displacement);
		Box2D.Common.Math.b2Vec2.Free(displacement);
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.b2Fixture.NEXT_ID = 0;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureDef = function () {
		/**
		 * @type {!Box2D.Dynamics.b2FilterData}
		 */
		this.filter = new Box2D.Dynamics.b2FilterData();
		this.filter.categoryBits = 0x0001;
		this.filter.maskBits = 0xFFFF;
		this.filter.groupIndex = 0;
		/**
		 * @type {Box2D.Collision.Shapes.b2Shape}
		 */
		this.shape = null;
		/**
		 * @type {number}
		 */
		this.friction = 0.2;
		/**
		 * @type {number}
		 */
		this.restitution = 0.0;
		/**
		 * @type {number}
		 */
		this.density = 0.0;
		/**
		 * @type {boolean}
		 */
		this.isSensor = false;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureList = function() {
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.fixtureFirstNode = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.fixtureLastNode = null;
		/**
		 * @private
		 * @type {Object.<Box2D.Dynamics.b2FixtureListNode>}
		 */
		this.fixtureNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.fixtureCount = 0;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureList.prototype.GetFirstNode = function() {
		return this.fixtureFirstNode;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 */
	Box2D.Dynamics.b2FixtureList.prototype.AddFixture = function(fixture) {
		var fixtureID = fixture.ID;
		if (this.fixtureNodeLookup[fixtureID] == null) {
			var node = new Box2D.Dynamics.b2FixtureListNode(fixture);
			var prevNode = this.fixtureLastNode;
			if (prevNode != null) {
				prevNode.SetNextNode(node);
			} else {
				this.fixtureFirstNode = node;
			}
			node.SetPreviousNode(prevNode);
			this.fixtureLastNode = node;
			this.fixtureNodeLookup[fixtureID] = node;
			this.fixtureCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 */
	Box2D.Dynamics.b2FixtureList.prototype.RemoveFixture = function(fixture) {
		var fixtureID = fixture.ID;
		var node = this.fixtureNodeLookup[fixtureID];
		if (node == null) {
			return;
		}
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.fixtureFirstNode = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.fixtureLastNode = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		delete this.fixtureNodeLookup[fixtureID];
		this.fixtureCount--;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2FixtureList.prototype.GetFixtureCount = function() {
		return this.fixtureCount;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixture
	 * @constructor
	 */
	Box2D.Dynamics.b2FixtureListNode = function(fixture) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.fixture = fixture;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2FixtureListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.b2FixtureListNode} node
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.b2FixtureListNode} node
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.b2FixtureListNode}
	 */
	Box2D.Dynamics.b2FixtureListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactListener} listener
	 * @param {!Box2D.Dynamics.Contacts.b2ContactSolver} contactSolver
	 * @constructor
	 */
	Box2D.Dynamics.b2Island = function(listener, contactSolver) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactListener}
		 */
		this.m_listener = listener;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactSolver}
		 */
		this.m_contactSolver = contactSolver;
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_bodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_dynamicBodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.b2Body>}
		 */
		this.m_nonStaticBodies = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Contacts.b2Contact>}
		 */
		this.m_contacts = [];
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Joints.b2Joint>}
		 */
		this.m_joints = [];
	};
	Box2D.Dynamics.b2Island.prototype.Clear = function() {
		this.m_bodies = [];
		this.m_dynamicBodies = [];
		this.m_nonStaticBodies = [];
		this.m_contacts = [];
		this.m_joints = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @param {boolean} allowSleep
	 */
	Box2D.Dynamics.b2Island.prototype.Solve = function(step, gravity, allowSleep) {
		this._InitializeVelocities(step, gravity);
		this.m_contactSolver.Initialize(step, this.m_contacts, this.m_contacts.length);
		this._SolveVelocityConstraints(step);
		this._SolveBodies(step);
		this._SolvePositionConstraints(step);
		this.Report(this.m_contactSolver.m_constraints);
		if (allowSleep) {
			this._SleepIfTired(step);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._InitializeVelocities = function(step, gravity) {
		for (var i = 0; i < this.m_dynamicBodies.length; i++) {
			var b = this.m_dynamicBodies[i];
			b.m_linearVelocity.x += step.dt * (gravity.x + b.m_invMass * b.m_force.x);
			b.m_linearVelocity.y += step.dt * (gravity.y + b.m_invMass * b.m_force.y);
			b.m_angularVelocity += step.dt * b.m_invI * b.m_torque;
			b.m_linearVelocity.Multiply(Box2D.Common.Math.b2Math.Clamp(1.0 - step.dt * b.m_linearDamping, 0.0, 1.0));
			b.m_angularVelocity *= Box2D.Common.Math.b2Math.Clamp(1.0 - step.dt * b.m_angularDamping, 0.0, 1.0);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolveVelocityConstraints = function(step) {
		this.m_contactSolver.InitVelocityConstraints(step);
		for (var jointInitIdx = 0; jointInitIdx < this.m_joints.length; jointInitIdx++) {
			this.m_joints[jointInitIdx].InitVelocityConstraints(step);
		}
		for (var velocityIterationCnt = 0; velocityIterationCnt < step.velocityIterations; velocityIterationCnt++) {
			for (var jointSolveIdx = 0; jointSolveIdx < this.m_joints.length; jointSolveIdx++) {
				this.m_joints[jointSolveIdx].SolveVelocityConstraints(step);
			}
			this.m_contactSolver.SolveVelocityConstraints();
		}
		for (var jointFinalizeIdx = 0; jointFinalizeIdx < this.m_joints.length; jointFinalizeIdx++) {
			this.m_joints[jointFinalizeIdx].FinalizeVelocityConstraints();
		}
		this.m_contactSolver.FinalizeVelocityConstraints();
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolveBodies = function(step) {
		for (var i = 0; i < this.m_nonStaticBodies.length; ++i) {
			var b = this.m_nonStaticBodies[i];
			var translationX = step.dt * b.m_linearVelocity.x;
			var translationY = step.dt * b.m_linearVelocity.y;
			if ((translationX * translationX + translationY * translationY) > Box2D.Common.b2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.Normalize();
				b.m_linearVelocity.x *= Box2D.Common.b2Settings.b2_maxTranslation * step.inv_dt;
				b.m_linearVelocity.y *= Box2D.Common.b2Settings.b2_maxTranslation * step.inv_dt;
			}
			var rotation = step.dt * b.m_angularVelocity;
			if (rotation * rotation > Box2D.Common.b2Settings.b2_maxRotationSquared) {
				if (b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = -Box2D.Common.b2Settings.b2_maxRotation * step.inv_dt;
				} else {
					b.m_angularVelocity = Box2D.Common.b2Settings.b2_maxRotation * step.inv_dt;
				}
			}
			b.m_sweep.c0.SetV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += step.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += step.dt * b.m_linearVelocity.y;
			b.m_sweep.a += step.dt * b.m_angularVelocity;
			b.SynchronizeTransform();
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SolvePositionConstraints = function(step) {
		for (var i = 0; i < step.positionIterations; i++) {
			var contactsOkay = this.m_contactSolver.SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
			var jointsOkay = true;
			for (var j = 0; j < this.m_joints.length; j++) {
				var jointOkay = this.m_joints[j].SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if (contactsOkay && jointsOkay) {
				break;
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @private
	 */
	Box2D.Dynamics.b2Island.prototype._SleepIfTired = function(step) {
		var minSleepTime = Number.MAX_VALUE;
		for (var nonstaticBodyIdx = 0; nonstaticBodyIdx < this.m_nonStaticBodies.length; nonstaticBodyIdx++) {
			var b = this.m_nonStaticBodies[nonstaticBodyIdx];
			if (!b.m_allowSleep || Math.abs(b.m_angularVelocity) > Box2D.Common.b2Settings.b2_angularSleepTolerance || Box2D.Common.Math.b2Math.Dot(b.m_linearVelocity, b.m_linearVelocity) > Box2D.Common.b2Settings.b2_linearSleepToleranceSquared) {
				b.m_sleepTime = 0.0;
				minSleepTime = 0.0;
			} else {
				b.m_sleepTime += step.dt;
				minSleepTime = Math.min(minSleepTime, b.m_sleepTime);
			}
		}
		if (minSleepTime >= Box2D.Common.b2Settings.b2_timeToSleep) {
			for (var bodyIdx = 0; bodyIdx < this.m_bodies.length; bodyIdx++) {
				this.m_bodies[bodyIdx].SetAwake(false);
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} subStep
	 */
	Box2D.Dynamics.b2Island.prototype.SolveTOI = function(subStep) {
		var i = 0;
		var j = 0;
		this.m_contactSolver.Initialize(subStep, this.m_contacts, this.m_contacts.length);
		var contactSolver = this.m_contactSolver;
		for (i = 0; i < this.m_joints.length; ++i) {
			this.m_joints[i].InitVelocityConstraints(subStep);
		}
		for (i = 0; i < subStep.velocityIterations; ++i) {
			contactSolver.SolveVelocityConstraints();
			for (j = 0; j < this.m_joints.length; ++j) {
				this.m_joints[j].SolveVelocityConstraints(subStep);
			}
		}
		for (i = 0; i < this.m_nonStaticBodies.length; ++i) {
			var b = this.m_nonStaticBodies[i];
			var translationX = subStep.dt * b.m_linearVelocity.x;
			var translationY = subStep.dt * b.m_linearVelocity.y;
			if ((translationX * translationX + translationY * translationY) > Box2D.Common.b2Settings.b2_maxTranslationSquared) {
				b.m_linearVelocity.Normalize();
				b.m_linearVelocity.x *= Box2D.Common.b2Settings.b2_maxTranslation * subStep.inv_dt;
				b.m_linearVelocity.y *= Box2D.Common.b2Settings.b2_maxTranslation * subStep.inv_dt;
			}
			var rotation = subStep.dt * b.m_angularVelocity;
			if (rotation * rotation > Box2D.Common.b2Settings.b2_maxRotationSquared) {
				if (b.m_angularVelocity < 0.0) {
					b.m_angularVelocity = (-Box2D.Common.b2Settings.b2_maxRotation * subStep.inv_dt);
				} else {
					b.m_angularVelocity = Box2D.Common.b2Settings.b2_maxRotation * subStep.inv_dt;
				}
			}
			b.m_sweep.c0.SetV(b.m_sweep.c);
			b.m_sweep.a0 = b.m_sweep.a;
			b.m_sweep.c.x += subStep.dt * b.m_linearVelocity.x;
			b.m_sweep.c.y += subStep.dt * b.m_linearVelocity.y;
			b.m_sweep.a += subStep.dt * b.m_angularVelocity;
			b.SynchronizeTransform();
		}
		var k_toiBaumgarte = 0.75;
		for (i = 0; i < subStep.positionIterations; ++i) {
			var contactsOkay = contactSolver.SolvePositionConstraints(k_toiBaumgarte);
			var jointsOkay = true;
			for (j = 0; j < this.m_joints.length; ++j) {
				var jointOkay = this.m_joints[j].SolvePositionConstraints(Box2D.Common.b2Settings.b2_contactBaumgarte);
				jointsOkay = jointsOkay && jointOkay;
			}
			if (contactsOkay && jointsOkay) {
				break;
			}
		}
		this.Report(contactSolver.m_constraints);
	};
	/**
	 * @param {Array.<!Box2D.Dynamics.Contacts.b2ContactConstraint>} constraints
	 */
	Box2D.Dynamics.b2Island.prototype.Report = function(constraints) {
		if (this.m_listener == null) {
			return;
		}
		for (var i = 0; i < this.m_contacts.length; ++i) {
			var c = this.m_contacts[i];
			var cc = constraints[i];
			var impulse = new Box2D.Dynamics.b2ContactImpulse();
			for (var j = 0; j < cc.pointCount; ++j) {
				impulse.normalImpulses[j] = cc.points[j].normalImpulse;
				impulse.tangentImpulses[j] = cc.points[j].tangentImpulse;
			}
			this.m_listener.PostSolve(c, impulse);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.b2Island.prototype.AddBody = function(body) {
		this.m_bodies.push(body);
		if (body.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
			this.m_nonStaticBodies.push(body);
			if (body.GetType() == Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
				this.m_dynamicBodies.push(body);
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.b2Island.prototype.AddContact = function(contact) {
		this.m_contacts.push(contact);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2Joint} joint
	 */
	Box2D.Dynamics.b2Island.prototype.AddJoint = function(joint) {
		this.m_joints.push(joint);
	};
	/**
	 * @param {number} dt
	 * @param {number} dtRatio
	 * @param {number} positionIterations
	 * @param {number} velocityIterations
	 * @param {boolean} warmStarting
	 * @constructor
	 */
	Box2D.Dynamics.b2TimeStep = function(dt, dtRatio, positionIterations, velocityIterations, warmStarting) {
		/**
		 * @const
		 * @type {number}
		 */
		this.dt = dt;
		var invDT = 0;
		if (dt > 0) {
			invDT = 1 / dt;
		}
		/**
		 * @const
		 * @type {number}
		 */
		this.inv_dt = invDT;
		/**
		 * @const
		 * @type {number}
		 */
		this.dtRatio = dtRatio;
		/**
		 * @const
		 * @type {number}
		 */
		this.positionIterations = positionIterations;
		/**
		 * @const
		 * @type {number}
		 */
		this.velocityIterations = velocityIterations;
		/**
		 * @const
		 * @type {boolean}
		 */
		this.warmStarting = warmStarting;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 * @param {boolean} doSleep
	 * @constructor
	 */
	Box2D.Dynamics.b2World = function(gravity, doSleep) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2ContactManager}
		 */
		this.m_contactManager = new Box2D.Dynamics.b2ContactManager(this);
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactSolver}
		 */
		this.m_contactSolver = new Box2D.Dynamics.Contacts.b2ContactSolver();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_isLocked = false;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_newFixture = false;
		/**
		 * @private
		 * @type {Box2D.Dynamics.b2DestructionListener}
		 */
		this.m_destructionListener = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2BodyList}
		 */
		this.bodyList = new Box2D.Dynamics.b2BodyList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		 this.contactList = new Box2D.Dynamics.Contacts.b2ContactList();
		/**
		 * @private
		 * @type {Box2D.Dynamics.Joints.b2Joint}
		 */
		this.m_jointList = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Controllers.b2ControllerList}
		 */
		this.controllerList = new Box2D.Dynamics.Controllers.b2ControllerList();
		/**
		 * @private
		 * @type {number}
		 */
		this.m_jointCount = 0;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_warmStarting = true;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_continuousPhysics = true;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.m_allowSleep = doSleep;
		/**
		 * @private
		 * @type {!Box2D.Common.Math.b2Vec2}
		 */
		this.m_gravity = gravity;
		/**
		 * @private
		 * @type {number}
		 */
		this.m_inv_dt0 = 0.0;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Body}
		 */
		this.m_groundBody = this.CreateBody(new Box2D.Dynamics.b2BodyDef());
	};
	/**
	 * @const
	 * @type {number}
	 */
	Box2D.Dynamics.b2World.MAX_TOI = 1.0 - 100.0 * Number.MIN_VALUE;
	/**
	 * @param {!Box2D.Dynamics.b2DestructionListener} listener
	 */
	Box2D.Dynamics.b2World.prototype.SetDestructionListener = function(listener) {
		this.m_destructionListener = listener;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactFilter} filter
	 */
	Box2D.Dynamics.b2World.prototype.SetContactFilter = function(filter) {
		this.m_contactManager.m_contactFilter = filter;
	};
	/**
	 * @param {!Box2D.Dynamics.b2ContactListener} listener
	 */
	Box2D.Dynamics.b2World.prototype.SetContactListener = function(listener) {
		this.m_contactManager.m_contactListener = listener;
	};
	/**
	 * @param {!Box2D.Collision.b2DynamicTreeBroadPhase} broadPhase
	 */
	Box2D.Dynamics.b2World.prototype.SetBroadPhase = function(broadPhase) {
		var oldBroadPhase = this.m_contactManager.m_broadPhase;
		this.m_contactManager.m_broadPhase = broadPhase;
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); node; node = node.GetNextNode()) {
			for (var fixtureNode = node.body.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
				var f = fixtureNode.fixture;
				f.m_proxy = broadPhase.CreateProxy(oldBroadPhase.GetFatAABB(f.m_proxy), f);
			}
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetProxyCount = function() {
		return this.m_contactManager.m_broadPhase.GetProxyCount();
	};
	/**
	 * @param {!Box2D.Dynamics.b2BodyDef} def
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2World.prototype.CreateBody = function(def) {
;
		var b = new Box2D.Dynamics.b2Body(def, this);
		this.bodyList.AddBody(b);
		return b;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} b
	 */
	Box2D.Dynamics.b2World.prototype.DestroyBody = function(b) {
;
		var jn = b.m_jointList;
		while (jn) {
			var jn0 = jn;
			jn = jn.next;
			if (this.m_destructionListener) {
				this.m_destructionListener.SayGoodbyeJoint(jn0.joint);
			}
			this.DestroyJoint(jn0.joint);
		}
		for (var node = b.GetControllerList().GetFirstNode(); node; node = node.GetNextNode()) {
			node.controller.RemoveBody(b);
		}
		for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			this.m_contactManager.Destroy(contactNode.contact);
		}
		for (var fixtureNode = b.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
			if (this.m_destructionListener) {
				this.m_destructionListener.SayGoodbyeFixture(fixtureNode.fixture);
			}
			b.DestroyFixture(fixtureNode.fixture);
		}
		b.Destroy();
		this.bodyList.RemoveBody(b);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2JointDef} def
	 * @return {!Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.b2World.prototype.CreateJoint = function(def) {
		var j = Box2D.Dynamics.Joints.b2Joint.Create(def);
		j.m_prev = null;
		j.m_next = this.m_jointList;
		if (this.m_jointList) {
			this.m_jointList.m_prev = j;
		}
		this.m_jointList = j;
		this.m_jointCount++;
		j.m_edgeA.joint = j;
		j.m_edgeA.other = j.m_bodyB;
		j.m_edgeA.prev = null;
		j.m_edgeA.next = j.m_bodyA.m_jointList;
		if (j.m_bodyA.m_jointList) {
			j.m_bodyA.m_jointList.prev = j.m_edgeA;
		}
		j.m_bodyA.m_jointList = j.m_edgeA;
		j.m_edgeB.joint = j;
		j.m_edgeB.other = j.m_bodyA;
		j.m_edgeB.prev = null;
		j.m_edgeB.next = j.m_bodyB.m_jointList;
		if (j.m_bodyB.m_jointList) {
			j.m_bodyB.m_jointList.prev = j.m_edgeB;
		}
		j.m_bodyB.m_jointList = j.m_edgeB;
		var bodyA = def.bodyA;
		var bodyB = def.bodyB;
		if (!def.collideConnected) {
			for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				if (contactNode.contact.GetOther(bodyB) == bodyA) {
					contactNode.contact.FlagForFiltering();
				}
			}
		}
		return j;
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2Joint} j
	 */
	Box2D.Dynamics.b2World.prototype.DestroyJoint = function(j) {
		var collideConnected = j.m_collideConnected;
		if (j.m_prev) {
			j.m_prev.m_next = j.m_next;
		}
		if (j.m_next) {
			j.m_next.m_prev = j.m_prev;
		}
		if (j == this.m_jointList) {
			this.m_jointList = j.m_next;
		}
		var bodyA = j.m_bodyA;
		var bodyB = j.m_bodyB;
		bodyA.SetAwake(true);
		bodyB.SetAwake(true);
		if (j.m_edgeA.prev) {
			j.m_edgeA.prev.next = j.m_edgeA.next;
		}
		if (j.m_edgeA.next) {
			j.m_edgeA.next.prev = j.m_edgeA.prev;
		}
		if (j.m_edgeA == bodyA.m_jointList) {
			bodyA.m_jointList = j.m_edgeA.next;
		}
		j.m_edgeA.prev = null;
		j.m_edgeA.next = null;
		if (j.m_edgeB.prev) {
			j.m_edgeB.prev.next = j.m_edgeB.next;
		}
		if (j.m_edgeB.next) {
			j.m_edgeB.next.prev = j.m_edgeB.prev;
		}
		if (j.m_edgeB == bodyB.m_jointList) {
			bodyB.m_jointList = j.m_edgeB.next;
		}
		j.m_edgeB.prev = null;
		j.m_edgeB.next = null;
		this.m_jointCount--;
		if (!collideConnected) {
			for (var contactNode = bodyB.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
				if (contactNode.contact.GetOther(bodyB) == bodyA) {
					contactNode.contact.FlagForFiltering();
				}
			}
		}
	};
	/**
	 * @return {!Box2D.Dynamics.Controllers.b2ControllerList}
	 */
	Box2D.Dynamics.b2World.prototype.GetControllerList = function() {
		return this.controllerList;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} c
	 * @return {!Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.b2World.prototype.AddController = function(c) {
		if (c.m_world !== null && c.m_world != this) {
			throw new Error("Controller can only be a member of one world");
		}
		this.controllerList.AddController(c);
		c.m_world = this;
		return c;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} c
	 */
	Box2D.Dynamics.b2World.prototype.RemoveController = function(c) {
		this.controllerList.RemoveController(c);
		c.m_world = null;
		c.Clear();
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 * @return {!Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.b2World.prototype.CreateController = function(controller) {
		return this.AddController(controller);
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.b2World.prototype.DestroyController = function(controller) {
		this.RemoveController(controller);
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2World.prototype.SetWarmStarting = function(flag) {
		this.m_warmStarting = flag;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.b2World.prototype.SetContinuousPhysics = function(flag) {
		this.m_continuousPhysics = flag;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetBodyCount = function() {
		return this.bodyList.GetBodyCount();
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetJointCount = function() {
		return this.m_jointCount;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.b2World.prototype.GetContactCount = function() {
		return this.contactList.GetContactCount();
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} gravity
	 */
	Box2D.Dynamics.b2World.prototype.SetGravity = function(gravity) {
		this.m_gravity = gravity;
	};
	/**
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.b2World.prototype.GetGravity = function() {
		return this.m_gravity;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.b2World.prototype.GetGroundBody = function() {
		return this.m_groundBody;
	};
	/**
	 * @param {number} dt
	 * @param {number} velocityIterations
	 * @param {number} positionIterations
	 */
	Box2D.Dynamics.b2World.prototype.Step = function(dt, velocityIterations, positionIterations) {
		if (this.m_newFixture) {
			this.m_contactManager.FindNewContacts();
			this.m_newFixture = false;
		}
		this.m_isLocked = true;
		var step = new Box2D.Dynamics.b2TimeStep(dt, this.m_inv_dt0 * dt /* dtRatio */, velocityIterations, positionIterations, this.m_warmStarting);
		this.m_contactManager.Collide();
		if (step.dt > 0.0) {
			this.Solve(step);
			if (this.m_continuousPhysics) {
				this.SolveTOI(step);
			}
			this.m_inv_dt0 = step.inv_dt;
		}
		this.m_isLocked = false;
	};
	Box2D.Dynamics.b2World.prototype.ClearForces = function() {
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.dynamicBodies); node; node = node.GetNextNode()) {
			node.body.m_force.SetZero();
			node.body.m_torque = 0.0;
		}
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture):boolean} callback
	 * @param {!Box2D.Collision.b2AABB} aabb
	 */
	Box2D.Dynamics.b2World.prototype.QueryAABB = function(callback, aabb) {
		this.m_contactManager.m_broadPhase.Query(callback, aabb);
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture): boolean} callback
	 * @param {!Box2D.Common.Math.b2Vec2} p
	 */
	Box2D.Dynamics.b2World.prototype.QueryPoint = function(callback, p) {
		/** @type {function(!Box2D.Dynamics.b2Fixture): boolean} */
		var WorldQueryWrapper = function(fixture) {
			if (fixture.TestPoint(p)) {
				return callback(fixture);
			} else {
				return true;
			}
		};
		var aabb = Box2D.Collision.b2AABB.Get();
		aabb.lowerBound_.Set(p.x - Box2D.Common.b2Settings.b2_linearSlop, p.y - Box2D.Common.b2Settings.b2_linearSlop);
		aabb.upperBound_.Set(p.x + Box2D.Common.b2Settings.b2_linearSlop, p.y + Box2D.Common.b2Settings.b2_linearSlop);
		this.m_contactManager.m_broadPhase.Query(WorldQueryWrapper, aabb);
		Box2D.Collision.b2AABB.Free(aabb);
	};
	/**
	 * @param {function(!Box2D.Dynamics.b2Fixture, !Box2D.Common.Math.b2Vec2, !Box2D.Common.Math.b2Vec2, number): number} callback
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 */
	Box2D.Dynamics.b2World.prototype.RayCast = function(callback, point1, point2) {
		var broadPhase = this.m_contactManager.m_broadPhase;
		var output = new Box2D.Collision.b2RayCastOutput();
		/**
		 * @param {!Box2D.Collision.b2RayCastInput} input
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 */
		var RayCastWrapper = function(input, fixture) {
				var hit = fixture.RayCast(output, input);
				if (hit) {
					var flipFrac = 1 - output.fraction;
					var point = Box2D.Common.Math.b2Vec2.Get(flipFrac * point1.x + output.fraction * point2.x, flipFrac * point1.y + output.fraction * point2.y);
					var retVal = callback(fixture, point, output.normal, output.fraction);
					Box2D.Common.Math.b2Vec2.Free(point);
					return retVal;
				} else {
					return input.maxFraction;
				}
			};
		var input = new Box2D.Collision.b2RayCastInput(point1, point2, 1 /* maxFraction */ );
		broadPhase.RayCast(RayCastWrapper, input);
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 * @return {Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.b2World.prototype.RayCastOne = function(point1, point2) {
		var result = null;
		/**
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 * @param {!Box2D.Common.Math.b2Vec2} point
		 * @param {!Box2D.Common.Math.b2Vec2} normal
		 * @param {number} fraction
		 * @return {number}
		 */
		var RayCastOneWrapper = function(fixture, point, normal, fraction) {
			result = fixture;
			return fraction;
		};
		this.RayCast(RayCastOneWrapper, point1, point2);
		return result;
	};
	/**
	 * @param {!Box2D.Common.Math.b2Vec2} point1
	 * @param {!Box2D.Common.Math.b2Vec2} point2
	 * @return {Array.<Box2D.Dynamics.b2Fixture>}
	 */
	Box2D.Dynamics.b2World.prototype.RayCastAll = function(point1, point2) {
		var result = [];
		/**
		 * @param {!Box2D.Dynamics.b2Fixture} fixture
		 * @param {!Box2D.Common.Math.b2Vec2} point
		 * @param {!Box2D.Common.Math.b2Vec2} normal
		 * @param {number} fraction
		 * @return {number}
		 */
		var RayCastAllWrapper = function(fixture, point, normal, fraction) {
			result.push(fixture);
			return 1;
		};
		this.RayCast(RayCastAllWrapper, point1, point2);
		return result;
	};
	/**
	 * @return {!Box2D.Dynamics.b2BodyList}
	 */
	Box2D.Dynamics.b2World.prototype.GetBodyList = function() {
		return this.bodyList;
	};
	/**
	 * @return {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.b2World.prototype.GetJointList = function() {
		return this.m_jointList;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.b2World.prototype.GetContactList = function() {
		return this.contactList;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2World.prototype.IsLocked = function() {
		return this.m_isLocked;
	};
	var b2solvearray = [];
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.b2World.prototype.Solve = function(step) {
		for (var controllerNode = this.controllerList.GetFirstNode(); controllerNode; controllerNode = controllerNode.GetNextNode()) {
			controllerNode.controller.Step(step);
		}
		var m_island = new Box2D.Dynamics.b2Island(this.m_contactManager.m_contactListener, this.m_contactSolver);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			bodyNode.body.m_islandFlag = false;
		}
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.m_islandFlag = false;
		}
		for (var j = this.m_jointList; j; j = j.m_next) {
			j.m_islandFlag = false;
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var seed = bodyNode.body;
			if (seed.m_islandFlag) {
				continue;
			}
			m_island.Clear();
			b2solvearray.length = 0;
			var stack = b2solvearray;
			stack.push(seed);
			seed.m_islandFlag = true;
			while (stack.length > 0) {
				var b = stack.pop();
				m_island.AddBody(b);
				if (!b.IsAwake()) {
					b.SetAwake(true);
				}
				if (b.GetType() == Box2D.Dynamics.b2BodyDef.b2_staticBody) {
					continue;
				}
				for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					var contact = contactNode.contact;
					if (contact.m_islandFlag) {
						continue;
					}
					m_island.AddContact(contact);
					contact.m_islandFlag = true;
					var other = contact.GetOther(b);
					if (other.m_islandFlag) {
						continue;
					}
					stack.push(other);
					other.m_islandFlag = true;
				}
				for (var jn = b.m_jointList; jn; jn = jn.next) {
					if (jn.joint.m_islandFlag || !jn.other.IsActive()) {
						continue;
					}
					m_island.AddJoint(jn.joint);
					jn.joint.m_islandFlag = true;
					if (jn.other.m_islandFlag) {
						continue;
					}
					stack.push(jn.other);
					jn.other.m_islandFlag = true;
				}
			}
			m_island.Solve(step, this.m_gravity, this.m_allowSleep);
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.nonStaticActiveAwakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			bodyNode.body.SynchronizeFixtures();
		}
		this.m_contactManager.FindNewContacts();
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.b2World.prototype.SolveTOI = function(step) {
		var m_island = new Box2D.Dynamics.b2Island(this.m_contactManager.m_contactListener, this.m_contactSolver);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var b = bodyNode.body;
			b.m_islandFlag = false;
			b.m_sweep.t0 = 0.0;
		}
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			contactNode.contact.m_islandFlag = false;
			contactNode.contact.m_toi = null;
		}
		for (var j = this.m_jointList; j; j = j.m_next) {
			j.m_islandFlag = false;
		}
		while (true) {
			var toi2 = this._SolveTOI2(step);
			var minContact = toi2.minContact;
			var minTOI = toi2.minTOI;
			if (minContact === null || Box2D.Dynamics.b2World.MAX_TOI < minTOI) {
				break;
			}
			var fixtureABody = minContact.m_fixtureA.GetBody();
			var fixtureBBody =  minContact.m_fixtureB.GetBody();
			Box2D.Dynamics.b2World.s_backupA.Set(fixtureABody.m_sweep);
			Box2D.Dynamics.b2World.s_backupB.Set(fixtureBBody.m_sweep);
			fixtureABody.Advance(minTOI);
			fixtureBBody.Advance(minTOI);
			minContact.Update(this.m_contactManager.m_contactListener);
			minContact.m_toi = null;
			if (minContact.sensor || !minContact.enabled) {
				fixtureABody.m_sweep.Set(Box2D.Dynamics.b2World.s_backupA);
				fixtureBBody.m_sweep.Set(Box2D.Dynamics.b2World.s_backupB);
				fixtureABody.SynchronizeTransform();
				fixtureBBody.SynchronizeTransform();
				continue;
			}
			if (!minContact.touching) {
				continue;
			}
			var seed = fixtureABody;
			if (seed.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
				seed = fixtureBBody;
			}
			m_island.Clear();
			b2solvearray.length = 0;
			var queue = b2solvearray;
			queue.push(seed);
			seed.m_islandFlag = true;
			while (queue.length > 0) {
				var b = queue.pop();
				m_island.AddBody(b);
				if (!b.IsAwake()) {
					b.SetAwake(true);
				}
				if (b.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
					continue;
				}
				for (var contactNode = b.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					if (m_island.m_contactCount == Box2D.Common.b2Settings.b2_maxTOIContactsPerIsland) {
						break;
					}
					var contact = contactNode.contact;
					if (contact.m_islandFlag) {
						continue;
					}
					m_island.AddContact(contact);
					contact.m_islandFlag = true;
					var other = contact.GetOther(b);
					if (other.m_islandFlag) {
						continue;
					}
					if (other.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
						other.Advance(minTOI);
						other.SetAwake(true);
						queue.push(other);
					}
					other.m_islandFlag = true;
				}
				for (var jEdge = b.m_jointList; jEdge; jEdge = jEdge.next) {
					if (m_island.m_jointCount == Box2D.Common.b2Settings.b2_maxTOIJointsPerIsland) {
						continue;
					}
					if (jEdge.joint.m_islandFlag || !jEdge.other.IsActive()) {
						continue;
					}
					m_island.AddJoint(jEdge.joint);
					jEdge.joint.m_islandFlag = true;
					if (jEdge.other.m_islandFlag) {
						continue;
					}
					if (jEdge.other.GetType() != Box2D.Dynamics.b2BodyDef.b2_staticBody) {
						jEdge.other.Advance(minTOI);
						jEdge.other.SetAwake(true);
						queue.push(jEdge.other);
					}
					jEdge.other.m_islandFlag = true;
				}
			}
			m_island.SolveTOI(new Box2D.Dynamics.b2TimeStep((1.0 - minTOI) * step.dt /* dt */, 0 /* dtRatio */, step.velocityIterations, step.positionIterations, false /* warmStarting */));
			for (var i = 0; i < m_island.m_bodies.length; i++) {
				m_island.m_bodies[i].m_islandFlag = false;
				if (!m_island.m_bodies[i].IsAwake() || m_island.m_bodies[i].GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) {
					continue;
				}
				m_island.m_bodies[i].SynchronizeFixtures();
				for (var contactNode = m_island.m_bodies[i].contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts); contactNode; contactNode = contactNode.GetNextNode()) {
					contactNode.contact.m_toi = null;
				}
			}
			for (var i = 0; i < m_island.m_contactCount; i++) {
				m_island.m_contacts[i].m_islandFlag = false;
				m_island.m_contacts[i].m_toi = null;
			}
			for (var i = 0; i < m_island.m_jointCount; i++) {
				m_island.m_joints[i].m_islandFlag = false;
			}
			this.m_contactManager.FindNewContacts();
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @return {{minContact: Box2D.Dynamics.Contacts.b2Contact, minTOI: number}}
	 */
	Box2D.Dynamics.b2World.prototype._SolveTOI2 = function(step) {
		var minContact = null;
		var minTOI = 1.0;
		var contacts = 0;
		for (var contactNode = this.contactList.GetFirstNode(Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts); contactNode; contactNode = contactNode.GetNextNode()) {
			var c = contactNode.contact;
			if (this._SolveTOI2SkipContact(step, c)) {
				continue;
			}
			var toi = 1.0;
			if (c.m_toi != null) {
				toi = c.m_toi;
			} else if (c.touching) {
				toi = 1;
				c.m_toi = toi;
			} else {
				var fixtureABody = c.m_fixtureA.GetBody();
				var fixtureBBody = c.m_fixtureB.GetBody();
				var t0 = fixtureABody.m_sweep.t0;
				if (fixtureABody.m_sweep.t0 < fixtureBBody.m_sweep.t0) {
					t0 = fixtureBBody.m_sweep.t0;
					fixtureABody.m_sweep.Advance(t0);
				} else if (fixtureBBody.m_sweep.t0 < fixtureABody.m_sweep.t0) {
					t0 = fixtureABody.m_sweep.t0;
					fixtureBBody.m_sweep.Advance(t0);
				}
				toi = c.ComputeTOI(fixtureABody.m_sweep, fixtureBBody.m_sweep);
;
				if (toi > 0.0 && toi < 1.0) {
					toi = (1.0 - toi) * t0 + toi;
				}
				c.m_toi = toi;
			}
			if (Number.MIN_VALUE < toi && toi < minTOI) {
				minContact = c;
				minTOI = toi;
			}
		}
		return {
			minContact: minContact,
			minTOI: minTOI
		};
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} c
	 * @return {boolean}
	 */
	Box2D.Dynamics.b2World.prototype._SolveTOI2SkipContact = function(step, c) {
		var fixtureABody = c.m_fixtureA.GetBody();
		var fixtureBBody = c.m_fixtureB.GetBody();
		if ((fixtureABody.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || !fixtureABody.IsAwake()) && (fixtureBBody.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || !fixtureBBody.IsAwake())) {
			return true;
		}
		return false;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2Contact = function(fixtureA, fixtureB) {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Contact" + Box2D.Dynamics.Contacts.b2Contact.NEXT_ID++;
		/**
		 * @private
		 * @type {!Box2D.Collision.b2Manifold}
		 */
		this.m_manifold = new Box2D.Collision.b2Manifold();
		/**
		 * @private
		 * @type {!Box2D.Collision.b2Manifold}
		 */
		this.m_oldManifold = new Box2D.Collision.b2Manifold();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.touching = false;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.continuous = (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyA.IsBullet() ||
						  (bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyB.IsBullet();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.sensor = fixtureA.IsSensor() || fixtureB.IsSensor();
		/**
		 * @private
		 * @type {boolean}
		 */
		this.filtering = false;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.m_fixtureA = fixtureA;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2Fixture}
		 */
		this.m_fixtureB = fixtureB;
		/**
		 * @private
		 * @type {boolean}
		 */
		this.enabled = true;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.bodyAList = bodyA.GetContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.bodyBList = bodyB.GetContactList();
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2ContactList}
		 */
		this.worldList = bodyB.GetWorld().GetContactList();
		this.AddToLists();
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.Reset = function(fixtureA, fixtureB) {
		this.m_manifold.Reset();
		this.m_oldManifold.Reset();
		this.touching = false;
		var bodyA = fixtureA.GetBody();
		var bodyB = fixtureB.GetBody();
		this.continuous = (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyA.IsBullet() ||
						  (bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody) ||
						  bodyB.IsBullet();
		this.sensor = fixtureA.IsSensor() || fixtureB.IsSensor();
		this.filtering = false;
		this.m_fixtureA = fixtureA;
		this.m_fixtureB = fixtureB;
		this.enabled = true;
		this.bodyAList = bodyA.GetContactList();
		this.bodyBList = bodyB.GetContactList();
		this.worldList = bodyB.GetWorld().GetContactList();
		this.AddToLists();
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.AddToLists = function () {
		this.bodyAList.AddContact(this);
		this.bodyBList.AddContact(this);
		this.worldList.AddContact(this);
		this.UpdateLists();
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.UpdateLists = function () {
		var nonSensorEnabledTouching = false;
		var nonSensorEnabledContinuous = false;
		if (!this.IsSensor() && this.IsEnabled()) {
			if (this.IsTouching()) {
				nonSensorEnabledTouching = true;
			}
			if (this.IsContinuous()) {
				nonSensorEnabledContinuous = true;
			}
		}
		this.bodyAList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
		this.bodyBList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
		this.worldList.UpdateContact(this, nonSensorEnabledTouching, nonSensorEnabledContinuous);
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.RemoveFromLists = function () {
		this.bodyAList.RemoveContact(this);
		this.bodyBList.RemoveContact(this);
		this.worldList.RemoveContact(this);
	};
	/**
	 * @return {!Box2D.Collision.b2Manifold}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetManifold = function () {
	  return this.m_manifold;
	};
	/**
	 * @param {!Box2D.Collision.b2WorldManifold} worldManifold
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetWorldManifold = function (worldManifold) {
		var bodyA = this.m_fixtureA.GetBody();
		var bodyB = this.m_fixtureB.GetBody();
		var shapeA = this.m_fixtureA.GetShape();
		var shapeB = this.m_fixtureB.GetShape();
		worldManifold.Initialize(this.m_manifold, bodyA.GetTransform(), shapeA.m_radius, bodyB.GetTransform(), shapeB.m_radius);
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsTouching = function () {
	  return this.touching;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsContinuous = function () {
	  return this.continuous;
	};
	/**
	 * @param {boolean} sensor
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.SetSensor = function (sensor) {
	   this.sensor = sensor;
	   this.UpdateLists();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsSensor = function () {
	  return this.sensor;
	};
	/**
	 * @param {boolean} flag
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.SetEnabled = function (flag) {
	   this.enabled = flag;
	   this.UpdateLists();
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsEnabled = function () {
	   return this.enabled;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetNext = function () {
	  return this.m_next;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureA = function () {
	  return this.m_fixtureA;
	};
	/**
	 * @return {!Box2D.Dynamics.b2Fixture}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetFixtureB = function () {
	  return this.m_fixtureB;
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 * @return {!Box2D.Dynamics.b2Body}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.GetOther = function (body) {
		var bodyA = this.m_fixtureA.GetBody();
		if (bodyA != body) {
			return bodyA;
		} else {
			return this.m_fixtureB.GetBody();
		}
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.FlagForFiltering = function () {
	   this.filtering = true;
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.ClearFiltering = function () {
	   this.filtering = false;
	};
	/**
	 * @return {boolean}
	 */
	Box2D.Dynamics.Contacts.b2Contact.prototype.IsFiltering = function () {
	   return this.filtering;
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.Update = function (listener) {
	  var tManifold = this.m_oldManifold;
	  this.m_oldManifold = this.m_manifold;
	  this.m_manifold = tManifold;
	  this.enabled = true;
	  var touching = false;
	  var wasTouching = this.IsTouching();
	  var bodyA = this.m_fixtureA.GetBody();
	  var bodyB = this.m_fixtureB.GetBody();
	  var aabbOverlap = this.m_fixtureA.m_aabb.TestOverlap(this.m_fixtureB.m_aabb);
	  if (this.sensor) {
		 if (aabbOverlap) {
			touching = Box2D.Collision.Shapes.b2Shape.TestOverlap(this.m_fixtureA.GetShape(), bodyA.GetTransform(), this.m_fixtureB.GetShape(), bodyB.GetTransform());
		 }
		 this.m_manifold.m_pointCount = 0;
	  } else {
		 if (bodyA.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || bodyA.IsBullet() || bodyB.GetType() != Box2D.Dynamics.b2BodyDef.b2_dynamicBody || bodyB.IsBullet()) {
			this.continuous = true;
		 } else {
			this.continuous = false;
		 }
		 if (aabbOverlap) {
			this.Evaluate();
			touching = this.m_manifold.m_pointCount > 0;
			for (var i = 0; i < this.m_manifold.m_pointCount; i++) {
			   var mp2 = this.m_manifold.m_points[i];
			   mp2.m_normalImpulse = 0.0;
			   mp2.m_tangentImpulse = 0.0;
			   for (var j = 0; j < this.m_oldManifold.m_pointCount; j++) {
				  var mp1 = this.m_oldManifold.m_points[j];
				  if (mp1.m_id.GetKey() == mp2.m_id.GetKey()) {
					 mp2.m_normalImpulse = mp1.m_normalImpulse;
					 mp2.m_tangentImpulse = mp1.m_tangentImpulse;
					 break;
				  }
			   }
			}
		 } else {
			this.m_manifold.m_pointCount = 0;
		 }
		 if (touching != wasTouching) {
			bodyA.SetAwake(true);
			bodyB.SetAwake(true);
		 }
	  }
	  this.touching = touching;
	  if (touching != wasTouching) {
		 this.UpdateLists();
	  }
	  if (!wasTouching && touching) {
		 listener.BeginContact(this);
	  }
	  if (wasTouching && !touching) {
		 listener.EndContact(this);
	  }
	  if (!this.sensor) {
		 listener.PreSolve(this, this.m_oldManifold);
	  }
	};
	Box2D.Dynamics.Contacts.b2Contact.prototype.Evaluate = function () {};
	Box2D.Dynamics.Contacts.b2Contact.prototype.ComputeTOI = function (sweepA, sweepB) {
	  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyA.Set(this.m_fixtureA.GetShape());
	  Box2D.Dynamics.Contacts.b2Contact.s_input.proxyB.Set(this.m_fixtureB.GetShape());
	  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepA = sweepA;
	  Box2D.Dynamics.Contacts.b2Contact.s_input.sweepB = sweepB;
	  Box2D.Dynamics.Contacts.b2Contact.s_input.tolerance = Box2D.Common.b2Settings.b2_linearSlop;
	  return Box2D.Collision.b2TimeOfImpact.TimeOfImpact(Box2D.Dynamics.Contacts.b2Contact.s_input);
	};
	Box2D.Dynamics.Contacts.b2Contact.s_input = new Box2D.Collision.b2TOIInput();
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.Contacts.b2Contact.NEXT_ID = 0;
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2CircleContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2CircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2CircleContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2CircleContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollideCircles(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactConstraint = function() {
		this.localPlaneNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.normalMass = new Box2D.Common.Math.b2Mat22();
		this.K = new Box2D.Common.Math.b2Mat22();
		this.points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.points[i] = new Box2D.Dynamics.Contacts.b2ContactConstraintPoint();
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactConstraintPoint = function() {
		  this.localPoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.rA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		  this.rB = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Dynamics.Contacts.b2ContactConstraintPoint.prototype.Reset = function() {
		this.localPoint.Set(0, 0);
		this.rA.Set(0, 0);
		this.rB.Set(0, 0);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactFactory = function() {
		/**
		 * @private
		 */
		this.m_registers = {};
		/**
		 * @private
		 * @type {Object.<Object.<Array.<!Box2D.Dynamics.b2Contact>>>}
		 */
		this.m_freeContacts = {};
		this.AddType(Box2D.Dynamics.Contacts.b2CircleContact, Box2D.Collision.Shapes.b2CircleShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolyAndCircleContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolygonContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2PolygonShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2EdgeAndCircleContact, Box2D.Collision.Shapes.b2EdgeShape.NAME, Box2D.Collision.Shapes.b2CircleShape.NAME);
		this.AddType(Box2D.Dynamics.Contacts.b2PolyAndEdgeContact, Box2D.Collision.Shapes.b2PolygonShape.NAME, Box2D.Collision.Shapes.b2EdgeShape.NAME);
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.AddType = function(ctor, type1, type2) {
		this.m_freeContacts[type1] = this.m_freeContacts[type1] || {};
		this.m_freeContacts[type1][type2] = this.m_freeContacts[type1][type2] || [];
		this.m_registers[type1] = this.m_registers[type1] || {};
		this.m_registers[type1][type2] = new Box2D.Dynamics.Contacts.b2ContactRegister();
		this.m_registers[type1][type2].ctor = ctor;
		this.m_registers[type1][type2].primary = true;
		if (type1 != type2) {
			this.m_registers[type2] = this.m_registers[type2] || {};
			this.m_registers[type2][type1] = new Box2D.Dynamics.Contacts.b2ContactRegister();
			this.m_registers[type2][type1].ctor = ctor;
			this.m_registers[type2][type1].primary = false;
		}
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.Create = function(fixtureA, fixtureB) {
		var type1 = fixtureA.GetShape().GetTypeName();
		var type2 = fixtureB.GetShape().GetTypeName();
		var reg = this.m_registers[type1][type2];
		var ctor = reg.ctor;
		if (ctor != null) {
			if (reg.primary) {
				if (this.m_freeContacts[type1][type2].length > 0) {
					var c = this.m_freeContacts[type1][type2].pop();
					c.Reset(fixtureA, fixtureB);
					return c;
				}
				return new ctor(fixtureA, fixtureB);
			} else {
				if (this.m_freeContacts[type2][type1].length > 0) {
					var c = this.m_freeContacts[type2][type1].pop();
					c.Reset(fixtureB, fixtureA);
					return c;
				}
				return new ctor(fixtureB, fixtureA);
			}
		} else {
			return null;
		}
	};
	Box2D.Dynamics.Contacts.b2ContactFactory.prototype.Destroy = function(contact) {
		var type1 = contact.m_fixtureA.GetShape().GetTypeName();
		var type2 = contact.m_fixtureB.GetShape().GetTypeName();
		this.m_freeContacts[type1][type2].push(contact);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactList = function() {
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.Contacts.b2ContactListNode>}
		 */
		this.contactFirstNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
			this.contactFirstNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Array.<Box2D.Dynamics.Contacts.b2ContactListNode>}
		 */
		this.contactLastNodes = [];
		for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
			this.contactLastNodes[i] = null;
		}
		/**
		 * @private
		 * @type {Object.<Array.<Box2D.Dynamics.Contacts.b2ContactListNode>>}
		 */
		this.contactNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.contactCount = 0;
	};
	/**
	 * @param {number} type
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.GetFirstNode = function(type) {
		return this.contactFirstNodes[type];
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.AddContact = function(contact) {
		var contactID = contact.ID;
		if (this.contactNodeLookup[contactID] == null) {
			this.contactNodeLookup[contactID] = [];
			for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
				this.contactNodeLookup[contactID][i] = null;
			}
			this.CreateNode(contact, contactID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts);
			this.contactCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.UpdateContact = function(contact, nonSensorEnabledTouching, nonSensorEnabledContinuous) {
		if (nonSensorEnabledTouching) {
			this.CreateNode(contact, contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts);
		} else {
			this.RemoveNode(contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledTouchingContacts);
		}
		if (nonSensorEnabledContinuous) {
			this.CreateNode(contact, contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts);
		} else {
			this.RemoveNode(contact.ID, Box2D.Dynamics.Contacts.b2ContactList.TYPES.nonSensorEnabledContinuousContacts);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.RemoveContact = function(contact) {
		var contactID = contact.ID;
		if (this.contactNodeLookup[contactID] != null) {
			for(var i = 0; i <= Box2D.Dynamics.Contacts.b2ContactList.TYPES.allContacts; i++) {
				this.RemoveNode(contactID, i);
			}
			delete this.contactNodeLookup[contactID];
			this.contactCount--;
		}
	};
	/**
	 * @param {string} contactID
	 * @param {number} type
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.RemoveNode = function(contactID, type) {
		var nodeList = this.contactNodeLookup[contactID];
		if (nodeList == null) {
			return;
		}
		var node = nodeList[type];
		if (node == null) {
			return;
		}
		nodeList[type] = null;
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.contactFirstNodes[type] = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.contactLastNodes[type] = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		Box2D.Dynamics.Contacts.b2ContactListNode.FreeNode(node);
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @param {string} contactID
	 * @param {number} type
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.CreateNode = function(contact, contactID, type) {
		var nodeList = this.contactNodeLookup[contactID];
		if (nodeList[type] == null) {
			nodeList[type] = Box2D.Dynamics.Contacts.b2ContactListNode.GetNode(contact);
			var prevNode = this.contactLastNodes[type];
			if (prevNode != null) {
				prevNode.SetNextNode(nodeList[type]);
				nodeList[type].SetPreviousNode(prevNode);
			} else {
				this.contactFirstNodes[type] = nodeList[type];
			}
			this.contactLastNodes[type] = nodeList[type];
		}
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.prototype.GetContactCount = function() {
		return this.contactCount;
	};
	/**
	 * @enum {number}
	 */
	Box2D.Dynamics.Contacts.b2ContactList.TYPES = {
		nonSensorEnabledTouchingContacts: 0,
		nonSensorEnabledContinuousContacts: 1,
		allContacts: 2 // Assumed to be last by above code
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode = function(contact) {
		/**
		 * @private
		 * @type {!Box2D.Dynamics.Contacts.b2Contact}
		 */
		this.contact = contact;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Contacts.b2ContactListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Contacts.b2ContactListNode}
		 */
		this.previous = null;
	};
	/**
	 * @private
	 * @type {Array.<!Box2D.Dynamics.Contacts.b2ContactListNode>
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes = [];
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2Contact} contact
	 * @return {!Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.GetNode = function(contact) {
		if (Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.length > 0) {
			var node = Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.pop();
			node.next = null;
			node.previous = null;
			node.contact = contact;
			return node;
		} else {
			return new Box2D.Dynamics.Contacts.b2ContactListNode(contact);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.FreeNode = function(node) {
		Box2D.Dynamics.Contacts.b2ContactListNode.freeNodes.push(node);
	};
	/**
	 * @param {Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.Contacts.b2ContactListNode} node
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {!Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetContact = function() {
		return this.contact;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.Contacts.b2ContactListNode}
	 */
	Box2D.Dynamics.Contacts.b2ContactListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactRegister = function () {
		this.pool = null;
		this.poolCount = 0;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold = function() {
		this.m_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_separations = [];
		this.m_points = [];
		for (var i = 0; i < Box2D.Common.b2Settings.b2_maxManifoldPoints; i++) {
			this.m_points[i] = Box2D.Common.Math.b2Vec2.Get(0, 0);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype.Initialize = function(cc) {
;
		switch (cc.type) {
			case Box2D.Collision.b2Manifold.e_circles:
				this._InitializeCircles(cc);
				break;
			case Box2D.Collision.b2Manifold.e_faceA:
				this._InitializeFaceA(cc);
				break;
			case Box2D.Collision.b2Manifold.e_faceB:
				this._InitializeFaceB(cc);
				break;
		}
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeCircles = function(cc) {
		var tMat = cc.bodyA.m_xf.R;
		var tVec = cc.localPoint;
		var pointAX = cc.bodyA.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var pointAY = cc.bodyA.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		tMat = cc.bodyB.m_xf.R;
		tVec = cc.points[0].localPoint;
		var pointBX = cc.bodyB.m_xf.position.x + (tMat.col1.x * tVec.x + tMat.col2.x * tVec.y);
		var pointBY = cc.bodyB.m_xf.position.y + (tMat.col1.y * tVec.x + tMat.col2.y * tVec.y);
		var dX = pointBX - pointAX;
		var dY = pointBY - pointAY;
		var d2 = dX * dX + dY * dY;
		if (d2 > Box2D.Common.b2Settings.MIN_VALUE_SQUARED) {
			var d = Math.sqrt(d2);
			this.m_normal.x = dX / d;
			this.m_normal.y = dY / d;
		} else {
			this.m_normal.x = 1.0;
			this.m_normal.y = 0.0;
		}
		this.m_points[0].x = 0.5 * (pointAX + pointBX);
		this.m_points[0].y = 0.5 * (pointAY + pointBY);
		this.m_separations[0] = dX * this.m_normal.x + dY * this.m_normal.y - cc.radius;
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeFaceA = function(cc) {
		this.m_normal.x = cc.bodyA.m_xf.R.col1.x * cc.localPlaneNormal.x + cc.bodyA.m_xf.R.col2.x * cc.localPlaneNormal.y;
		this.m_normal.y = cc.bodyA.m_xf.R.col1.y * cc.localPlaneNormal.x + cc.bodyA.m_xf.R.col2.y * cc.localPlaneNormal.y;
		var planePointX = cc.bodyA.m_xf.position.x + (cc.bodyA.m_xf.R.col1.x * cc.localPoint.x + cc.bodyA.m_xf.R.col2.x * cc.localPoint.y);
		var planePointY = cc.bodyA.m_xf.position.y + (cc.bodyA.m_xf.R.col1.y * cc.localPoint.x + cc.bodyA.m_xf.R.col2.y * cc.localPoint.y);
		for (var i = 0; i < cc.pointCount; i++) {
			var clipPointX = cc.bodyB.m_xf.position.x + (cc.bodyB.m_xf.R.col1.x * cc.points[i].localPoint.x + cc.bodyB.m_xf.R.col2.x * cc.points[i].localPoint.y);
			var clipPointY = cc.bodyB.m_xf.position.y + (cc.bodyB.m_xf.R.col1.y * cc.points[i].localPoint.x + cc.bodyB.m_xf.R.col2.y * cc.points[i].localPoint.y);
			this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
			this.m_points[i].x = clipPointX;
			this.m_points[i].y = clipPointY;
		}
	};
	/**
	 * @private
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} cc
	 */
	Box2D.Dynamics.Contacts.b2PositionSolverManifold.prototype._InitializeFaceB = function(cc) {
		this.m_normal.x = cc.bodyB.m_xf.R.col1.x * cc.localPlaneNormal.x + cc.bodyB.m_xf.R.col2.x * cc.localPlaneNormal.y;
		this.m_normal.y = cc.bodyB.m_xf.R.col1.y * cc.localPlaneNormal.x + cc.bodyB.m_xf.R.col2.y * cc.localPlaneNormal.y;
		var planePointX = cc.bodyB.m_xf.position.x + (cc.bodyB.m_xf.R.col1.x * cc.localPoint.x + cc.bodyB.m_xf.R.col2.x * cc.localPoint.y);
		var planePointY = cc.bodyB.m_xf.position.y + (cc.bodyB.m_xf.R.col1.y * cc.localPoint.x + cc.bodyB.m_xf.R.col2.y * cc.localPoint.y);
		for (var i = 0; i < cc.pointCount; i++) {
			var clipPointX = cc.bodyA.m_xf.position.x + (cc.bodyA.m_xf.R.col1.x * cc.points[i].localPoint.x + cc.bodyA.m_xf.R.col2.x * cc.points[i].localPoint.y);
			var clipPointY = cc.bodyA.m_xf.position.y + (cc.bodyA.m_xf.R.col1.y * cc.points[i].localPoint.x + cc.bodyA.m_xf.R.col2.y * cc.points[i].localPoint.y);
			this.m_separations[i] = (clipPointX - planePointX) * this.m_normal.x + (clipPointY - planePointY) * this.m_normal.y - cc.radius;
			this.m_points[i].Set(clipPointX, clipPointY);
		}
		this.m_normal.x *= -1;
		this.m_normal.y *= -1;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver = function() {
		/**
		 * @private
		 * @type {Array.<!Box2D.Dynamics.Contacts.b2ContactConstraint>}
		 */
		this.m_constraints = [];
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 * @param {Array.<!Box2D.Dynamics.Contacts.b2Contact>} contacts
	 * @param {number} contactCount
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.Initialize = function(step, contacts, contactCount) {
		this.m_constraintCount = contactCount;
		while (this.m_constraints.length < this.m_constraintCount) {
			this.m_constraints[this.m_constraints.length] = new Box2D.Dynamics.Contacts.b2ContactConstraint();
		}
		for (var i = 0; i < contactCount; i++) {
			var contact = contacts[i];
			var fixtureA = contact.m_fixtureA;
			var fixtureB = contact.m_fixtureB;
			var shapeA = fixtureA.m_shape;
			var shapeB = fixtureB.m_shape;
			var radiusA = shapeA.m_radius;
			var radiusB = shapeB.m_radius;
			var bodyA = fixtureA.GetBody();
			var bodyB = fixtureB.GetBody();
			var manifold = contact.GetManifold();
			var friction = Box2D.Common.b2Settings.b2MixFriction(fixtureA.GetFriction(), fixtureB.GetFriction());
			var restitution = Box2D.Common.b2Settings.b2MixRestitution(fixtureA.GetRestitution(), fixtureB.GetRestitution());
			var vAX = bodyA.m_linearVelocity.x;
			var vAY = bodyA.m_linearVelocity.y;
			var vBX = bodyB.m_linearVelocity.x;
			var vBY = bodyB.m_linearVelocity.y;
			var wA = bodyA.m_angularVelocity;
			var wB = bodyB.m_angularVelocity;
;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.Initialize(manifold, bodyA.m_xf, radiusA, bodyB.m_xf, radiusB);
			var normalX = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_normal.x;
			var normalY = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_normal.y;
			var cc = this.m_constraints[i];
			cc.bodyA = bodyA;
			cc.bodyB = bodyB;
			cc.manifold = manifold;
			cc.normal.x = normalX;
			cc.normal.y = normalY;
			cc.pointCount = manifold.m_pointCount;
			cc.friction = friction;
			cc.restitution = restitution;
			cc.localPlaneNormal.x = manifold.m_localPlaneNormal.x;
			cc.localPlaneNormal.y = manifold.m_localPlaneNormal.y;
			cc.localPoint.x = manifold.m_localPoint.x;
			cc.localPoint.y = manifold.m_localPoint.y;
			cc.radius = radiusA + radiusB;
			cc.type = manifold.m_type;
			for (var k = 0; k < cc.pointCount; ++k) {
				var cp = manifold.m_points[k];
				var ccp = cc.points[k];
				ccp.normalImpulse = cp.m_normalImpulse;
				ccp.tangentImpulse = cp.m_tangentImpulse;
				ccp.localPoint.SetV(cp.m_localPoint);
				var rAX = ccp.rA.x = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].x - bodyA.m_sweep.c.x;
				var rAY = ccp.rA.y = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].y - bodyA.m_sweep.c.y;
				var rBX = ccp.rB.x = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].x - bodyB.m_sweep.c.x;
				var rBY = ccp.rB.y = Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold.m_points[k].y - bodyB.m_sweep.c.y;
				var rnA = rAX * normalY - rAY * normalX;
				var rnB = rBX * normalY - rBY * normalX;
				rnA *= rnA;
				rnB *= rnB;
				var kNormal = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rnA + bodyB.m_invI * rnB;
				ccp.normalMass = 1.0 / kNormal;
				var kEqualized = bodyA.m_mass * bodyA.m_invMass + bodyB.m_mass * bodyB.m_invMass;
				kEqualized += bodyA.m_mass * bodyA.m_invI * rnA + bodyB.m_mass * bodyB.m_invI * rnB;
				ccp.equalizedMass = 1.0 / kEqualized;
				var tangentX = normalY;
				var tangentY = (-normalX);
				var rtA = rAX * tangentY - rAY * tangentX;
				var rtB = rBX * tangentY - rBY * tangentX;
				rtA *= rtA;
				rtB *= rtB;
				var kTangent = bodyA.m_invMass + bodyB.m_invMass + bodyA.m_invI * rtA + bodyB.m_invI * rtB;
				ccp.tangentMass = 1.0 / kTangent;
				ccp.velocityBias = 0.0;
				var tX = vBX + ((-wB * rBY)) - vAX - ((-wA * rAY));
				var tY = vBY + (wB * rBX) - vAY - (wA * rAX);
				var vRel = cc.normal.x * tX + cc.normal.y * tY;
				if (vRel < (-Box2D.Common.b2Settings.b2_velocityThreshold)) {
					ccp.velocityBias += (-cc.restitution * vRel);
				}
			}
			if (cc.pointCount == 2) {
				var ccp1 = cc.points[0];
				var ccp2 = cc.points[1];
				var invMassA = bodyA.m_invMass;
				var invIA = bodyA.m_invI;
				var invMassB = bodyB.m_invMass;
				var invIB = bodyB.m_invI;
				var rn1A = ccp1.rA.x * normalY - ccp1.rA.y * normalX;
				var rn1B = ccp1.rB.x * normalY - ccp1.rB.y * normalX;
				var rn2A = ccp2.rA.x * normalY - ccp2.rA.y * normalX;
				var rn2B = ccp2.rB.x * normalY - ccp2.rB.y * normalX;
				var k11 = invMassA + invMassB + invIA * rn1A * rn1A + invIB * rn1B * rn1B;
				var k22 = invMassA + invMassB + invIA * rn2A * rn2A + invIB * rn2B * rn2B;
				var k12 = invMassA + invMassB + invIA * rn1A * rn2A + invIB * rn1B * rn2B;
				var k_maxConditionNumber = 100.0;
				if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {
					cc.K.col1.Set(k11, k12);
					cc.K.col2.Set(k12, k22);
					cc.K.GetInverse(cc.normalMass);
				} else {
					cc.pointCount = 1;
				}
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.b2TimeStep} step
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.InitVelocityConstraints = function(step) {
		for (var i = 0; i < this.m_constraintCount; ++i) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_invMass;
			var invIA = bodyA.m_invI;
			var invMassB = bodyB.m_invMass;
			var invIB = bodyB.m_invI;
			var normalX = c.normal.x;
			var normalY = c.normal.y;
			var tangentX = normalY;
			var tangentY = (-normalX);
			var tX = 0;
			var j = 0;
			var tCount = 0;
			if (step.warmStarting) {
				tCount = c.pointCount;
				for (j = 0; j < tCount; ++j) {
					var ccp = c.points[j];
					ccp.normalImpulse *= step.dtRatio;
					ccp.tangentImpulse *= step.dtRatio;
					var PX = ccp.normalImpulse * normalX + ccp.tangentImpulse * tangentX;
					var PY = ccp.normalImpulse * normalY + ccp.tangentImpulse * tangentY;
					bodyA.m_angularVelocity -= invIA * (ccp.rA.x * PY - ccp.rA.y * PX);
					bodyA.m_linearVelocity.x -= invMassA * PX;
					bodyA.m_linearVelocity.y -= invMassA * PY;
					bodyB.m_angularVelocity += invIB * (ccp.rB.x * PY - ccp.rB.y * PX);
					bodyB.m_linearVelocity.x += invMassB * PX;
					bodyB.m_linearVelocity.y += invMassB * PY;
				}
			} else {
				tCount = c.pointCount;
				for (j = 0; j < tCount; ++j) {
					var ccp2 = c.points[j];
					ccp2.normalImpulse = 0.0;
					ccp2.tangentImpulse = 0.0;
				}
			}
		}
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints = function() {
		for (var i = 0; i < this.m_constraintCount; i++) {
			this.SolveVelocityConstraints_Constraint(this.m_constraints[i]);
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_Constraint = function(c) {
		var normalX = c.normal.x;
		var normalY = c.normal.y;
		for (var j = 0; j < c.pointCount; j++) {
			Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPoint(c, c.points[j]);
		}
		if (c.pointCount == 1) {
			var ccp = c.points[0];
			var dvX = c.bodyB.m_linearVelocity.x - (c.bodyB.m_angularVelocity * ccp.rB.y) - c.bodyA.m_linearVelocity.x + (c.bodyA.m_angularVelocity * ccp.rA.y);
			var dvY = c.bodyB.m_linearVelocity.y + (c.bodyB.m_angularVelocity * ccp.rB.x) - c.bodyA.m_linearVelocity.y - (c.bodyA.m_angularVelocity * ccp.rA.x);
			var vn = dvX * normalX + dvY * normalY;
			var newImpulse = ccp.normalImpulse - (ccp.normalMass * (vn - ccp.velocityBias));
			newImpulse = newImpulse > 0 ? newImpulse : 0.0;
			var impulseLambda = newImpulse - ccp.normalImpulse;
			var PX = impulseLambda * normalX;
			var PY = impulseLambda * normalY;
			c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * PX;
			c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * PY;
			c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (ccp.rA.x * PY - ccp.rA.y * PX);
			c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * PX;
			c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * PY;
			c.bodyB.m_angularVelocity += c.bodyB.m_invI * (ccp.rB.x * PY - ccp.rB.y * PX);
			ccp.normalImpulse = newImpulse;
		} else {
			var cp1 = c.points[0];
			var cp2 = c.points[1];
			var aX = cp1.normalImpulse;
			var aY = cp2.normalImpulse;
			var dv1X = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * cp1.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * cp1.rA.y;
			var dv1Y = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * cp1.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * cp1.rA.x;
			var dv2X = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * cp2.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * cp2.rA.y;
			var dv2Y = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * cp2.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * cp2.rA.x;
			var bX = (dv1X * normalX + dv1Y * normalY) - cp1.velocityBias;
			var bY = (dv2X * normalX + dv2Y * normalY) - cp2.velocityBias;
			bX -= c.K.col1.x * aX + c.K.col2.x * aY;
			bY -= c.K.col1.y * aX + c.K.col2.y * aY;
			for (;;) {
				var firstX = (-(c.normalMass.col1.x * bX + c.normalMass.col2.x * bY));
				if (firstX >= 0) {
					var firstY = (-(c.normalMass.col1.y * bX + c.normalMass.col2.y * bY));
					if(firstY >= 0) {
						var dX = firstX - aX;
						var dY = firstY - aY;
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, firstX - aX, firstY - aY);
						cp1.normalImpulse = firstX;
						cp2.normalImpulse = firstY;
						break;
					}
				}
				var secondX = (-cp1.normalMass * bX);
				if (secondX >= 0) {
					if ((c.K.col1.y * secondX + bY) >= 0) {
						var dX = secondX - aX;
						var dY = -aY;
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, secondX - aX, -aY);
						cp1.normalImpulse = secondX;
						cp2.normalImpulse = 0;
						break;
					}
				}
				var secondY = (-cp2.normalMass * bY);
				if (secondY >= 0) {
					if ((c.K.col2.x * secondY + bX) >= 0) {
						this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, -aX, secondY - aY);
						cp1.normalImpulse = 0;
						cp2.normalImpulse = secondY;
						break;
					}
				}
				if (bX >= 0 && bY >= 0) {
					this.SolveVelocityConstraints_ConstraintPointUpdate(c, cp1, cp2, -aX, -aY);
					cp1.normalImpulse = 0;
					cp2.normalImpulse = 0;
					break;
				}
				break;
			}
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} ccp
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPoint = function(c, ccp) {
		var tangentX = c.normal.y;
		var tangentY = -c.normal.x;
		var dvX = c.bodyB.m_linearVelocity.x - c.bodyB.m_angularVelocity * ccp.rB.y - c.bodyA.m_linearVelocity.x + c.bodyA.m_angularVelocity * ccp.rA.y;
		var dvY = c.bodyB.m_linearVelocity.y + c.bodyB.m_angularVelocity * ccp.rB.x - c.bodyA.m_linearVelocity.y - c.bodyA.m_angularVelocity * ccp.rA.x;
		var vt = dvX * tangentX + dvY * tangentY;
		var maxFriction = c.friction * ccp.normalImpulse;
		var newImpulse = Box2D.Common.Math.b2Math.Clamp(ccp.tangentImpulse - ccp.tangentMass * vt, -maxFriction, maxFriction);
		var impulseLambda = newImpulse - ccp.tangentImpulse;
		var PX = impulseLambda * tangentX;
		var PY = impulseLambda * tangentY;
		c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * PX;
		c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * PY;
		c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (ccp.rA.x * PY - ccp.rA.y * PX);
		c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * PX;
		c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * PY;
		c.bodyB.m_angularVelocity += c.bodyB.m_invI * (ccp.rB.x * PY - ccp.rB.y * PX);
		ccp.tangentImpulse = newImpulse;
	};
	/**
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraint} c
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} cp1
	 * @param {!Box2D.Dynamics.Contacts.b2ContactConstraintPoint} cp2
	 * @param {number} dX
	 * @param {number} dY
	 */
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolveVelocityConstraints_ConstraintPointUpdate = function(c, cp1, cp2, dX, dY) {
		var P1X = dX * c.normal.x;
		var P1Y = dX * c.normal.y;
		var P2X = dY * c.normal.x;
		var P2Y = dY * c.normal.y;
		c.bodyA.m_linearVelocity.x -= c.bodyA.m_invMass * (P1X + P2X);
		c.bodyA.m_linearVelocity.y -= c.bodyA.m_invMass * (P1Y + P2Y);
		c.bodyA.m_angularVelocity -= c.bodyA.m_invI * (cp1.rA.x * P1Y - cp1.rA.y * P1X + cp2.rA.x * P2Y - cp2.rA.y * P2X);
		c.bodyB.m_linearVelocity.x += c.bodyB.m_invMass * (P1X + P2X);
		c.bodyB.m_linearVelocity.y += c.bodyB.m_invMass * (P1Y + P2Y);
		c.bodyB.m_angularVelocity += c.bodyB.m_invI * (cp1.rB.x * P1Y - cp1.rB.y * P1X + cp2.rB.x * P2Y - cp2.rB.y * P2X);
		cp1.normalImpulse = 0;
		cp2.normalImpulse = 0;
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.FinalizeVelocityConstraints = function() {
		for (var i = 0; i < this.m_constraintCount; ++i) {
			var c = this.m_constraints[i];
			var m = c.manifold;
			for (var j = 0; j < c.pointCount; ++j) {
				var point1 = m.m_points[j];
				var point2 = c.points[j];
				point1.m_normalImpulse = point2.normalImpulse;
				point1.m_tangentImpulse = point2.tangentImpulse;
			}
		}
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var minSeparation = 0.0;
		for (var i = 0; i < this.m_constraintCount; i++) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.Initialize(c);
			var normal = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_normal;
			for (var j = 0; j < c.pointCount; j++) {
				var ccp = c.points[j];
				var point = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_points[j];
				var separation = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				minSeparation = minSeparation < separation ? minSeparation : separation;
				var C = Box2D.Common.Math.b2Math.Clamp(baumgarte * (separation + Box2D.Common.b2Settings.b2_linearSlop), (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				var impulse = (-ccp.equalizedMass * C);
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.SynchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.SynchronizeTransform();
			}
		}
		return minSeparation > (-1.5 * Box2D.Common.b2Settings.b2_linearSlop);
	};
	Box2D.Dynamics.Contacts.b2ContactSolver.prototype.SolvePositionConstraints_NEW = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var minSeparation = 0.0;
		for (var i = 0; i < this.m_constraintCount; i++) {
			var c = this.m_constraints[i];
			var bodyA = c.bodyA;
			var bodyB = c.bodyB;
			var invMassA = bodyA.m_mass * bodyA.m_invMass;
			var invIA = bodyA.m_mass * bodyA.m_invI;
			var invMassB = bodyB.m_mass * bodyB.m_invMass;
			var invIB = bodyB.m_mass * bodyB.m_invI;
			Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.Initialize(c);
			var normal = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_normal;
			for (var j = 0; j < c.pointCount; j++) {
				var ccp = c.points[j];
				var point = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_points[j];
				var separation = Box2D.Dynamics.Contacts.b2ContactSolver.s_psm.m_separations[j];
				var rAX = point.x - bodyA.m_sweep.c.x;
				var rAY = point.y - bodyA.m_sweep.c.y;
				var rBX = point.x - bodyB.m_sweep.c.x;
				var rBY = point.y - bodyB.m_sweep.c.y;
				if (separation < minSeparation) {
					minSeparation = separation;
				}
				var C = 0;
				if (baumgarte != 0) {
					Box2D.Common.Math.b2Math.Clamp(baumgarte * (separation + Box2D.Common.b2Settings.b2_linearSlop), (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				}
				var impulse = (-ccp.equalizedMass * C);
				var PX = impulse * normal.x;
				var PY = impulse * normal.y;
				bodyA.m_sweep.c.x -= invMassA * PX;
				bodyA.m_sweep.c.y -= invMassA * PY;
				bodyA.m_sweep.a -= invIA * (rAX * PY - rAY * PX);
				bodyA.SynchronizeTransform();
				bodyB.m_sweep.c.x += invMassB * PX;
				bodyB.m_sweep.c.y += invMassB * PY;
				bodyB.m_sweep.a += invIB * (rBX * PY - rBY * PX);
				bodyB.SynchronizeTransform();
			}
		}
		return minSeparation > (-1.5 * Box2D.Common.b2Settings.b2_linearSlop);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2EdgeAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.Evaluate = function() {
		var bA = this.m_fixtureA.GetBody();
		var bB = this.m_fixtureB.GetBody();
		this.b2CollideEdgeAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	Box2D.Dynamics.Contacts.b2EdgeAndCircleContact.prototype.b2CollideEdgeAndCircle = function(manifold, edge, xf1, circle, xf2) {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolyAndCircleContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Reset = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolyAndCircleContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollidePolygonAndCircle(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolyAndEdgeContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.Reset = function(fixtureA, fixtureB) {
;
;
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.Evaluate = function() {
		this.b2CollidePolyAndEdge(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	Box2D.Dynamics.Contacts.b2PolyAndEdgeContact.prototype.b2CollidePolyAndEdge = function (manifold, polygon, xf1, edge, xf2) {};
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 * @constructor
	 * @extends {Box2D.Dynamics.Contacts.b2Contact}
	 */
	Box2D.Dynamics.Contacts.b2PolygonContact = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.call(this, fixtureA, fixtureB);
	};
	c2inherit(Box2D.Dynamics.Contacts.b2PolygonContact, Box2D.Dynamics.Contacts.b2Contact);
	/**
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureA
	 * @param {!Box2D.Dynamics.b2Fixture} fixtureB
	 */
	Box2D.Dynamics.Contacts.b2PolygonContact.prototype.Reset = function(fixtureA, fixtureB) {
		Box2D.Dynamics.Contacts.b2Contact.prototype.Reset.call(this, fixtureA, fixtureB);
	};
	Box2D.Dynamics.Contacts.b2PolygonContact.prototype.Evaluate = function() {
		Box2D.Collision.b2Collision.CollidePolygons(this.m_manifold, this.m_fixtureA.GetShape(), this.m_fixtureA.GetBody().m_xf, this.m_fixtureB.GetShape(), this.m_fixtureB.GetBody().m_xf);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2Controller = function() {
		/**
		 * @const
		 * @private
		 * @type {string}
		 */
		this.ID = "Controller" + Box2D.Dynamics.Controllers.b2Controller.NEXT_ID++;
		/**
		 * @type {Box2D.Dynamics.b2World}
		 */
		this.m_world = null;
		/**
		 * @private
		 * @type {!Box2D.Dynamics.b2BodyList}
		 */
		this.bodyList = new Box2D.Dynamics.b2BodyList();
	};
	Box2D.Dynamics.Controllers.b2Controller.prototype.Step = function(step) {};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.AddBody = function(body) {
		this.bodyList.AddBody(body);
		body.AddController(this);
	};
	/**
	 * @param {!Box2D.Dynamics.b2Body} body
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.RemoveBody = function(body) {
		this.bodyList.RemoveBody(body);
		body.RemoveController(this);
	};
	Box2D.Dynamics.Controllers.b2Controller.prototype.Clear = function() {
		for (var node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); node; node = node.GetNextNode()) {
			this.RemoveBody(node.body);
		}
	};
	/**
	 * @return {!Box2D.Dynamics.b2BodyList}
	 */
	Box2D.Dynamics.Controllers.b2Controller.prototype.GetBodyList = function() {
		return this.bodyList;
	};
	/**
	 * @type {number}
	 * @private
	 */
	Box2D.Dynamics.Controllers.b2Controller.NEXT_ID = 0;
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2BuoyancyController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.normal = Box2D.Common.Math.b2Vec2.Get(0, -1);
		this.offset = 0;
		this.density = 0;
		this.velocity = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.linearDrag = 2;
		this.angularDrag = 1;
		this.useDensity = false;
		this.useWorldGravity = true;
		this.gravity = null;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2BuoyancyController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2BuoyancyController.prototype.Step = function(step) {
		if (this.useWorldGravity) {
			this.gravity = this.m_world.GetGravity().Copy();
		}
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var areac = Box2D.Common.Math.b2Vec2.Get(0, 0);
			var massc = Box2D.Common.Math.b2Vec2.Get(0, 0);
			var area = 0.0;
			var mass = 0.0;
			for (var fixtureNode = body.GetFixtureList().GetFirstNode(); fixtureNode; fixtureNode = fixtureNode.GetNextNode()) {
				var sc = Box2D.Common.Math.b2Vec2.Get(0, 0);
				var sarea = fixtureNode.fixture.GetShape().ComputeSubmergedArea(this.normal, this.offset, body.GetTransform(), sc);
				area += sarea;
				areac.x += sarea * sc.x;
				areac.y += sarea * sc.y;
				var shapeDensity = 0;
				if (this.useDensity) {
					shapeDensity = 1;
				} else {
					shapeDensity = 1;
				}
				mass += sarea * shapeDensity;
				massc.x += sarea * sc.x * shapeDensity;
				massc.y += sarea * sc.y * shapeDensity;
			}
			if (area < Number.MIN_VALUE) {
				continue;
			}
			areac.x /= area;
			areac.y /= area;
			massc.x /= mass;
			massc.y /= mass;
			var buoyancyForce = this.gravity.GetNegative();
			buoyancyForce.Multiply(this.density * area);
			body.ApplyForce(buoyancyForce, massc);
			var dragForce = body.GetLinearVelocityFromWorldPoint(areac);
			dragForce.Subtract(this.velocity);
			dragForce.Multiply((-this.linearDrag * area));
			body.ApplyForce(dragForce, areac);
			body.ApplyTorque((-body.GetInertia() / body.GetMass() * area * body.GetAngularVelocity() * this.angularDrag));
			Box2D.Common.Math.b2Vec2.Free(areac);
			Box2D.Common.Math.b2Vec2.Free(massc);
		}
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2ConstantAccelController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.A = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Dynamics.Controllers.b2ConstantAccelController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2ConstantAccelController.prototype.Step = function(step) {
		var smallA = Box2D.Common.Math.b2Vec2.Get(this.A.x * step.dt, this.A.y * step.dt);
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var oldVelocity = body.GetLinearVelocity();
			body.SetLinearVelocity(Box2D.Common.Math.b2Vec2.Get(oldVelocity.x + smallA.x, oldVelocity.y + smallA.y));
		}
		Box2D.Common.Math.b2Vec2.Free(smallA);
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2ConstantForceController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.F = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	c2inherit(Box2D.Dynamics.Controllers.b2ConstantForceController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2ConstantForceController.prototype.Step = function(step) {
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			body.ApplyForce(this.F, body.GetWorldCenter());
		}
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2ControllerList = function() {
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.controllerFirstNode = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.controllerLastNode = null;
		/**
		 * @private
		 * @type {Object.<Box2D.Dynamics.Controllers.b2ControllerListNode>}
		 */
		this.controllerNodeLookup = {};
		/**
		 * @private
		 * @type {number}
		 */
		this.controllerCount = 0;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.GetFirstNode = function() {
		return this.controllerFirstNode;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.AddController = function(controller) {
		var controllerID = controller.ID;
		if (this.controllerNodeLookup[controllerID] == null) {
			var node = new Box2D.Dynamics.Controllers.b2ControllerListNode(controller);
			var prevNode = this.controllerLastNode;
			if (prevNode != null) {
				prevNode.SetNextNode(node);
			} else {
				this.controllerFirstNode = node;
			}
			node.SetPreviousNode(prevNode);
			this.controllerLastNode = node;
			this.controllerNodeLookup[controllerID] = node;
			this.controllerCount++;
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.RemoveController = function(controller) {
		var controllerID = controller.ID;
		var node = this.controllerNodeLookup[controllerID];
		if (node == null) {
			return;
		}
		var prevNode = node.GetPreviousNode();
		var nextNode = node.GetNextNode();
		if (prevNode == null) {
			this.controllerFirstNode = nextNode;
		} else {
			prevNode.SetNextNode(nextNode);
		}
		if (nextNode == null) {
			this.controllerLastNode = prevNode;
		} else {
			nextNode.SetPreviousNode(prevNode);
		}
		delete this.controllerNodeLookup[controllerID];
		this.controllerCount--;
	};
	/**
	 * @return {number}
	 */
	Box2D.Dynamics.Controllers.b2ControllerList.prototype.GetControllerCount = function() {
		return this.controllerCount;
	};
	/**
	 * @param {!Box2D.Dynamics.Controllers.b2Controller} controller
	 * @constructor
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode = function(controller) {
		/**
		 * @const
		 * @type {!Box2D.Dynamics.Controllers.b2Controller}
		 */
		this.controller = controller;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.next = null;
		/**
		 * @private
		 * @type {Box2D.Dynamics.Controllers.b2ControllerListNode}
		 */
		this.previous = null;
	};
	/**
	 * @param {Box2D.Dynamics.Controllers.b2ControllerListNode} node
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.SetNextNode = function(node) {
		this.next = node;
	};
	/**
	 * @param {Box2D.Dynamics.Controllers.b2ControllerListNode} node
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.SetPreviousNode = function(node) {
		this.previous = node;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.GetNextNode = function() {
		return this.next;
	};
	/**
	 * @return {Box2D.Dynamics.Controllers.b2ControllerListNode}
	 */
	Box2D.Dynamics.Controllers.b2ControllerListNode.prototype.GetPreviousNode = function() {
		return this.previous;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2GravityController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.G = 1;
		this.invSqr = true;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2GravityController, Box2D.Dynamics.Controllers.b2Controller);
	Box2D.Dynamics.Controllers.b2GravityController.prototype.Step = function(step) {
		var i = null;
		var body1 = null;
		var p1 = null;
		var mass1 = 0;
		var j = null;
		var body2 = null;
		var p2 = null;
		var dx = 0;
		var dy = 0;
		var r2 = 0;
		var f = null;
		if (this.invSqr) {
			for (var body1Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body1Node; body1Node = body1Node.GetNextNode()) {
				var body1 = body1Node.body;
				var p1 = body1.GetWorldCenter();
				var mass1 = body1.GetMass();
				for (var body2Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body2Node; body2Node = body2Node.GetNextNode()) {
					var body2 = body2Node.body;
					if ( !body1.IsAwake() && !body2.IsAwake() ) {
						continue;
					}
					var p2 = body2.GetWorldCenter();
					var dx = p2.x - p1.x;
					var dy = p2.y - p1.y;
					var r2 = dx * dx + dy * dy;
					if (r2 < Number.MIN_VALUE) {
						continue;
					}
					var f = Box2D.Common.Math.b2Vec2.Get(dx, dy);
					f.Multiply(this.G / r2 / Math.sqrt(r2) * mass1 * body2.GetMass());
					if (body1.IsAwake()) {
						body1.ApplyForce(f, p1);
					}
					f.Multiply(-1);
					if (body2.IsAwake()) {
						body2.ApplyForce(f, p2);
					}
					Box2D.Common.Math.b2Vec2.Free(f);
				}
			}
		} else {
			for (var body1Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body1Node; body1Node = body1Node.GetNextNode()) {
				var body1 = bodyNode.body;
				var p1 = body1.GetWorldCenter();
				var mass1 = body1.GetMass();
				for (var body2Node = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.allBodies); body2Node; body2Node = body2Node.GetNextNode()) {
					var body2 = bodyNode.body;
					if ( !body1.IsAwake() && !body2.IsAwake() ) {
						continue;
					}
					var p2 = body2.GetWorldCenter();
					var dx = p2.x - p1.x;
					var dy = p2.y - p1.y;
					var r2 = dx * dx + dy * dy;
					if (r2 < Number.MIN_VALUE) {
						continue;
					}
					var f = Box2D.Common.Math.b2Vec2.Get(dx, dy);
					f.Multiply(this.G / r2 * mass1 * body2.GetMass());
					if (body1.IsAwake()) {
						body1.ApplyForce(f, p1);
					}
					f.Multiply(-1);
					if (body2.IsAwake()) {
						body2.ApplyForce(f, p2);
					}
					Box2D.Common.Math.b2Vec2.Free(f);
				}
			}
		}
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Controllers.b2Controller}
	 */
	Box2D.Dynamics.Controllers.b2TensorDampingController = function() {
		Box2D.Dynamics.Controllers.b2Controller.call(this);
		this.T = new Box2D.Common.Math.b2Mat22();
		this.maxTimestep = 0;
	};
	c2inherit(Box2D.Dynamics.Controllers.b2TensorDampingController, Box2D.Dynamics.Controllers.b2Controller);
	/**
	 * @param {number} xDamping
	 * @param {number} yDamping
	 */
	Box2D.Dynamics.Controllers.b2TensorDampingController.prototype.SetAxisAligned = function(xDamping, yDamping) {
		this.T.col1.x = (-xDamping);
		this.T.col1.y = 0;
		this.T.col2.x = 0;
		this.T.col2.y = (-yDamping);
		if (xDamping > 0 || yDamping > 0) {
			this.maxTimestep = 1 / Math.max(xDamping, yDamping);
		} else {
			this.maxTimestep = 0;
		}
	};
	Box2D.Dynamics.Controllers.b2TensorDampingController.prototype.Step = function(step) {
		var timestep = step.dt;
		if (timestep <= Number.MIN_VALUE) return;
		if (timestep > this.maxTimestep && this.maxTimestep > 0) timestep = this.maxTimestep;
		for (var bodyNode = this.bodyList.GetFirstNode(Box2D.Dynamics.b2BodyList.TYPES.awakeBodies); bodyNode; bodyNode = bodyNode.GetNextNode()) {
			var body = bodyNode.body;
			var damping = body.GetWorldVector(Box2D.Common.Math.b2Math.MulMV(this.T, body.GetLocalVector(body.GetLinearVelocity())));
			body.SetLinearVelocity(Box2D.Common.Math.b2Vec2.Get(body.GetLinearVelocity().x + damping.x * timestep, body.GetLinearVelocity().y + damping.y * timestep));
		}
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2JointDef} def
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2Joint = function(def) {
		this.m_edgeA = new Box2D.Dynamics.Joints.b2JointEdge();
		this.m_edgeB = new Box2D.Dynamics.Joints.b2JointEdge();
		this.m_localCenterA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localCenterB = Box2D.Common.Math.b2Vec2.Get(0, 0);
;
		this.m_type = def.type;
		this.m_prev = null;
		this.m_next = null;
		this.m_bodyA = def.bodyA;
		this.m_bodyB = def.bodyB;
		this.m_collideConnected = def.collideConnected;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetType = function() {
		return this.m_type;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorA = function() {
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetAnchorB = function() {
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return null;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyA = function() {
		return this.m_bodyA;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetBodyB = function() {
		return this.m_bodyB;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.GetNext = function() {
		return this.m_next;
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.IsActive = function() {
		return this.m_bodyA.IsActive() && this.m_bodyB.IsActive();
	};
	Box2D.Dynamics.Joints.b2Joint.Create = function(def) {
		return def.Create();
	};
	Box2D.Dynamics.Joints.b2Joint.prototype.InitVelocityConstraints = function(step) {};
	Box2D.Dynamics.Joints.b2Joint.prototype.SolveVelocityConstraints = function(step) {};
	Box2D.Dynamics.Joints.b2Joint.prototype.FinalizeVelocityConstraints = function() {};
	Box2D.Dynamics.Joints.b2Joint.prototype.SolvePositionConstraints = function(baumgarte) {
		return false;
	};
	Box2D.Dynamics.Joints.b2Joint.e_unknownJoint = 0;
	Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint = 1;
	Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint = 2;
	Box2D.Dynamics.Joints.b2Joint.e_distanceJoint = 3;
	Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint = 4;
	Box2D.Dynamics.Joints.b2Joint.e_mouseJoint = 5;
	Box2D.Dynamics.Joints.b2Joint.e_gearJoint = 6;
	Box2D.Dynamics.Joints.b2Joint.e_lineJoint = 7;
	Box2D.Dynamics.Joints.b2Joint.e_weldJoint = 8;
	Box2D.Dynamics.Joints.b2Joint.e_frictionJoint = 9;
	Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit = 0;
	Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit = 1;
	Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit = 2;
	Box2D.Dynamics.Joints.b2Joint.e_equalLimits = 3;
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2JointDef = function () {
		this.type = Box2D.Dynamics.Joints.b2Joint.e_unknownJoint;
		this.bodyA = null;
		this.bodyB = null;
		this.collideConnected = false;
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2JointEdge = function () {};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2DistanceJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_length = def.length;
		this.m_frequencyHz = def.frequencyHz;
		this.m_dampingRatio = def.dampingRatio;
		this.m_impulse = 0.0;
		this.m_gamma = 0.0;
		this.m_bias = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2DistanceJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	/**
	 * @param {number} inv_dt
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetReactionForce = function(inv_dt) {
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_u.x, inv_dt * this.m_impulse * this.m_u.y);
	};
	/**
	 * @param {number} inv_dt
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetReactionTorque = function(inv_dt) {
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetLength = function() {
		return this.m_length;
	};
	/**
	 * @param {number} length
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetLength = function(length) {
		this.m_length = length;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetFrequency = function() {
		return this.m_frequencyHz;
	};
	/**
	 * @param {number} hz
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetFrequency = function(hz) {
		this.m_frequencyHz = hz;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.GetDampingRatio = function() {
		return this.m_dampingRatio;
	};
	/**
	 * @param {number} ratio
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SetDampingRatio = function(ratio) {
		this.m_dampingRatio = ratio;
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		this.m_u.x = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		this.m_u.y = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(this.m_u.x * this.m_u.x + this.m_u.y * this.m_u.y);
		if (length > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u.Multiply(1.0 / length);
		} else {
			this.m_u.SetZero();
		}
		var cr1u = (r1X * this.m_u.y - r1Y * this.m_u.x);
		var cr2u = (r2X * this.m_u.y - r2Y * this.m_u.x);
		var invMass = bA.m_invMass + bA.m_invI * cr1u * cr1u + bB.m_invMass + bB.m_invI * cr2u * cr2u;
		this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;
		if (this.m_frequencyHz > 0.0) {
			var C = length - this.m_length;
			var omega = 2.0 * Math.PI * this.m_frequencyHz;
			var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;
			var k = this.m_mass * omega * omega;
			this.m_gamma = step.dt * (d + step.dt * k);
			this.m_gamma = this.m_gamma != 0.0 ? 1 / this.m_gamma : 0.0;
			this.m_bias = C * step.dt * k * this.m_gamma;
			this.m_mass = invMass + this.m_gamma;
			this.m_mass = this.m_mass != 0.0 ? 1.0 / this.m_mass : 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			var PX = this.m_impulse * this.m_u.x;
			var PY = this.m_impulse * this.m_u.y;
			bA.m_linearVelocity.x -= bA.m_invMass * PX;
			bA.m_linearVelocity.y -= bA.m_invMass * PY;
			bA.m_angularVelocity -= bA.m_invI * (r1X * PY - r1Y * PX);
			bB.m_linearVelocity.x += bB.m_invMass * PX;
			bB.m_linearVelocity.y += bB.m_invMass * PY;
			bB.m_angularVelocity += bB.m_invI * (r2X * PY - r2Y * PX);
		} else {
			this.m_impulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SolveVelocityConstraints = function(step) {
		var r1X = this.m_localAnchor1.x - this.m_bodyA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - this.m_bodyA.m_sweep.localCenter.y;
		var tX = (this.m_bodyA.m_xf.R.col1.x * r1X + this.m_bodyA.m_xf.R.col2.x * r1Y);
		r1Y = (this.m_bodyA.m_xf.R.col1.y * r1X + this.m_bodyA.m_xf.R.col2.y * r1Y);
		r1X = tX;
		var r2X = this.m_localAnchor2.x - this.m_bodyB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - this.m_bodyB.m_sweep.localCenter.y;
		tX = (this.m_bodyB.m_xf.R.col1.x * r2X + this.m_bodyB.m_xf.R.col2.x * r2Y);
		r2Y = (this.m_bodyB.m_xf.R.col1.y * r2X + this.m_bodyB.m_xf.R.col2.y * r2Y);
		r2X = tX;
		var v1X = this.m_bodyA.m_linearVelocity.x - this.m_bodyA.m_angularVelocity * r1Y;
		var v1Y = this.m_bodyA.m_linearVelocity.y + this.m_bodyA.m_angularVelocity * r1X;
		var v2X = this.m_bodyB.m_linearVelocity.x - this.m_bodyB.m_angularVelocity * r2Y;
		var v2Y = this.m_bodyB.m_linearVelocity.y + this.m_bodyB.m_angularVelocity * r2X;
		var Cdot = (this.m_u.x * (v2X - v1X) + this.m_u.y * (v2Y - v1Y));
		var impulse = -this.m_mass * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);
		this.m_impulse += impulse;
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		this.m_bodyA.m_linearVelocity.x -= this.m_bodyA.m_invMass * PX;
		this.m_bodyA.m_linearVelocity.y -= this.m_bodyA.m_invMass * PY;
		this.m_bodyA.m_angularVelocity -= this.m_bodyA.m_invI * (r1X * PY - r1Y * PX);
		this.m_bodyB.m_linearVelocity.x += this.m_bodyB.m_invMass * PX;
		this.m_bodyB.m_linearVelocity.y += this.m_bodyB.m_invMass * PY;
		this.m_bodyB.m_angularVelocity += this.m_bodyB.m_invI * (r2X * PY - r2Y * PX);
	};
	/**
	 * @param {number} baumgarte
	 */
	Box2D.Dynamics.Joints.b2DistanceJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (this.m_frequencyHz > 0.0) {
			return true;
		}
		var r1X = this.m_localAnchor1.x - this.m_bodyA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - this.m_bodyA.m_sweep.localCenter.y;
		var tX = (this.m_bodyA.m_xf.R.col1.x * r1X + this.m_bodyA.m_xf.R.col2.x * r1Y);
		r1Y = (this.m_bodyA.m_xf.R.col1.y * r1X + this.m_bodyA.m_xf.R.col2.y * r1Y);
		r1X = tX;
		var r2X = this.m_localAnchor2.x - this.m_bodyB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - this.m_bodyB.m_sweep.localCenter.y;
		tX = (this.m_bodyB.m_xf.R.col1.x * r2X + this.m_bodyB.m_xf.R.col2.x * r2Y);
		r2Y = (this.m_bodyB.m_xf.R.col1.y * r2X + this.m_bodyB.m_xf.R.col2.y * r2Y);
		r2X = tX;
		var dX = this.m_bodyB.m_sweep.c.x + r2X - this.m_bodyA.m_sweep.c.x - r1X;
		var dY = this.m_bodyB.m_sweep.c.y + r2Y - this.m_bodyA.m_sweep.c.y - r1Y;
		var length = Math.sqrt(dX * dX + dY * dY);
		dX /= length;
		dY /= length;
		var C = Box2D.Common.Math.b2Math.Clamp(length - this.m_length, -Box2D.Common.b2Settings.b2_maxLinearCorrection, Box2D.Common.b2Settings.b2_maxLinearCorrection);
		var impulse = -this.m_mass * C;
		this.m_u.Set(dX, dY);
		var PX = impulse * this.m_u.x;
		var PY = impulse * this.m_u.y;
		this.m_bodyA.m_sweep.c.x -= this.m_bodyA.m_invMass * PX;
		this.m_bodyA.m_sweep.c.y -= this.m_bodyA.m_invMass * PY;
		this.m_bodyA.m_sweep.a -= this.m_bodyA.m_invI * (r1X * PY - r1Y * PX);
		this.m_bodyB.m_sweep.c.x += this.m_bodyB.m_invMass * PX;
		this.m_bodyB.m_sweep.c.y += this.m_bodyB.m_invMass * PY;
		this.m_bodyB.m_sweep.a += this.m_bodyB.m_invI * (r2X * PY - r2Y * PX);
		this.m_bodyA.SynchronizeTransform();
		this.m_bodyB.SynchronizeTransform();
		return Math.abs(C) < Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2DistanceJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_distanceJoint;
		this.length = 1.0;
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2DistanceJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2DistanceJointDef.prototype.Initialize = function(bA, bB, anchorA, anchorB) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchorA));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchorB));
		var dX = anchorB.x - anchorA.x;
		var dY = anchorB.y - anchorA.y;
		this.length = Math.sqrt(dX * dX + dY * dY);
		this.frequencyHz = 0.0;
		this.dampingRatio = 0.0;
	};
	Box2D.Dynamics.Joints.b2DistanceJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2DistanceJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2FrictionJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2FrictionJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_linearMass = new Box2D.Common.Math.b2Mat22();
		this.m_linearImpulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorA.SetV(def.localAnchorA);
		this.m_localAnchorB.SetV(def.localAnchorB);
		this.m_linearMass.SetZero();
		this.m_angularMass = 0.0;
		this.m_linearImpulse.SetZero();
		this.m_angularImpulse = 0.0;
		this.m_maxForce = def.maxForce;
		this.m_maxTorque = def.maxTorque;
	};
	c2inherit(Box2D.Dynamics.Joints.b2FrictionJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return new b2Vec2(inv_dt * this.m_linearImpulse.x, inv_dt * this.m_linearImpulse.y);
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_angularImpulse;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxForce = function(force) {
		if (force === undefined) force = 0;
		this.m_maxForce = force;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxForce = function() {
		return this.m_maxForce;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SetMaxTorque = function(torque) {
		if (torque === undefined) torque = 0;
		this.m_maxTorque = torque;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.GetMaxTorque = function() {
		return this.m_maxTorque;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var K = new Box2D.Common.Math.b2Mat22();
		K.col1.x = mA + mB;
		K.col2.x = 0.0;
		K.col1.y = 0.0;
		K.col2.y = mA + mB;
		K.col1.x += iA * rAY * rAY;
		K.col2.x += (-iA * rAX * rAY);
		K.col1.y += (-iA * rAX * rAY);
		K.col2.y += iA * rAX * rAX;
		K.col1.x += iB * rBY * rBY;
		K.col2.x += (-iB * rBX * rBY);
		K.col1.y += (-iB * rBX * rBY);
		K.col2.y += iB * rBX * rBX;
		K.GetInverse(this.m_linearMass);
		this.m_angularMass = iA + iB;
		if (this.m_angularMass > 0.0) {
			this.m_angularMass = 1.0 / this.m_angularMass;
		}
		if (step.warmStarting) {
			this.m_linearImpulse.x *= step.dtRatio;
			this.m_linearImpulse.y *= step.dtRatio;
			this.m_angularImpulse *= step.dtRatio;
			var P = this.m_linearImpulse;
			bA.m_linearVelocity.x -= mA * P.x;
			bA.m_linearVelocity.y -= mA * P.y;
			bA.m_angularVelocity -= iA * (rAX * P.y - rAY * P.x + this.m_angularImpulse);
			bB.m_linearVelocity.x += mB * P.x;
			bB.m_linearVelocity.y += mB * P.y;
			bB.m_angularVelocity += iB * (rBX * P.y - rBY * P.x + this.m_angularImpulse);
		} else {
			this.m_linearImpulse.SetZero();
			this.m_angularImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolveVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var maxImpulse = 0;
		var Cdot = wB - wA;
		var impulse = (-this.m_angularMass * Cdot);
		var oldImpulse = this.m_angularImpulse;
		maxImpulse = step.dt * this.m_maxTorque;
		this.m_angularImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_angularImpulse + impulse, (-maxImpulse), maxImpulse);
		impulse = this.m_angularImpulse - oldImpulse;
		wA -= iA * impulse;
		wB += iB * impulse;
		var CdotX = vB.x - wB * rBY - vA.x + wA * rAY;
		var CdotY = vB.y + wB * rBX - vA.y - wA * rAX;
		var impulseV = Box2D.Common.Math.b2Math.MulMV(this.m_linearMass, Box2D.Common.Math.b2Vec2.Get((-CdotX), (-CdotY)));
		var oldImpulseV = this.m_linearImpulse.Copy();
		this.m_linearImpulse.Add(impulseV);
		maxImpulse = step.dt * this.m_maxForce;
		if (this.m_linearImpulse.LengthSquared() > maxImpulse * maxImpulse) {
			this.m_linearImpulse.Normalize();
			this.m_linearImpulse.Multiply(maxImpulse);
		}
		impulseV = Box2D.Common.Math.b2Math.SubtractVV(this.m_linearImpulse, oldImpulseV);
		vA.x -= mA * impulseV.x;
		vA.y -= mA * impulseV.y;
		wA -= iA * (rAX * impulseV.y - rAY * impulseV.x);
		vB.x += mB * impulseV.x;
		vB.y += mB * impulseV.y;
		wB += iB * (rBX * impulseV.y - rBY * impulseV.x);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	};
	Box2D.Dynamics.Joints.b2FrictionJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		return true;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2FrictionJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_frictionJoint;
		this.maxForce = 0.0;
		this.maxTorque = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2FrictionJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2FrictionJointDef.prototype.Initialize = function (bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
	};
	Box2D.Dynamics.Joints.b2FrictionJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2FrictionJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2GearJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2GearJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_groundAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_groundAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_J = new Box2D.Dynamics.Joints.b2Jacobian();
		var type1 = def.joint1.m_type;
		var type2 = def.joint2.m_type;
		this.m_revolute1 = null;
		this.m_prismatic1 = null;
		this.m_revolute2 = null;
		this.m_prismatic2 = null;
		var coordinate1 = 0;
		var coordinate2 = 0;
		this.m_ground1 = def.joint1.GetBodyA();
		this.m_bodyA = def.joint1.GetBodyB();
		if (type1 == Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint) {
			this.m_revolute1 = def.joint1;
			this.m_groundAnchor1.SetV(this.m_revolute1.m_localAnchor1);
			this.m_localAnchor1.SetV(this.m_revolute1.m_localAnchor2);
			coordinate1 = this.m_revolute1.GetJointAngle();
		} else {
			this.m_prismatic1 = def.joint1;
			this.m_groundAnchor1.SetV(this.m_prismatic1.m_localAnchor1);
			this.m_localAnchor1.SetV(this.m_prismatic1.m_localAnchor2);
			coordinate1 = this.m_prismatic1.GetJointTranslation();
		}
		this.m_ground2 = def.joint2.GetBodyA();
		this.m_bodyB = def.joint2.GetBodyB();
		if (type2 == Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint) {
			this.m_revolute2 = def.joint2;
			this.m_groundAnchor2.SetV(this.m_revolute2.m_localAnchor1);
			this.m_localAnchor2.SetV(this.m_revolute2.m_localAnchor2);
			coordinate2 = this.m_revolute2.GetJointAngle();
		} else {
			this.m_prismatic2 = def.joint2;
			this.m_groundAnchor2.SetV(this.m_prismatic2.m_localAnchor1);
			this.m_localAnchor2.SetV(this.m_prismatic2.m_localAnchor2);
			coordinate2 = this.m_prismatic2.GetJointTranslation();
		}
		this.m_ratio = def.ratio;
		this.m_constant = coordinate1 + this.m_ratio * coordinate2;
		this.m_impulse = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2GearJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_J.linearB.x, inv_dt * this.m_impulse * this.m_J.linearB.y);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		var tMat = this.m_bodyB.m_xf.R;
		var rX = this.m_localAnchor1.x - this.m_bodyB.m_sweep.localCenter.x;
		var rY = this.m_localAnchor1.y - this.m_bodyB.m_sweep.localCenter.y;
		var tX = tMat.col1.x * rX + tMat.col2.x * rY;
		rY = tMat.col1.y * rX + tMat.col2.y * rY;
		rX = tX;
		var PX = this.m_impulse * this.m_J.linearB.x;
		var PY = this.m_impulse * this.m_J.linearB.y;
		return inv_dt * (this.m_impulse * this.m_J.angularB - rX * PY + rY * PX);
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.GetRatio = function() {
		return this.m_ratio;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SetRatio = function(ratio) {
		if (ratio === undefined) ratio = 0;
		this.m_ratio = ratio;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.InitVelocityConstraints = function(step) {
		var g1 = this.m_ground1;
		var g2 = this.m_ground2;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var ugX = 0;
		var ugY = 0;
		var rX = 0;
		var rY = 0;
		var tMat;
		var tVec;
		var crug = 0;
		var tX = 0;
		var K = 0.0;
		this.m_J.SetZero();
		if (this.m_revolute1) {
			this.m_J.angularA = (-1.0);
			K += bA.m_invI;
		} else {
			tMat = g1.m_xf.R;
			tVec = this.m_prismatic1.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bA.m_xf.R;
			rX = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			rY = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearA.Set((-ugX), (-ugY));
			this.m_J.angularA = (-crug);
			K += bA.m_invMass + bA.m_invI * crug * crug;
		}
		if (this.m_revolute2) {
			this.m_J.angularB = (-this.m_ratio);
			K += this.m_ratio * this.m_ratio * bB.m_invI;
		} else {
			tMat = g2.m_xf.R;
			tVec = this.m_prismatic2.m_localXAxis1;
			ugX = tMat.col1.x * tVec.x + tMat.col2.x * tVec.y;
			ugY = tMat.col1.y * tVec.x + tMat.col2.y * tVec.y;
			tMat = bB.m_xf.R;
			rX = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			rY = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = tMat.col1.x * rX + tMat.col2.x * rY;
			rY = tMat.col1.y * rX + tMat.col2.y * rY;
			rX = tX;
			crug = rX * ugY - rY * ugX;
			this.m_J.linearB.Set((-this.m_ratio * ugX), (-this.m_ratio * ugY));
			this.m_J.angularB = (-this.m_ratio * crug);
			K += this.m_ratio * this.m_ratio * (bB.m_invMass + bB.m_invI * crug * crug);
		}
		this.m_mass = K > 0.0 ? 1.0 / K : 0.0;
		if (step.warmStarting) {
			bA.m_linearVelocity.x += bA.m_invMass * this.m_impulse * this.m_J.linearA.x;
			bA.m_linearVelocity.y += bA.m_invMass * this.m_impulse * this.m_J.linearA.y;
			bA.m_angularVelocity += bA.m_invI * this.m_impulse * this.m_J.angularA;
			bB.m_linearVelocity.x += bB.m_invMass * this.m_impulse * this.m_J.linearB.x;
			bB.m_linearVelocity.y += bB.m_invMass * this.m_impulse * this.m_J.linearB.y;
			bB.m_angularVelocity += bB.m_invI * this.m_impulse * this.m_J.angularB;
		} else {
			this.m_impulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var Cdot = this.m_J.Compute(bA.m_linearVelocity, bA.m_angularVelocity, bB.m_linearVelocity, bB.m_angularVelocity);
		var impulse = (-this.m_mass * Cdot);
		this.m_impulse += impulse;
		bA.m_linearVelocity.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_linearVelocity.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_angularVelocity += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_linearVelocity.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_linearVelocity.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_angularVelocity += bB.m_invI * impulse * this.m_J.angularB;
	};
	Box2D.Dynamics.Joints.b2GearJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var linearError = 0.0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var coordinate1 = 0;
		var coordinate2 = 0;
		if (this.m_revolute1) {
			coordinate1 = this.m_revolute1.GetJointAngle();
		} else {
			coordinate1 = this.m_prismatic1.GetJointTranslation();
		}
		if (this.m_revolute2) {
			coordinate2 = this.m_revolute2.GetJointAngle();
		} else {
			coordinate2 = this.m_prismatic2.GetJointTranslation();
		}
		var C = this.m_constant - (coordinate1 + this.m_ratio * coordinate2);
		var impulse = (-this.m_mass * C);
		bA.m_sweep.c.x += bA.m_invMass * impulse * this.m_J.linearA.x;
		bA.m_sweep.c.y += bA.m_invMass * impulse * this.m_J.linearA.y;
		bA.m_sweep.a += bA.m_invI * impulse * this.m_J.angularA;
		bB.m_sweep.c.x += bB.m_invMass * impulse * this.m_J.linearB.x;
		bB.m_sweep.c.y += bB.m_invMass * impulse * this.m_J.linearB.y;
		bB.m_sweep.a += bB.m_invI * impulse * this.m_J.angularB;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError < Box2D.Common.b2Settings.b2_linearSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	 Box2D.Dynamics.Joints.b2GearJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_gearJoint;
		this.joint1 = null;
		this.joint2 = null;
		this.ratio = 1.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2GearJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2GearJointDef.prototype.Initialize = function(joint1, joint2, ratio) {
		this.joint1 = joint1;
		this.bodyA = joint1.GetBodyA();
		this.joint2 = joint2;
		this.bodyB = joint2.GetBodyA();
		this.ratio = ratio;
	};
	Box2D.Dynamics.Joints.b2GearJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2GearJoint(this);
	};
	/**
	 * @constructor
	 */
	Box2D.Dynamics.Joints.b2Jacobian = function() {
		this.linearA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.linearB = Box2D.Common.Math.b2Vec2.Get(0, 0);
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.SetZero = function() {
		this.linearA.SetZero();
		this.angularA = 0.0;
		this.linearB.SetZero();
		this.angularB = 0.0;
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.Set = function(x1, a1, x2, a2) {
		if (a1 === undefined) a1 = 0;
		if (a2 === undefined) a2 = 0;
		this.linearA.SetV(x1);
		this.angularA = a1;
		this.linearB.SetV(x2);
		this.angularB = a2;
	};
	Box2D.Dynamics.Joints.b2Jacobian.prototype.Compute = function(x1, a1, x2, a2) {
		if (a1 === undefined) a1 = 0;
		if (a2 === undefined) a2 = 0;
		return (this.linearA.x * x1.x + this.linearA.y * x1.y) + this.angularA * a1 + (this.linearB.x * x2.x + this.linearB.y * x2.y) + this.angularB * a2;
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2LineJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2LineJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localXAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localYAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_perp = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_K = new Box2D.Common.Math.b2Mat22();
		this.m_impulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var tMat;
		var tX = 0;
		var tY = 0;
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_localXAxis1.SetV(def.localAxisA);
		this.m_localYAxis1.x = (-this.m_localXAxis1.y);
		this.m_localYAxis1.y = this.m_localXAxis1.x;
		this.m_impulse.SetZero();
		this.m_motorMass = 0.0;
		this.m_motorImpulse = 0.0;
		this.m_lowerTranslation = def.lowerTranslation;
		this.m_upperTranslation = def.upperTranslation;
		this.m_maxMotorForce = def.maxMotorForce;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		this.m_axis.SetZero();
		this.m_perp.SetZero();
	};
	c2inherit(Box2D.Dynamics.Joints.b2LineJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y));
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.y;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetJointTranslation = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.GetWorldPoint(this.m_localAnchor1);
		var p2 = bB.GetWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetJointSpeed = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
		return speed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.EnableLimit = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerTranslation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetUpperLimit = function() {
		return this.m_upperTranslation;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.IsMotorEnabled = function() {
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.EnableMotor = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SetMaxMotorForce = function(force) {
		if (force === undefined) force = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_maxMotorForce = force;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMaxMotorForce = function() {
		return this.m_maxMotorForce;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.GetMotorForce = function() {
		return this.m_motorImpulse;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		this.m_localCenterA.SetV(bA.GetLocalCenter());
		this.m_localCenterB.SetV(bB.GetLocalCenter());
		var xf1 = bA.GetTransform();
		var xf2 = bB.GetTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		this.m_motorMass = this.m_motorMass > Number.MIN_VALUE ? 1.0 / this.m_motorMass : 0.0;
		this.m_perp.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if (this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointTransition <= this.m_lowerTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
					this.m_impulse.y = 0.0;
				}
			} else if (jointTransition >= this.m_upperTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
					this.m_impulse.y = 0.0;
				}
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.y = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.y) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + (this.m_motorImpulse + this.m_impulse.y) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX = 0;
		var PY = 0;
		var L1 = 0;
		var L2 = 0;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1 = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.Copy();
			var df = this.m_K.Solve(Box2D.Common.Math.b2Vec2.Get(0, 0), (-Cdot1), (-Cdot2));
			this.m_impulse.Add(df);
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				this.m_impulse.y = Math.max(this.m_impulse.y, 0.0);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				this.m_impulse.y = Math.min(this.m_impulse.y, 0.0);
			}
			var b = (-Cdot1) - (this.m_impulse.y - f1.y) * this.m_K.col2.x;
			var f2r = 0;
			if (this.m_K.col1.x != 0.0) {
				f2r = b / this.m_K.col1.x + f1.x;
			} else {
				f2r = f1.x;
			}
			this.m_impulse.x = f2r;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			PX = df.x * this.m_perp.x + df.y * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.y * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y * this.m_a1;
			L2 = df.x * this.m_s2 + df.y * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = 0;
			if (this.m_K.col1.x != 0.0) {
				df2 = ((-Cdot1)) / this.m_K.col1.x;
			} else {
				df2 = 0.0;
			}
			this.m_impulse.x += df2;
			PX = df2 * this.m_perp.x;
			PY = df2 * this.m_perp.y;
			L1 = df2 * this.m_s1;
			L2 = df2 * this.m_s2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2LineJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var limitC = 0;
		var oldLimitImpulse = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX = 0;
		var m1 = 0;
		var m2 = 0;
		var i1 = 0;
		var i2 = 0;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = Box2D.Common.Math.b2Mat22.FromAngle(a1);
		var R2 = Box2D.Common.Math.b2Mat22.FromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if (this.m_enableLimit) {
			this.m_axis = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = Math.abs(translation);
				active = true;
			} else if (translation <= this.m_lowerTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_lowerTranslation + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if (translation >= this.m_upperTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_upperTranslation + Box2D.Common.b2Settings.b2_linearSlop, 0.0, Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
		var C1 = this.m_perp.x * dX + this.m_perp.y * dY;
		linearError = Math.max(linearError, Math.abs(C1));
		angularError = 0.0;
		if (active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.Solve(impulse, (-C1), (-C2));
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var impulse1 = 0;
			if (k11 != 0.0) {
				impulse1 = ((-C1)) / k11;
			} else {
				impulse1 = 0.0;
			}
			impulse.x = impulse1;
			impulse.y = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.y * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.y * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2LineJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAxisA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_lineJoint;
		this.localAxisA.Set(1.0, 0.0);
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2LineJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2LineJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.localAxisA = this.bodyA.GetLocalVector(axis);
	};
	Box2D.Dynamics.Joints.b2LineJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2LineJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2PrismaticJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2PrismaticJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localXAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localYAxis1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_axis = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_perp = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_K = new Box2D.Common.Math.b2Mat33();
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_localXAxis1.SetV(def.localAxisA);
		this.m_localYAxis1.x = (-this.m_localXAxis1.y);
		this.m_localYAxis1.y = this.m_localXAxis1.x;
		this.m_refAngle = def.referenceAngle;
		this.m_impulse.SetZero();
		this.m_motorMass = 0.0;
		this.m_motorImpulse = 0.0;
		this.m_lowerTranslation = def.lowerTranslation;
		this.m_upperTranslation = def.upperTranslation;
		this.m_maxMotorForce = def.maxMotorForce;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		this.m_axis.SetZero();
		this.m_perp.SetZero();
	};
	c2inherit(Box2D.Dynamics.Joints.b2PrismaticJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * (this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x), inv_dt * (this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y));
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.y;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetJointTranslation = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var p1 = bA.GetWorldPoint(this.m_localAnchor1);
		var p2 = bB.GetWorldPoint(this.m_localAnchor2);
		var dX = p2.x - p1.x;
		var dY = p2.y - p1.y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var translation = axis.x * dX + axis.y * dY;
		return translation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetJointSpeed = function() {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var dX = p2X - p1X;
		var dY = p2Y - p1Y;
		var axis = bA.GetWorldVector(this.m_localXAxis1);
		var v1 = bA.m_linearVelocity;
		var v2 = bB.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var w2 = bB.m_angularVelocity;
		var speed = (dX * ((-w1 * axis.y)) + dY * (w1 * axis.x)) + (axis.x * (((v2.x + ((-w2 * r2Y))) - v1.x) - ((-w1 * r1Y))) + axis.y * (((v2.y + (w2 * r2X)) - v1.y) - (w1 * r1X)));
		return speed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.EnableLimit = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerTranslation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetUpperLimit = function() {
		return this.m_upperTranslation;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_lowerTranslation = lower;
		this.m_upperTranslation = upper;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.IsMotorEnabled = function() {
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.EnableMotor = function(flag) {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SetMaxMotorForce = function(force) {
		if (force === undefined) force = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_maxMotorForce = force;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.GetMotorForce = function() {
		return this.m_motorImpulse;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		this.m_localCenterA.SetV(bA.GetLocalCenter());
		this.m_localCenterB.SetV(bB.GetLocalCenter());
		var xf1 = bA.GetTransform();
		var xf2 = bB.GetTransform();
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var dY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		this.m_invMassA = bA.m_invMass;
		this.m_invMassB = bB.m_invMass;
		this.m_invIA = bA.m_invI;
		this.m_invIB = bB.m_invI;
		this.m_axis.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localXAxis1));
		this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
		this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
		this.m_motorMass = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_a1 * this.m_a1 + this.m_invIB * this.m_a2 * this.m_a2;
		if (this.m_motorMass > Number.MIN_VALUE) this.m_motorMass = 1.0 / this.m_motorMass;
		this.m_perp.SetV(Box2D.Common.Math.b2Math.MulMV(xf1.R, this.m_localYAxis1));
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var m1 = this.m_invMassA;
		var m2 = this.m_invMassB;
		var i1 = this.m_invIA;
		var i2 = this.m_invIB;
		this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
		this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
		this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
		this.m_K.col2.x = this.m_K.col1.y;
		this.m_K.col2.y = i1 + i2;
		this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
		this.m_K.col3.x = this.m_K.col1.z;
		this.m_K.col3.y = this.m_K.col2.z;
		this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
		if (this.m_enableLimit) {
			var jointTransition = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointTransition <= this.m_lowerTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
					this.m_impulse.z = 0.0;
				}
			} else if (jointTransition >= this.m_upperTranslation) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
					this.m_impulse.z = 0.0;
				}
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (this.m_enableMotor == false) {
			this.m_motorImpulse = 0.0;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x * this.m_perp.x + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.x;
			var PY = this.m_impulse.x * this.m_perp.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_axis.y;
			var L1 = this.m_impulse.x * this.m_s1 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;
			var L2 = this.m_impulse.x * this.m_s2 + this.m_impulse.y + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;
			bA.m_linearVelocity.x -= this.m_invMassA * PX;
			bA.m_linearVelocity.y -= this.m_invMassA * PY;
			bA.m_angularVelocity -= this.m_invIA * L1;
			bB.m_linearVelocity.x += this.m_invMassB * PX;
			bB.m_linearVelocity.y += this.m_invMassB * PY;
			bB.m_angularVelocity += this.m_invIB * L2;
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var PX = 0;
		var PY = 0;
		var L1 = 0;
		var L2 = 0;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorForce;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			PX = impulse * this.m_axis.x;
			PY = impulse * this.m_axis.y;
			L1 = impulse * this.m_a1;
			L2 = impulse * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		var Cdot1X = this.m_perp.x * (v2.x - v1.x) + this.m_perp.y * (v2.y - v1.y) + this.m_s2 * w2 - this.m_s1 * w1;
		var Cdot1Y = w2 - w1;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var Cdot2 = this.m_axis.x * (v2.x - v1.x) + this.m_axis.y * (v2.y - v1.y) + this.m_a2 * w2 - this.m_a1 * w1;
			var f1 = this.m_impulse.Copy();
			var df = this.m_K.Solve33(new Box2D.Common.Math.b2Vec3(0, 0, 0), (-Cdot1X), (-Cdot1Y), (-Cdot2));
			this.m_impulse.Add(df);
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);
			}
			var bX = (-Cdot1X) - (this.m_impulse.z - f1.z) * this.m_K.col3.x;
			var bY = (-Cdot1Y) - (this.m_impulse.z - f1.z) * this.m_K.col3.y;
			var f2r = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), bX, bY);
			f2r.x += f1.x;
			f2r.y += f1.y;
			this.m_impulse.x = f2r.x;
			this.m_impulse.y = f2r.y;
			df.x = this.m_impulse.x - f1.x;
			df.y = this.m_impulse.y - f1.y;
			df.z = this.m_impulse.z - f1.z;
			PX = df.x * this.m_perp.x + df.z * this.m_axis.x;
			PY = df.x * this.m_perp.y + df.z * this.m_axis.y;
			L1 = df.x * this.m_s1 + df.y + df.z * this.m_a1;
			L2 = df.x * this.m_s2 + df.y + df.z * this.m_a2;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		} else {
			var df2 = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), (-Cdot1X), (-Cdot1Y));
			this.m_impulse.x += df2.x;
			this.m_impulse.y += df2.y;
			PX = df2.x * this.m_perp.x;
			PY = df2.x * this.m_perp.y;
			L1 = df2.x * this.m_s1 + df2.y;
			L2 = df2.x * this.m_s2 + df2.y;
			v1.x -= this.m_invMassA * PX;
			v1.y -= this.m_invMassA * PY;
			w1 -= this.m_invIA * L1;
			v2.x += this.m_invMassB * PX;
			v2.y += this.m_invMassB * PY;
			w2 += this.m_invIB * L2;
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2PrismaticJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var limitC = 0;
		var oldLimitImpulse = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var c1 = bA.m_sweep.c;
		var a1 = bA.m_sweep.a;
		var c2 = bB.m_sweep.c;
		var a2 = bB.m_sweep.a;
		var tMat;
		var tX = 0;
		var m1 = 0;
		var m2 = 0;
		var i1 = 0;
		var i2 = 0;
		var linearError = 0.0;
		var angularError = 0.0;
		var active = false;
		var C2 = 0.0;
		var R1 = Box2D.Common.Math.b2Mat22.FromAngle(a1);
		var R2 = Box2D.Common.Math.b2Mat22.FromAngle(a2);
		tMat = R1;
		var r1X = this.m_localAnchor1.x - this.m_localCenterA.x;
		var r1Y = this.m_localAnchor1.y - this.m_localCenterA.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = R2;
		var r2X = this.m_localAnchor2.x - this.m_localCenterB.x;
		var r2Y = this.m_localAnchor2.y - this.m_localCenterB.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var dX = c2.x + r2X - c1.x - r1X;
		var dY = c2.y + r2Y - c1.y - r1Y;
		if (this.m_enableLimit) {
			this.m_axis = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localXAxis1);
			this.m_a1 = (dX + r1X) * this.m_axis.y - (dY + r1Y) * this.m_axis.x;
			this.m_a2 = r2X * this.m_axis.y - r2Y * this.m_axis.x;
			var translation = this.m_axis.x * dX + this.m_axis.y * dY;
			if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Box2D.Common.b2Settings.b2_linearSlop) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = Math.abs(translation);
				active = true;
			} else if (translation <= this.m_lowerTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_lowerTranslation + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
				linearError = this.m_lowerTranslation - translation;
				active = true;
			} else if (translation >= this.m_upperTranslation) {
				C2 = Box2D.Common.Math.b2Math.Clamp(translation - this.m_upperTranslation + Box2D.Common.b2Settings.b2_linearSlop, 0.0, Box2D.Common.b2Settings.b2_maxLinearCorrection);
				linearError = translation - this.m_upperTranslation;
				active = true;
			}
		}
		this.m_perp = Box2D.Common.Math.b2Math.MulMV(R1, this.m_localYAxis1);
		this.m_s1 = (dX + r1X) * this.m_perp.y - (dY + r1Y) * this.m_perp.x;
		this.m_s2 = r2X * this.m_perp.y - r2Y * this.m_perp.x;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		var C1X = this.m_perp.x * dX + this.m_perp.y * dY;
		var C1Y = a2 - a1 - this.m_refAngle;
		linearError = Math.max(linearError, Math.abs(C1X));
		angularError = Math.abs(C1Y);
		if (active) {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			this.m_K.col1.x = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			this.m_K.col1.y = i1 * this.m_s1 + i2 * this.m_s2;
			this.m_K.col1.z = i1 * this.m_s1 * this.m_a1 + i2 * this.m_s2 * this.m_a2;
			this.m_K.col2.x = this.m_K.col1.y;
			this.m_K.col2.y = i1 + i2;
			this.m_K.col2.z = i1 * this.m_a1 + i2 * this.m_a2;
			this.m_K.col3.x = this.m_K.col1.z;
			this.m_K.col3.y = this.m_K.col2.z;
			this.m_K.col3.z = m1 + m2 + i1 * this.m_a1 * this.m_a1 + i2 * this.m_a2 * this.m_a2;
			this.m_K.Solve33(impulse, (-C1X), (-C1Y), (-C2));
		} else {
			m1 = this.m_invMassA;
			m2 = this.m_invMassB;
			i1 = this.m_invIA;
			i2 = this.m_invIB;
			var k11 = m1 + m2 + i1 * this.m_s1 * this.m_s1 + i2 * this.m_s2 * this.m_s2;
			var k12 = i1 * this.m_s1 + i2 * this.m_s2;
			var k22 = i1 + i2;
			this.m_K.col1.Set(k11, k12, 0.0);
			this.m_K.col2.Set(k12, k22, 0.0);
			var impulse1 = this.m_K.Solve22(Box2D.Common.Math.b2Vec2.Get(0, 0), (-C1X), (-C1Y));
			impulse.x = impulse1.x;
			impulse.y = impulse1.y;
			impulse.z = 0.0;
		}
		var PX = impulse.x * this.m_perp.x + impulse.z * this.m_axis.x;
		var PY = impulse.x * this.m_perp.y + impulse.z * this.m_axis.y;
		var L1 = impulse.x * this.m_s1 + impulse.y + impulse.z * this.m_a1;
		var L2 = impulse.x * this.m_s2 + impulse.y + impulse.z * this.m_a2;
		c1.x -= this.m_invMassA * PX;
		c1.y -= this.m_invMassA * PY;
		a1 -= this.m_invIA * L1;
		c2.x += this.m_invMassB * PX;
		c2.y += this.m_invMassB * PY;
		a2 += this.m_invIB * L2;
		bA.m_sweep.a = a1;
		bB.m_sweep.a = a2;
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return linearError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2PrismaticJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAxisA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_prismaticJoint;
		this.localAxisA.Set(1.0, 0.0);
		this.referenceAngle = 0.0;
		this.enableLimit = false;
		this.lowerTranslation = 0.0;
		this.upperTranslation = 0.0;
		this.enableMotor = false;
		this.maxMotorForce = 0.0;
		this.motorSpeed = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PrismaticJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2PrismaticJointDef.prototype.Initialize = function(bA, bB, anchor, axis) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.localAxisA = this.bodyA.GetLocalVector(axis);
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2PrismaticJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2PrismaticJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2PulleyJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2PulleyJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_groundAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_groundAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_u2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_ground = this.m_bodyA.m_world.m_groundBody;
		this.m_groundAnchor1.x = def.groundAnchorA.x - this.m_ground.m_xf.position.x;
		this.m_groundAnchor1.y = def.groundAnchorA.y - this.m_ground.m_xf.position.y;
		this.m_groundAnchor2.x = def.groundAnchorB.x - this.m_ground.m_xf.position.x;
		this.m_groundAnchor2.y = def.groundAnchorB.y - this.m_ground.m_xf.position.y;
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_ratio = def.ratio;
		this.m_constant = def.lengthA + this.m_ratio * def.lengthB;
		this.m_maxLength1 = Math.min(def.maxLengthA, this.m_constant - this.m_ratio * Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength);
		this.m_maxLength2 = Math.min(def.maxLengthB, (this.m_constant - Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength) / this.m_ratio);
		this.m_impulse = 0.0;
		this.m_limitImpulse1 = 0.0;
		this.m_limitImpulse2 = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PulleyJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse * this.m_u2.x, inv_dt * this.m_impulse * this.m_u2.y);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return 0.0;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetGroundAnchorA = function() {
		var a = this.m_ground.m_xf.position.Copy();
		a.Add(this.m_groundAnchor1);
		return a;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetGroundAnchorB = function() {
		var a = this.m_ground.m_xf.position.Copy();
		a.Add(this.m_groundAnchor2);
		return a;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetLength1 = function() {
		var p = this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetLength2 = function() {
		var p = this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
		var sX = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var sY = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var dX = p.x - sX;
		var dY = p.y - sY;
		return Math.sqrt(dX * dX + dY * dY);
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.GetRatio = function() {
		return this.m_ratio;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var p1X = bA.m_sweep.c.x + r1X;
		var p1Y = bA.m_sweep.c.y + r1Y;
		var p2X = bB.m_sweep.c.x + r2X;
		var p2Y = bB.m_sweep.c.y + r2Y;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		this.m_u1.Set(p1X - s1X, p1Y - s1Y);
		this.m_u2.Set(p2X - s2X, p2Y - s2Y);
		var length1 = this.m_u1.Length();
		var length2 = this.m_u2.Length();
		if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u1.Multiply(1.0 / length1);
		} else {
			this.m_u1.SetZero();
		}
		if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
			this.m_u2.Multiply(1.0 / length2);
		} else {
			this.m_u2.SetZero();
		}
		var C = this.m_constant - length1 - this.m_ratio * length2;
		if (C > 0.0) {
			this.m_state = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_impulse = 0.0;
		} else {
			this.m_state = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		if (length1 < this.m_maxLength1) {
			this.m_limitState1 = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_limitImpulse1 = 0.0;
		} else {
			this.m_limitState1 = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		if (length2 < this.m_maxLength2) {
			this.m_limitState2 = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
			this.m_limitImpulse2 = 0.0;
		} else {
			this.m_limitState2 = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
		}
		var cr1u1 = r1X * this.m_u1.y - r1Y * this.m_u1.x;
		var cr2u2 = r2X * this.m_u2.y - r2Y * this.m_u2.x;
		this.m_limitMass1 = bA.m_invMass + bA.m_invI * cr1u1 * cr1u1;
		this.m_limitMass2 = bB.m_invMass + bB.m_invI * cr2u2 * cr2u2;
		this.m_pulleyMass = this.m_limitMass1 + this.m_ratio * this.m_ratio * this.m_limitMass2;
		this.m_limitMass1 = 1.0 / this.m_limitMass1;
		this.m_limitMass2 = 1.0 / this.m_limitMass2;
		this.m_pulleyMass = 1.0 / this.m_pulleyMass;
		if (step.warmStarting) {
			this.m_impulse *= step.dtRatio;
			this.m_limitImpulse1 *= step.dtRatio;
			this.m_limitImpulse2 *= step.dtRatio;
			var P1X = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.x;
			var P1Y = ((-this.m_impulse) - this.m_limitImpulse1) * this.m_u1.y;
			var P2X = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.x;
			var P2Y = ((-this.m_ratio * this.m_impulse) - this.m_limitImpulse2) * this.m_u2.y;
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		} else {
			this.m_impulse = 0.0;
			this.m_limitImpulse1 = 0.0;
			this.m_limitImpulse2 = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		var tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var v1X = 0;
		var v1Y = 0;
		var v2X = 0;
		var v2Y = 0;
		var P1X = 0;
		var P1Y = 0;
		var P2X = 0;
		var P2Y = 0;
		var Cdot = 0;
		var impulse = 0;
		var oldImpulse = 0;
		if (this.m_state == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
			v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
			v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
			v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
			Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y)) - this.m_ratio * (this.m_u2.x * v2X + this.m_u2.y * v2Y);
			impulse = this.m_pulleyMass * ((-Cdot));
			oldImpulse = this.m_impulse;
			this.m_impulse = Math.max(0.0, this.m_impulse + impulse);
			impulse = this.m_impulse - oldImpulse;
			P1X = (-impulse * this.m_u1.x);
			P1Y = (-impulse * this.m_u1.y);
			P2X = (-this.m_ratio * impulse * this.m_u2.x);
			P2Y = (-this.m_ratio * impulse * this.m_u2.y);
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
		if (this.m_limitState1 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v1X = bA.m_linearVelocity.x + ((-bA.m_angularVelocity * r1Y));
			v1Y = bA.m_linearVelocity.y + (bA.m_angularVelocity * r1X);
			Cdot = (-(this.m_u1.x * v1X + this.m_u1.y * v1Y));
			impulse = (-this.m_limitMass1 * Cdot);
			oldImpulse = this.m_limitImpulse1;
			this.m_limitImpulse1 = Math.max(0.0, this.m_limitImpulse1 + impulse);
			impulse = this.m_limitImpulse1 - oldImpulse;
			P1X = (-impulse * this.m_u1.x);
			P1Y = (-impulse * this.m_u1.y);
			bA.m_linearVelocity.x += bA.m_invMass * P1X;
			bA.m_linearVelocity.y += bA.m_invMass * P1Y;
			bA.m_angularVelocity += bA.m_invI * (r1X * P1Y - r1Y * P1X);
		}
		if (this.m_limitState2 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			v2X = bB.m_linearVelocity.x + ((-bB.m_angularVelocity * r2Y));
			v2Y = bB.m_linearVelocity.y + (bB.m_angularVelocity * r2X);
			Cdot = (-(this.m_u2.x * v2X + this.m_u2.y * v2Y));
			impulse = (-this.m_limitMass2 * Cdot);
			oldImpulse = this.m_limitImpulse2;
			this.m_limitImpulse2 = Math.max(0.0, this.m_limitImpulse2 + impulse);
			impulse = this.m_limitImpulse2 - oldImpulse;
			P2X = (-impulse * this.m_u2.x);
			P2Y = (-impulse * this.m_u2.y);
			bB.m_linearVelocity.x += bB.m_invMass * P2X;
			bB.m_linearVelocity.y += bB.m_invMass * P2Y;
			bB.m_angularVelocity += bB.m_invI * (r2X * P2Y - r2Y * P2X);
		}
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var s1X = this.m_ground.m_xf.position.x + this.m_groundAnchor1.x;
		var s1Y = this.m_ground.m_xf.position.y + this.m_groundAnchor1.y;
		var s2X = this.m_ground.m_xf.position.x + this.m_groundAnchor2.x;
		var s2Y = this.m_ground.m_xf.position.y + this.m_groundAnchor2.y;
		var r1X = 0;
		var r1Y = 0;
		var r2X = 0;
		var r2Y = 0;
		var p1X = 0;
		var p1Y = 0;
		var p2X = 0;
		var p2Y = 0;
		var length1 = 0;
		var length2 = 0;
		var C = 0;
		var impulse = 0;
		var oldImpulse = 0;
		var oldLimitPositionImpulse = 0;
		var tX = 0;
		var linearError = 0.0;
		if (this.m_state == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u1.Set(p1X - s1X, p1Y - s1Y);
			this.m_u2.Set(p2X - s2X, p2Y - s2Y);
			length1 = this.m_u1.Length();
			length2 = this.m_u2.Length();
			if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u1.Multiply(1.0 / length1);
			} else {
				this.m_u1.SetZero();
			}
			if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u2.Multiply(1.0 / length2);
			} else {
				this.m_u2.SetZero();
			}
			C = this.m_constant - length1 - this.m_ratio * length2;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_pulleyMass * C);
			p1X = (-impulse * this.m_u1.x);
			p1Y = (-impulse * this.m_u1.y);
			p2X = (-this.m_ratio * impulse * this.m_u2.x);
			p2Y = (-this.m_ratio * impulse * this.m_u2.y);
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bA.SynchronizeTransform();
			bB.SynchronizeTransform();
		}
		if (this.m_limitState1 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			p1X = bA.m_sweep.c.x + r1X;
			p1Y = bA.m_sweep.c.y + r1Y;
			this.m_u1.Set(p1X - s1X, p1Y - s1Y);
			length1 = this.m_u1.Length();
			if (length1 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u1.x *= 1.0 / length1;
				this.m_u1.y *= 1.0 / length1;
			} else {
				this.m_u1.SetZero();
			}
			C = this.m_maxLength1 - length1;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_limitMass1 * C);
			p1X = (-impulse * this.m_u1.x);
			p1Y = (-impulse * this.m_u1.y);
			bA.m_sweep.c.x += bA.m_invMass * p1X;
			bA.m_sweep.c.y += bA.m_invMass * p1Y;
			bA.m_sweep.a += bA.m_invI * (r1X * p1Y - r1Y * p1X);
			bA.SynchronizeTransform();
		}
		if (this.m_limitState2 == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			p2X = bB.m_sweep.c.x + r2X;
			p2Y = bB.m_sweep.c.y + r2Y;
			this.m_u2.Set(p2X - s2X, p2Y - s2Y);
			length2 = this.m_u2.Length();
			if (length2 > Box2D.Common.b2Settings.b2_linearSlop) {
				this.m_u2.x *= 1.0 / length2;
				this.m_u2.y *= 1.0 / length2;
			}
			else {
				this.m_u2.SetZero();
			}
			C = this.m_maxLength2 - length2;
			linearError = Math.max(linearError, (-C));
			C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_linearSlop, (-Box2D.Common.b2Settings.b2_maxLinearCorrection), 0.0);
			impulse = (-this.m_limitMass2 * C);
			p2X = (-impulse * this.m_u2.x);
			p2Y = (-impulse * this.m_u2.y);
			bB.m_sweep.c.x += bB.m_invMass * p2X;
			bB.m_sweep.c.y += bB.m_invMass * p2Y;
			bB.m_sweep.a += bB.m_invI * (r2X * p2Y - r2Y * p2X);
			bB.SynchronizeTransform();
		}
		return linearError < Box2D.Common.b2Settings.b2_linearSlop;
	};
	Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength = 1.0;
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2PulleyJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.groundAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.groundAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_pulleyJoint;
		this.groundAnchorA.Set((-1.0), 1.0);
		this.groundAnchorB.Set(1.0, 1.0);
		this.localAnchorA.Set((-1.0), 0.0);
		this.localAnchorB.Set(1.0, 0.0);
		this.lengthA = 0.0;
		this.maxLengthA = 0.0;
		this.lengthB = 0.0;
		this.maxLengthB = 0.0;
		this.ratio = 1.0;
		this.collideConnected = true;
	};
	c2inherit(Box2D.Dynamics.Joints.b2PulleyJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2PulleyJointDef.prototype.Initialize = function(bA, bB, gaA, gaB, anchorA, anchorB, r) {
		if (r === undefined) r = 0;
		this.bodyA = bA;
		this.bodyB = bB;
		this.groundAnchorA.SetV(gaA);
		this.groundAnchorB.SetV(gaB);
		this.localAnchorA = this.bodyA.GetLocalPoint(anchorA);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchorB);
		var d1X = anchorA.x - gaA.x;
		var d1Y = anchorA.y - gaA.y;
		this.lengthA = Math.sqrt(d1X * d1X + d1Y * d1Y);
		var d2X = anchorB.x - gaB.x;
		var d2Y = anchorB.y - gaB.y;
		this.lengthB = Math.sqrt(d2X * d2X + d2Y * d2Y);
		this.ratio = r;
		var C = this.lengthA + this.ratio * this.lengthB;
		this.maxLengthA = C - this.ratio * Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength;
		this.maxLengthB = (C - Box2D.Dynamics.Joints.b2PulleyJoint.b2_minPulleyLength) / this.ratio;
	};
	Box2D.Dynamics.Joints.b2PulleyJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2PulleyJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2RevoluteJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2RevoluteJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.K = new Box2D.Common.Math.b2Mat22();
		this.K1 = new Box2D.Common.Math.b2Mat22();
		this.K2 = new Box2D.Common.Math.b2Mat22();
		this.K3 = new Box2D.Common.Math.b2Mat22();
		this.impulse3 = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.impulse2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.reduced = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor1 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchor2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass = new Box2D.Common.Math.b2Mat33();
		this.m_localAnchor1.SetV(def.localAnchorA);
		this.m_localAnchor2.SetV(def.localAnchorB);
		this.m_referenceAngle = def.referenceAngle;
		this.m_impulse.SetZero();
		this.m_motorImpulse = 0.0;
		this.m_lowerAngle = def.lowerAngle;
		this.m_upperAngle = def.upperAngle;
		this.m_maxMotorTorque = def.maxMotorTorque;
		this.m_motorSpeed = def.motorSpeed;
		this.m_enableLimit = def.enableLimit;
		this.m_enableMotor = def.enableMotor;
		this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
	};
	c2inherit(Box2D.Dynamics.Joints.b2RevoluteJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchor1);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchor2);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionForce = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetReactionTorque = function(inv_dt) {
		if (inv_dt === undefined) inv_dt = 0;
		return inv_dt * this.m_impulse.z;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointAngle = function() {
		return this.m_bodyB.m_sweep.a - this.m_bodyA.m_sweep.a - this.m_referenceAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetJointSpeed = function() {
		return this.m_bodyB.m_angularVelocity - this.m_bodyA.m_angularVelocity;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsLimitEnabled = function() {
		return this.m_enableLimit;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableLimit = function(flag) {
		this.m_enableLimit = flag;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetLowerLimit = function() {
		return this.m_lowerAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetUpperLimit = function() {
		return this.m_upperAngle;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetLimits = function(lower, upper) {
		if (lower === undefined) lower = 0;
		if (upper === undefined) upper = 0;
		this.m_lowerAngle = lower;
		this.m_upperAngle = upper;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.IsMotorEnabled = function() {
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		return this.m_enableMotor;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.EnableMotor = function(flag) {
		this.m_enableMotor = flag;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMotorSpeed = function(speed) {
		if (speed === undefined) speed = 0;
		this.m_bodyA.SetAwake(true);
		this.m_bodyB.SetAwake(true);
		this.m_motorSpeed = speed;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorSpeed = function() {
		return this.m_motorSpeed;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SetMaxMotorTorque = function(torque) {
		if (torque === undefined) torque = 0;
		this.m_maxMotorTorque = torque;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.GetMotorTorque = function() {
		return this.m_maxMotorTorque;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.InitVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		this.m_mass.col1.x = m1 + m2 + r1Y * r1Y * i1 + r2Y * r2Y * i2;
		this.m_mass.col2.x = (-r1Y * r1X * i1) - r2Y * r2X * i2;
		this.m_mass.col3.x = (-r1Y * i1) - r2Y * i2;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = m1 + m2 + r1X * r1X * i1 + r2X * r2X * i2;
		this.m_mass.col3.y = r1X * i1 + r2X * i2;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = i1 + i2;
		this.m_motorMass = 1.0 / (i1 + i2);
		if (!this.m_enableMotor) {
			this.m_motorImpulse = 0.0;
		}
		if (this.m_enableLimit) {
			var jointAngle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Box2D.Common.b2Settings.b2_angularSlop) {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_equalLimits;
			} else if (jointAngle <= this.m_lowerAngle) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit;
			} else if (jointAngle >= this.m_upperAngle) {
				if (this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
					this.m_impulse.z = 0.0;
				}
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit;
			} else {
				this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
				this.m_impulse.z = 0.0;
			}
		} else {
			this.m_limitState = Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit;
		}
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_motorImpulse *= step.dtRatio;
			var PX = this.m_impulse.x;
			var PY = this.m_impulse.y;
			bA.m_linearVelocity.x -= m1 * PX;
			bA.m_linearVelocity.y -= m1 * PY;
			bA.m_angularVelocity -= i1 * ((r1X * PY - r1Y * PX) + this.m_motorImpulse + this.m_impulse.z);
			bB.m_linearVelocity.x += m2 * PX;
			bB.m_linearVelocity.y += m2 * PY;
			bB.m_angularVelocity += i2 * ((r2X * PY - r2Y * PX) + this.m_motorImpulse + this.m_impulse.z);
		} else {
			this.m_impulse.SetZero();
			this.m_motorImpulse = 0.0;
		}
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolveVelocityConstraints = function(step) {
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var tMat;
		var tX = 0;
		var newImpulse = 0;
		var r1X = 0;
		var r1Y = 0;
		var r2X = 0;
		var r2Y = 0;
		var v1 = bA.m_linearVelocity;
		var w1 = bA.m_angularVelocity;
		var v2 = bB.m_linearVelocity;
		var w2 = bB.m_angularVelocity;
		var m1 = bA.m_invMass;
		var m2 = bB.m_invMass;
		var i1 = bA.m_invI;
		var i2 = bB.m_invI;
		if (this.m_enableMotor && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
			var Cdot = w2 - w1 - this.m_motorSpeed;
			var impulse = this.m_motorMass * ((-Cdot));
			var oldImpulse = this.m_motorImpulse;
			var maxImpulse = step.dt * this.m_maxMotorTorque;
			this.m_motorImpulse = Box2D.Common.Math.b2Math.Clamp(this.m_motorImpulse + impulse, (-maxImpulse), maxImpulse);
			impulse = this.m_motorImpulse - oldImpulse;
			w1 -= i1 * impulse;
			w2 += i2 * impulse;
		}
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			var Cdot1X = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
			var Cdot1Y = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
			var Cdot2 = w2 - w1;
			this.m_mass.Solve33(this.impulse3, (-Cdot1X), (-Cdot1Y), (-Cdot2));
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
				this.m_impulse.Add(this.impulse3);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if (newImpulse < 0.0) {
					this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = (-this.m_impulse.z);
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				newImpulse = this.m_impulse.z + this.impulse3.z;
				if (newImpulse > 0.0) {
					this.m_mass.Solve22(this.reduced, (-Cdot1X), (-Cdot1Y));
					this.impulse3.x = this.reduced.x;
					this.impulse3.y = this.reduced.y;
					this.impulse3.z = (-this.m_impulse.z);
					this.m_impulse.x += this.reduced.x;
					this.m_impulse.y += this.reduced.y;
					this.m_impulse.z = 0.0;
				}
			}
			v1.x -= m1 * this.impulse3.x;
			v1.y -= m1 * this.impulse3.y;
			w1 -= i1 * (r1X * this.impulse3.y - r1Y * this.impulse3.x + this.impulse3.z);
			v2.x += m2 * this.impulse3.x;
			v2.y += m2 * this.impulse3.y;
			w2 += i2 * (r2X * this.impulse3.y - r2Y * this.impulse3.x + this.impulse3.z);
		} else {
			tMat = bA.m_xf.R;
			r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
			r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
			r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
			r1X = tX;
			tMat = bB.m_xf.R;
			r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
			r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
			tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
			r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
			r2X = tX;
			var CdotX = v2.x + ((-w2 * r2Y)) - v1.x - ((-w1 * r1Y));
			var CdotY = v2.y + (w2 * r2X) - v1.y - (w1 * r1X);
			this.m_mass.Solve22(this.impulse2, (-CdotX), (-CdotY));
			this.m_impulse.x += this.impulse2.x;
			this.m_impulse.y += this.impulse2.y;
			v1.x -= m1 * this.impulse2.x;
			v1.y -= m1 * this.impulse2.y;
			w1 -= i1 * (r1X * this.impulse2.y - r1Y * this.impulse2.x);
			v2.x += m2 * this.impulse2.x;
			v2.y += m2 * this.impulse2.y;
			w2 += i2 * (r2X * this.impulse2.y - r2Y * this.impulse2.x);
		}
		bA.m_linearVelocity.SetV(v1);
		bA.m_angularVelocity = w1;
		bB.m_linearVelocity.SetV(v2);
		bB.m_angularVelocity = w2;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var oldLimitImpulse = 0;
		var C = 0;
		var tMat;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var angularError = 0.0;
		var positionError = 0.0;
		var tX = 0;
		var impulseX = 0;
		var impulseY = 0;
		if (this.m_enableLimit && this.m_limitState != Box2D.Dynamics.Joints.b2Joint.e_inactiveLimit) {
			var angle = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
			var limitImpulse = 0.0;
			if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_equalLimits) {
				C = Box2D.Common.Math.b2Math.Clamp(angle - this.m_lowerAngle, (-Box2D.Common.b2Settings.b2_maxAngularCorrection), Box2D.Common.b2Settings.b2_maxAngularCorrection);
				limitImpulse = (-this.m_motorMass * C);
				angularError = Math.abs(C);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atLowerLimit) {
				C = angle - this.m_lowerAngle;
				angularError = (-C);
				C = Box2D.Common.Math.b2Math.Clamp(C + Box2D.Common.b2Settings.b2_angularSlop, (-Box2D.Common.b2Settings.b2_maxAngularCorrection), 0.0);
				limitImpulse = (-this.m_motorMass * C);
			} else if (this.m_limitState == Box2D.Dynamics.Joints.b2Joint.e_atUpperLimit) {
				C = angle - this.m_upperAngle;
				angularError = C;
				C = Box2D.Common.Math.b2Math.Clamp(C - Box2D.Common.b2Settings.b2_angularSlop, 0.0, Box2D.Common.b2Settings.b2_maxAngularCorrection);
				limitImpulse = (-this.m_motorMass * C);
			}
			bA.m_sweep.a -= bA.m_invI * limitImpulse;
			bB.m_sweep.a += bB.m_invI * limitImpulse;
			bA.SynchronizeTransform();
			bB.SynchronizeTransform();
		}
		tMat = bA.m_xf.R;
		var r1X = this.m_localAnchor1.x - bA.m_sweep.localCenter.x;
		var r1Y = this.m_localAnchor1.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r1X + tMat.col2.x * r1Y);
		r1Y = (tMat.col1.y * r1X + tMat.col2.y * r1Y);
		r1X = tX;
		tMat = bB.m_xf.R;
		var r2X = this.m_localAnchor2.x - bB.m_sweep.localCenter.x;
		var r2Y = this.m_localAnchor2.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * r2X + tMat.col2.x * r2Y);
		r2Y = (tMat.col1.y * r2X + tMat.col2.y * r2Y);
		r2X = tX;
		var CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
		var CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		var CLengthSquared = CX * CX + CY * CY;
		var CLength = Math.sqrt(CLengthSquared);
		positionError = CLength;
		var invMass1 = bA.m_invMass;
		var invMass2 = bB.m_invMass;
		var invI1 = bA.m_invI;
		var invI2 = bB.m_invI;
		var k_allowedStretch = 10.0 * Box2D.Common.b2Settings.b2_linearSlop;
		if (CLengthSquared > k_allowedStretch * k_allowedStretch) {
			var uX = CX / CLength;
			var uY = CY / CLength;
			var k = invMass1 + invMass2;
			var m = 1.0 / k;
			impulseX = m * ((-CX));
			impulseY = m * ((-CY));
			var k_beta = 0.5;
			bA.m_sweep.c.x -= k_beta * invMass1 * impulseX;
			bA.m_sweep.c.y -= k_beta * invMass1 * impulseY;
			bB.m_sweep.c.x += k_beta * invMass2 * impulseX;
			bB.m_sweep.c.y += k_beta * invMass2 * impulseY;
			CX = bB.m_sweep.c.x + r2X - bA.m_sweep.c.x - r1X;
			CY = bB.m_sweep.c.y + r2Y - bA.m_sweep.c.y - r1Y;
		}
		this.K1.col1.x = invMass1 + invMass2;
		this.K1.col2.x = 0.0;
		this.K1.col1.y = 0.0;
		this.K1.col2.y = invMass1 + invMass2;
		this.K2.col1.x = invI1 * r1Y * r1Y;
		this.K2.col2.x = (-invI1 * r1X * r1Y);
		this.K2.col1.y = (-invI1 * r1X * r1Y);
		this.K2.col2.y = invI1 * r1X * r1X;
		this.K3.col1.x = invI2 * r2Y * r2Y;
		this.K3.col2.x = (-invI2 * r2X * r2Y);
		this.K3.col1.y = (-invI2 * r2X * r2Y);
		this.K3.col2.y = invI2 * r2X * r2X;
		this.K.SetM(this.K1);
		this.K.AddM(this.K2);
		this.K.AddM(this.K3);
		this.K.Solve(Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse, (-CX), (-CY));
		impulseX = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.x;
		impulseY = Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse.y;
		bA.m_sweep.c.x -= bA.m_invMass * impulseX;
		bA.m_sweep.c.y -= bA.m_invMass * impulseY;
		bA.m_sweep.a -= bA.m_invI * (r1X * impulseY - r1Y * impulseX);
		bB.m_sweep.c.x += bB.m_invMass * impulseX;
		bB.m_sweep.c.y += bB.m_invMass * impulseY;
		bB.m_sweep.a += bB.m_invI * (r2X * impulseY - r2Y * impulseX);
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return positionError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	Box2D.Dynamics.Joints.b2RevoluteJoint.tImpulse = Box2D.Common.Math.b2Vec2.Get(0, 0);
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2RevoluteJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_revoluteJoint;
		this.localAnchorA.SetZero();
		this.localAnchorB.SetZero();
		this.referenceAngle = 0.0;
		this.lowerAngle = 0.0;
		this.upperAngle = 0.0;
		this.maxMotorTorque = 0.0;
		this.motorSpeed = 0.0;
		this.enableLimit = false;
		this.enableMotor = false;
	};
	c2inherit(Box2D.Dynamics.Joints.b2RevoluteJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2RevoluteJointDef.prototype.Initialize = function(bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA = this.bodyA.GetLocalPoint(anchor);
		this.localAnchorB = this.bodyB.GetLocalPoint(anchor);
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2RevoluteJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2RevoluteJoint(this);
	};
	/**
	 * @param {!Box2D.Dynamics.Joints.b2WeldJointDef} def
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2Joint}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint = function(def) {
		Box2D.Dynamics.Joints.b2Joint.call(this, def);
		this.m_localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.m_impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass = new Box2D.Common.Math.b2Mat33();
		this.m_localAnchorA.SetV(def.localAnchorA);
		this.m_localAnchorB.SetV(def.localAnchorB);
		this.m_referenceAngle = def.referenceAngle;
	};
	c2inherit(Box2D.Dynamics.Joints.b2WeldJoint, Box2D.Dynamics.Joints.b2Joint);
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetAnchorA = function() {
		return this.m_bodyA.GetWorldPoint(this.m_localAnchorA);
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetAnchorB = function() {
		return this.m_bodyB.GetWorldPoint(this.m_localAnchorB);
	};
	/**
	 * @param {number} inv_dt
	 * @return {!Box2D.Common.Math.b2Vec2}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetReactionForce = function(inv_dt) {
		return Box2D.Common.Math.b2Vec2.Get(inv_dt * this.m_impulse.x, inv_dt * this.m_impulse.y);
	};
	/**
	 * @param {number} inv_dt
	 * @return {number}
	 */
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.GetReactionTorque = function(inv_dt) {
		return inv_dt * this.m_impulse.z;
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.InitVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
		this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		if (step.warmStarting) {
			this.m_impulse.x *= step.dtRatio;
			this.m_impulse.y *= step.dtRatio;
			this.m_impulse.z *= step.dtRatio;
			bA.m_linearVelocity.x -= mA * this.m_impulse.x;
			bA.m_linearVelocity.y -= mA * this.m_impulse.y;
			bA.m_angularVelocity -= iA * (rAX * this.m_impulse.y - rAY * this.m_impulse.x + this.m_impulse.z);
			bB.m_linearVelocity.x += mB * this.m_impulse.x;
			bB.m_linearVelocity.y += mB * this.m_impulse.y;
			bB.m_angularVelocity += iB * (rBX * this.m_impulse.y - rBY * this.m_impulse.x + this.m_impulse.z);
		} else {
			this.m_impulse.SetZero();
		}
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.SolveVelocityConstraints = function(step) {
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		var vA = bA.m_linearVelocity;
		var wA = bA.m_angularVelocity;
		var vB = bB.m_linearVelocity;
		var wB = bB.m_angularVelocity;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var Cdot1X = vB.x - wB * rBY - vA.x + wA * rAY;
		var Cdot1Y = vB.y + wB * rBX - vA.y - wA * rAX;
		var Cdot2 = wB - wA;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass.Solve33(impulse, (-Cdot1X), (-Cdot1Y), (-Cdot2));
		this.m_impulse.Add(impulse);
		vA.x -= mA * impulse.x;
		vA.y -= mA * impulse.y;
		wA -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		vB.x += mB * impulse.x;
		vB.y += mB * impulse.y;
		wB += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.m_angularVelocity = wA;
		bB.m_angularVelocity = wB;
	};
	Box2D.Dynamics.Joints.b2WeldJoint.prototype.SolvePositionConstraints = function(baumgarte) {
		if (baumgarte === undefined) baumgarte = 0;
		var tMat;
		var tX = 0;
		var bA = this.m_bodyA;
		var bB = this.m_bodyB;
		tMat = bA.m_xf.R;
		var rAX = this.m_localAnchorA.x - bA.m_sweep.localCenter.x;
		var rAY = this.m_localAnchorA.y - bA.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rAX + tMat.col2.x * rAY);
		rAY = (tMat.col1.y * rAX + tMat.col2.y * rAY);
		rAX = tX;
		tMat = bB.m_xf.R;
		var rBX = this.m_localAnchorB.x - bB.m_sweep.localCenter.x;
		var rBY = this.m_localAnchorB.y - bB.m_sweep.localCenter.y;
		tX = (tMat.col1.x * rBX + tMat.col2.x * rBY);
		rBY = (tMat.col1.y * rBX + tMat.col2.y * rBY);
		rBX = tX;
		var mA = bA.m_invMass;
		var mB = bB.m_invMass;
		var iA = bA.m_invI;
		var iB = bB.m_invI;
		var C1X = bB.m_sweep.c.x + rBX - bA.m_sweep.c.x - rAX;
		var C1Y = bB.m_sweep.c.y + rBY - bA.m_sweep.c.y - rAY;
		var C2 = bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;
		var k_allowedStretch = 10.0 * Box2D.Common.b2Settings.b2_linearSlop;
		var positionError = Math.sqrt(C1X * C1X + C1Y * C1Y);
		var angularError = Math.abs(C2);
		if (positionError > k_allowedStretch) {
			iA *= 1.0;
			iB *= 1.0;
		}
		this.m_mass.col1.x = mA + mB + rAY * rAY * iA + rBY * rBY * iB;
		this.m_mass.col2.x = (-rAY * rAX * iA) - rBY * rBX * iB;
		this.m_mass.col3.x = (-rAY * iA) - rBY * iB;
		this.m_mass.col1.y = this.m_mass.col2.x;
		this.m_mass.col2.y = mA + mB + rAX * rAX * iA + rBX * rBX * iB;
		this.m_mass.col3.y = rAX * iA + rBX * iB;
		this.m_mass.col1.z = this.m_mass.col3.x;
		this.m_mass.col2.z = this.m_mass.col3.y;
		this.m_mass.col3.z = iA + iB;
		var impulse = new Box2D.Common.Math.b2Vec3(0, 0, 0);
		this.m_mass.Solve33(impulse, (-C1X), (-C1Y), (-C2));
		bA.m_sweep.c.x -= mA * impulse.x;
		bA.m_sweep.c.y -= mA * impulse.y;
		bA.m_sweep.a -= iA * (rAX * impulse.y - rAY * impulse.x + impulse.z);
		bB.m_sweep.c.x += mB * impulse.x;
		bB.m_sweep.c.y += mB * impulse.y;
		bB.m_sweep.a += iB * (rBX * impulse.y - rBY * impulse.x + impulse.z);
		bA.SynchronizeTransform();
		bB.SynchronizeTransform();
		return positionError <= Box2D.Common.b2Settings.b2_linearSlop && angularError <= Box2D.Common.b2Settings.b2_angularSlop;
	};
	/**
	 * @constructor
	 * @extends {Box2D.Dynamics.Joints.b2JointDef}
	 */
	Box2D.Dynamics.Joints.b2WeldJointDef = function() {
		Box2D.Dynamics.Joints.b2JointDef.call(this);
		this.localAnchorA = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.localAnchorB = Box2D.Common.Math.b2Vec2.Get(0, 0);
		this.type = Box2D.Dynamics.Joints.b2Joint.e_weldJoint;
		this.referenceAngle = 0.0;
	};
	c2inherit(Box2D.Dynamics.Joints.b2WeldJointDef, Box2D.Dynamics.Joints.b2JointDef);
	Box2D.Dynamics.Joints.b2WeldJointDef.prototype.Initialize = function(bA, bB, anchor) {
		this.bodyA = bA;
		this.bodyB = bB;
		this.localAnchorA.SetV(this.bodyA.GetLocalPoint(anchor));
		this.localAnchorB.SetV(this.bodyB.GetLocalPoint(anchor));
		this.referenceAngle = this.bodyB.GetAngle() - this.bodyA.GetAngle();
	};
	Box2D.Dynamics.Joints.b2WeldJointDef.prototype.Create = function() {
		return new Box2D.Dynamics.Joints.b2WeldJoint(this);
	};
	Box2D.Collision.b2Collision.s_incidentEdge = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_clipPoints1 = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_clipPoints2 = Box2D.Collision.b2Collision.MakeClipPointVector();
	Box2D.Collision.b2Collision.s_localTangent = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_localNormal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_planePoint = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_normal = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_tangent = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_tangent2 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_v11 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2Collision.s_v12 = Box2D.Common.Math.b2Vec2.Get(0, 0);
	Box2D.Collision.b2TimeOfImpact.b2_toiCalls = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiMaxIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiRootIters = 0;
	Box2D.Collision.b2TimeOfImpact.b2_toiMaxRootIters = 0;
	Box2D.Collision.b2TimeOfImpact.s_cache = new Box2D.Collision.b2SimplexCache();
	Box2D.Collision.b2TimeOfImpact.s_distanceInput = new Box2D.Collision.b2DistanceInput();
	Box2D.Collision.b2TimeOfImpact.s_xfA = new Box2D.Common.Math.b2Transform();
	Box2D.Collision.b2TimeOfImpact.s_xfB = new Box2D.Common.Math.b2Transform();
	Box2D.Collision.b2TimeOfImpact.s_fcn = new Box2D.Collision.b2SeparationFunction();
	Box2D.Collision.b2TimeOfImpact.s_distanceOutput = new Box2D.Collision.b2DistanceOutput();
	/** @type {!Box2D.Common.Math.b2Transform} */
	Box2D.Dynamics.b2Body.s_xf1 = new Box2D.Common.Math.b2Transform();
	Box2D.Dynamics.b2ContactListener.b2_defaultListener = new Box2D.Dynamics.b2ContactListener();
	Box2D.Dynamics.b2ContactManager.s_evalCP = new Box2D.Collision.b2ContactPoint();
	/** @type {!Box2D.Common.Math.b2Transform} */
	Box2D.Dynamics.b2World.s_xf = new Box2D.Common.Math.b2Transform();
	/** @type {!Box2D.Common.Math.b2Sweep} */
	Box2D.Dynamics.b2World.s_backupA = new Box2D.Common.Math.b2Sweep();
	/** @type {!Box2D.Common.Math.b2Sweep} */
	Box2D.Dynamics.b2World.s_backupB = new Box2D.Common.Math.b2Sweep();
	Box2D.Dynamics.Contacts.b2Contact.s_input = new Box2D.Collision.b2TOIInput();
	Box2D.Dynamics.Contacts.b2ContactSolver.s_worldManifold = new Box2D.Collision.b2WorldManifold();
	Box2D.Dynamics.Contacts.b2ContactSolver.s_psm = new Box2D.Dynamics.Contacts.b2PositionSolverManifold();
}
/*
* Convex Separator for Box2D Flash
*
* This class has been written by Antoan Angelov.
* It is designed to work with Erin Catto's Box2D physics library.
*
* Everybody can use this software for any purpose, under two restrictions:
* 1. You cannot claim that you wrote this software.
* 2. You can not remove or alter this notice.
*
*/
cr.b2Separator = function() {};
cr.b2Separator.det = function(x1, y1, x2, y2, x3, y3)
{
	return x1*y2 + x2*y3 + x3*y1 - y1*x2 - y2*x3 - y3*x1;
};
cr.b2Separator.hitRay = function(x1, y1, x2, y2, x3, y3, x4, y4)
{
	var t1 = x3-x1, t2 = y3-y1, t3 = x2-x1, t4 = y2-y1, t5 = x4-x3, t6 = y4-y3, t7 = t4*t5 - t3*t6;
	var a = (t5*t2 - t6*t1) / t7;
	var px = x1 + a*t3, py = y1 + a*t4;
	var b1 = cr.b2Separator.isOnSegment(x2, y2, x1, y1, px, py);
	var b2 = cr.b2Separator.isOnSegment(px, py, x3, y3, x4, y4);
	if (b1 && b2)
		return Box2D.Common.Math.b2Vec2.Get(px, py);
	else
		return null;
};
cr.b2Separator.isOnSegment = function(px, py, x1, y1, x2, y2)
{
	var b1 = (x1+0.1 >= px && px >= x2-0.1) || (x1-0.1 <= px && px <= x2+0.1);
	var b2 = (y1+0.1 >= py && py >= y2-0.1) || (y1-0.1 <= py && py <= y2+0.1);
	return (b1 && b2) && cr.b2Separator.isOnLine(px, py, x1, y1, x2, y2);
};
cr.b2Separator.isOnLine = function(px, py, x1, y1, x2, y2)
{
	if (Math.abs(x2-x1) > 0.1)
	{
		var a = (y2-y1) / (x2-x1);
		var possibleY = a * (px-x1)+y1;
		var diff = Math.abs(possibleY-py);
		return diff < 0.1;
	}
	return Math.abs(px-x1) < 0.1;
};
cr.b2Separator.pointsMatch = function(x1, y1, x2, y2)
{
	return Math.abs(x2-x1) < 0.1 && Math.abs(y2-y1) < 0.1;
};
cr.b2Separator.Separate = function(verticesVec /*array of b2Vec2*/, objarea)
{
	var b2Vec2 = Box2D.Common.Math.b2Vec2;
	var calced = cr.b2Separator.calcShapes(verticesVec);
	var ret = [];
	var poly, a, b, c;
	var i, len, j, lenj;
	var areasum;
	for (i = 0, len = calced.length; i < len; i++)
	{
		a = calced[i];
		poly = [];
		poly.length = a.length;
		areasum = 0;
		for (j = 0, lenj = a.length; j < lenj; j++)
		{
			b = a[j];
			c = a[(j + 1) % lenj];
			areasum += (b.x * c.y - b.y * c.x);
			poly[j] = b2Vec2.Get(b.x, b.y);
		}
		areasum = Math.abs(areasum / 2);
		if (areasum >= objarea * 0.001)
			ret.push(poly);
	}
;
	return ret;
};
cr.b2Separator.calcShapes = function(verticesVec /*array of b2Vec2*/)
{
	var vec = [];										// array of b2Vec2
	var i = 0, n = 0, j = 0;							// ints
	var d = 0, t = 0, dx = 0, dy = 0, minLen = 0;		// numbers
	var i1 = 0, i2 = 0, i3 = 0;							// ints
	var p1, p2, p3, v1, v2, v, hitV;					// b2Vec2s
	var j1 = 0, j2 = 0, k = 0, h = 0;					// ints
	var vec1 = [], vec2 = [];							// array of b2Vec2
	var isConvex = false;								// boolean
	var figsVec = [], queue = [];						// Arrays
	queue.push(verticesVec);
	while (queue.length)
	{
		vec = queue[0];
		n = vec.length;
		isConvex = true;
		for (i = 0; i < n; i++)
		{
			i1 = i;
			i2 = (i < n-1) ? i+1 : i+1-n;
			i3 = (i < n-2) ? i+2 : i+2-n;
			p1 = vec[i1];
			p2 = vec[i2];
			p3 = vec[i3];
			d = cr.b2Separator.det(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
			if (d < 0)
			{
				isConvex = false;
				minLen = 1e9;
				for (j = 0; j < n; j++)
				{
					if ((j !== i1) && (j !== i2))
					{
						j1 = j;
						j2 = (j<n - 1) ? j+1 : 0;
						v1 = vec[j1];
						v2 = vec[j2];
						v = cr.b2Separator.hitRay(p1.x, p1.y, p2.x, p2.y, v1.x, v1.y, v2.x, v2.y);
						if (v)
						{
							dx = p2.x - v.x;
							dy = p2.y - v.y;
							t = dx*dx + dy*dy;
							if (t < minLen)
							{
								h = j1;
								k = j2;
								hitV = v;
								minLen = t;
							}
						}
					}
				}
				if (minLen === 1e9)
					return [];
				vec1 = [];
				vec2 = [];
				j1 = h;
				j2 = k;
				v1 = vec[j1];
				v2 = vec[j2];
				if (!cr.b2Separator.pointsMatch(hitV.x, hitV.y, v2.x, v2.y))
					vec1.push(hitV);
				if (!cr.b2Separator.pointsMatch(hitV.x, hitV.y, v1.x, v1.y))
					vec2.push(hitV);
				h = -1;
				k = i1;
				while (true)
				{
					if (k !== j2)
						vec1.push(vec[k]);
					else
					{
						if (h < 0 || h >= n)
							return [];
						if (!cr.b2Separator.isOnSegment(v2.x, v2.y, vec[h].x, vec[h].y, p1.x, p1.y))
							vec1.push(vec[k]);
						break;
					}
					h = k;
					if (k-1 < 0)
						k = n-1;
					else
						k--;
				}
				vec1.reverse();
				h = -1;
				k = i2;
				while (true)
				{
					if (k !== j1)
						vec2.push(vec[k]);
					else
					{
						if (h < 0 || h >= n)
							return [];
						if (k === j1 && !cr.b2Separator.isOnSegment(v1.x, v1.y, vec[h].x, vec[h].y, p2.x, p2.y))
							vec2.push(vec[k]);
						break;
					}
					h = k;
					if (k+1 > n-1)
						k = 0;
					else
						k++;
				}
				queue.push(vec1, vec2);
				queue.shift();
				break;
			}
		}
		if (isConvex)
			figsVec.push(queue.shift());
	}
	return figsVec;
};
;
;
cr.behaviors.Physics = function(runtime)
{
	for (var i = 0; i < 4000; i++)
		Box2D.Common.Math.b2Vec2._freeCache.push(new Box2D.Common.Math.b2Vec2(0, 0));
	this.runtime = runtime;
	this.world = new Box2D.Dynamics.b2World(
								Box2D.Common.Math.b2Vec2.Get(0, 10),	// gravity
								true);									// allow sleep
	this.worldG = 10;
	this.lastUpdateTick = -1;
	var listener = new Box2D.Dynamics.b2ContactListener;
	listener.behavior = this;
	listener.BeginContact = function(contact)
	{
		var behA = contact.m_fixtureA.GetBody().c2userdata;
		var behB = contact.m_fixtureB.GetBody().c2userdata;
		this.behavior.runtime.registerCollision(behA.inst, behB.inst);
	};
	this.world.SetContactListener(listener);
	var filter = new Box2D.Dynamics.b2ContactFilter;
	filter.behavior = this;
	filter.ShouldCollide = function (fixtureA, fixtureB)
	{
		if (this.behavior.allCollisionsEnabled)
			return true;
		var typeA = fixtureA.GetBody().c2userdata.inst.type;
		var typeB = fixtureB.GetBody().c2userdata.inst.type;
		var s = typeA.extra.Physics_DisabledCollisions;
		if (s && s.contains(typeB))
			return false;
		s = typeB.extra.Physics_DisabledCollisions;
		if (s && s.contains(typeA))
			return false;
		return true;
	};
	this.world.SetContactFilter(filter);
	this.steppingMode = 0;		// fixed
	this.velocityIterations = 8;
	this.positionIterations = 3;
	this.allCollisionsEnabled = true;
};
(function ()
{
	var b2Vec2 = Box2D.Common.Math.b2Vec2,
		b2BodyDef = Box2D.Dynamics.b2BodyDef,
		b2Body = Box2D.Dynamics.b2Body,
		b2FixtureDef = Box2D.Dynamics.b2FixtureDef,
		b2Fixture = Box2D.Dynamics.b2Fixture,
		b2World = Box2D.Dynamics.b2World,
		b2PolygonShape = Box2D.Collision.Shapes.b2PolygonShape,
		b2CircleShape = Box2D.Collision.Shapes.b2CircleShape,
		b2DistanceJointDef = Box2D.Dynamics.Joints.b2DistanceJointDef,
		b2RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef,
		b2Transform = Box2D.Common.Math.b2Transform,
		b2Mat22 = Box2D.Common.Math.b2Mat22;
	var TILE_FLIPPED_HORIZONTAL = -0x80000000		// note: pretend is a signed int, so negate
	var TILE_FLIPPED_VERTICAL = 0x40000000
	var TILE_FLIPPED_DIAGONAL = 0x20000000
	var TILE_FLAGS_MASK = 0xE0000000
	var worldScale = 0.02;
	var behaviorProto = cr.behaviors.Physics.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.world = this.behavior.world;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.immovable = (this.properties[0] !== 0);
		this.collisionmask = this.properties[1];
		this.preventRotation = (this.properties[2] !== 0);
		this.density = this.properties[3];
		this.friction = this.properties[4];
		this.restitution = this.properties[5];
		this.linearDamping = this.properties[6];
		this.angularDamping = this.properties[7];
		this.bullet = (this.properties[8] !== 0);
		this.enabled = (this.properties[9] !== 0);
		this.body = null;
		this.inst.update_bbox();
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.lastWidth = 0;
		this.lastHeight = 0;
		this.lastTickOverride = false;
		this.recreateBody = false;
		this.lastAnimation = null;			// for sprites only - will be undefined for other objects
		this.lastAnimationFrame = -1;		// for sprites only - will be undefined for other objects
		if (this.myJoints)
		{
			this.myJoints.length = 0;
			this.myCreatedJoints.length = 0;
			this.joiningMe.clear();
		}
		else
		{
			this.myJoints = [];						// Created Box2D joints
			this.myCreatedJoints = [];				// List of actions called to create joints
			this.joiningMe = new cr.ObjectSet();	// Instances with joints to me
		}
		var self = this;
		if (!this.recycled)
		{
			this.myDestroyCallback = (function(inst) {
													self.onInstanceDestroyed(inst);
												});
		}
		this.runtime.addDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.postCreate = function ()
	{
		this.inst.update_bbox();
		this.createBody();
		this.lastAnimation = this.inst.cur_animation;
		this.lastAnimationFrame = this.inst.cur_frame;
	};
	behinstProto.onDestroy = function()
	{
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
		if (this.body)
		{
			this.world.DestroyBody(this.body);
			this.body = null;
		}
		this.runtime.removeDestroyCallback(this.myDestroyCallback);
	};
	behinstProto.saveToJSON = function ()
	{
		var o = {
			"e": this.enabled,
			"im": this.immovable,
			"pr": this.preventRotation,
			"d": this.density,
			"fr": this.friction,
			"re": this.restitution,
			"ld": this.linearDamping,
			"ad": this.angularDamping,
			"b": this.bullet,
			"mcj": this.myCreatedJoints
		};
		if (this.enabled)
		{
			var temp = b2Vec2.Get(0, 0);
			temp.SetV(this.body.GetLinearVelocity());
			o["vx"] = temp.x;
			o["vy"] = temp.y;
			o["om"] = this.body.GetAngularVelocity();
		}
		return o;
	};
	behinstProto.loadFromJSON = function (o)
	{
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
		if (this.body)
		{
			this.world.DestroyBody(this.body);
			this.body = null;
		}
		this.enabled = o["e"];
		this.immovable = o["im"];
		this.preventRotation = o["pr"];
		this.density = o["d"];
		this.friction = o["fr"];
		this.restitution = o["re"];
		this.linearDamping = o["ld"];
		this.angularDamping = o["ad"];
		this.bullet = o["b"];
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
		this.lastKnownAngle = this.inst.angle;
		this.lastWidth = this.inst.width;
		this.lastHeight = this.inst.height;
		if (this.enabled)
		{
			this.createBody();
			this.body.SetLinearVelocity(b2Vec2.Get(o["vx"], o["vy"]));
			this.body.SetAngularVelocity(o["om"]);
			if (o["vx"] !== 0 || o["vy"] !== 0 || o["om"] !== 0)
				this.body.SetAwake(true);
			this.myCreatedJoints = o["mcj"];
		}
	};
	behinstProto.afterLoad = function ()
	{
		if (this.enabled)
			this.recreateMyJoints();
		this.behavior.lastUpdateTick = this.runtime.tickcount - 1;
	};
	behinstProto.onInstanceDestroyed = function (inst)
	{
		var i, len, j, instuid = inst.uid;
		for (i = 0, j = 0, len = this.myCreatedJoints.length; i < len; i++)
		{
			this.myCreatedJoints[j] = this.myCreatedJoints[i];
			if (j < this.myJoints.length)
				this.myJoints[j] = this.myJoints[i];
			if (this.myCreatedJoints[i].params[1] == instuid)		// attached instance is always 2nd param
				this.world.DestroyJoint(this.myJoints[i]);
			else
				j++;
		}
		this.myCreatedJoints.length = j;
		if (j < this.myJoints.length)
			this.myJoints.length = j;
		this.joiningMe.remove(inst);
	};
	behinstProto.destroyMyJoints = function()
	{
		var i, len;
		for (i = 0, len = this.myJoints.length; i < len; i++)
			this.world.DestroyJoint(this.myJoints[i]);
		this.myJoints.length = 0;
	};
	behinstProto.recreateMyJoints = function()
	{
		var i, len, j;
		for (i = 0, len = this.myCreatedJoints.length; i < len; i++)
		{
			j = this.myCreatedJoints[i];
			switch (j.type) {
			case 0:			// distance joint
				this.doCreateDistanceJoint(j.params[0], j.params[1], j.params[2], j.params[3], j.params[4]);
				break;
			case 1:			// revolute joint
				this.doCreateRevoluteJoint(j.params[0], j.params[1]);
				break;
			case 2:			// limited revolute joint
				this.doCreateLimitedRevoluteJoint(j.params[0], j.params[1], j.params[2], j.params[3]);
				break;
			default:
;
			}
		}
	};
	behinstProto.destroyBody = function()
	{
		if (!this.body)
			return;
		this.destroyMyJoints();
		this.world.DestroyBody(this.body);
		this.body = null;
		this.inst.extra.box2dbody = null;
	};
	var collrects = [];
	behinstProto.createBody = function()
	{
		if (!this.enabled)
			return;
		var inst = this.inst;
		var hadOldBody = false;
		var oldVelocity = null;
		var oldOmega = null;
		var i, len, j, lenj, k, lenk, vec, arr, b, c, rc, pts_cache, pts_count, convexpolys, cp, offx, offy, oldAngle;
		if (this.body)
		{
			hadOldBody = true;
			oldVelocity = b2Vec2.Get(0, 0);
			oldVelocity.SetV(this.body.GetLinearVelocity());
			oldOmega = this.body.GetAngularVelocity();
			arr = this.joiningMe.valuesRef();
			for (i = 0, len = arr.length; i < len; i++)
			{
				b = arr[i].extra.box2dbody.c2userdata;
				b.destroyMyJoints();
			}
			this.destroyBody();
		}
		var fixDef = new b2FixtureDef;
		fixDef.density = this.density;
		fixDef.friction = this.friction;
		fixDef.restitution = this.restitution;
		var bodyDef = new b2BodyDef;
		if (this.immovable)
			bodyDef.type = 0; //b2BodyDef.b2_staticBody
		else
			bodyDef.type = 2; //b2BodyDef.b2_dynamicBody
		inst.update_bbox();
		bodyDef.position.x = inst.bquad.midX() * worldScale;
		bodyDef.position.y = inst.bquad.midY() * worldScale;
		bodyDef.angle = inst.angle;
		bodyDef.fixedRotation = this.preventRotation;
		bodyDef.linearDamping = this.linearDamping;
		bodyDef.angularDamping = this.angularDamping;
		bodyDef.bullet = this.bullet;
		var hasPoly = this.inst.collision_poly && !this.inst.collision_poly.is_empty();
		this.body = this.world.CreateBody(bodyDef);
		this.body.c2userdata = this;
		var usecollisionmask = this.collisionmask;
		if (!hasPoly && !this.inst.tilemap_exists && this.collisionmask === 0)
			usecollisionmask = 1;
		var instw = Math.max(Math.abs(inst.width), 1);
		var insth = Math.max(Math.abs(inst.height), 1);
		var ismirrored = inst.width < 0;
		var isflipped = inst.height < 0;
		if (usecollisionmask === 0)
		{
			if (inst.tilemap_exists)
			{
				offx = inst.bquad.midX() - inst.x;
				offy = inst.bquad.midY() - inst.y;
				inst.getAllCollisionRects(collrects);
				arr = [];
				for (i = 0, len = collrects.length; i < len; ++i)
				{
					c = collrects[i];
					rc = c.rc;
					if (c.poly)
					{
						if (!c.poly.convexpolys)
						{
							pts_cache = c.poly.pts_cache;
							pts_count = c.poly.pts_count;
							for (j = 0; j < pts_count; ++j)
							{
								arr.push(b2Vec2.Get(pts_cache[j*2], pts_cache[j*2+1]));
							}
							var flags = (c.id & TILE_FLAGS_MASK);
							if (flags === TILE_FLIPPED_HORIZONTAL || flags === TILE_FLIPPED_VERTICAL || flags === TILE_FLIPPED_DIAGONAL ||
								((flags & TILE_FLIPPED_HORIZONTAL) && (flags & TILE_FLIPPED_VERTICAL) && (flags & TILE_FLIPPED_DIAGONAL)))
							{
								arr.reverse();
							}
							c.poly.convexpolys = cr.b2Separator.Separate(arr, (rc.right - rc.left) * (rc.bottom - rc.top));
							for (j = 0, lenj = arr.length; j < lenj; ++j)
								b2Vec2.Free(arr[j]);
							arr.length = 0;
						}
						for (j = 0, lenj = c.poly.convexpolys.length; j < lenj; ++j)
						{
							cp = c.poly.convexpolys[j];
;
							for (k = 0, lenk = cp.length; k < lenk; ++k)
							{
								arr.push(b2Vec2.Get((rc.left + cp[k].x - offx) * worldScale, (rc.top + cp[k].y - offy) * worldScale));
							}
							fixDef.shape = new b2PolygonShape;
							fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
							this.body.CreateFixture(fixDef);
							for (k = 0, lenk = arr.length; k < lenk; ++k)
								b2Vec2.Free(arr[k]);
							arr.length = 0;
						}
					}
					else
					{
						arr.push(b2Vec2.Get((rc.left - offx) * worldScale, (rc.top - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.right - offx) * worldScale, (rc.top - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.right - offx) * worldScale, (rc.bottom - offy) * worldScale));
						arr.push(b2Vec2.Get((rc.left - offx) * worldScale, (rc.bottom - offy) * worldScale));
						fixDef.shape = new b2PolygonShape;
						fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
						this.body.CreateFixture(fixDef);
					}
					for (j = 0, lenj = arr.length; j < lenj; ++j)
						b2Vec2.Free(arr[j]);
					arr.length = 0;
				}
			}
			else
			{
				oldAngle = inst.angle;
				inst.angle = 0;
				inst.set_bbox_changed();
				inst.update_bbox();
				offx = inst.bquad.midX() - inst.x;
				offy = inst.bquad.midY() - inst.y;
				inst.angle = oldAngle;
				inst.set_bbox_changed();
				inst.collision_poly.cache_poly(ismirrored ? -instw : instw, isflipped ? -insth : insth, 0);
				pts_cache = inst.collision_poly.pts_cache;
				pts_count = inst.collision_poly.pts_count;
				arr = [];
				arr.length = pts_count;
				for (i = 0; i < pts_count; i++)
				{
					arr[i] = b2Vec2.Get(pts_cache[i*2] - offx, pts_cache[i*2+1] - offy);
				}
				if (ismirrored !== isflipped)
					arr.reverse();		// wrong clockwise order when flipped
				convexpolys = cr.b2Separator.Separate(arr, instw * insth);
				for (i = 0; i < pts_count; i++)
					b2Vec2.Free(arr[i]);
				if (convexpolys.length)
				{
					for (i = 0, len = convexpolys.length; i < len; i++)
					{
						arr = convexpolys[i];
;
						for (j = 0, lenj = arr.length; j < lenj; j++)
						{
							vec = arr[j];
							vec.x *= worldScale;
							vec.y *= worldScale;
						}
						fixDef.shape = new b2PolygonShape;
						fixDef.shape.SetAsArray(arr, arr.length);		// copies content of arr
						this.body.CreateFixture(fixDef);
						for (j = 0, lenj = arr.length; j < lenj; j++)
							b2Vec2.Free(arr[j]);
					}
				}
				else
				{
					fixDef.shape = new b2PolygonShape;
					fixDef.shape.SetAsBox(instw * worldScale * 0.5, insth * worldScale * 0.5);
					this.body.CreateFixture(fixDef);
				}
			}
		}
		else if (usecollisionmask === 1)
		{
			fixDef.shape = new b2PolygonShape;
			fixDef.shape.SetAsBox(instw * worldScale * 0.5, insth * worldScale * 0.5);
			this.body.CreateFixture(fixDef);
		}
		else
		{
			fixDef.shape = new b2CircleShape(Math.min(instw, insth) * worldScale * 0.5);
			this.body.CreateFixture(fixDef);
		}
		inst.extra.box2dbody = this.body;
		this.lastWidth = inst.width;
		this.lastHeight = inst.height;
		if (hadOldBody)
		{
			this.body.SetLinearVelocity(oldVelocity);
			this.body.SetAngularVelocity(oldOmega);
			b2Vec2.Free(oldVelocity);
			this.recreateMyJoints();
			arr = this.joiningMe.valuesRef();
			for (i = 0, len = arr.length; i < len; i++)
			{
				b = arr[i].extra.box2dbody.c2userdata;
				b.recreateMyJoints();
			}
		}
		collrects.length = 0;
	};
	/*
	behinstProto.draw = function (ctx)
	{
		if (!this.myconvexpolys)
			return;
		this.inst.update_bbox();
		var midx = this.inst.bquad.midX();
		var midy = this.inst.bquad.midY();
		var i, len, j, lenj;
		var sina = 0;
		var cosa = 1;
		if (this.inst.angle !== 0)
		{
			sina = Math.sin(this.inst.angle);
			cosa = Math.cos(this.inst.angle);
		}
		var strokeStyles = ["#f00", "#0f0", "#00f", "#ff0", "#0ff", "#f0f"];
		ctx.lineWidth = 2;
		var i, len, j, lenj, ax, ay, bx, by, poly, va, vb;
		for (i = 0, len = this.myconvexpolys.length; i < len; i++)
		{
			poly = this.myconvexpolys[i];
			ctx.strokeStyle = strokeStyles[i];
			for (j = 0, lenj = poly.length; j < lenj; j++)
			{
				va = poly[j];
				vb = poly[(j + 1) % lenj];
				ax = va.x / worldScale;
				ay = va.y / worldScale;
				bx = vb.x / worldScale;
				by = vb.y / worldScale;
				ctx.beginPath();
				ctx.moveTo(((ax * cosa) - (ay * sina)) + midx, ((ay * cosa) + (ax * sina)) + midy);
				ctx.lineTo(((bx * cosa) - (by * sina)) + midx, ((by * cosa) + (bx * sina)) + midy);
				ctx.stroke();
				ctx.closePath();
			}
		}
	};
	*/
	behinstProto.tick = function ()
	{
		if (!this.enabled)
			return;
		var inst = this.inst;
		var dt;
		if (this.behavior.steppingMode === 0)		// fixed
			dt = this.runtime.timescale / 60;
		else
		{
			dt = this.runtime.getDt(this.inst);
			if (dt > 1 / 30)
				dt = 1 / 30;
		}
		if (this.runtime.tickcount > this.behavior.lastUpdateTick && this.runtime.timescale > 0)
		{
			this.world.Step(dt, this.behavior.velocityIterations, this.behavior.positionIterations);		// still apply timescale
			this.world.ClearForces();
			this.behavior.lastUpdateTick = this.runtime.tickcount;
		}
		if (this.recreateBody || inst.width !== this.lastWidth || inst.height !== this.lastHeight
			|| inst.cur_animation !== this.lastAnimation || inst.cur_frame !== this.lastAnimationFrame
			|| (inst.tilemap_exists && inst.physics_changed))
		{
			this.createBody();
			this.recreateBody = false;
			this.lastAnimation = inst.cur_animation;
			this.lastAnimationFrame = inst.cur_frame;
			if (inst.tilemap_exists && inst.physics_changed)
				inst.physics_changed = false;
		}
		var pos_changed = (inst.x !== this.lastKnownX || inst.y !== this.lastKnownY);
		var angle_changed = (inst.angle !== this.lastKnownAngle);
		if (pos_changed)
		{
			inst.update_bbox();
			var newmidx = inst.bquad.midX();
			var newmidy = inst.bquad.midY();
			var diffx = newmidx - this.lastKnownX;
			var diffy = newmidy - this.lastKnownY;
			this.body.SetPosition(b2Vec2.Get(newmidx * worldScale, newmidy * worldScale));
			this.body.SetLinearVelocity(b2Vec2.Get(diffx, diffy));
			this.lastTickOverride = true;
			this.body.SetAwake(true);
		}
		else if (this.lastTickOverride)
		{
			this.lastTickOverride = false;
			this.body.SetLinearVelocity(b2Vec2.Get(0, 0));
			this.body.SetPosition(b2Vec2.Get(inst.bquad.midX() * worldScale, inst.bquad.midY() * worldScale));
		}
		if (angle_changed)
		{
			this.body.SetAngle(inst.angle);
			this.body.SetAwake(true);
		}
		var pos = this.body.GetPosition();
		var newx = pos.x / worldScale;
		var newy = pos.y / worldScale;
		var newangle = this.body.GetAngle();
		if (newx !== inst.x || newy !== inst.y || newangle !== inst.angle)
		{
			inst.x = newx;
			inst.y = newy;
			inst.angle = newangle;
			inst.set_bbox_changed();
			inst.update_bbox();
			var dx = inst.bquad.midX() - inst.x;
			var dy = inst.bquad.midY() - inst.y;
			if (dx !== 0 || dy !== 0)
			{
				inst.x -= dx;
				inst.y -= dy;
				inst.set_bbox_changed();
			}
		}
		this.lastKnownX = inst.x;
		this.lastKnownY = inst.y;
		this.lastKnownAngle = inst.angle;
	};
	behinstProto.getInstImgPointX = function(imgpt)
	{
		if (imgpt === -1 || !this.inst.getImagePoint)
			return this.inst.x;
		if (imgpt === 0 && this.body)
			return (this.body.GetPosition().x + this.body.GetLocalCenter().x) / worldScale;
		return this.inst.getImagePoint(imgpt, true);
	};
	behinstProto.getInstImgPointY = function(imgpt)
	{
		if (imgpt === -1 || !this.inst.getImagePoint)
			return this.inst.y;
		if (imgpt === 0 && this.body)
			return (this.body.GetPosition().y + this.body.GetLocalCenter().y) / worldScale;
		return this.inst.getImagePoint(imgpt, false);
	};
	function Cnds() {};
	Cnds.prototype.IsSleeping = function ()
	{
		if (!this.enabled)
			return false;
		return !this.body.IsAwake();
	};
	Cnds.prototype.CompareVelocity = function (which_, cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var velocity_vec = this.body.GetLinearVelocity();
		var v, vx, vy;
		if (which_ === 0)		// X velocity
			v = velocity_vec.x / worldScale;
		else if (which_ === 1)	// Y velocity
			v = velocity_vec.y / worldScale;
		else					// Overall velocity
		{
			vx = velocity_vec.x / worldScale;
			vy = velocity_vec.y / worldScale;
			v = cr.distanceTo(0, 0, vx, vy);
		}
		return cr.do_cmp(v, cmp_, x_);
	};
	Cnds.prototype.CompareAngularVelocity = function (cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var av = cr.to_degrees(this.body.GetAngularVelocity());
		return cr.do_cmp(av, cmp_, x_);
	};
	Cnds.prototype.CompareMass = function (cmp_, x_)
	{
		if (!this.enabled)
			return false;
		var mass = this.body.GetMass() / worldScale;
		return cr.do_cmp(mass, cmp_, x_);
	};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.enabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.ApplyForce = function (fx, fy, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyForce(b2Vec2.Get(fx, fy), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyForceToward = function (f, px, py, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		var a = cr.angleTo(x, y, px, py);
		this.body.ApplyForce(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyForceAtAngle = function (f, a, imgpt)
	{
		if (!this.enabled)
			return;
		a = cr.to_radians(a);
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyForce(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
	};
	Acts.prototype.ApplyImpulse = function (fx, fy, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyImpulse(b2Vec2.Get(fx, fy), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyImpulseToward = function (f, px, py, imgpt)
	{
		if (!this.enabled)
			return;
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		var a = cr.angleTo(x, y, px, py);
		this.body.ApplyImpulse(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyImpulseAtAngle = function (f, a, imgpt)
	{
		if (!this.enabled)
			return;
		a = cr.to_radians(a);
		var x = this.getInstImgPointX(imgpt);
		var y = this.getInstImgPointY(imgpt);
		this.body.ApplyImpulse(b2Vec2.Get(Math.cos(a) * f, Math.sin(a) * f), b2Vec2.Get(x * worldScale, y * worldScale));
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.ApplyTorque = function (m)
	{
		if (!this.enabled)
			return;
		this.body.ApplyTorque(cr.to_radians(m));
	};
	Acts.prototype.ApplyTorqueToAngle = function (m, a)
	{
		if (!this.enabled)
			return;
		m = cr.to_radians(m);
		a = cr.to_radians(a);
		if (cr.angleClockwise(this.inst.angle, a))
			this.body.ApplyTorque(-m);
		else
			this.body.ApplyTorque(m);
	};
	Acts.prototype.ApplyTorqueToPosition = function (m, x, y)
	{
		if (!this.enabled)
			return;
		m = cr.to_radians(m);
		var a = cr.angleTo(this.inst.x, this.inst.y, x, y);
		if (cr.angleClockwise(this.inst.angle, a))
			this.body.ApplyTorque(-m);
		else
			this.body.ApplyTorque(m);
	};
	Acts.prototype.SetAngularVelocity = function (v)
	{
		if (!this.enabled)
			return;
		this.body.SetAngularVelocity(cr.to_radians(v));
		this.body.SetAwake(true);
	};
	Acts.prototype.CreateDistanceJoint = function (imgpt, obj, objimgpt, damping, freq)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 0, params: [imgpt, otherinst.uid, objimgpt, damping, freq]});
		this.doCreateDistanceJoint(imgpt, otherinst.uid, objimgpt, damping, freq);
	};
	behinstProto.doCreateDistanceJoint = function (imgpt, otherinstuid, objimgpt, damping, freq)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var theirx, theiry;
		if (otherinst.getImagePoint)
		{
			theirx = otherinst.getImagePoint(objimgpt, true);
			theiry = otherinst.getImagePoint(objimgpt, false);
		}
		else
		{
			theirx = otherinst.x;
			theiry = otherinst.y;
		}
		var dx = myx - theirx;
		var dy = myy - theiry;
		var jointDef = new b2DistanceJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale), b2Vec2.Get(theirx * worldScale, theiry * worldScale));
		jointDef.length = Math.sqrt(dx*dx + dy*dy) * worldScale;
		jointDef.dampingRatio = damping;
		jointDef.frequencyHz = freq;
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.CreateRevoluteJoint = function (imgpt, obj)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 1, params: [imgpt, otherinst.uid]});
		this.doCreateRevoluteJoint(imgpt, otherinst.uid);
	};
	behinstProto.doCreateRevoluteJoint = function (imgpt, otherinstuid)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var jointDef = new b2RevoluteJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale));
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.CreateLimitedRevoluteJoint = function (imgpt, obj, lower, upper)
	{
		if (!obj || !this.enabled)
			return;
		var otherinst = obj.getFirstPicked(this.inst);
		if (!otherinst || otherinst == this.inst)
			return;
		if (!otherinst.extra.box2dbody)
			return;		// no physics behavior on other object
		this.myCreatedJoints.push({type: 2, params: [imgpt, otherinst.uid, lower, upper]});
		this.doCreateLimitedRevoluteJoint(imgpt, otherinst.uid, lower, upper);
	};
	behinstProto.doCreateLimitedRevoluteJoint = function (imgpt, otherinstuid, lower, upper)
	{
		if (!this.enabled)
			return;
		var otherinst = this.runtime.getObjectByUID(otherinstuid);
		if (!otherinst || otherinst == this.inst || !otherinst.extra.box2dbody)
			return;
		otherinst.extra.box2dbody.c2userdata.joiningMe.add(this.inst);
		var myx = this.getInstImgPointX(imgpt);
		var myy = this.getInstImgPointY(imgpt);
		var jointDef = new b2RevoluteJointDef();
		jointDef.Initialize(this.body, otherinst.extra.box2dbody, b2Vec2.Get(myx * worldScale, myy * worldScale));
		jointDef.enableLimit = true;
		jointDef.lowerAngle = cr.to_radians(lower);
		jointDef.upperAngle = cr.to_radians(upper);
		this.myJoints.push(this.world.CreateJoint(jointDef));
	};
	Acts.prototype.SetWorldGravity = function (g)
	{
		if (g === this.behavior.worldG)
			return;
		this.world.SetGravity(b2Vec2.Get(0, g));
		this.behavior.worldG = g;
		var i, len, arr = this.behavior.my_instances.valuesRef();
		for (i = 0, len = arr.length; i < len; i++)
		{
			if (arr[i].extra.box2dbody)
				arr[i].extra.box2dbody.SetAwake(true);
		}
	};
	Acts.prototype.SetSteppingMode = function (mode)
	{
		this.behavior.steppingMode = mode;
	};
	Acts.prototype.SetIterations = function (vel, pos)
	{
		if (vel < 1) vel = 1;
		if (pos < 1) pos = 1;
		this.behavior.velocityIterations = vel;
		this.behavior.positionIterations = pos;
	};
	Acts.prototype.SetVelocity = function (vx, vy)
	{
		if (!this.enabled)
			return;
		this.body.SetLinearVelocity(b2Vec2.Get(vx * worldScale, vy * worldScale));
		this.body.SetAwake(true);
		this.lastTickOverride = false;
		this.lastKnownX = this.inst.x;
		this.lastKnownY = this.inst.y;
	};
	Acts.prototype.SetDensity = function (d)
	{
		if (!this.enabled)
			return;
		if (this.density === d)
			return;
		this.density = d;
		this.recreateBody = true;
	};
	Acts.prototype.SetFriction = function (f)
	{
		if (!this.enabled)
			return;
		if (this.friction === f)
			return;
		this.friction = f;
		this.recreateBody = true;
	};
	Acts.prototype.SetElasticity = function (e)
	{
		if (!this.enabled)
			return;
		if (this.restitution === e)
			return;
		this.restitution = e;
		this.recreateBody = true;
	};
	Acts.prototype.SetLinearDamping = function (ld)
	{
		if (!this.enabled)
			return;
		if (this.linearDamping === ld)
			return;
		this.linearDamping = ld;
		this.body.SetLinearDamping(ld);
	};
	Acts.prototype.SetAngularDamping = function (ad)
	{
		if (!this.enabled)
			return;
		if (this.angularDamping === ad)
			return;
		this.angularDamping = ad;
		this.body.SetAngularDamping(ad);
	};
	Acts.prototype.SetImmovable = function (i)
	{
		if (!this.enabled)
			return;
		if (this.immovable === (i !== 0))
			return;
		this.immovable = (i !== 0);
		this.body.SetType(this.immovable ? 0 /*b2BodyDef.b2_staticBody*/ : 2 /*b2BodyDef.b2_dynamicBody*/);
		this.body.SetAwake(true);
	};
	function SetCollisionsEnabled(typeA, typeB, state)
	{
		var s;
		if (state)
		{
			s = typeA.extra.Physics_DisabledCollisions;
			if (s)
				s.remove(typeB);
			s = typeB.extra.Physics_DisabledCollisions;
			if (s)
				s.remove(typeA);
		}
		else
		{
			if (!typeA.extra.Physics_DisabledCollisions)
				typeA.extra.Physics_DisabledCollisions = new cr.ObjectSet();
			typeA.extra.Physics_DisabledCollisions.add(typeB);
			if (!typeB.extra.Physics_DisabledCollisions)
				typeB.extra.Physics_DisabledCollisions = new cr.ObjectSet();
			typeB.extra.Physics_DisabledCollisions.add(typeA);
		}
	};
	Acts.prototype.EnableCollisions = function (obj, state)
	{
		if (!obj || !this.enabled)
			return;
		var i, len;
		if (obj.is_family)
		{
			for (i = 0, len = obj.members.length; i < len; i++)
			{
				SetCollisionsEnabled(this.inst.type, obj.members[i], state !== 0);
			}
		}
		else
		{
			SetCollisionsEnabled(this.inst.type, obj, state !== 0);
		}
		this.behavior.allCollisionsEnabled = false;
	};
	Acts.prototype.SetPreventRotate = function (i)
	{
		if (!this.enabled)
			return;
		if (this.preventRotation === (i !== 0))
			return;
		this.preventRotation = (i !== 0);
		this.body.SetFixedRotation(this.preventRotation);
		this.body.m_torque = 0;
		this.body.SetAngularVelocity(0);
		this.body.SetAwake(true);
	};
	Acts.prototype.SetBullet = function (i)
	{
		if (!this.enabled)
			return;
		if (this.bullet === (i !== 0))
			return;
		this.bullet = (i !== 0);
		this.body.SetBullet(this.bullet);
		this.body.SetAwake(true);
	};
	Acts.prototype.RemoveJoints = function ()
	{
		if (!this.enabled)
			return;
		this.destroyMyJoints();
		this.myCreatedJoints.length = 0;
		this.joiningMe.clear();
	};
	Acts.prototype.SetEnabled = function (e)
	{
		if (this.enabled && e === 0)
		{
			this.destroyBody();
			this.enabled = false;
		}
		else if (!this.enabled && e === 1)
		{
			this.enabled = true;
			this.createBody();
		}
	};
	behaviorProto.acts = new Acts();
	function Exps() {};
	Exps.prototype.VelocityX = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetLinearVelocity().x / worldScale : 0);
	};
	Exps.prototype.VelocityY = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetLinearVelocity().y / worldScale : 0);
	};
	Exps.prototype.AngularVelocity = function (ret)
	{
		ret.set_float(this.enabled ? cr.to_degrees(this.body.GetAngularVelocity()) : 0);
	};
	Exps.prototype.Mass = function (ret)
	{
		ret.set_float(this.enabled ? this.body.GetMass() / worldScale : 0);
	};
	Exps.prototype.CenterOfMassX = function (ret)
	{
		ret.set_float(this.enabled ? (this.body.GetPosition().x + this.body.GetLocalCenter().x) / worldScale : 0);
	};
	Exps.prototype.CenterOfMassY = function (ret)
	{
		ret.set_float(this.enabled ? (this.body.GetPosition().y + this.body.GetLocalCenter().y) / worldScale : 0);
	};
	Exps.prototype.Density = function (ret)
	{
		ret.set_float(this.enabled ? this.density : 0);
	};
	Exps.prototype.Friction = function (ret)
	{
		ret.set_float(this.enabled ? this.friction : 0);
	};
	Exps.prototype.Elasticity = function (ret)
	{
		ret.set_float(this.enabled ? this.restitution : 0);
	};
	Exps.prototype.LinearDamping = function (ret)
	{
		ret.set_float(this.enabled ? this.linearDamping : 0);
	};
	Exps.prototype.AngularDamping = function (ret)
	{
		ret.set_float(this.enabled ? this.angularDamping : 0);
	};
	behaviorProto.exps = new Exps();
}());
var easeOutBounceArray = [];
var easeInElasticArray = [];
var easeOutElasticArray = [];
var easeInOutElasticArray = [];
var easeInCircle = [];
var easeOutCircle = [];
var easeInOutCircle = [];
var easeOutBack = [];
var easeInOutBack = [];
var litetween_precision = 10000;
var updateLimit = 0; //0.0165;
function easeOutBounce(t,b,c,d) {
	if ((t/=d) < (1/2.75)) {
		return c*(7.5625*t*t) + b;
	} else if (t < (2/2.75)) {
		return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
	} else if (t < (2.5/2.75)) {
		return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
	} else {
		return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
	}
}
function integerize(t, d)
{
  return Math.round(t/d*litetween_precision);
}
function easeFunc(easing, t, b, c, d, flip)
{
  var ret_ease = 0;
  switch (easing) {
	case 0:		// linear
		ret_ease = c*t/d + b;
    break;
	case 1:		// easeInQuad
		ret_ease = c*(t/=d)*t + b;
    break;
	case 2:		// easeOutQuad
		ret_ease = -c *(t/=d)*(t-2) + b;
    break;
	case 3:		// easeInOutQuad
		if ((t/=d/2) < 1)
      ret_ease = c/2*t*t + b
    else
		  ret_ease = -c/2 * ((--t)*(t-2) - 1) + b;
    break;
	case 4:		// easeInCubic
		ret_ease = c*(t/=d)*t*t + b;
    break;
	case 5:		// easeOutCubic
		ret_ease = c*((t=t/d-1)*t*t + 1) + b;
    break;
	case 6:		// easeInOutCubic
		if ((t/=d/2) < 1)
			ret_ease = c/2*t*t*t + b
    else
		  ret_ease = c/2*((t-=2)*t*t + 2) + b;
    break;
	case 7:		// easeInQuart
		ret_ease = c*(t/=d)*t*t*t + b;
    break;
	case 8:		// easeOutQuart
		ret_ease = -c * ((t=t/d-1)*t*t*t - 1) + b;
    break;
	case 9:		// easeInOutQuart
		if ((t/=d/2) < 1)
      ret_ease = c/2*t*t*t*t + b
    else
		  ret_ease = -c/2 * ((t-=2)*t*t*t - 2) + b;
    break;
	case 10:		// easeInQuint
		ret_ease = c*(t/=d)*t*t*t*t + b;
    break;
	case 11:		// easeOutQuint
		ret_ease = c*((t=t/d-1)*t*t*t*t + 1) + b;
    break;
	case 12:		// easeInOutQuint
		if ((t/=d/2) < 1)
      ret_ease = c/2*t*t*t*t*t + b
    else
		  ret_ease = c/2*((t-=2)*t*t*t*t + 2) + b;
    break;
	case 13:		// easeInCircle
		ret_ease = easeInCircle[integerize(t,d)];
    break;
	case 14:		// easeOutCircle
		ret_ease = easeOutCircle[integerize(t,d)];
    break;
	case 15:		// easeInOutCircle
		ret_ease = easeInOutCircle[integerize(t,d)];
    break;
	case 16:		// easeInBack
		var s = 0;
		if (s==0) s = 1.70158;
		ret_ease = c*(t/=d)*t*((s+1)*t - s) + b;
    break;
	case 17:		// easeOutBack
		ret_ease = easeOutBack[integerize(t,d)];
    break;
	case 18:		// easeInOutBack
		ret_ease = easeInOutBack[integerize(t,d)];
    break;
	case 19:	//easeInElastic
		ret_ease = easeInElasticArray[integerize(t, d)];
    break;
	case 20:	//easeOutElastic
    ret_ease = easeOutElasticArray[integerize(t,d)];
    break;
	case 21:	//easeInOutElastic
    ret_ease = easeInOutElasticArray[integerize(t,d)];
    break;
	case 22:	//easeInBounce
		ret_ease = c - easeOutBounceArray[integerize(d-t, d)] + b;
    break;
	case 23:	//easeOutBounce
		ret_ease = easeOutBounceArray[integerize(t, d)];
    break;
	case 24:	//easeInOutBounce
		if (t < d/2)
      ret_ease = (c - easeOutBounceArray[integerize(d-(t*2), d)] + b) * 0.5 +b;
		else
      ret_ease = easeOutBounceArray[integerize(t*2-d, d)] * .5 + c*.5 + b;
    break;
	case 25:	//easeInSmoothstep
		var mt = (t/d) / 2;
		ret_ease = (2*(mt * mt * (3 - 2*mt)));
    break;
	case 26:	//easeOutSmoothstep
		var mt = ((t/d) + 1) / 2;
		ret_ease = ((2*(mt * mt * (3 - 2*mt))) - 1);
    break;
	case 27:	//easeInOutSmoothstep
		var mt = (t / d);
		ret_ease = (mt * mt * (3 - 2*mt));
    break;
	};
  if (flip)
    return (c - b) - ret_ease
  else
    return ret_ease;
};
(function preCalculateArray() {
  var d = 1.0;
  var b = 0.0;
  var c = 1.0;
  var result = 0.0;
  var a = 0;
  var p = 0;
  var t = 0;
  var s = 0;
  for (var ti = 0; ti <= litetween_precision; ti++) {
    t = ti/litetween_precision;
  	if ((t/=d) < (1/2.75)) {
  		result = c*(7.5625*t*t) + b;
  	} else if (t < (2/2.75)) {
  		result = c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
  	} else if (t < (2.5/2.75)) {
  		result = c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
  	} else {
  		result = c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
  	}
    easeOutBounceArray[ti] = easeOutBounce(ti/litetween_precision, b, c, d);
    t = ti/litetween_precision; a = 0; p = 0;
    if (t==0) result = b; if ((t/=d)==1) result = b+c;
    if (p==0) p=d*.3;	if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
    else var s = p/(2*Math.PI) * Math.asin (c/a);
		result = -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    easeInElasticArray[ti] = result;
    t = ti/litetween_precision; a = 0; p = 0;
		if (t==0) result= b;  if ((t/=d)==1) result= b+c;  if (p == 0) p=d*.3;
		if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		result= (a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b);
    easeOutElasticArray[ti] = result;
    t = ti/litetween_precision; a = 0; p = 0;
		if (t==0) result = b;
		if ((t/=d/2)==2) result = b+c;
		if (p==0) p=d*(.3*1.5);
		if (a==0 || a < Math.abs(c)) { a=c; var s=p/4; }
		else var s = p/(2*Math.PI) * Math.asin (c/a);
		if (t < 1)
      result = -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b
    else
		  result = a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
    easeInOutElasticArray[ti] = result;
    t = ti/litetween_precision; easeInCircle[ti] = -(Math.sqrt(1-t*t) - 1);
    t = ti/litetween_precision; easeOutCircle[ti] = Math.sqrt(1 - ((t-1)*(t-1)));
    t = ti/litetween_precision;
		if ((t/=d/2) < 1) result = -c/2 * (Math.sqrt(1 - t*t) - 1) + b
    else result = c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    easeInOutCircle[ti] = result;
    t = ti/litetween_precision; s = 0;
		if (s==0) s = 1.70158;
		result = c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    easeOutBack[ti] = result;
    t = ti/litetween_precision; s = 0; if (s==0) s = 1.70158;
		if ((t/=d/2) < 1)
      result = c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b
    else
		  result = c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    easeInOutBack[ti] = result;
	}
}())
var TweenObject = function()
{
	var constructor = function (tname, tweened, easefunc, initial, target, duration, enforce)
	{
    this.name = tname;
    this.value = 0;
    this.setInitial(initial);
    this.setTarget(target);
    this.easefunc = easefunc;
    this.tweened = tweened;
    this.duration = duration;
    this.progress = 0;
    this.state = 0;
    this.onStart = false;
    this.onEnd = false;
    this.onReverseStart = false;
    this.onReverseEnd = false;
    this.lastKnownValue = 0;
    this.lastKnownValue2 = 0;
    this.enforce = enforce;
    this.pingpong = 1.0;
    this.flipEase = false;
	}
	return constructor;
}();
(function () {
	TweenObject.prototype = {
	};
  TweenObject.prototype.flipTarget = function ()
  {
    var x1 = this.initialparam1;
    var x2 = this.initialparam2;
    this.initialparam1 = this.targetparam1;
    this.initialparam2 = this.targetparam2;
    this.targetparam1 = x1;
    this.targetparam2 = x2;
    this.lastKnownValue = 0;
    this.lastKnownValue2 = 0;
  }
  TweenObject.prototype.setInitial = function (initial)
  {
    this.initialparam1 = parseFloat(initial.split(",")[0]);
    this.initialparam2 = parseFloat(initial.split(",")[1]);
		this.lastKnownValue = 0;
		this.lastKnownValue2 = 0;
  }
  TweenObject.prototype.setTarget = function (target)
  {
    this.targetparam1 = parseFloat(target.split(",")[0]);
    this.targetparam2 = parseFloat(target.split(",")[1]);
    if (isNaN(this.targetparam2)) this.targetparam2 = this.targetparam1;
  }
  TweenObject.prototype.OnTick = function(dt)
  {
    if (this.state === 0) return -1.0;
    if (this.state === 1)
      this.progress += dt;
    if (this.state === 2)
      this.progress -= dt;
    if (this.state === 3) {
      this.state = 0;
    }
    if ((this.state === 4) || (this.state === 6)) {
      this.progress += dt * this.pingpong;
    }
    if (this.state === 5) {
      this.progress += dt * this.pingpong;
    }
    if (this.progress < 0) {
      this.progress = 0;
      if (this.state === 4) {
        this.pingpong = 1;
      } else if (this.state === 6) {
        this.pingpong = 1;
        this.flipEase = false;
      } else {
        this.state = 0;
      }
      this.onReverseEnd = true;
      return 0.0;
    } else if (this.progress > this.duration) {
      this.progress = this.duration;
      if (this.state === 4) {
        this.pingpong = -1;
      } else if (this.state === 6) {
        this.pingpong = -1;
        this.flipEase = true;
      } else if (this.state === 5) {
        this.progress = 0.0;
      } else {
        this.state = 0;
      }
      this.onEnd = true;
      return 1.0;
    } else {
      if (this.flipEase) {
        var factor = easeFunc(this.easefunc, this.duration - this.progress, 0, 1, this.duration, this.flipEase);
      } else {
        var factor = easeFunc(this.easefunc, this.progress, 0, 1, this.duration, this.flipEase);
      }
      return factor;
    }
  };
}());
;
;
function trim (str) {
    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
}
cr.behaviors.lunarray_LiteTween = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.lunarray_LiteTween.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
		this.i = 0;		// progress
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
    this.playmode = this.properties[0];
    this.active = (this.playmode == 1) || (this.playmode == 2) || (this.playmode == 3) || (this.playmode == 4);
		this.tweened = this.properties[1]; // 0=Position|1=Size|2=Width|3=Height|4=Angle|5=Opacity|6=Value only|7=Horizontal|8=Vertical|9=Scale
		this.easing = this.properties[2];
		this.target = this.properties[3];
		this.targetmode = this.properties[4];
    this.useCurrent = false;
    if (this.targetmode === 1) this.target = "relative("+this.target+")";
		this.duration = this.properties[5];
		this.enforce = (this.properties[6] === 1);
    this.value = 0;
    this.tween_list = {};
    this.addToTweenList("default", this.tweened, this.easing, "current", this.target, this.duration, this.enforce);
    if (this.properties[0] === 1) this.startTween(0)
    if (this.properties[0] === 2) this.startTween(2)
    if (this.properties[0] === 3) this.startTween(3)
    if (this.properties[0] === 4) this.startTween(4)
	};
	behinstProto.parseCurrent = function(tweened, parseText)
  {
    if (parseText === undefined) parseText = "current";
    var parsed = trim(parseText);
    parseText = trim(parseText);
    var value = this.value;
    if (parseText === "current") {
      switch (tweened) {
        case 0: parsed = this.inst.x + "," + this.inst.y; break;
        case 1: parsed = this.inst.width + "," + this.inst.height; break;
        case 2: parsed = this.inst.width + "," + this.inst.height; break;
        case 3: parsed = this.inst.width + "," + this.inst.height; break;
        case 4: parsed = cr.to_degrees(this.inst.angle) + "," + cr.to_degrees(this.inst.angle); break;
        case 5: parsed = (this.inst.opacity*100) + "," + (this.inst.opacity*100); break;
        case 6: parsed = value + "," + value; break;
        case 7: parsed = this.inst.x + "," + this.inst.y; break;
        case 8: parsed = this.inst.x + "," + this.inst.y; break;
        case 9:
          if (this.inst.curFrame !== undefined)
            parsed = (this.inst.width/this.inst.curFrame.width) + "," +(this.inst.height/this.inst.curFrame.height)
          else
            parsed = "1,1";
          break;
        default:  break;
      }
    }
    if (parseText.substring(0,8) === "relative") {
      var param1 = parseText.match(/\((.*?)\)/);
      if (param1) {
        var relativex = parseFloat(param1[1].split(",")[0]);
        var relativey = parseFloat(param1[1].split(",")[1]);
      }
      if (isNaN(relativex)) relativex = 0;
      if (isNaN(relativey)) relativey = 0;
      switch (tweened) {
        case 0: parsed = (this.inst.x+relativex) + "," + (this.inst.y+relativey); break;
        case 1: parsed = (this.inst.width+relativex) + "," + (this.inst.height+relativey); break;
        case 2: parsed = (this.inst.width+relativex) + "," + (this.inst.height+relativey); break;
        case 3: parsed = (this.inst.width+relativex) + "," + (this.inst.height+relativey); break;
        case 4: parsed = (cr.to_degrees(this.inst.angle)+relativex) + "," + (cr.to_degrees(this.inst.angle)+relativey); break;
        case 5: parsed = (this.inst.opacity*100+relativex) + "," + (this.inst.opacity*100+relativey); break;
        case 6: parsed = value+relativex + "," + value+relativex; break;
        case 7: parsed = (this.inst.x+relativex) + "," + (this.inst.y); break;
        case 8: parsed = (this.inst.x) + "," + (this.inst.y+relativex); break;
        case 9: parsed = (relativex) + "," + (relativey); break;
        default:  break;
      }
    }
    return parsed;
  };
	behinstProto.addToTweenList = function(tname, tweened, easing, init, targ, duration, enforce)
  {
    init = this.parseCurrent(tweened, init);
    targ = this.parseCurrent(tweened, targ);
    if (this.tween_list[tname] !== undefined) {
      delete this.tween_list[tname]
    }
    this.tween_list[tname] = new TweenObject(tname, tweened, easing, init, targ, duration, enforce);
    this.tween_list[tname].dt = 0;
  };
	behinstProto.saveToJSON = function ()
	{
	};
	behinstProto.loadFromJSON = function (o)
	{
	};
	behinstProto.setProgressTo = function (mark)
	{
    if (mark > 1.0) mark = 1.0;
    if (mark < 0.0) mark = 0.0;
    for (var i in this.tween_list) {
      var inst = this.tween_list[i];
      inst.lastKnownValue = 0;
      inst.lastKnownValue2 = 0;
      inst.state = 3;
      inst.progress = mark * inst.duration;
      var factor = inst.OnTick(0);
      this.updateTween(inst, factor);
    }
  }
	behinstProto.startTween = function (startMode)
	{
    for (var i in this.tween_list) {
      var inst = this.tween_list[i];
      if (this.useCurrent) {
        var init = this.parseCurrent(inst.tweened, "current");
        var target = this.parseCurrent(inst.tweened, this.target);
        inst.setInitial(init);
        inst.setTarget(target);
      }
      if (startMode === 0) {
        inst.progress = 0.000001;
        inst.lastKnownValue = 0;
        inst.lastKnownValue2 = 0;
        inst.onStart = true;
        inst.state = 1;
      }
      if (startMode === 1) {
        inst.state = 1;
      }
      if ((startMode === 2) || (startMode === 4)) {
        inst.progress = 0.000001;
        inst.lastKnownValue = 0;
        inst.lastKnownValue2 = 0;
        inst.onStart = true;
        if (startMode == 2) inst.state = 4; //state ping pong
        if (startMode == 4) inst.state = 6; //state flip flop
      }
      if (startMode === 3) {
        inst.progress = 0.000001;
        inst.lastKnownValue = 0;
        inst.lastKnownValue2 = 0;
        inst.onStart = true;
        inst.state = 5;
      }
    }
  }
	behinstProto.stopTween = function (stopMode)
	{
    for (var i in this.tween_list) {
      var inst = this.tween_list[i];
      if (stopMode === 1) inst.progress = 0.0;
      if (stopMode === 2) inst.progress = inst.duration;
      inst.state = 3;
      var factor = inst.OnTick(0);
      this.updateTween(inst, factor);
    }
  }
	behinstProto.reverseTween = function(reverseMode)
	{
    for (var i in this.tween_list) {
      var inst = this.tween_list[i];
      if (reverseMode === 1) {
        inst.progress = inst.duration;
        inst.lastKnownValue = 0;
        inst.lastKnownValue2 = 0;
        inst.onReverseStart = true;
      }
      inst.state = 2;
    }
  }
	behinstProto.updateTween = function (inst, factor)
	{
    if (inst.tweened === 0) {
      if (inst.enforce) {
	      this.inst.x = inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor;
        this.inst.y = inst.initialparam2 + (inst.targetparam2 - inst.initialparam2) * factor;
      } else {
        this.inst.x += ((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue;
        this.inst.y += ((inst.targetparam2 - inst.initialparam2) * factor) - inst.lastKnownValue2;
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
        inst.lastKnownValue2 = ((inst.targetparam2 - inst.initialparam2) * factor);
      }
    } else if (inst.tweened === 1) {
      if (inst.enforce) {
  			this.inst.width = inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor;
	   		this.inst.height = inst.initialparam2 + (inst.targetparam2 - inst.initialparam2) * factor;
      } else {
      	this.inst.width += ((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue;
      	this.inst.height += ((inst.targetparam2 - inst.initialparam2) * factor) - inst.lastKnownValue2;
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
        inst.lastKnownValue2 = ((inst.targetparam2 - inst.initialparam2) * factor);
      }
    } else if (inst.tweened === 2) {
      if (inst.enforce) {
      	this.inst.width = inst.initialparam1 + ((inst.targetparam1 - inst.initialparam1) * factor);
      } else {
      	this.inst.width += ((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue;
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
      }
    } else if (inst.tweened === 3) {
      if (inst.enforce) {
      	this.inst.height = inst.initialparam2 + ((inst.targetparam2 - inst.initialparam2) * factor);
      } else {
      	this.inst.height += ((inst.targetparam2 - inst.initialparam2) * factor) - inst.lastKnownValue2;
        inst.lastKnownValue2 = ((inst.targetparam2 - inst.initialparam2) * factor);
      }
    } else if (inst.tweened === 4) {
      if (inst.enforce) {
  		  var tangle = inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor;
  		  this.inst.angle = cr.clamp_angle(cr.to_radians(tangle));
      } else {
  		  var tangle = ((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue;
  		  this.inst.angle = cr.clamp_angle(this.inst.angle + cr.to_radians(tangle));
        inst.lastKnownValue = (inst.targetparam1 - inst.initialparam1) * factor;
      }
    } else if (inst.tweened === 5) {
      if (inst.enforce) {
  		  this.inst.opacity = (inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor) / 100;
      } else {
  		  this.inst.opacity += (((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue) / 100;
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
      }
    } else if (inst.tweened === 6) {
      if (inst.enforce) {
  		  this.value = (inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor);
      } else {
  		  this.value += (((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue);
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
      }
    } else if (inst.tweened === 7) {
      if (inst.enforce) {
	      this.inst.x = inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor;
      } else {
        this.inst.x += ((inst.targetparam1 - inst.initialparam1) * factor) - inst.lastKnownValue;
        inst.lastKnownValue = ((inst.targetparam1 - inst.initialparam1) * factor);
      }
    } else if (inst.tweened === 8) {
      if (inst.enforce) {
        this.inst.y = inst.initialparam2 + (inst.targetparam2 - inst.initialparam2) * factor;
      } else {
        this.inst.y += ((inst.targetparam2 - inst.initialparam2) * factor) - inst.lastKnownValue2;
        inst.lastKnownValue2 = ((inst.targetparam2 - inst.initialparam2) * factor);
      }
    } else if (inst.tweened === 9) {
      var scalex = inst.initialparam1 + (inst.targetparam1 - inst.initialparam1) * factor;
      var scaley = inst.initialparam2 + (inst.targetparam2 - inst.initialparam2) * factor;
      if (this.inst.width < 0) scalex = inst.initialparam1 + (inst.targetparam1 + inst.initialparam1) * -factor;
      if (this.inst.height < 0)  scaley = inst.initialparam2 + (inst.targetparam2 + inst.initialparam2) * -factor;
      if (inst.enforce) {
        this.inst.width = this.inst.curFrame.width * scalex;
        this.inst.height = this.inst.curFrame.height * scaley;
      } else {
        if (this.inst.width < 0) {
      	  this.inst.width = scalex * (this.inst.width / (-1+inst.lastKnownValue));
          inst.lastKnownValue = scalex + 1
        } else {
      	  this.inst.width = scalex * (this.inst.width / (1+inst.lastKnownValue));
          inst.lastKnownValue = scalex - 1;
        }
        if (this.inst.height < 0) {
          this.inst.height = scaley * (this.inst.height / (-1+inst.lastKnownValue2));
          inst.lastKnownValue2 = scaley + 1
        } else {
          this.inst.height = scaley * (this.inst.height / (1+inst.lastKnownValue2));
          inst.lastKnownValue2 = scaley - 1;
        }
      }
    }
    this.inst.set_bbox_changed();
  }
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
    var inst = this.tween_list["default"];
    if (inst.state !== 0) {
      if (inst.onStart) {
  			this.runtime.trigger(cr.behaviors.lunarray_LiteTween.prototype.cnds.OnStart, this.inst);
        inst.onStart = false;
      }
      if (inst.onReverseStart) {
  		  this.runtime.trigger(cr.behaviors.lunarray_LiteTween.prototype.cnds.OnReverseStart, this.inst);
        inst.onReverseStart = false;
      }
      this.active = (inst.state == 1) || (inst.state == 2) || (inst.state == 4) || (inst.state == 5) || (inst.state == 6);
      var factor = inst.OnTick(dt);
      this.updateTween(inst, factor);
      if (inst.onEnd) {
  		  this.runtime.trigger(cr.behaviors.lunarray_LiteTween.prototype.cnds.OnEnd, this.inst);
        inst.onEnd = false;
      }
      if (inst.onReverseEnd) {
  		  this.runtime.trigger(cr.behaviors.lunarray_LiteTween.prototype.cnds.OnReverseEnd, this.inst);
        inst.onReverseEnd = false;
      }
    }
	};
	behaviorProto.cnds = {};
	var cnds = behaviorProto.cnds;
	cnds.IsActive = function ()
	{
		return (this.tween_list["default"].state !== 0);
	};
	cnds.CompareProgress = function (cmp, v)
	{
    var inst = this.tween_list["default"];
		return cr.do_cmp((inst.progress / inst.duration), cmp, v);
	};
	cnds.OnStart = function ()
	{
    if (this.tween_list["default"] === undefined)
      return false;
    return this.tween_list["default"].onStart;
	};
	cnds.OnReverseStart = function ()
	{
    if (this.tween_list["default"] === undefined)
      return false;
    return this.tween_list["default"].onReverseStart;
	};
  cnds.OnEnd = function ()
	{
    if (this.tween_list["default"] === undefined)
      return false;
    return this.tween_list["default"].onEnd;
	};
  cnds.OnReverseEnd = function ()
	{
    if (this.tween_list["default"] === undefined)
      return false;
    return this.tween_list["default"].onReverseEnd;
	};
	behaviorProto.acts = {};
	var acts = behaviorProto.acts;
	acts.Start = function (startmode, current)
	{
    this.useCurrent = (current == 1);
    this.startTween(startmode);
	};
	acts.Stop = function (stopmode)
	{
    this.stopTween(stopmode);
	};
	acts.Reverse = function (revMode)
	{
    this.reverseTween(revMode);
	};
 	acts.ProgressTo = function (progress)
	{
    this.setProgressTo(progress);
	};
	acts.SetDuration = function (x)
	{
    if (isNaN(x)) return;
    if (x < 0) return;
    if (this.tween_list["default"] === undefined) return;
		this.tween_list["default"].duration = x;
	};
	acts.SetEnforce = function (x)
	{
    if (this.tween_list["default"] === undefined) return;
		this.tween_list["default"].enforce = (x===1);
	};
	acts.SetInitial = function (x)
	{
    if (this.tween_list["default"] === undefined) return;
    var init = this.parseCurrent(this.tween_list["default"].tweened, x);
		this.tween_list["default"].setInitial(init);
	};
	acts.SetTarget = function (targettype, absrel, x)
	{
    if (this.tween_list["default"] === undefined) return;
    if (isNaN(x)) return;
    var inst = this.tween_list["default"];
    var parsed = x + "";
    this.targetmode = absrel;
    var x1 = "";
    var x2 = "";
    if (absrel === 1) {
      this.target = "relative(" + parsed + ")";
      switch (targettype) {
        case 0: x1 = (this.inst.x + x); x2 = inst.targetparam2; break;
        case 1: x1 = inst.targetparam1; x2 = (this.inst.y + x); break;
        case 2: x1 = "" + cr.to_degrees(this.inst.angle + cr.to_radians(x)); x2 = x1; break; //angle
        case 3: x1 = "" + (this.inst.opacity*100) + x; x2 = x1; break; //opacity
        case 4: x1 = (this.inst.width + x); x2 = inst.targetparam2; break; //width
        case 5: x1 = inst.targetparam1; x2 = (this.inst.height + x); break; //height
        case 6: x1 = x; x2 = x; break; //value
        default:  break;
      }
      parsed = x1 + "," + x2;
    } else {
      switch (targettype) {
        case 0: x1 = x; x2 = inst.targetparam2; break;
        case 1: x1 = inst.targetparam1; x2 = x; break;
        case 2: x1 = x; x2 = x; break; //angle
        case 3: x1 = x; x2 = x; break; //opacity
        case 4: x1 = x; x2 = inst.targetparam2; break; //width
        case 5: x1 = inst.targetparam1; x2 = x; break; //height
        case 6: x1 = x; x2 = x; break; //value
        default:  break;
      }
      parsed = x1 + "," + x2;
      this.target = parsed;
    }
    var init = this.parseCurrent(this.tween_list["default"].tweened, "current");
    var targ = this.parseCurrent(this.tween_list["default"].tweened, parsed);
 		inst.setInitial(init);
 		inst.setTarget(targ);
	};
	acts.SetTweenedProperty = function (x)
	{
    if (this.tween_list["default"] === undefined) return;
		this.tween_list["default"].tweened = x;
	};
	acts.SetEasing = function (x)
	{
    if (this.tween_list["default"] === undefined) return;
		this.tween_list["default"].easefunc = x;
	};
 	acts.SetValue = function (x)
	{
    var inst = this.tween_list["default"];
		this.value = x;
    if (inst.tweened === 6)
      inst.setInitial( this.parseCurrent(inst.tweened, "current") );
	};
	acts.SetParameter = function (tweened, easefunction, target, duration, enforce)
	{
    if (this.tween_list["default"] === undefined) {
      this.addToTweenList("default", tweened, easefunction, initial, target, duration, enforce, 0);
    } else {
      var inst = this.tween_list["default"];
      inst.tweened = tweened;
  		inst.easefunc = easefunction;
      inst.setInitial( this.parseCurrent(tweened, "current") );
      inst.setTarget( this.parseCurrent(tweened, target) );
      inst.duration = duration;
      inst.enforce = (enforce === 1);
    }
	};
	behaviorProto.exps = {};
	var exps = behaviorProto.exps;
	exps.Progress = function (ret)
	{
    var progress = this.tween_list["default"].progress/this.tween_list["default"].duration;
    ret.set_float(progress);
	};
	exps.Duration = function (ret)
	{
    ret.set_float(this.tween_list["default"].duration);
	};
	exps.Target = function (ret)
	{
    var inst = this.tween_list["default"];
    var parsed = "N/A";
    switch (inst.tweened) {
      case 0: parsed = inst.targetparam1; break;
      case 1: parsed = inst.targetparam2; break;
      case 2: parsed = inst.targetparam1; break;
      case 3: parsed = inst.targetparam1; break;
      case 4: parsed = inst.targetparam1; break;
      case 5: parsed = inst.targetparam2; break;
      case 6: parsed = inst.targetparam1; break;
      default:  break;
    }
    ret.set_float(parsed);
	};
	exps.Value = function (ret)
	{
    var tval = this.value;
    ret.set_float(tval);
	};
}());
;
;
cr.behaviors.mn2dCarPhysics = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.mn2dCarPhysics.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.MaxSpeed					= this.properties[0];
		this.MaxSteering	 			= mn2dMath.PI / this.properties[1];
		this.SteerSpeed					= this.properties[2];
		this.Accelerate 				= this.properties[3];
		this.BrakeReverse 				= this.properties[4];
		this.FrictionAnchorXpoint		= this.properties[6];
		this.FrictionAnchorYpoint		= this.properties[7];
		this.MaxSkidTorque				= this.properties[8];
		this.MaxSkidForce				= this.properties[9];
		this.LowestTranslationJoint		= this.properties[11];
		this.HighestTranslationJoint	= this.properties[12];
		this.MaxTorqueForFrontWheel		= this.properties[13];
		this.MaxTorqueForBackWheel		= this.properties[14];
		this.BodyTorqueOffset			= this.properties[15];
		this.TopDownCarIsActive		= false;
		this.SideViewCarIsActive	= false;
		this.BodyObject				= null;
		this.LeftForwardWheelObject	= null;
		this.RightForwardWheelObject= null;
		this.LeftBackWheelObject	= null;
		this.RightBackWheelObject	= null;
		this.FrontWheelAxelObject	= null;
		this.BackWheelAxelObject	= null;
		this.LeftWheelJoint 		= null;
		this.RightWheelJoint 		= null;
		this.LeftBackWheelJoint 	= null;
		this.RightBackWheelJoint 	= null;
		this.FrontWheelAxelJoint	= null;
		this.BackWheelAxelJoint		= null;
		this.FrontBodyAxelJoint		= null;
		this.BackBodyAxelJoint		= null;
		this.PhysWorld				= null;
		this.PhysBody 				= null;
		this.PhysLFWheel			= null;
		this.PhysRFWheel			= null;
		this.PhysLBWheel			= null;
		this.PhysRBWheel			= null;
		this.PhysFrontWheelAxel		= null;
		this.PhysBackWheelAxel		= null;
		this.FrictionJoint			= null;
		this.LFWheelFrictionJoint	= null;
		this.RFWheelFrictionJoint	= null;
		this.LBWheelFrictionJoint	= null;
		this.RBWheelFrictionJoint	= null;
		this.BodyPhysicsInstance			= null;
		this.LFWheelPhysicsInstance			= null;
		this.RFWheelPhysicsInstance			= null;
		this.LBWheelPhysicsInstance			= null;
		this.RBWheelPhysicsInstance			= null;
		this.FrontWheelAxelPhysicsInstance	= null;
		this.BackWheelAxelPhysicsInstance	= null;
		this.LFWheelController		= null;
		this.RFWheelController		= null;
		this.LBWheelController		= null;
		this.RBWheelController		= null;
		this.WheelController		= null;
		this.CarInputIsActive		= true;
		this.MaxMotorTorque			= 0.0;
		this.EngineSpeed			= 0.0;
		this.CurrentSpeed			= 0.0;
		this.PreviousEngineSpeed	= 0.0;
		this.SteeringAngle			= 0.0;
		this.TotalFriction			= 0.0;
		this.FrontWheelFriction		= 0.0;
		this.BackWheelFriction		= 0.0;
		this.TotalLinearDamp		= 0.0;
		this.PreviosXposition		= this.inst.x;
		this.PreviosYposition		= this.inst.y;
		this.DefaultFriction		= 0.0;
	};
	behinstProto.tick = function ()
	{
		var dt = this.runtime.getDt(this.inst);
		if(this.TopDownCarIsActive == true)
		{
			if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}
			/* CURRENTLY DISABLED DUE TO NEW BUILD VERSION WAS RELEASED BY SCIRRA, SO THIS *HACK* IS NOT SUSTAINABLE IN THE LONG RUN */
			/*
			if(this.LFWheelPhysicsInstance.BodyRecreated == true || this.RFWheelPhysicsInstance.BodyRecreated == true ||
				this.LBWheelPhysicsInstance.BodyRecreated == true || this.RBWheelPhysicsInstance.BodyRecreated == true)
			{
				var TempEngineSpeed 	= this.EngineSpeed;
				var TempSteeringAngle	= this.SteeringAngle;
				this.CreateTopDownCarPhysicsInstance();
				this.CurrentSpeed		= mn2dMath.Distance2D(this.inst.x, this.inst.y, this.PreviosXposition, this.PreviosYposition);
				this.EngineSpeed 		= TempEngineSpeed;
				this.SteeringAngle		= TempSteeringAngle;
			}
			*/
			this.CalculateFrictions();
			this.UpdateTopDownCarPhysicsInstace();
			this.UpdateCarVariables();
		}
		else if(this.SideViewCarIsActive == true)
		{
			if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}
			this.CalculateFrictions();
			this.UpdateSideViewCarPhysicsInstace();
			this.UpdateCarVariables();
		}
	};
	behaviorProto.cnds = {};
	var cnds = behaviorProto.cnds;
	cnds.IsCarPhysicsInputActive 						= function ()		{return this.CarInputIsActive;};
	behaviorProto.acts = {};
	var acts = behaviorProto.acts;
	acts.SetMaxSteerSpeedValue							= function(Value)												{this.SteerSpeed = Value;}
	acts.SetMaxHorsepowerValue							= function(Value)												{this.MaxSpeed = Value;}
	acts.SetMaxSteeringValue							= function(Value)												{this.MaxSteering = mn2dMath.PI / Value;}
	acts.TurnRightInProcentageCarPhysicsInstance		= function(Procentage)											{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetRightTurnSteering(Procentage);return;}
	acts.TurnRightCarPhysicsInstance					= function()													{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetRightTurnSteering(100.0);return;}
	acts.TurnLeftInProcentageCarPhysicsInstance			= function(Procentage)											{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetLeftTurnSteering(Procentage);return;}
	acts.TurnLeftCarPhysicsInstance						= function()													{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetLeftTurnSteering(100.0);return;}
	acts.BrakeReverseInProcentageCarPhysicsInstance		= function(Procentage)											{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetBrakeReverseSpeed(Procentage);return;}
	acts.BrakeReverseCarPhysicsInstance					= function()													{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetBrakeReverseSpeed(100.0);return;}
	acts.AccelerateInProcentageCarPhysicsInstance		= function(Procentage)											{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetAccelerationSpeed(Procentage);return;}
	acts.AccelerateCarPhysicsInstance 					= function()													{if(this.CarInputIsActive == false){return;}if(this.TopDownCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}}if(this.SideViewCarIsActive == true){if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}}this.SetAccelerationSpeed(100.0);return;}
	acts.ActivateCarPhysicsInput						= function(ActivateCar)											{if(ActivateCar == 0){this.CarInputIsActive = false;}if(ActivateCar == 1){this.CarInputIsActive = true;}return;}
	acts.CreateTopDownCarPhysicsInstance 				= function(LFWheel, RFWheel, LBWheel, RBWheel, MaxMotorTorque)	{this.BodyObject = this.inst;this.LeftForwardWheelObject = LFWheel;this.RightForwardWheelObject = RFWheel;this.LeftBackWheelObject	= LBWheel;this.RightBackWheelObject	= RBWheel;this.MaxMotorTorque = MaxMotorTorque;this.CreateTopDownCarPhysicsInstance();this.TopDownCarIsActive = true;this.SideViewCarIsActive = false;/* Successfull */return}
	acts.CreateSideViewCarPhysicsInstance				= function(ForwardWheel, BackwardWheel, BackAxel, ForwardAxel)	{this.BodyObject = this.inst;this.LeftForwardWheelObject = BackwardWheel;this.RightForwardWheelObject = ForwardWheel;this.FrontWheelAxelObject = ForwardAxel;this.BackWheelAxelObject = BackAxel;this.CreateSideViewCarPhysicsInstance();this.TopDownCarIsActive = false;this.SideViewCarIsActive = true;/* Successfull */return;}
	acts.UpdateMaxTorqueForSideViewCarPhysicsInstance	= function(FrontMaxTorque, BackMaxTorque)						{this.MaxTorqueForFrontWheel = FrontMaxTorque;this.MaxTorqueForBackWheel = BackMaxTorque;return;}
	behaviorProto.exps = {};
	var exps = behaviorProto.exps;
	exps.GetPhysicsCarSpeed							= function (ret)			{ret.set_float(this.CurrentSpeed);}
	exps.GetFrontWheelAvgFriction					= function (ret)			{ret.set_float(this.FrontWheelFriction);}
	exps.GetBackWheelAvgFriction					= function (ret)			{ret.set_float(this.BackWheelFriction);}
	exps.GetWheelAvgFriction						= function (ret)			{ret.set_float(this.TotalFriction);}
	/* CAR PHYSICS SPECIFIC FUNCTIONS */
	behinstProto.UpdateCarVariables					= function()				{this.CurrentSpeed = mn2dMath.Distance2D(this.inst.x, this.inst.y, this.PreviosXposition, this.PreviosYposition);if(this.CurrentSpeed == 0.0){this.EngineSpeed = 0.0;}this.PreviosXposition	= this.inst.x;this.PreviosYposition 	= this.inst.y;var TotalSpeedOffset	= ((this.TotalFriction * this.BodyPhysicsInstance.linearDamping) + 0.1);if(this.EngineSpeed > 0){this.EngineSpeed -= TotalSpeedOffset;}if(this.EngineSpeed < 0){this.EngineSpeed += TotalSpeedOffset;}}
	behinstProto.SetRightTurnSteering				= function(Procentage)		{this.SteeringAngle = (this.MaxSteering * (Procentage/100.0));return;}
	behinstProto.SetLeftTurnSteering				= function(Procentage)		{this.SteeringAngle = -(this.MaxSteering * (Procentage/100.0));return;}
	behinstProto.SetBrakeReverseSpeed				= function(Procentage)		{this.EngineSpeed += (((this.FrontWheelFriction) * this.BrakeReverse) * (Procentage/100.0));if(this.EngineSpeed > this.MaxSpeed){this.EngineSpeed = this.MaxSpeed;}return;}
	behinstProto.SetAccelerationSpeed				= function(Procentage)		{this.EngineSpeed -= (((this.FrontWheelFriction) * this.Accelerate) * (Procentage/100.0));if(this.EngineSpeed < -this.MaxSpeed){this.EngineSpeed = -this.MaxSpeed;}return;}
	behinstProto.CalculateFrictions					= function()				{var LFWheelFriction = this.DefaultFriction;var RFWheelFriction = this.DefaultFriction;var LFWheelDampning = this.DefaultFriction;var RFWheelDampning = this.DefaultFriction;if(this.LFWheelPhysicsInstance != null){LFWheelFriction = this.LFWheelPhysicsInstance.friction;LFWheelDampning = this.LFWheelPhysicsInstance.linearDamping;}if(this.RFWheelPhysicsInstance != null){RFWheelFriction	= this.RFWheelPhysicsInstance.friction;RFWheelDampning = this.RFWheelPhysicsInstance.linearDamping;}var LBWheelFriction = this.DefaultFriction;var RBWheelFriction = this.DefaultFriction;var LBWheelDampning = this.DefaultFriction;var RBWheelDampning = this.DefaultFriction;if(this.LBWheelPhysicsInstance != null){LBWheelFriction = this.LBWheelPhysicsInstance.friction;LBWheelDampning = this.LBWheelPhysicsInstance.linearDamping;}if(this.RBWheelPhysicsInstance != null){RBWheelFriction = this.RBWheelPhysicsInstance.friction;RBWheelDampning = this.RBWheelPhysicsInstance.linearDamping;}this.FrontWheelFriction = ((LFWheelFriction + RFWheelFriction) / 2);this.BackWheelFriction 	= ((LBWheelFriction + RBWheelFriction) / 2);this.TotalFriction 		= ((LFWheelFriction + RFWheelFriction + LBWheelFriction + RBWheelFriction) / 4);this.TotalLinearDamp	= ((LFWheelDampning + RFWheelDampning + LBWheelDampning + RBWheelDampning) / 4.0);}
	behinstProto.UpdateSideViewCarPhysicsInstace	= function()
	{
		if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null){return;}
		this.FrontWheelAxelJoint.SetMotorSpeed(-this.EngineSpeed);
		this.BackWheelAxelJoint.SetMotorSpeed(-this.EngineSpeed);
		this.FrontWheelAxelJoint.SetMaxMotorTorque(this.MaxTorqueForFrontWheel);
 		this.BackWheelAxelJoint.SetMaxMotorTorque(this.MaxTorqueForBackWheel);
		this.BackBodyAxelJoint.SetMaxMotorForce(20+Math.abs(800*Math.pow(this.BackBodyAxelJoint.GetJointTranslation(), 2)));
		this.FrontBodyAxelJoint.SetMaxMotorForce(20+Math.abs(800*Math.pow(this.BackBodyAxelJoint.GetJointTranslation(), 2)));
		this.BackBodyAxelJoint.SetMotorSpeed(-4 * Math.pow(this.BackBodyAxelJoint.GetJointTranslation(), 1));
		this.FrontBodyAxelJoint.SetMotorSpeed((this.FrontBodyAxelJoint.GetMotorSpeed() - 10 * this.FrontBodyAxelJoint.GetJointTranslation())*0.4);
		this.PhysBody.ApplyTorque((this.BodyTorqueOffset * this.EngineSpeed));
	}
	behinstProto.UpdateTopDownCarPhysicsInstace	= function()
	{
		if(this.PhysWorld == null || this.PhysBody == null || this.PhysLFWheel == null || this.PhysRFWheel == null || this.PhysLBWheel == null || this.PhysRBWheel == null){return;}
		/* Driving */
		var LeftBodyTransform = this.PhysLFWheel.GetTransform();
		var LeftBodyDirection = LeftBodyTransform.R.col2.Copy();
		LeftBodyDirection.Multiply( this.EngineSpeed );
		this.PhysLFWheel.ApplyForce(LeftBodyDirection, this.PhysLFWheel.GetPosition());
		var RightBodyTransform = this.PhysRFWheel.GetTransform();
		var RightBodyDirection = RightBodyTransform.R.col2.Copy();
		RightBodyDirection.Multiply( this.EngineSpeed );
		this.PhysRFWheel.ApplyForce(RightBodyDirection, this.PhysRFWheel.GetPosition());
		/* Steering */
		var MotorSpeed = 0;
		MotorSpeed = this.SteeringAngle - this.LeftWheelJoint.GetJointAngle();
		this.LeftWheelJoint.SetMotorSpeed( (MotorSpeed) * this.SteerSpeed );
		MotorSpeed = 0;
		MotorSpeed = this.SteeringAngle - this.RightWheelJoint.GetJointAngle();
		this.RightWheelJoint.SetMotorSpeed( (MotorSpeed) * this.SteerSpeed );
		var dt = this.runtime.getDt(this.inst);
		var TimeStep = new Box2D.Dynamics.b2TimeStep(dt, 1.0 * dt /* dtRatio */, this.behavior.velocityIterations, this.behavior.positionIterations, false);
		this.WheelController.SetAxisAligned((this.BackWheelFriction * 100.0), (this.BackWheelFriction * 100.0));
		this.WheelController.Step(TimeStep);
		this.LFWheelFrictionJoint.InitVelocityConstraints(TimeStep);
		this.RFWheelFrictionJoint.InitVelocityConstraints(TimeStep);
		this.LBWheelFrictionJoint.InitVelocityConstraints(TimeStep);
		this.RBWheelFrictionJoint.InitVelocityConstraints(TimeStep);
		this.LFWheelFrictionJoint.SolveVelocityConstraints(TimeStep);
		this.RFWheelFrictionJoint.SolveVelocityConstraints(TimeStep);
		this.LBWheelFrictionJoint.SolveVelocityConstraints(TimeStep);
		this.RBWheelFrictionJoint.SolveVelocityConstraints(TimeStep);
		this.SteeringAngle 			= 0.0;
		this.PreviousEngineSpeed	= this.EngineSpeed;
		return;
	}
	behinstProto.SetPhysicsInstances				= function()			{for(var i = 0; i < this.inst.behavior_insts.length; i++){if(this.inst.behavior_insts[i].type.name == "Physics"){this.BodyPhysicsInstance	= this.inst.behavior_insts[i];this.PhysWorld				= this.inst.behavior_insts[i].world;this.PhysBody 				= this.inst.behavior_insts[i].body;break;}}/* If the main body does not belong to the physics world, there is no need to continue */if(this.PhysWorld == null){return;}if(this.LeftForwardWheelObject != null){var CurrentLFWheel = this.LeftForwardWheelObject.getFirstPicked();for(var i = 0; i < CurrentLFWheel.behavior_insts.length; i++){if(CurrentLFWheel.behavior_insts[i].type.name == "Physics"){this.LFWheelPhysicsInstance	= CurrentLFWheel.behavior_insts[i];this.PhysLFWheel 			= CurrentLFWheel.behavior_insts[i].body;break;}}}if(this.RightForwardWheelObject != null){var CurrentRFWheel = this.RightForwardWheelObject.getFirstPicked();for(var i = 0; i < CurrentRFWheel.behavior_insts.length; i++){if(CurrentRFWheel.behavior_insts[i].type.name == "Physics"){this.RFWheelPhysicsInstance	= CurrentRFWheel.behavior_insts[i];this.PhysRFWheel 			= CurrentRFWheel.behavior_insts[i].body;break;}}}if(this.LeftBackWheelObject != null){var CurrentLBWheel = this.LeftBackWheelObject.getFirstPicked();for(var i = 0; i < CurrentLBWheel.behavior_insts.length; i++){if(CurrentLBWheel.behavior_insts[i].type.name == "Physics"){this.LBWheelPhysicsInstance	= CurrentLBWheel.behavior_insts[i];this.PhysLBWheel 			= CurrentLBWheel.behavior_insts[i].body;break;}}}if(this.RightBackWheelObject != null){var CurrentRBWheel = this.RightBackWheelObject.getFirstPicked();for(var i = 0; i < CurrentRBWheel.behavior_insts.length; i++){if(CurrentRBWheel.behavior_insts[i].type.name == "Physics"){this.RBWheelPhysicsInstance	= CurrentRBWheel.behavior_insts[i];this.PhysRBWheel = CurrentRBWheel.behavior_insts[i].body;break;}}}if(this.FrontWheelAxelObject != null){var CurrentForwardAxel = this.FrontWheelAxelObject.getFirstPicked();for(var i = 0; i < CurrentForwardAxel.behavior_insts.length; i++){if(CurrentForwardAxel.behavior_insts[i].type.name == "Physics"){this.FrontWheelAxelPhysicsInstance	= CurrentForwardAxel.behavior_insts[i];this.PhysFrontWheelAxel 			= CurrentForwardAxel.behavior_insts[i].body;break;}}}if(this.BackWheelAxelObject != null){var CurrentBackwardAxel = this.BackWheelAxelObject.getFirstPicked();for(var i = 0; i < CurrentBackwardAxel.behavior_insts.length; i++){if(CurrentBackwardAxel.behavior_insts[i].type.name == "Physics"){this.BackWheelAxelPhysicsInstance	= CurrentBackwardAxel.behavior_insts[i];this.PhysBackWheelAxel = CurrentBackwardAxel.behavior_insts[i].body;break;}}}return;}
	behinstProto.CreateSideViewCarPhysicsInstance 	= function()
	{
		this.SetPhysicsInstances();
		if(this.PhysWorld == null){return;}
		this.CalculateFrictions();
		var BodyAxelJointDef = new Box2D.Dynamics.Joints.b2PrismaticJointDef();
		/*Front body axel joint */
		BodyAxelJointDef.Initialize(this.PhysBody, this.PhysFrontWheelAxel, this.PhysFrontWheelAxel.GetWorldCenter(), new Box2D.Common.Math.b2Vec2(mn2dMath.Cos(mn2dMath.PI/3), mn2dMath.Sin(mn2dMath.PI/3)));
		BodyAxelJointDef.lowerTranslation 	= this.LowestTranslationJoint;
        BodyAxelJointDef.upperTranslation 	= this.HighestTranslationJoint;
        BodyAxelJointDef.enableLimit 		= true;
        BodyAxelJointDef.enableMotor 		= true;
		this.FrontBodyAxelJoint			= this.PhysWorld.CreateJoint(BodyAxelJointDef);
		/* Back body axel joint */
		BodyAxelJointDef.Initialize(this.PhysBody, this.PhysBackWheelAxel, this.PhysBackWheelAxel.GetWorldCenter(), new Box2D.Common.Math.b2Vec2(-mn2dMath.Cos(mn2dMath.PI/3), mn2dMath.Sin(mn2dMath.PI/3)));
		this.BackBodyAxelJoint			= this.PhysWorld.CreateJoint(BodyAxelJointDef);
		/* Create motor joints */
		var WheelAxelJoint 				= new Box2D.Dynamics.Joints.b2RevoluteJointDef();
		WheelAxelJoint.enableMotor 		= true;
		/* Front wheel axel joint */
		WheelAxelJoint.Initialize(this.PhysFrontWheelAxel, this.PhysRFWheel, this.PhysRFWheel.GetWorldCenter());
		this.FrontWheelAxelJoint		= this.PhysWorld.CreateJoint(WheelAxelJoint);
		/* Back wheel axel joint */
		WheelAxelJoint.Initialize(this.PhysBackWheelAxel, this.PhysLFWheel, this.PhysLFWheel.GetWorldCenter());
		this.BackWheelAxelJoint			= this.PhysWorld.CreateJoint(WheelAxelJoint);
		/* Successfull */
		return;
	}
	behinstProto.CreateTopDownCarPhysicsInstance	= function()
	{
		/* If the main body does not belong to the physics world, there is no need to continue */
		this.SetPhysicsInstances();
		if(this.PhysWorld == null){return;}
		this.CalculateFrictions();
		var leftJointDef = new Box2D.Dynamics.Joints.b2RevoluteJointDef();
		leftJointDef.Initialize(this.PhysBody, this.PhysLFWheel, this.PhysLFWheel.GetWorldCenter());
		leftJointDef.enableMotor = true;
		leftJointDef.maxMotorTorque = this.MaxMotorTorque;
		leftJointDef.collideConnected = false;
		var rightJointDef = new Box2D.Dynamics.Joints.b2RevoluteJointDef();
		rightJointDef.Initialize(this.PhysBody, this.PhysRFWheel, this.PhysRFWheel.GetWorldCenter());
		rightJointDef.enableMotor = true;
		rightJointDef.maxMotorTorque = this.MaxMotorTorque;
		rightJointDef.collideConnected = false;
		this.LeftWheelJoint 	= this.PhysWorld.CreateJoint(leftJointDef);
		this.RightWheelJoint 	= this.PhysWorld.CreateJoint(rightJointDef);
		var leftRearJointDef = new Box2D.Dynamics.Joints.b2PrismaticJointDef();
		leftRearJointDef.Initialize(this.PhysBody, this.PhysLBWheel, this.PhysLBWheel.GetWorldCenter(), new Box2D.Common.Math.b2Vec2(1,0));
		leftRearJointDef.enableLimit = true;
		leftRearJointDef.lowerTranslation = leftRearJointDef.upperTranslation = 0;
		leftRearJointDef.collideConnected = false;
		var rightRearJointDef = new Box2D.Dynamics.Joints.b2PrismaticJointDef();
		rightRearJointDef.Initialize(this.PhysBody, this.PhysRBWheel, this.PhysRBWheel.GetWorldCenter(), new Box2D.Common.Math.b2Vec2(1,0));
		rightRearJointDef.enableLimit = true;
		rightRearJointDef.lowerTranslation = rightRearJointDef.upperTranslation = 0;
		rightRearJointDef.collideConnected = false;
		this.LeftBackWheelJoint 	= this.PhysWorld.CreateJoint(leftRearJointDef);
		this.RightBackWheelJoint 	= this.PhysWorld.CreateJoint(rightRearJointDef);
		/* DOCS. http://www.box2dflash.org/docs/2.1a/reference/ */
		var CurrentFriction = 0.0;
		CurrentFriction = this.LFWheelPhysicsInstance.friction;
		var LFWFrictionJointDef		= new Box2D.Dynamics.Joints.b2FrictionJointDef();
		LFWFrictionJointDef.Initialize(this.PhysBody, this.PhysLFWheel, Box2D.Common.Math.b2Vec2.Get(this.FrictionAnchorXpoint, this.FrictionAnchorYpoint));
		LFWFrictionJointDef.maxForce = this.MaxSkidTorque;
		LFWFrictionJointDef.maxTorque = this.MaxSkidForce;
		CurrentFriction = this.RFWheelPhysicsInstance.friction;
		var RFWFrictionJointDef		= new Box2D.Dynamics.Joints.b2FrictionJointDef();
		RFWFrictionJointDef.Initialize(this.PhysBody, this.PhysRFWheel, Box2D.Common.Math.b2Vec2.Get(this.FrictionAnchorXpoint, this.FrictionAnchorYpoint));
		RFWFrictionJointDef.maxForce = this.MaxSkidTorque;
		RFWFrictionJointDef.maxTorque = this.MaxSkidForce;
		CurrentFriction = this.LBWheelPhysicsInstance.friction;
		var LBWFrictionJointDef		= new Box2D.Dynamics.Joints.b2FrictionJointDef();
		LBWFrictionJointDef.Initialize(this.PhysBody, this.PhysLBWheel, Box2D.Common.Math.b2Vec2.Get(this.FrictionAnchorXpoint, this.FrictionAnchorYpoint));
		LBWFrictionJointDef.maxForce = this.MaxSkidTorque;
		LBWFrictionJointDef.maxTorque = this.MaxSkidForce;
		CurrentFriction = this.RBWheelPhysicsInstance.friction;
		var RBWFrictionJointDef		= new Box2D.Dynamics.Joints.b2FrictionJointDef();
		RBWFrictionJointDef.Initialize(this.PhysBody, this.PhysRBWheel, Box2D.Common.Math.b2Vec2.Get(this.FrictionAnchorXpoint, this.FrictionAnchorYpoint));
		RBWFrictionJointDef.maxForce = this.MaxSkidTorque;
		RBWFrictionJointDef.maxTorque = this.MaxSkidForce;
		this.LFWheelFrictionJoint	= new Box2D.Dynamics.Joints.b2FrictionJoint(LFWFrictionJointDef);
		this.RFWheelFrictionJoint	= new Box2D.Dynamics.Joints.b2FrictionJoint(RFWFrictionJointDef);
		this.LBWheelFrictionJoint	= new Box2D.Dynamics.Joints.b2FrictionJoint(LBWFrictionJointDef);
		this.RBWheelFrictionJoint	= new Box2D.Dynamics.Joints.b2FrictionJoint(RBWFrictionJointDef);
		this.WheelController = new Box2D.Dynamics.Controllers.b2TensorDampingController();
		this.WheelController.AddBody(this.PhysLFWheel);
		this.WheelController.AddBody(this.PhysRFWheel);
		this.WheelController.AddBody(this.PhysLBWheel);
		this.WheelController.AddBody(this.PhysRBWheel);
		this.WheelController.SetAxisAligned((this.BackWheelFriction * 100.0), (this.BackWheelFriction * 100.0));
		/* Successfull */
		return;
	}
/* 	************************************************************************
	mn2dMath Class
		Math helper class. Consists of different math functions.
		v1.0:
			+ PI definition
			+ Cos and sin calculations
			+ Lerp function
			+ Min function (float, float)
			+ Max function (float, float)
			+ Dot product calculation (Array, Array)
			+ Square root calculation
			+ Randomize function
			+ Randomize function for float
			+ Interpolator function (although identical to Lerp(), I will keep it for now)
			+ ToRadians converter function
			+ Transform2dVector function. Takes a mn2dVector and a mn2dMatrix as inparameter and returns a mn2dVector that is transformed by these two inparameters
	************************************************************************ */
var mn2dMath =
{
	"PI"				: 3.141592653589793,
	"Cos"				: function(Angle)								{return Math.cos(Angle);},
	"Sin"				: function(Angle)								{return Math.sin(Angle);},
	"Lerp" 				: function(a, b, f)								{return a + f * (b - a);},
	"Min"				: function(a, b)								{if( a < 0 && b >= 0){return a;}if(a >= 0 && b < 0){return b;}if(a < 0 && b < 0){if(a > b){return b;}return a;}if(a > b){return b;}	else{return a;}return a;},
	"Max"				: function(a, b)								{if( a < 0 && b >= 0){return b;}if(a >= 0 && b < 0){return a;}if(a < 0 && b < 0){if(a > b){return a;}return b;}if(a > b){return a;}	else{return b;}return a;},
	"Dot"				: function(a, b)								{var Result = 0;var Limit = mn2dMath.Min(a.length, b.length);for (var i = 0; i < Limit; i++){Result += a[i] * b[i];}return Result;},
	"Cross"				: function(x1, y1, x2, y2)						{/*(U,V)=(U.x*V.y-U.y*V.x)*/return( x1 * y2 - y1 * x2 );},
	"Normalize2D"		: function(x, y)								{return mn2dMath.Sqrt((x * x) + (y * y));},
	"Sqrt"				: function(Value)								{var a = Value;var x = 1;for(var i = 0; i < Value; i++){x = 0.5 * ( x+a / x );}return x;},
	"Randomize"			: function(MaxValue)							{return Math.floor(Math.random() * MaxValue)},
	"RandomizeFloat"	: function(MinValue, MaxValue)					{return MinValue + (MaxValue -MinValue)*Math.random()},
	"Interpolator" 		: function(StartValue, EndValue, Progression)	{return StartValue + (EndValue - StartValue) * Progression;},
	"ToDegrees"			: function(Radians)								{return (Radians * (180.0 / mn2dMath.PI));},
	"ToRadians"			: function(Angle)								{return (Angle * (mn2dMath.PI / 180.0));},
	"Transform2dVector"	: function(Vector, Matrix)						{var TransformedX = 0.0; var TransformedY = 0.0;var TransformedVector = new mn2dVector(0.0, 0.0); TransformedX = Vector.m_X * Matrix.m_Matrix[0] + Vector.m_Y * Matrix.m_Matrix[1];TransformedY = Vector.m_X * Matrix.m_Matrix[3] + Vector.m_Y * Matrix.m_Matrix[4];TransformedVector.SetNewPoint(TransformedX, TransformedY);return TransformedVector;},
	"Opposite"			: function(Value)								{return (Value * -1);},
	"ForwardVectorX"	: function(Angle)								{return mn2dMath.Cos(Angle);},
	"ForwardVectorY"	: function(Angle)								{return mn2dMath.Sin(Angle);},
	"Distance2D"		: function(x1, y1, x2, y2)						{var DistanceXaxis = (x1 - x2) * (x1 - x2);var DistanceYaxis = (y1 - y2) * (y1 - y2);return (mn2dMath.Sqrt((DistanceXaxis + DistanceYaxis)));}
};
}());
;
;
cr.behaviors.solid = function(runtime)
{
	this.runtime = runtime;
};
(function ()
{
	var behaviorProto = cr.behaviors.solid.prototype;
	behaviorProto.Type = function(behavior, objtype)
	{
		this.behavior = behavior;
		this.objtype = objtype;
		this.runtime = behavior.runtime;
	};
	var behtypeProto = behaviorProto.Type.prototype;
	behtypeProto.onCreate = function()
	{
	};
	behaviorProto.Instance = function(type, inst)
	{
		this.type = type;
		this.behavior = type.behavior;
		this.inst = inst;				// associated object instance to modify
		this.runtime = type.runtime;
	};
	var behinstProto = behaviorProto.Instance.prototype;
	behinstProto.onCreate = function()
	{
		this.inst.extra.solidEnabled = (this.properties[0] !== 0);
	};
	behinstProto.tick = function ()
	{
	};
	function Cnds() {};
	Cnds.prototype.IsEnabled = function ()
	{
		return this.inst.extra.solidEnabled;
	};
	behaviorProto.cnds = new Cnds();
	function Acts() {};
	Acts.prototype.SetEnabled = function (e)
	{
		this.inst.extra.solidEnabled = !!e;
	};
	behaviorProto.acts = new Acts();
}());
cr.getProjectModel = function() { return [
	null,
	"LoaderLayout",
	[
	[
		cr.plugins_.Audio,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Browser,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Keyboard,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Mouse,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Particles,
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.pix_spilgames,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Rex_Function,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.Sprite,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		false
	]
,	[
		cr.plugins_.SpriteFontPlus,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.TiledBg,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		true,
		true
	]
,	[
		cr.plugins_.Touch,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
,	[
		cr.plugins_.WebStorage,
		true,
		false,
		false,
		false,
		false,
		false,
		false,
		false,
		false
	]
	],
	[
	[
		"t0",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			929721490461835,
			[
				["images/up-sheet0.png", 6551, 0, 0, 120, 120, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			1579377280681709
		]
,		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			9302169811444891
		]
		],
		false,
		false,
		5659729647216961,
		[],
		null
	]
,	[
		"t1",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			767164806848218,
			[
				["images/down-sheet0.png", 6263, 0, 0, 120, 120, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			4775439016203282
		]
,		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			5841074597711295
		]
		],
		false,
		false,
		2498805087559624,
		[],
		null
	]
,	[
		"t2",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8591657066372587,
			[
				["images/leftturn-sheet0.png", 5514, 0, 0, 120, 120, 1, 0.5, 0.5,[],[0.5,0.5,-0.5,0.5,-0.5,-0.5,0.5,-0.5],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			5947832313428262
		]
,		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			7042154419814717
		]
		],
		false,
		false,
		7386817005394908,
		[],
		null
	]
,	[
		"t3",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7918812448153234,
			[
				["images/rightturn-sheet0.png", 5508, 0, 0, 120, 120, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			7382716359525102
		]
,		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			4882561791240866
		]
		],
		false,
		false,
		6487168466375779,
		[],
		null
	]
,	[
		"t4",
		cr.plugins_.Touch,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		4397608313020756,
		[],
		null
		,[0]
	]
,	[
		"t5",
		cr.plugins_.Mouse,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		2756163114508312,
		[],
		null
		,[]
	]
,	[
		"t6",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			7837583241348065,
			[
				["images/parkingslot-sheet0.png", 8946, 102, 1, 62, 129, 1, 0.5, 0.4961240291595459,[],[-0.4677419066429138,0.4883719682693481,-0.5,0.007751941680908203,-0.4677419066429138,-0.4806201159954071,0,-0.4961240291595459,0.4516130089759827,-0.4728682339191437,0.5,0.007751941680908203,0.4677420258522034,0.4883719682693481,0,0.5038759708404541],0],
				["images/parkingslot-sheet0.png", 8946, 1, 1, 100, 160, 1, 0.4699999988079071, 0.518750011920929,[],[-0.3067349791526794,-0.4044640064239502,0.01979601383209229,-0.4473214149475098,0.3667350113391876,-0.4044640064239502,0.3871429860591888,-0.01875001192092896,0.3463269770145416,0.3526790142059326,0.01979601383209229,0.3955360054969788,-0.2863270044326782,0.3526790142059326,-0.3271430134773254,-0.01875001192092896],0]
			]
			]
		],
		[
		],
		false,
		false,
		3709826674678667,
		[],
		null
	]
,	[
		"t7",
		cr.plugins_.Keyboard,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		3173626831105564,
		[],
		null
		,[]
	]
,	[
		"t8",
		cr.plugins_.Sprite,
		false,
		[9252490871770296,8163426293329502],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			8135810581366116,
			[
				["images/levels-sheet0.png", 20269, 1, 103, 83, 92, 1, 0.5060241222381592, 0.5,[],[-0.5060241222381592,-0.5,0.4939758777618408,-0.5,0.4939758777618408,0.2989130020141602,-0.5060241222381592,0.3152170181274414],0],
				["images/levels-sheet0.png", 20269, 85, 103, 83, 92, 1, 0.5060241222381592, 0.5,[],[-0.4337349236011505,-0.4347825944423676,0.3855418562889099,-0.4021739065647125,0.3975898623466492,0.4130430221557617,-0.4096386134624481,0.4130430221557617],0],
				["images/levels-sheet0.png", 20269, 169, 103, 83, 92, 1, 0.5060241222381592, 0.5,[],[-0.4337349236011505,-0.4347825944423676,0.3855418562889099,-0.4021739065647125,0.3975898623466492,0.4130430221557617,-0.4096386134624481,0.4130430221557617],0],
				["images/levels-sheet1.png", 12536, 1, 1, 83, 92, 1, 0.5060241222381592, 0.5,[],[-0.4337349236011505,-0.4347825944423676,0.3855418562889099,-0.4021739065647125,0.3975898623466492,0.4130430221557617,-0.4096386134624481,0.4130430221557617],0],
				["images/levels-sheet1.png", 12536, 85, 1, 83, 92, 1, 0.5060241222381592, 0.5,[],[-0.4337349236011505,-0.4347825944423676,0.3855418562889099,-0.4021739065647125,0.3975898623466492,0.4130430221557617,-0.4096386134624481,0.4130430221557617],0],
				["images/levels-sheet0.png", 20269, 1, 1, 100, 101, 1, 0.5, 0.5049505233764648,[],[],0],
				["images/levels-sheet0.png", 20269, 102, 1, 100, 101, 1, 0.5, 0.5049505233764648,[],[],0]
			]
			]
		],
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			4455723449935792
		]
		],
		false,
		false,
		7719031851596401,
		[],
		null
	]
,	[
		"t9",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			9645173667280981,
			[
				["images/car1-sheet0.png", 66704, 103, 142, 50, 94, 1, 0.5, 0.5,[["Headlights", 0.5, 0]],[-0.338688999414444,-0.4475147128105164,0.3213930130004883,-0.4475147128105164,0.3345900177955627,0.4226139783859253,-0.3436889946460724,0.4230599999427795],0],
				["images/car1-sheet0.png", 66704, 154, 142, 50, 94, 1, 0.5, 0.521276593208313,[["Imagepoint 1", 0.5199999809265137, 0.01063829753547907]],[-0.3338100016117096,-0.4717946946620941,0.3398410081863403,-0.4712361097335815,0.3377779722213745,0.4218224287033081,-0.3348410129547119,0.4212623834609985],0],
				["images/car1-sheet0.png", 66704, 205, 142, 50, 94, 1, 0.5, 0.5106382966041565,[],[-0.3601790070533752,-0.4399834871292114,0.3551790118217468,-0.4399834871292114,0.3507140278816223,0.4226366877555847,-0.364643007516861,0.4199767112731934],0],
				["images/car1-sheet1.png", 45344, 52, 1, 50, 94, 1, 0.5, 0.5,[],[-0.3363789916038513,-0.4297872185707092,0.3270689845085144,-0.4297872185707092,0.324999988079071,0.4243710041046143,-0.3363789916038513,0.4243710041046143],0],
				["images/car1-sheet1.png", 45344, 103, 1, 50, 94, 1, 0.5, 0.5,[],[-0.3163930177688599,-0.4537524878978729,0.2950000166893005,-0.454098105430603,0.3018029928207398,0.4255319833755493,-0.3140980005264282,0.4258760213851929],0],
				["images/car1-sheet1.png", 45344, 154, 1, 50, 94, 1, 0.5, 0.5,[],[-0.3359090089797974,-0.4286642074584961,0.3145459890365601,-0.4260045886039734,0.3040909767150879,0.4089829921722412,-0.3349999785423279,0.4085109829902649],0],
				["images/car1-sheet1.png", 45344, 205, 1, 50, 94, 1, 0.5, 0.5,[["Headlamp", 0.5199999809265137, 0.03191489353775978]],[-0.3487929999828339,-0.4338122010231018,0.3486210107803345,-0.43556809425354,0.3444830179214478,0.4299470186233521,-0.3574140071868897,0.4329090118408203],0],
				["images/car1-sheet0.png", 66704, 62, 1, 50, 140, 1, 0.5, 0.5,[],[-0.3351559937000275,-0.438587486743927,0.3401560187339783,-0.4372671842575073,0.3525000214576721,0.4231359958648682,-0.3324999809265137,0.4226710200309753],0],
				["images/car1-sheet1.png", 45344, 52, 96, 50, 94, 1, 0.5, 0.5,[],[-0.324999988079071,-0.4312658905982971,0.3391270041465759,-0.4319981038570404,0.3399999737739563,0.4209929704666138,-0.3208730220794678,0.4209929704666138],0],
				["images/car1-sheet0.png", 66704, 52, 142, 50, 100, 1, 0.5, 0.5,[],[-0.3060939908027649,-0.4194490015506744,0.3165630102157593,-0.4198310077190399,0.3004689812660217,0.4254239797592163,-0.3139060139656067,0.4254239797592163],0],
				["images/car1-sheet0.png", 66704, 1, 142, 50, 110, 1, 0.5, 0.5,[],[-0.387499988079071,-0.4024407863616943,0.3941069841384888,-0.4028615057468414,0.3969640135765076,0.4568179845809937,-0.3919640183448792,0.4553869962692261],0],
				["images/car1-sheet0.png", 66704, 113, 1, 50, 140, 1, 0.5, 0.5,[["Imagepoint 1", 0.4600000083446503, 0.02142857201397419]],[-0.3650000095367432,-0.4404017925262451,0.3434380292892456,-0.4372768104076386,0.3612499833106995,0.4651790261268616,-0.3603119850158691,0.4676349759101868],0],
				["images/car1-sheet1.png", 45344, 1, 1, 50, 120, 1, 0.5, 0.5,[["Imagepoint 1", 0.4600000083446503, 0.008333333767950535]],[-0.3566669821739197,-0.4303796887397766,0.3466669917106628,-0.4345464110374451,0.3550000190734863,0.4490510225296021,-0.3566669821739197,0.4480479955673218],0],
				["images/car1-sheet0.png", 66704, 164, 1, 50, 140, 1, 0.5, 0.5,[["Imagepoint 1", 0.4600000083446503, 0.007142857182770968]],[-0.3790619969367981,-0.4256210923194885,0.3673440217971802,-0.427173912525177,0.3559380173683167,0.4619560241699219,-0.3820309937000275,0.4635090231895447],0],
				["images/car1-sheet0.png", 66704, 1, 1, 60, 140, 1, 0.5, 0.5,[["Imagepoint 1", 0.5, 0.02142857201397419]],[-0.3650680184364319,-0.4341574907302856,0.3449770212173462,-0.4341574907302856,0.3396120071411133,0.4635990262031555,-0.3699769973754883,0.4616299867630005],0]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			6688286430289653
		]
,		[
			"CarPhysics",
			cr.behaviors.mn2dCarPhysics,
			964042287539666
		]
		],
		false,
		false,
		122751316065582,
		[],
		null
	]
,	[
		"t10",
		cr.plugins_.Sprite,
		false,
		[],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			424360166946472,
			[
				["images/obstacles-sheet0.png", 1191128, 1974, 553, 60, 40, 1, 0.5, 0.5,[],[-0.2927930057048798,-0.4716311991214752,0.2252249717712402,-0.4645389914512634,0.4369369745254517,0.2943260073661804,-0.4279279112815857,0.2943260073661804],0],
				["images/obstacles-sheet0.png", 1191128, 2033, 40, 2, 2, 1, 0.5, 0.5,[],[-0.1783919930458069,-0.2386359870433807,-0.03266298770904541,-0.2159090042114258,-0.04773899912834168,-0.05681800842285156,-0.1331659853458405,-0.0454539954662323],0],
				["images/obstacles-sheet0.png", 1191128, 2036, 40, 2, 2, 1, 0.5, 0.5,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 2022, 1, 25, 38, 1, 0.5199999809265137, 0.5,[],[-0.4366666674613953,-0.3771930038928986,0.3728570342063904,-0.4122807085514069,0.3252379894256592,0.4035090208053589,-0.4247618913650513,0.3859649896621704],0],
				["images/obstacles-sheet0.png", 1191128, 111, 467, 255, 69, 1, 0.501960813999176, 0.5072463750839233,[],[-0.4882353246212006,-0.4927535653114319,0.4705882072448731,-0.4891304671764374,0.4705882072448731,0.3514485955238342,-0.4882353246212006,0.3550726175308228],0],
				["images/obstacles-sheet0.png", 1191128, 1, 467, 109, 296, 1, 0.5045871734619141, 0.5,[],[-0.4495417773723602,-0.4864864945411682,0.4174318313598633,-0.4847972989082336,0.4174308180809021,0.4611489772796631,-0.435779869556427,0.4628369808197022],0],
				["images/obstacles-sheet0.png", 1191128, 1368, 447, 28, 40, 1, 0.5, 0.5,[],[0,-0.5,0.5,-0.09999999403953552,0.1250010132789612,0.2625000476837158,-0.4642857015132904,0],0],
				["images/obstacles-sheet0.png", 1191128, 891, 511, 50, 103, 1, 0.5199999809265137, 0.5145630836486816,[],[-0.3599999845027924,-0.4368931651115418,0.3199999928474426,-0.4368931651115418,0.3199999928474426,0.4077669382095337,-0.3599999845027924,0.4077669382095337],0],
				["images/obstacles-sheet0.png", 1191128, 468, 514, 49, 102, 1, 0.5306122303009033, 0.5098039507865906,[],[-0.3673472404479981,-0.4313725531101227,0.3265307545661926,-0.4411764442920685,0.3265307545661926,0.4215690493583679,-0.3673472404479981,0.4117650389671326],0],
				["images/obstacles-sheet0.png", 1191128, 2039, 40, 2, 2, 1, 0.5, 0.5,[],[0.1336209774017334,-0.09047698974609375,-0.1422410011291504,-0.09047698974609375,0.008620977401733398,-0.3857139945030212],0],
				["images/obstacles-sheet0.png", 1191128, 1, 1, 1046, 276, 1, 0.5, 0.5036231875419617,[],[-0.5,-0.4999999701976776,0.4942640066146851,-0.5036231875419617,0.4942640066146851,0.2934778332710266,0.004779994487762451,0.2934778332710266,0.001911997795104981,0.1304348111152649,-0.490439772605896,0.1376808285713196],0],
				["images/obstacles-sheet0.png", 1191128, 1298, 447, 69, 244, 1, 0.5072463750839233, 0.5,[],[-0.5072463750839233,-0.5,0.391304612159729,-0.5,0.3768116235733032,0.4959020018577576,-0.4927535653114319,0.4959020018577576],0],
				["images/obstacles-sheet0.png", 1191128, 218, 554, 39, 35, 1, 0.5128205418586731, 0.5142857432365418,[],[-0.4871795475482941,-0.228571742773056,0.4871794581413269,-0.5142857432365418,0.3846154808998108,0.457143247127533,-0.5128205418586731,0.4857142567634583],0],
				["images/obstacles-sheet0.png", 1191128, 555, 514, 45, 94, 1, 0.5111111402511597, 0.585106372833252,[],[-0.3861111402511597,-0.5333822965621948,0.3222218751907349,-0.516140878200531,0.3430558443069458,0.3545486330986023,-0.3652781248092651,0.3545486330986023],0],
				["images/obstacles-sheet0.png", 1191128, 968, 278, 78, 95, 1, 0.5, 0.5052631497383118,[],[-0.5,-0.5052631497383118,0.1282050013542175,-0.5052631497383118,0.1282050013542175,0.2315788269042969,-0.5,0.2315788269042969],0],
				["images/obstacles-sheet0.png", 1191128, 1901, 553, 36, 80, 1, 0.5, 0.5,[],[-0.375,-0.4937500059604645,0.305554986000061,-0.5,0.3611109852790833,0.3999999761581421,-0.4027777910232544,0.40625],0],
				["images/obstacles-sheet0.png", 1191128, 1938, 553, 35, 79, 1, 0.5142857432365418, 0.5063291192054749,[],[-0.4142857491970062,-0.5063291192054749,0.3285712599754334,-0.5063291192054749,0.3428572416305542,0.4050628542900085,-0.4571428298950195,0.373417854309082],0],
				["images/obstacles-sheet0.png", 1191128, 111, 537, 356, 16, 1, 0.5, 0.5,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 111, 554, 34, 68, 1, 0.5, 0.5,[],[-0.4117647111415863,-0.4264706075191498,0.3235290050506592,-0.4485293924808502,0.3970590233802795,0.4632350206375122,-0.4117647111415863,0.4779409766197205],0],
				["images/obstacles-sheet0.png", 1191128, 182, 554, 35, 65, 1, 0.5142857432365418, 0.5076923370361328,[],[-0.3857147395610809,-0.4153846502304077,0.2285712361335754,-0.4846154451370239,0.3285712599754334,0.3923076391220093,-0.4285714328289032,0.4230766892433167],0],
				["images/obstacles-sheet0.png", 1191128, 146, 554, 35, 66, 1, 0.5142857432365418, 0.5,[],[-0.3714287281036377,-0.4393939077854157,0.2000002861022949,-0.4696969985961914,0.400000274181366,0.4469699859619141,-0.4857143461704254,0.4242420196533203],0],
				["images/obstacles-sheet0.png", 1191128, 671, 511, 117, 143, 1, 0.504273533821106, 0.503496527671814,[],[-0.3952995240688324,0.07167845964431763,-0.2788465321063995,-0.04895153641700745,-0.04113253951072693,-0.05069953203201294,0.08119648694992065,0.05069947242736816,-0.01709353923797607,0.1818174719810486,-0.2948715388774872,0.1783224940299988],0],
				["images/obstacles-sheet0.png", 1191128, 1557, 424, 128, 311, 1, 0.5, 0.5016077160835266,[],[-0.4375,-0.4823151230812073,0.2734379768371582,-0.4919614195823669,0.25,0.4308682680130005,-0.4453125,0.4212222695350647],0],
				["images/obstacles-sheet0.png", 1191128, 601, 514, 64, 66, 1, 0.5, 0.5,[],[-0.4375,-0.1666670143604279,-0.0585939884185791,-0.4659090936183929,0.4082030057907105,-0.3143939971923828,0.265625,0.3295459747314453,-0.265625,0.3295459747314453],0],
				["images/obstacles-sheet0.png", 1191128, 968, 374, 66, 65, 1, 0.5, 0.5076923370361328,[],[-0.4431818127632141,-0.1538463234901428,-0.02272701263427734,-0.5076923370361328,0.3901519775390625,-0.2730773389339447,0.2878789901733398,0.3153846859931946,-0.25,0.3115376830101013],0],
				["images/obstacles-sheet0.png", 1191128, 1686, 553, 64, 65, 1, 0.5, 0.5076923370361328,[],[-0.4375,-0.1807693243026733,0.003906011581420898,-0.5,0.4335939884185791,-0.2576923370361328,0.3007810115814209,0.3346156477928162,-0.2070310115814209,0.3115376830101013],0],
				["images/obstacles-sheet0.png", 1191128, 1399, 424, 157, 349, 1, 0.5095541477203369, 0.5014326572418213,[],[-0.5095541477203369,-0.5014326572418213,0.3375798463821411,-0.4985673129558563,0.2929938435554504,0.3954153656959534,-0.5095541477203369,0.3954153656959534],0],
				["images/obstacles-sheet0.png", 1191128, 1686, 424, 75, 46, 1, 0.5066666603088379, 0.5,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 1827, 553, 73, 46, 1, 0.5068492889404297, 0.5,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 1751, 553, 75, 45, 1, 0.5066666603088379, 0.5111111402511597,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 1399, 232, 384, 191, 1, 0.5026041865348816, 0.5026177763938904,[],[-0.5026041865348816,-0.5026177763938904,0.4062498211860657,-0.5026177763938904,0.4062498211860657,0.2774872183799744,-0.5026041865348816,0.2774872183799744],0],
				["images/obstacles-sheet0.png", 1191128, 1784, 232, 239, 247, 1, 0.5020920634269714, 0.5020242929458618,[],[-0.09623405337333679,-0.5020242929458618,0.3096239566802979,-0.1943323016166687,0.3054389357566834,0.2834007143974304,-0.4811715483665466,0.2793527245521545,-0.4853556752204895,-0.1983802914619446],0],
				["images/obstacles-sheet0.png", 1191128, 1048, 1, 493, 208, 1, 0.5010141730308533, 0.504807710647583,[],[-0.5010141730308533,-0.504807710647583,0.4989858269691467,-0.504807710647583,0.4989858269691467,0.3750002980232239,-0.5010141730308533,0.3750002980232239],0],
				["images/obstacles-sheet0.png", 1191128, 1983, 1, 38, 198, 1, 0.5, 0.5,[],[-0.5,-0.5,-0.07894799113273621,-0.5,-0.07894799113273621,0.3712120056152344,-0.5,0.3207070231437683],0],
				["images/obstacles-sheet0.png", 1191128, 518, 514, 36, 119, 1, 0.5, 0.5042017102241516,[],[-0.5,-0.5042017102241516,-0.125,-0.3781517148017883,-0.125,0.3697472810745239,-0.5,0.3109242916107178],0],
				["images/obstacles-sheet0.png", 1191128, 968, 447, 329, 135, 1, 0.5015197396278381, 0.5037037134170532,[],[-0.5015197396278381,-0.2814817130565643,0.4802432656288147,-0.2814817130565643,0.4802432656288147,0.211111307144165,-0.5015197396278381,0.1962962746620178],0],
				["images/obstacles-sheet0.png", 1191128, 1686, 480, 328, 72, 1, 0.5, 0.5,[],[],0],
				["images/obstacles-sheet0.png", 1191128, 789, 511, 101, 124, 1, 0.5049505233764648, 0.5,[],[-0.4950495362281799,-0.4758065044879913,0.4554454684257507,-0.4677419066429138,0.4554454684257507,0.4677420258522034,-0.4950495362281799,0.4677420258522034],0],
				["images/obstacles-sheet0.png", 1191128, 374, 278, 296, 235, 1, 0.5, 0.5021276473999023,[],[-0.4932432472705841,-0.4893616437911987,0.4729729890823364,-0.4893616437911987,0.4729729890823364,0.4638293385505676,-0.5,0.4638293385505676],0],
				["images/obstacles-sheet0.png", 1191128, 671, 278, 296, 232, 1, 0.5, 0.5,[],[-0.4966216087341309,-0.4956896603107452,0.4831079840660095,-0.4784483015537262,0.48648601770401,0.4698280096054077,-0.5,0.465516984462738],0],
				["images/obstacles-sheet0.png", 1191128, 1048, 210, 350, 236, 1, 0.5, 0.5,[],[-0.4942857027053833,-0.491525411605835,0.4800000190734863,-0.4788135886192322,0.4800000190734863,0.4533900022506714,-0.5,0.4533900022506714],0],
				["images/obstacles-sheet0.png", 1191128, 1542, 1, 440, 230, 1, 0.5, 0.5,[],[-0.4977272748947144,-0.4826087057590485,0.4772729873657227,-0.4826087057590485,0.479544997215271,0.4739130139350891,-0.5,0.4652169942855835],0],
				["images/obstacles-sheet0.png", 1191128, 1, 278, 372, 188, 1, 0.5, 0.5053191781044006,[],[-0.5,-0.5053191781044006,0.4435480237007141,-0.5053191781044006,0.4435480237007141,0.3563828468322754,-0.5,0.3563838005065918],0],
				["images/obstacles-sheet0.png", 1191128, 2022, 40, 10, 10, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			6361060647850752
		]
,		[
			"Solid",
			cr.behaviors.solid,
			8838037979867028
		]
		],
		false,
		false,
		2004405611404803,
		[],
		null
	]
,	[
		"t11",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5619935728231894,
			[
				["images/wheelfl-sheet0.png", 92, 0, 0, 7, 15, 1, 0.5714285969734192, 0.5333333611488342,[],[],4]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			8560228313579485
		]
		],
		false,
		false,
		1065116617817258,
		[],
		null
	]
,	[
		"t12",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5692986485213029,
			[
				["images/wheelfl-sheet0.png", 92, 0, 0, 7, 15, 1, 0.5714285969734192, 0.5333333611488342,[],[],4]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			498463752349237
		]
		],
		false,
		false,
		9301319063664711,
		[],
		null
	]
,	[
		"t13",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3486510738452566,
			[
				["images/wheelfl-sheet0.png", 92, 0, 0, 7, 15, 1, 0.5714285969734192, 0.5333333611488342,[],[],4]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			2326882910443431
		]
		],
		false,
		false,
		7404310207798237,
		[],
		null
	]
,	[
		"t14",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4523734976490067,
			[
				["images/wheelfl-sheet0.png", 92, 0, 0, 7, 15, 1, 0.5714285969734192, 0.5333333611488342,[],[],4]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			2438721129126841
		]
		],
		false,
		false,
		3083053455263252,
		[],
		null
	]
,	[
		"t15",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			6943909011809998,
			[
				["images/obstaclesmoving-sheet0.png", 103593, 61, 348, 62, 106, 1, 0.5, 0.5,[],[-0.3225809931755066,-0.3962259888648987,0.3225809931755066,-0.3962259888648987,0.3225809931755066,0.3962259888648987,-0.3225809931755066,0.3962259888648987],0],
				["images/obstaclesmoving-sheet1.png", 13576, 0, 0, 373, 173, 1, 0.5013405084609985, 0.5028901696205139,[],[-0.1903485059738159,0.3815028071403503,0.06702446937561035,-0.5028901696205139,0.02144747972488403,0.3872828483581543,0.4986594915390015,0.4971098303794861,-0.5013405084609985,0.4971098303794861],0],
				["images/obstaclesmoving-sheet0.png", 103593, 1, 1, 371, 346, 1, 0.5040431022644043, 0.5,[],[-0.1832880973815918,-0.1560690104961395,0.08086287975311279,-0.5,0.0781669020652771,-0.05202299356460571,0.4663069248199463,0,0.06738489866256714,0.06936401128768921,0.08086287975311279,0.5,-0.1832880973815918,0.1560689806938171,-0.5013476610183716,0],0],
				["images/obstaclesmoving-sheet0.png", 103593, 373, 189, 132, 80, 1, 0.5, 0.5,[],[-0.5,-0.5,0.2651519775390625,-0.487500011920929,0.2651519775390625,0.300000011920929,-0.4242424070835114,0.2625000476837158],0],
				["images/obstaclesmoving-sheet0.png", 103593, 1, 348, 59, 112, 1, 0.508474588394165, 0.5,[],[-0.3050845861434937,-0.3928570151329041,0.2881354093551636,-0.3928570151329041,0.2881354093551636,0.3928570151329041,-0.3050845861434937,0.3928570151329041],0],
				["images/obstaclesmoving-sheet0.png", 103593, 432, 270, 60, 113, 1, 0.5, 0.5044247508049011,[],[-0.300000011920929,-0.3982297480106354,0.300000011920929,-0.3982297480106354,0.2833330035209656,0.3805312514305115,-0.2833330035209656,0.3805312514305115],0],
				["images/obstaclesmoving-sheet0.png", 103593, 373, 270, 58, 126, 1, 0.5, 0.5,[],[-0.3103449940681458,-0.4126983880996704,0.3103449940681458,-0.4126983880996704,0.2931029796600342,0.4047619700431824,-0.2931029796600342,0.4047619700431824],0],
				["images/obstaclesmoving-sheet0.png", 103593, 124, 348, 58, 112, 1, 0.5, 0.5,[],[-0.2758619785308838,-0.3839290142059326,0.2758619785308838,-0.3839290142059326,0.2931029796600342,0.3928570151329041,-0.3103449940681458,0.4017859697341919],0],
				["images/obstaclesmoving-sheet0.png", 103593, 373, 1, 111, 187, 1, 0.5045045018196106, 0.5026738047599793,[],[0.06306350231170654,0.3208552002906799,-0.009009510278701782,0.3582891821861267,-0.08108150959014893,0.331551194190979],0]
			]
			]
		],
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			2017789364600562
		]
		],
		false,
		false,
		5671122458906545,
		[],
		null
	]
,	[
		"t16",
		cr.plugins_.Sprite,
		false,
		[3994492975712033],
		2,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			2502558001377563,
			[
				["images/buttons-sheet1.png", 186978, 277, 141, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 363, 141, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 277, 227, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 363, 227, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet0.png", 126249, 1, 1, 275, 275, 1, 0.5054545402526856, 0.5163636207580566,[],[],0],
				["images/buttons-sheet1.png", 186978, 1, 277, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 87, 277, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 173, 277, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet0.png", 126249, 402, 1, 106, 114, 1, 0.5094339847564697, 0.5087719559669495,[],[0.4905660152435303,-0.5087719559669495,0.4905660152435303,0.4912280440330505,-0.5,0.4912280440330505,-0.5094339847564697,-0.5087719559669495],0],
				["images/buttons-sheet0.png", 126249, 277, 1, 124, 131, 1, 0.5080645084381104, 0.5038167834281921,[],[0.4919354915618897,-0.5038167834281921,0.4919354915618897,0.4961832165718079,-0.5080645084381104,0.4961832165718079,-0.5080645084381104,-0.5038167834281921],0],
				["images/buttons-sheet0.png", 126249, 402, 116, 106, 114, 1, 0.4905660450458527, 0.5087719559669495,[],[0.5094339847564697,-0.5087719559669495,0.5094339847564697,0.4912280440330505,-0.4905660450458527,0.4912280440330505,-0.4905660450458527,-0.5087719559669495],0],
				["images/buttons-sheet1.png", 186978, 259, 313, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[0.4941176176071167,0.4941176176071167,-0.5058823823928833,0.4941176176071167,-0.5058823823928833,-0.5058823823928833,0.4941176176071167,-0.5058823823928833],0],
				["images/buttons-sheet1.png", 186978, 345, 313, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet0.png", 126249, 1, 277, 318, 112, 1, 0.5, 0.5,[],[],0],
				["images/buttons-sheet1.png", 186978, 277, 1, 234, 69, 1, 0.5, 0.5072463750839233,[],[0.5,-0.5072463750839233,0.5,0.4927536249160767,-0.5,0.4927536249160767,-0.5,-0.5072463750839233],0],
				["images/buttons-sheet1.png", 186978, 1, 363, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 87, 363, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 173, 363, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 259, 399, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 345, 399, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet2.png", 66342, 1, 1, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet1.png", 186978, 1, 1, 275, 275, 1, 0.5054545402526856, 0.5163636207580566,[],[],0],
				["images/buttons-sheet2.png", 66342, 87, 1, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet2.png", 66342, 173, 1, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet2.png", 66342, 259, 1, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet0.png", 126249, 402, 231, 106, 114, 1, 0.5094339847564697, 0.5087719559669495,[],[0.4905660152435303,-0.5087719559669495,0.4905660152435303,0.4912280440330505,-0.5,0.4912280440330505,-0.5094339847564697,-0.5087719559669495],0],
				["images/buttons-sheet0.png", 126249, 277, 133, 124, 131, 1, 0.5080645084381104, 0.5038167834281921,[],[0.4919354915618897,-0.5038167834281921,0.4919354915618897,0.4961832165718079,-0.5080645084381104,0.4961832165718079,-0.5080645084381104,-0.5038167834281921],0],
				["images/buttons-sheet0.png", 126249, 320, 346, 106, 114, 1, 0.4905660450458527, 0.5087719559669495,[],[0.5094339847564697,-0.5087719559669495,0.5094339847564697,0.4912280440330505,-0.4905660450458527,0.4912280440330505,-0.4905660450458527,-0.5087719559669495],0],
				["images/buttons-sheet2.png", 66342, 345, 1, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[0.4941176176071167,0.4941176176071167,-0.5058823823928833,0.4941176176071167,-0.5058823823928833,-0.5058823823928833,0.4941176176071167,-0.5058823823928833],0],
				["images/buttons-sheet2.png", 66342, 1, 87, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet0.png", 126249, 1, 390, 318, 112, 1, 0.5, 0.5,[],[],0],
				["images/buttons-sheet1.png", 186978, 277, 71, 234, 69, 1, 0.5, 0.5072463750839233,[],[0.5,-0.5072463750839233,0.5,0.4927536249160767,-0.5,0.4927536249160767,-0.5,-0.5072463750839233],0],
				["images/buttons-sheet2.png", 66342, 87, 87, 85, 85, 1, 0.5058823823928833, 0.5058823823928833,[],[],0],
				["images/buttons-sheet2.png", 66342, 173, 87, 85, 85, 1, 0.5058823823928833, 0.5176470875740051,[],[],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			1435668563221794
		]
,		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			2069844697211112
		]
		],
		false,
		true,
		7087873716865901,
		[],
		null
	]
,	[
		"t17",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			9355637871733163,
			[
				["images/roadsigns-sheet0.png", 1577, 84, 1, 20, 50, 1, 0.5, 0.5,[],[],0],
				["images/roadsigns-sheet0.png", 1577, 43, 1, 40, 40, 1, 0.5, 0.5,[],[],0],
				["images/roadsigns-sheet0.png", 1577, 105, 1, 20, 20, 1, 0.5, 0.5,[],[],0],
				["images/roadsigns-sheet0.png", 1577, 1, 1, 41, 91, 1, 0.5121951103210449, 0.5054945349693298,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		92894033136155,
		[],
		null
	]
,	[
		"t18",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2596739728656807,
			[
				["images/actualparkingspot-sheet0.png", 1124, 0, 0, 60, 127, 1, 0.5, 0.4960629940032959,[],[-0.4666666984558106,0.4881889820098877,-0.4666666984558106,-0.4803149998188019,0.4666669964790344,-0.4803149998188019,0.4666669964790344,0.4881889820098877],0]
			]
			]
		],
		[
		],
		false,
		false,
		403142776606372,
		[],
		null
	]
,	[
		"t19",
		cr.plugins_.Rex_Function,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		true,
		false,
		3988340231445735,
		[],
		null
	]
,	[
		"t20",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			4314774788355787,
			[
				["images/logo-sheet0.png", 168, 0, 0, 250, 250, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		true,
		7037539320060667,
		[],
		null
	]
,	[
		"t21",
		cr.plugins_.WebStorage,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		5740334286931361,
		[],
		null
		,[]
	]
,	[
		"t22",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			6492020708963344,
			[
				["images/headlight-sheet0.png", 9622, 0, 0, 111, 97, 1, 0.5045045018196106, 0.9587628841400147,[],[0.3603605031967163,-0.4639178812503815,-0.009009510278701782,0.04123711585998535,-0.3783785104751587,-0.4639178812503815],0]
			]
			]
		],
		[
		],
		false,
		false,
		7756470646968598,
		[],
		null
	]
,	[
		"t23",
		cr.plugins_.Sprite,
		false,
		[3999353290844796],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			2069101339680973,
			[
				["images/caricon-sheet0.png", 26582, 1, 1, 24, 48, 1, 0.5, 0.5,[],[-0.375,-0.4351851940155029,0.375,-0.4351851940155029,0.357142984867096,0.4259259700775147,-0.375,0.4351850152015686],0],
				["images/caricon-sheet0.png", 26582, 26, 1, 24, 48, 1, 0.5, 0.5,[],[0.3620690107345581,-0.4298245906829834,0.3620690107345581,0.4298250079154968,-0.3620690107345581,0.4298250079154968,-0.5,-0.5],0],
				["images/caricon-sheet0.png", 26582, 51, 1, 24, 48, 1, 0.5, 0.5,[],[-0.5,-0.4907407462596893,0.3431370258331299,-0.4259259104728699,0.5,0.5,-0.3627449870109558,0.4351850152015686],0],
				["images/caricon-sheet0.png", 26582, 76, 1, 24, 48, 1, 0.5, 0.5,[],[-0.5,-0.4277912974357605,0.3235290050506592,-0.412621408700943,0.3431370258331299,0.4223300218582153,-0.3627449870109558,0.4320390224456787],0],
				["images/caricon-sheet0.png", 26582, 101, 1, 24, 48, 1, 0.5, 0.5,[],[-0.357142984867096,-0.4223300814628601,0.357142984867096,-0.4223300814628601,0.5,0.4583330154418945,-0.3392859995365143,0.412621021270752],0],
				["images/caricon-sheet0.png", 26582, 1, 50, 24, 48, 1, 0.5, 0.5,[],[-0.4000000059604645,-0.4411765038967133,0.3999999761581421,-0.4411765038967133,0.3600000143051148,0.4176470041275024,-0.3600000143051148,0.4176470041275024],0],
				["images/caricon-sheet0.png", 26582, 26, 50, 24, 48, 1, 0.5, 0.5,[],[-0.5,-0.5,0.3490570187568665,-0.4207921028137207,0.3679249882698059,0.4306929707527161,-0.386792004108429,0.4405940175056458],0],
				["images/caricon-sheet0.png", 26582, 51, 50, 24, 48, 1, 0.5, 0.5,[],[-0.3644070029258728,-0.4487178921699524,0.3644070029258728,-0.4487178921699524,0.5,0.5,-0.5,0.5],0],
				["images/caricon-sheet0.png", 26582, 76, 50, 24, 48, 1, 0.5, 0.5,[],[-0.3620690107345581,-0.4230768978595734,0.3448280096054077,-0.4134615063667297,0.3620690107345581,0.4230769872665405,-0.3793100118637085,0.4326919913291931],0],
				["images/caricon-sheet0.png", 26582, 101, 50, 24, 48, 1, 0.5, 0.5,[],[-0.3644070029258728,-0.4292035102844238,0.3644070029258728,-0.4292035102844238,0.5,0.4911500215530396,-0.3983049988746643,0.4469029903411865],0],
				["images/caricon-sheet1.png", 19444, 1, 1, 24, 48, 1, 0.5, 0.5,[],[-0.3214290142059326,-0.4259259104728699,0.3214290142059326,-0.4259259104728699,0.4107139706611633,0.4629629850387573,-0.4107142984867096,0.4629629850387573],0],
				["images/caricon-sheet1.png", 19444, 26, 1, 24, 48, 1, 0.5, 0.5,[],[-0.3813560009002686,-0.4548386931419373,0.3644070029258728,-0.448387086391449,0.4322029948234558,0.4741939902305603,-0.4661017060279846,0.4870970249176025],0],
				["images/caricon-sheet1.png", 19444, 51, 1, 24, 48, 1, 0.5, 0.5,[],[-0.3727270066738129,-0.4542483985424042,0.3727269768714905,-0.4542483985424042,0.3909090161323547,0.4607840180397034,-0.4090909063816071,0.4673200249671936],0],
				["images/caricon-sheet1.png", 19444, 76, 1, 24, 48, 1, 0.5, 0.5,[],[-0.3644070029258728,-0.4487178921699524,0.3644070029258728,-0.4487178921699524,0.4322029948234558,0.4743589758872986,-0.4491524994373322,0.4807689785957336],0],
				["images/caricon-sheet1.png", 19444, 101, 1, 24, 48, 1, 0.5, 0.5,[],[-0.4117647111415863,-0.4602648913860321,0.3970590233802795,-0.4536423981189728,0.3970590233802795,0.4536420106887817,-0.4264706075191498,0.4668869972229004],0],
				["images/caricon-sheet1.png", 19444, 1, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet1.png", 19444, 26, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet1.png", 19444, 51, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet1.png", 19444, 76, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet1.png", 19444, 101, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 1, 1, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 26, 1, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 51, 1, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 76, 1, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 101, 1, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 1, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 26, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 51, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 76, 50, 24, 48, 1, 0.5, 0.5,[],[],0],
				["images/caricon-sheet2.png", 17078, 101, 50, 24, 48, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			6014228649196072
		]
		],
		false,
		false,
		2397377546316371,
		[],
		null
	]
,	[
		"t24",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		2,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			8376653978284254
		]
,		[
			"Anchor",
			cr.behaviors.Anchor,
			7517589760983669
		]
		],
		false,
		false,
		9000906675357092,
		[],
		null
	]
,	[
		"t25",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		],
		false,
		false,
		2261966899290955,
		[],
		null
	]
,	[
		"t26",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		],
		false,
		true,
		6798390647287462,
		[],
		null
	]
,	[
		"t27",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		],
		false,
		false,
		9520511828791778,
		[],
		null
	]
,	[
		"t28",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			2657610703473972,
			[
				["images/rfwheel-sheet0.png", 187, 0, 0, 10, 21, 1, 0.5, 0.523809552192688,[],[],1]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			7197015136284296
		]
		],
		false,
		false,
		5338025570123868,
		[],
		null
	]
,	[
		"t29",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5980851734162556,
			[
				["images/rfwheel-sheet0.png", 187, 0, 0, 10, 21, 1, 0.5, 0.523809552192688,[],[],1]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			895633051054951
		]
		],
		false,
		false,
		200080323105218,
		[],
		null
	]
,	[
		"t30",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			5566319134898911,
			[
				["images/rfwheel-sheet0.png", 187, 0, 0, 10, 21, 1, 0.5, 0.523809552192688,[],[],1]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			8672739660671154
		]
		],
		false,
		false,
		2979209310660069,
		[],
		null
	]
,	[
		"t31",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6888734695753745,
			[
				["images/rfwheel-sheet0.png", 187, 0, 0, 10, 21, 1, 0.5, 0.523809552192688,[],[],1]
			]
			]
		],
		[
		[
			"Physics",
			cr.behaviors.Physics,
			385244587844107
		]
		],
		false,
		false,
		7446426215029266,
		[],
		null
	]
,	[
		"t32",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			978550862169173,
			[
				["images/obstaclesmoving-sheet0.png", 103593, 373, 1, 111, 187, 1, 0.5135135054588318, 0.5026738047599793,[],[0.03603649139404297,0.3262031674385071,-0.01801851391792297,0.3582891821861267,-0.09009051322937012,0.3422461748123169],0]
			]
			]
		],
		[
		],
		false,
		false,
		6027607699259707,
		[],
		null
	]
,	[
		"t33",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		1,
		0,
		["images/starttextyellow.png", 4433, 0],
		null,
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			2006374572718532
		]
		],
		false,
		false,
		7289666840420608,
		[],
		null
	]
,	[
		"t34",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		],
		false,
		false,
		9037323756839293,
		[],
		null
	]
,	[
		"t35",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/parkingmessage.png", 20629, 0],
		null,
		[
		],
		false,
		false,
		77665634272874,
		[],
		null
	]
,	[
		"t36",
		cr.plugins_.TiledBg,
		false,
		[],
		0,
		0,
		["images/loaderbg.png", 1180, 1],
		null,
		[
		],
		false,
		true,
		7676770503148337,
		[],
		null
	]
,	[
		"t37",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			6053647195414647,
			[
				["images/loadingbar-sheet0.png", 173, 0, 0, 13, 17, 1, 0, 0.529411792755127,[],[],1]
			]
			]
		],
		[
		],
		false,
		true,
		4126604389851872,
		[],
		null
	]
,	[
		"t38",
		cr.plugins_.Browser,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		8106397784288917,
		[],
		null
		,[]
	]
,	[
		"t39",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			1744813391803097,
			[
				["images/bang-sheet0.png", 17471, 0, 0, 263, 198, 1, 0.5019011497497559, 0.5,[],[0.01901084184646606,0.05050498247146606,-0.04182514548301697,0,-0.03422015905380249,0.08585900068283081],0]
			]
			]
		],
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			9258621022665167
		]
		],
		false,
		false,
		7368653567512477,
		[],
		null
	]
,	[
		"t40",
		cr.plugins_.Particles,
		false,
		[],
		0,
		0,
		["images/particles2.png", 4783, 0],
		null,
		[
		],
		false,
		false,
		2976624129585245,
		[],
		null
	]
,	[
		"t41",
		cr.plugins_.SpriteFontPlus,
		false,
		[9455034706668966],
		1,
		0,
		["images/numberonstars.png", 7389, 0],
		null,
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			7801167929506257
		]
		],
		false,
		false,
		1993019644945361,
		[],
		null
	]
,	[
		"t42",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		1,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			9928879527229122
		]
		],
		false,
		false,
		4031704100256519,
		[],
		null
	]
,	[
		"t43",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7403107481245845,
			[
				["images/loadingbarback-sheet0.png", 1997, 0, 0, 181, 45, 1, 0.5027624368667603, 0.5111111402511597,[],[-0.4530386328697205,-0.3111111521720886,-0.005524426698684692,-0.4222222566604614,0.4530385732650757,-0.3333331346511841,0.4585635662078857,-0.0222221314907074,0.4419885873794556,0.2666668295860291,-0.005524426698684692,0.3111108541488648,-0.4419889450073242,0.2444448471069336,-0.4585635364055634,-0.0222221314907074],0]
			]
			]
		],
		[
		],
		false,
		true,
		6877712539656291,
		[],
		null
	]
,	[
		"t44",
		cr.plugins_.Audio,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		1680875883607691,
		[],
		null
		,[0,0,1,1,600,600,10000,1,5000,1]
	]
,	[
		"t45",
		cr.plugins_.Sprite,
		false,
		[8134992713662608],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			8286135044928414,
			[
				["images/flags-sheet0.png", 48657, 1, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 405, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 405, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 454, 1, 20, 20, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		5478010050226132,
		[],
		null
	]
,	[
		"t46",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		1,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			2428934808968851
		]
		],
		false,
		false,
		384110491517268,
		[],
		null
	]
,	[
		"t47",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		1,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		[
			"LiteTween",
			cr.behaviors.lunarray_LiteTween,
			645632558873024
		]
		],
		false,
		false,
		6161737522372905,
		[],
		null
	]
,	[
		"t48",
		cr.plugins_.Sprite,
		false,
		[6911911086947157],
		1,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			5357543259497338,
			[
				["images/flags-sheet0.png", 48657, 1, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 1, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 102, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 203, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 303, 304, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 1, 405, 150, 100, 1, 0.5, 0.5,[],[],0],
				["images/flags-sheet0.png", 48657, 152, 405, 150, 100, 1, 0.5, 0.5,[],[],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			2400223918465
		]
		],
		false,
		false,
		5824271599270492,
		[],
		null
	]
,	[
		"t49",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			9460988705176567,
			[
				["images/gamecompletescrreen-default-000.jpg", 49326, 0, 0, 0, 0, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		4726171131145823,
		[],
		null
	]
,	[
		"t50",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			8428824215563583,
			[
				["images/bg13-default-000.jpg", 17160, 0, 0, 0, 0, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		1952146274104844,
		[],
		null
	]
,	[
		"t51",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			40640263887456,
			[
				["images/bg2-default-000.jpg", 29644, 0, 0, 0, 0, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		2787399744062887,
		[],
		null
	]
,	[
		"t52",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7179504079643376,
			[
				["images/bgmenu-default-000.jpg", 85447, 0, 0, 0, 0, 1, 0.5, 0.5,[],[],1]
			]
			]
		],
		[
		],
		false,
		false,
		8041089875118051,
		[],
		null
	]
,	[
		"t53",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7207814811644101,
			[
				["images/logotitle-sheet0.png", 130863, 0, 0, 625, 505, 1, 0.5008000135421753, 0.500990092754364,[],[0.01120001077651978,-0.02376210689544678,0.01599997282028198,-0.00792008638381958,-0.003200024366378784,-0.003960102796554565,-0.001600027084350586,-0.02970308065414429],0]
			]
			]
		],
		[
		],
		false,
		false,
		3533033144546615,
		[],
		null
	]
,	[
		"t54",
		cr.plugins_.Sprite,
		false,
		[],
		1,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			271073432744303,
			[
				["images/languagebar-sheet0.png", 1036, 0, 0, 329, 61, 1, 0.5015197396278381, 0.5081967115402222,[],[-0.5015197396278381,-0.5081967115402222,0.4954402446746826,-0.4918033182621002,0.4954402446746826,0.4754102826118469,-0.5015197396278381,0.4918032884597778],0]
			]
			]
		],
		[
		[
			"Anchor",
			cr.behaviors.Anchor,
			9089296517177886
		]
		],
		false,
		false,
		8637576687676551,
		[],
		null
	]
,	[
		"t55",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			7106345565066235,
			[
				["images/rotate-sheet0.png", 13399, 0, 0, 200, 201, 1, 0.5049999952316284, 0.5024875402450562,[],[],1]
			]
			]
		],
		[
		],
		false,
		true,
		5480519790944458,
		[],
		null
	]
,	[
		"t56",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			0,
			false,
			0,
			0,
			false,
			6188444543185451,
			[
				["images/bg-sheet0.png", 148170, 613, 1, 344, 250, 1, 0.5, 0.5,[],[-0.375,-0.328000009059906,0,-0.4600000083446503,0.3720930218696594,-0.3240000009536743,0.3837209939956665,0,0.4186049699783325,0.3880000114440918,0,0.4120000004768372,-0.4156976938247681,0.3840000033378601],0],
				["images/bg-sheet0.png", 148170, 1, 1, 611, 416, 1, 0.5008183121681213, 0.5,[],[],0],
				["images/bg-sheet0.png", 148170, 1, 418, 444, 275, 1, 0.5, 0.5018181800842285,[],[],0]
			]
			]
		],
		[
		],
		false,
		false,
		3914084505008273,
		[],
		null
	]
,	[
		"t57",
		cr.plugins_.Sprite,
		false,
		[],
		0,
		0,
		null,
		[
			[
			"Default",
			5,
			false,
			1,
			0,
			false,
			3359724732654376,
			[
				["images/pausebg-sheet0.png", 92, 0, 0, 10, 10, 1, 0.5, 0.5,[],[],3]
			]
			]
		],
		[
		],
		false,
		false,
		8451665481445523,
		[],
		null
	]
,	[
		"t58",
		cr.plugins_.SpriteFontPlus,
		false,
		[],
		0,
		0,
		["images/leveltimer.png", 20845, 0],
		null,
		[
		],
		false,
		false,
		9295478786750115,
		[],
		null
	]
,	[
		"t59",
		cr.plugins_.pix_spilgames,
		false,
		[],
		0,
		0,
		null,
		null,
		[
		],
		false,
		false,
		7361294088041494,
		[],
		null
		,["576742227280291435"]
	]
	],
	[
	],
	[
	[
		"Level1",
		960,
		700,
		true,
		"Levels",
		1728235100057934,
		[
		[
			"Layer 0",
			0,
			7532907089177597,
			true,
			[255, 255, 255],
			false,
			0,
			0,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[469, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1467,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-4.723251342773438, 430, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				30,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[421, 320, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				32,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[233, 429, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				33,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[480, 45, 0, 1046, 276, 0, 0, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				60,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[676, 320, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				29,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[834, 304, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				31,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[771, 471, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				43,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[764.9212036132813, 176, 0, 57.23077011108398, 124.113639831543, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				0,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[154, 242, 0, 40, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				62,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[368, 230, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				63,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[638, 230, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				64,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[135, 368, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				65,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[300, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				66,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[360, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				67,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[420, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				68,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				69,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[540, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				70,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[600, 398, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				71,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[688, 450, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				72,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[688, 510, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				73,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[688, 570, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				74,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[845, 390, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				49,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[920, 390, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				53,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[845, 582.3695678710938, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				75,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[920, 582.3699951171875, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				76,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[55, 72, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				79,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[90, 72, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				80,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[125, 72, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				81,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[786, 123, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				82,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[821, 123, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				83,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[856, 123, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				84,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[616.3324584960938, 117.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				85,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[651.3324584960938, 117.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				86,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[882, 564.1319580078125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				87,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.2714233398438, 497.8084106445313, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				88,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[882.72314453125, 410.2373657226563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				89,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.7611694335938, 344.0502624511719, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				90,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[40, 200, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				91,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[130, 200, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				92,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[220, 200, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				93,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[310, 200, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				94,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[400, 200, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				95,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[893, 304, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				34,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[110, 300, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				96,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[125, 300, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				97,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[140, 300, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				98,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[155, 300, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				99,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[635.0635986328125, 368.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				61,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[670.0635986328125, 368.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				77,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.0635986328125, 368.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				78,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[635.04638671875, 390.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				100,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[670.04638671875, 390.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				101,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.04638671875, 390.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				102,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[635.0464477539063, 416.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				103,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[670.0464477539063, 416.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				104,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.0464477539063, 416.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				105,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[535, 202.9100036621094, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				106,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 218.199951171875, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				107,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 234.3834075927734, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				108,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 250.1719818115234, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				109,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 265, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				110,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[510.5726318359375, 413.3636169433594, 0, 45.00474166870117, 91, 0, -0.1745333671569824, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				48,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[508, 410, 0, 45, 94, 0, -0.1745333671569824, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				52,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[337, 404.5853576660156, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				111,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[333, 403, 0, 50, 103, 0, 0, 1, 0.5199999809265137, 0.5145630836486816, 0, 0, []],
				10,
				44,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[685.7489013671875, 484, 0, 41, 96.611083984375, 0, 1.570796370506287, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				112,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[681, 481, 0, 49, 102, 0, 1.570796370506287, 1, 0.5306122303009033, 0.5098039507865906, 0, 0, []],
				10,
				58,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[765.951171875, 177.3277893066406, 0, 54.33070755004883, 97.36666870117188, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				223,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				888,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1401,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[151, 474, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				20,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[124, 474, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				55,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[151, 528, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				56,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[124, 528, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				57,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[137.3000335693359, 498.6828308105469, 0, 55, 105, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				245,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[136, 435, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				794,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[54, 370, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				6,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 500, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				7,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 470, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				8,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 470, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				9,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[535, 187, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				38,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 170, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				42,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 158.2083740234375, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1516,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[772, 727, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1536,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[686, 630, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1537,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[679.0616455078125, 601.75, 0, 41, 96.611083984375, 0, 1.570796370506287, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				1540,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[674.312744140625, 598.75, 0, 49, 102, 0, 1.570796370506287, 1, 0.5306122303009033, 0.5098039507865906, 0, 0, []],
				10,
				1541,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[233, 736, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1538,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-14, 740, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1539,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[883.18212890625, 698.4619750976563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1544,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[881.4535522460938, 632.138427734375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1545,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[877, 230, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1546,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-166, 744, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1706,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1031, 424, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1707,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1024, 740, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1708,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[847.18212890625, 797.6995849609375, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1709,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[922.18212890625, 797.7000122070313, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1710,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[884.18212890625, 829.4619750976563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1711,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[882.4535522460938, 763.138427734375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1712,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-225, 199, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1705,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-135, 199, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1713,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-45, 199, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1714,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[597, 704, 0, 69, 244, 0, 1.570796370506287, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1716,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-161, 427, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1715,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-118, -8, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1717,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1047, 3, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1718,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1031, 424, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1719,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1150, 645.5652465820313, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2090,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 579.24169921875, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2091,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 491.670654296875, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2092,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 425.4835510253906, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2093,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 779.895263671875, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2094,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 713.5717163085938, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2095,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 844.5717163085938, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2096,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1236, 6, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				2097,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1150, 97.56524658203125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2098,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 31.24169921875, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2099,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, -56.329345703125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2100,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, -122.5164489746094, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2101,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1150, 356.5717163085938, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2104,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1059, 230, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2105,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-83, 230, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				2106,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[428, 795, 0, 69, 244, 0, 1.570796370506287, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				2107,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[135, 643, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				2103,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1248, 388, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1542,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1246, 717, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1543,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[950, 305, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				37,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[23, 190, 0, 60, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				118,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[19, 125, 0, 60, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				119,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[19, 253, 0, 60, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				120,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[945, 172, 0, 60, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				241,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[945, 251, 0, 60, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				247,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[95.5, 675.5, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				246,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[152.5, 676.5, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				248,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			9286114929193586,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1479,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level2",
		960,
		700,
		true,
		"Levels",
		9758654117507398,
		[
		[
			"Layer 0",
			0,
			900453916605407,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				348,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 440, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				475,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 570, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				476,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 540, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				483,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 540, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				484,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[8.276748657226563, 400, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				485,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[401, 280, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				486,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[201, 399, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				487,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[480, 64, 0, 1046, 276, 0, 0, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				490,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[676, 280, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				491,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[300, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				499,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[360, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				500,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[420, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				501,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				502,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[540, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				503,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[600, 368, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				504,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[845, 360, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				508,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[920, 360, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				509,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[845, 502.3695678710938, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				510,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[920, 502.3699951171875, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				511,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[55, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				512,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[90, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				513,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[125, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				514,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[786, 156, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				515,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[821, 156, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				516,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[856, 156, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				517,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[616.3324584960938, 150.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				518,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[651.3324584960938, 150.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				519,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[882, 554.1319580078125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				520,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.2714233398438, 487.8084106445313, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				521,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[882.72314453125, 400.2373657226563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				522,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.7611694335938, 334.0502624511719, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				523,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[40, 190, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				524,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[130, 190, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				525,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[220, 190, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				526,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[310, 190, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				527,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[400, 190, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				528,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[70, 280, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				531,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[92, 280, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				532,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[113, 280, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				533,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[135, 280, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				534,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[635.0635986328125, 338.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				535,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[670.0635986328125, 338.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				536,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.0635986328125, 338.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				537,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[635.04638671875, 360.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				538,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.04638671875, 360.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				540,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[635.0464477539063, 386.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				541,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[670.0464477539063, 386.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				542,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[705.0464477539063, 386.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				543,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[535, 182.9100036621094, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				544,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 219.199951171875, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				545,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 200.3834075927734, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				546,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 240.1719818115234, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				547,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[510.4964599609375, 375.0244445800781, 0, 41, 91, 0, -0.1745333671569824, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				549,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[508, 380, 0, 45, 94, 0, -0.1745333671569824, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				550,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[457, 374.5853576660156, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				551,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[453, 373, 0, 50, 103, 0, 0, 1, 0.5199999809265137, 0.5145630836486816, 0, 0, []],
				10,
				552,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[780, 339.5815734863281, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				148,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[780, 362.4976196289063, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				171,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[780, 383.6701354980469, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				198,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[760, 335.17626953125, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				199,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[760, 361.1309814453125, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				204,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[760, 387.7690124511719, 0, 25, 38, 0, 0, 1, 0.5199999809265137, 0.5, 0, 0, []],
				10,
				205,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				54,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[893.4000244140625, 266.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				555,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[924.4000244140625, 266.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				556,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893.4000244140625, 212.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				557,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[924.4000244140625, 212.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				558,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[908.8682861328125, 237.3999938964844, 0, 55, 105, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				9,
				559,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[329.364990234375, 392.346923828125, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				494,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[330.8701782226563, 390.6593322753906, 0, 60, 105, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				224,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[409.5, 595, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				216,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[684.5, 595, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				217,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[7.638374328613281, 705.5, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1547,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[200.3616333007813, 704.5, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1548,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[410.5, 696, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1549,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[685.5, 696, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1550,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[846.18212890625, 676.6995849609375, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1551,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[921.18212890625, 676.7000122070313, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1552,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[883.18212890625, 688.4619750976563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1553,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[881.4535522460938, 622.138427734375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1554,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				482,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-175.2000122070313, 736.5999755859375, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1720,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-170.2000122070313, 419.6000061035156, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1721,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-147.2000122070313, -35.39999389648438, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1722,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1174, 19, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1723,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1070, 34, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1724,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[844.18212890625, 791.6995849609375, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1725,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[919.18212890625, 791.7000122070313, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1726,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[881.18212890625, 803.4619750976563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1727,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[879.4535522460938, 737.138427734375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1728,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[411.5, 797, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1729,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[686.5, 797, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1730,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-235, 188, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1731,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-145, 188, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1732,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-55, 188, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1733,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1021, 343, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				26,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[906, 300, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1330,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[1150, 705, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1403,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1152, 350, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1465,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1023, 647, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				2102,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[872, 673, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				250,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[929, 674, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				258,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[25, 151, 0, 60, 40, 0, 1.595042586326599, 1, 0.5, 0.5, 0, 0, []],
				10,
				260,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[24, 217, 0, 60, 40, 0, 1.595042586326599, 1, 0.5, 0.5, 0, 0, []],
				10,
				261,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[98, 673, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				478,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			9344802509911195,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[486, 345, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1480,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level3",
		960,
		700,
		true,
		"Levels",
		802039587791003,
		[
		[
			"Layer 0",
			0,
			2699560918743858,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				208,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				252,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				253,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				270,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				271,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[350, 75, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				273,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[986, 526, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				277,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[573, 500, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				278,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[427, 193, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				353,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[500, 75, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				269,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[650, 75, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				274,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[339, 500, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				275,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[691.833740234375, 73.71002197265625, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				295,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[751.833740234375, 73.71002197265625, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				296,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[811.833740234375, 73.71002197265625, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				309,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[871.833740234375, 73.71002197265625, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				310,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[931.833740234375, 73.71002197265625, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				311,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[903.3302001953125, 62.7344970703125, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				312,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[899.833740234375, 65.71002197265625, 0, 45, 94, 0, 0, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				313,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[976, 397, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				320,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[259, 339.5, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				339,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[259, 150.5, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				402,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[569, 193, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				417,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[436, 384, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				454,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[498, 384, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				455,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[340, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				281,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[430, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				294,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[520, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				302,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[610, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				321,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[700, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				322,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[790, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				323,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880, 275, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				362,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[404, 238, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				560,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[616, 238, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				561,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[791, 238, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				562,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[806, 311, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				563,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[611, 311, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				564,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[415, 311, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				565,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				121,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[766.9344482421875, 152.8881683349609, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				287,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[795.9344482421875, 152.8881683349609, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				288,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[766.9344482421875, 94.88816833496094, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				289,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[795.9344482421875, 94.88816833496094, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				290,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[781.9344482421875, 121.8881683349609, 0, 55, 105, 0, 3.141592741012573, 1, 0.5, 0.521276593208313, 0, 0, []],
				9,
				291,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[258, 541.75, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				352,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[784, 500, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1555,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[647, 388, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1556,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[709, 388, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1557,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[814, 747, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1558,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[465, 758, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1559,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				50,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[975.5999755859375, 275.1999816894531, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				222,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1065.599975585938, 275.1999816894531, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				477,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1155.599975585938, 275.1999816894531, 0, 35, 4, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1734,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[976.5999755859375, 238.1999816894531, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1735,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[991.5999755859375, 311.1999816894531, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1736,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[255.7999877929688, 756.2999877929688, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1741,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-225, 200, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1747,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-156, 318, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1750,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-186, 749, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1753,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-228, 553, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1754,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-166, 553, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1755,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-102, 378, 0, 49, 102, 0, 1.570796370506287, 1, 0.5306122303009033, 0.5098039507865906, 0, 0, []],
				10,
				1745,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[-113, 461, 0, 45, 94, 0, 1.570796370506287, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				1749,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1010.100708007813, 76.79510498046875, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1752,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1070.100708007813, 76.79510498046875, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1756,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1130.100708007813, 76.79510498046875, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1757,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1101.59716796875, 95.819580078125, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				1758,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1098.100708007813, 98.79510498046875, 0, 45, 94, 0, 0, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				1759,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[821, -44, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1760,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1083, -6, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1761,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-165, -64, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1762,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1072, 717, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1770,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[783, 186, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				495,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[64, 421, 0, 1046, 276, 0, -1.570796489715576, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				276,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[225, 220, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				316,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 153, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				317,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 66, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				318,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 0, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				319,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 525.25, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				280,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 458.25, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				292,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 371.25, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				293,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[225, 305.25, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				308,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[224, 647.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				349,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[224, 580.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				350,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[190, 542.25, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				351,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[222.8000030517578, 739.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1737,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[221.8000030517578, 862.0499877929688, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1738,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[221.8000030517578, 795.0499877929688, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1739,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[187.8000030517578, 756.7999877929688, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1740,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[228, -90, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1742,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[228, -156, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1743,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[151, 635, 0, 50, 103, 0, 0, 1, 0.5199999809265137, 0.5145630836486816, 0, 0, []],
				10,
				1751,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[178.2482299804688, 47.51223754882813, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				325,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[176.7517700195313, 50.48776245117188, 0, 45, 94, 0, 0, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				326,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[184.6056213378906, 357.4910278320313, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				327,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[180.1091613769531, 354.466552734375, 0, 50, 103, 0, 0, 1, 0.5199999809265137, 0.5145630836486816, 0, 0, []],
				10,
				328,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[184, 182, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				279,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[184, 182.0787353515625, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				206,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[216, 672, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				315,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[273, 673, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				329,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[940, 134, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				333,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[940, 185, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				334,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[940, 226, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				335,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[940, 266, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				357,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[940, 303, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				392,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[940, 340, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				393,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[226.5, 22.5, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				394,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[283.5, 23.5, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				407,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			2996849159773622,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[491, 341, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1481,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level4",
		960,
		700,
		true,
		"Levels",
		421144064147133,
		[
		[
			"Layer 0",
			0,
			7396218551973698,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				113,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				115,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				116,
				[
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				123,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				124,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[401, 270, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				127,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[262, 87, 0, 2, 2, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				129,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[480, 54, 0, 1046, 276, 0, 0, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				131,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[664, 270, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				132,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[771, 431, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				134,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[243.9987182617188, 217.7766265869141, 0, -40, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				136,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[388, 200, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				137,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[638, 200, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				138,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[300, 348, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				140,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[360, 348, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				141,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[420, 348, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				142,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 348, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				143,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[540, 346, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				144,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[600, 348, 0, 97.12295532226563, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				145,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[678, 420, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				146,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[678, 480, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				147,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[845, 472.3695678710938, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				151,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[55, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				153,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[90, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				154,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[125, 85, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				155,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[786, 126, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				156,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[821, 126, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				157,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[856, 126, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				158,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[616.3324584960938, 120.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				159,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[651.3324584960938, 120.2053680419922, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				160,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[882, 514.1319580078125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				161,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.2714233398438, 447.8084106445313, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				162,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[882.72314453125, 360.2373657226563, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				163,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.7611694335938, 294.0502624511719, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				164,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[40, 176, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				165,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[130, 176, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				166,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[220, 176, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				167,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[310, 176, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				168,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[400, 176, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				169,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[18, 263, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				172,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[43, 263, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				173,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[66, 263, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				175,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[625.0635986328125, 318.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				176,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[660.0635986328125, 318.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				177,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[695.0635986328125, 318.0068359375, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				178,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[625.04638671875, 340.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				179,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[660.04638671875, 340.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				180,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[695.04638671875, 340.9878234863281, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				181,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[625.0464477539063, 366.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				182,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[660.0464477539063, 366.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				183,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[695.0464477539063, 366.6010131835938, 0, 39, 35, 0, 0, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				184,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[535, 152.9100036621094, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				185,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 168.199951171875, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				186,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 184.3834075927734, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				187,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 200.1719818115234, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				188,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 215, 0, 34.85900115966797, 8, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				189,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[450, 485, 0, 41, 91, 0, 1.570796370506287, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				190,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[439, 480, 0, 45, 94, 0, 1.570796370506287, 1, 0.5111111402511597, 0.585106372833252, 0, 0, []],
				10,
				191,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[330, 354.5853576660156, 0, 41, 91, 0, 0, 0.800000011920929, 0.5121951103210449, 0.5054945349693298, 0, 0, []],
				17,
				192,
				[
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[326, 353, 0, 50, 103, 0, 0, 1, 0.5199999809265137, 0.5145630836486816, 0, 0, []],
				10,
				193,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[-32.23068237304688, 263, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				209,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-7.230682373046875, 263, 0, 34.85900115966797, 8, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				210,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[12, 545, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				211,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[14.19400024414063, 470, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				212,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[14.19400024414063, 395, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				213,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[14.19400024414063, 320, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				214,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[126, 366, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				207,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[253, 466, 0, -40, 40, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				149,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[236, 340, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				126,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[837, 329, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				128,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[930, 470, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				133,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[930, 330, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				139,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[937, 221, 0, -40, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				170,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[118, 200, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				226,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				251,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[672, 452.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				135,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, 453.0393676757813, 0, 60, 107, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				215,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[789, 169, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				150,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[789, 198, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				152,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[843, 169, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				196,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[843, 198, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				197,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[818.6000366210938, 183.3999938964844, 0, 55, 105, 0, -1.570796489715576, 1, 0.5, 0.521276593208313, 0, 0, []],
				9,
				249,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[122, 629, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				240,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[410.5, 599, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				272,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[673.5, 599, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1560,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[414.8333129882813, 762, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1562,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[677.8333129882813, 762, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1563,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[10.90299987792969, 684.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1565,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[13.09700012207031, 609.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1566,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				122,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-76, 366.5, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1744,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-80, 629.5, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1746,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[845.4715576171875, 775.1920166015625, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1561,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[882.4715576171875, 816.9544677734375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1564,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[880.7429809570313, 750.630859375, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1763,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[883.1947021484375, 663.059814453125, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1764,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[881.2327270507813, 596.8727416992188, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1765,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[837.4715576171875, 631.822509765625, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1766,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[930.4715576171875, 772.822509765625, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1767,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[930.4715576171875, 632.822509765625, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1768,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-239, 177, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				117,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-149, 177, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				257,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-59, 177, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1771,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-161, 201, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1772,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-224, 369, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1773,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-224, 632, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1774,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-70, -22, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1775,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-198, -20, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1776,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[1037, 793, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1777,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1039, 460, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1778,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1037, -9, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1779,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1196, 795, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1780,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1198, 462, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1781,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1184, -13, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1782,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[199, -91, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1783,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[770, -92, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1784,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[8.902999877929688, 836.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1785,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[11.09700012207031, 761.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1786,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[752, 182, 0, 95, 33, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				33,
				496,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[197, 616, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				479,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[254, 617, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				480,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[834, 266, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				507,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[891, 267, 0, 60, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				572,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[159, 146, 0, 60, 40, 0, 1.545875906944275, 1, 0.5, 0.5, 0, 0, []],
				10,
				573,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[147, 209, 0, 60, 40, 0, 1.545875906944275, 1, 0.5, 0.5, 0, 0, []],
				10,
				576,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[942, 253, 0, 60, 40, 0, 1.569392800331116, 1, 0.5, 0.5, 0, 0, []],
				10,
				580,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[945, 188, 0, 60, 40, 0, 1.569392800331116, 1, 0.5, 0.5, 0, 0, []],
				10,
				581,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[676, 488, 0, 97.12295532226563, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				582,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6430517887317144,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[454, 352, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1482,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level5",
		960,
		700,
		true,
		"Levels",
		9923746474841702,
		[
		[
			"Layer 0",
			0,
			1532147839038905,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				324,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				330,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 538, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				331,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				337,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				338,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[344, 415, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				345,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[13, 240, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				355,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[427, 193, 0, 39, 35, 0, -0.3225201070308685, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				369,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[577, 415, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				384,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 484, 0, -40, 40, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				385,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[49, 358, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				396,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[337, 358, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				340,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[610, 356, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				341,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[113, 240, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				342,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[213, 240, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				343,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[313, 240, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				346,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[413, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				358,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[513, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				359,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[613, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				360,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[713, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				361,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[813, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				363,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[913, 242, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				364,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[105, 409, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				374,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[105, 459, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				375,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[35, 444.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				370,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[135, 444.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				377,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[235, 444.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				378,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[335, 444.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				379,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[435, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				380,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[535, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				381,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[635, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				382,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[735, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				383,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[835, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				386,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[935, 446.7999877929688, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				387,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[444, 152, 0, 39, 35, 0, -0.3225201070308685, 1, 0.5128205418586731, 0.5142857432365418, 0, 0, []],
				10,
				388,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[739, 64, 0, 1046, 276, 0, 0, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				356,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[349, 502, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				200,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[582, 502, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				202,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[917, 502, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				237,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[109, 498, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				201,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[105, 516, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				376,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[317.25, 283, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				203,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[600.25, 283, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				354,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[885.25, 283, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				371,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[77.25, 279, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				456,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[290.25, 178, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				457,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[573.25, 178, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				458,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[858.25, 178, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				459,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[50.25, 174, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				460,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-398, 275, 0, 62, 106, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				15,
				373,
				[
				],
				[
				[
					3,
					0,
					0,
					"1200,274",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[885, 415, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				566,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				262,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[218, 508, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				365,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[218, 475, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				366,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 508, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				367,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[160, 475, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				368,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[187.0060424804688, 491.4468383789063, 0, 56, 112, 0, 1.570796370506287, 1, 0.5, 0.5106382966041565, 0, 0, []],
				9,
				372,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[182, 590, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				218,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[480, 590, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				219,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[783, 593, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				505,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-75, 758, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1567,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[293, 763, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1568,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[655, 758, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1569,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1098.5, 588, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1570,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[1042, 764, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1571,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-253.6000061035156, 446.9200134277344, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				332,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-153.6000061035156, 446.9200134277344, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1787,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-53.60000610351563, 446.9200134277344, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1788,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1037, 447, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1789,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1137, 447, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1790,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1102, 506, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1791,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1109, 411, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1792,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-134.5, 417.5, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1793,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-139.5, 500.5, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1794,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1026, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1795,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1126, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1796,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1226, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1797,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-290, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1798,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-190, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1799,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-90, 241, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1800,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-256, 35, 0, 1046, 276, 0, 0, 1, 0.5, 0.5036231875419617, 0, 0, []],
				10,
				1801,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[143, 145.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, -1.570796489715576, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				220,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[143, 146.0393676757813, 0, 60, 107, 0, -1.570796489715576, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				344,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1241,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1051, 356, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1802,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-241, 357, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1803,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-151, 593, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1804,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[31.125, -112.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1805,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[131.125, -112.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1806,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[231.125, -112.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1807,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[331.125, -112.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1808,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[431.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1809,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[531.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1810,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[631.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1811,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[731.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1812,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[831.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1813,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[931.125, -110.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1814,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1044.125, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1815,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1144.125, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1816,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1244.125, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1817,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-271.875, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1818,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-171.875, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1819,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-71.875, -111.125, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1820,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[249, 496, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				497,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[935, 422, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				632,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[935, 472, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				636,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[935, 529, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				637,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[932, 185, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				638,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[932, 231, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				666,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[19, 171, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				671,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[19, 221, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				672,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[982.5, 286, 0, 44, 65, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				130,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6095927570388124,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[436, 358, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1483,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-29, 290, 0, 44, 65, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				1508,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-26, 285, 0, 44, 65, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2179,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level6",
		960,
		700,
		true,
		"Levels",
		9441363114903594,
		[
		[
			"Layer 0",
			0,
			5662246500050627,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				47,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				389,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				390,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				398,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				401,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1093, -5, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				403,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[416, 257, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				404,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[604, 380, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				405,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-30, 14, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				409,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[547, 107, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				414,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[310, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				418,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[400, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				419,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[490, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				420,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[95, 444, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				427,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[414, 17, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				432,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[80, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				433,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-15, 258, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				435,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[743, 525, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				443,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 450, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				444,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 375, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				445,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 300, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				446,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 220.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				447,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 145.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				448,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 70.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				449,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, -4.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				450,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[772, 129, 0, -40, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				434,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[580, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				422,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[187, 121, 0, -40, 40, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				413,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[-10, 140, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				423,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 538.9000244140625, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				424,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 463.8999938964844, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				425,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 388.8999938964844, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				426,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 313.8999938964844, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				436,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 234.3999938964844, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				437,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[709, 450, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				461,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[709, 276, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				462,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[793, 280, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				463,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[257, 434, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				464,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[257, 248, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				465,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[161, 439, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				466,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[161, 253, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				467,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[361, 107, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				468,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[61, 107, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				469,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[546.3333129882813, 188, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				470,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[360.3333129882813, 188, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				471,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[60.33331298828125, 182, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				472,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[709, 48, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				473,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[793, 52, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				474,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[900, 407, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				18,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[900, 90, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				35,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[466, 321.9606323242188, 0, 62, 129, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				221,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[466, 322.0393676757813, 0, 60, 107, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				412,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[807.4000244140625, 474.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				415,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[774.4000244140625, 474.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				428,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[807.4000244140625, 532.4000244140625, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				429,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[774.4000244140625, 532.4000244140625, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				430,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[790.4000244140625, 501.3999938964844, 0, 56, 112, 0, 0, 1, 0.5, 0.5106382966041565, 0, 0, []],
				9,
				431,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[91, 712, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1572,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[897, 734, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1573,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[743, 678.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1574,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[743, 603.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1575,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[1097, 702, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1576,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[203, 687.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1577,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[203, 612.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1578,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[255, 609.5, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1579,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[159, 614.5, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1580,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[708, 682, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				1581,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[420, 487, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1582,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[200.5, -74.074951171875, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				391,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[200.5, -149.0749816894531, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				493,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[200.5, 74.5250244140625, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				703,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[200.5, -0.4749755859375, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				737,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[252.5, -3.4749755859375, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				771,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[156.5, 1.5250244140625, 0, 20, 50, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				17,
				846,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[744, -102, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				416,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[744, -177, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				635,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[742.6666259765625, 836.8333129882813, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				929,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[742.6666259765625, 761.8333129882813, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				955,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[786, 693, 0, 20, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				986,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-128.8333282470703, 139.75, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1017,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-218.8333282470703, 139.75, 0, 34.85906982421875, 4.70867919921875, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				17,
				1049,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-147.8333282470703, 106.75, 0, 20, 50, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				17,
				1080,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-148.5000152587891, 181.75, 0, 20, 50, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				1124,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1100, 341, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1155,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[-63, 444, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				411,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-67, 712, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1183,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[199, 839.5, 0, 34.85906982421875, 4.70867919921875, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				669,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[199, 764.5, 0, 33, 4.709000110626221, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				17,
				902,
				[
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[601, 718, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1216,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[600, -86, 0, 109, 296, 0, 0, 1, 0.5045871734619141, 0.5, 0, 0, []],
				10,
				1250,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[319, 684, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1282,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-96, -101, 0, 255, 69, 0, 0, 1, 0.501960813999176, 0.5072463750839233, 0, 0, []],
				10,
				1314,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[-199, 431, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1345,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[-203, 699, 0, 69, 244, 0, 0, 1, 0.5072463750839233, 0.5, 0, 0, []],
				10,
				1704,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[160, -290, 0, 52, 97, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				453,
				[
				],
				[
				[
					3,
					0,
					0,
					"160,750",
					0,
					8,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[700, -214, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				452,
				[
				],
				[
				[
					3,
					0,
					0,
					"690,800",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				336,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				397,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[792, 440, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				498,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[821, 683, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				670,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[779, 686, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				700,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[738, 685, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				704,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[68, 85, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				705,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[68, 135, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				706,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[68, 192, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				734,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[826, 22, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				738,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[784, 25, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				739,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[743, 24, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				740,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[265, 20, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				768,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[223, 23, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				772,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[182, 22, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				773,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[291, 535, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				774,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[249, 538, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				788,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[208, 537, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				877,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[709, -8.5, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				174,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[149, -12, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				488,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[201, 712, 0, 157, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				489,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[715, 715, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				1769,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			8680169425972979,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[456, 351, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1484,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level7",
		960,
		700,
		true,
		"Levels",
		7412681474786466,
		[
		[
			"Layer 0",
			0,
			4675791579253622,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				406,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				242,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				243,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				255,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				256,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[42, 170, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				266,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[350, 357, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				583,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[990, 604, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				267,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[99, 229, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				259,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[357, 462, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				263,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[288, 507, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				264,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[508, 504, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				283,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[284, 310, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				282,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[503, 316, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				284,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[426, 369, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				285,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[425, 466, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				286,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[629, 262, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				297,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[626, 384, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				298,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[44, 286, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				299,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[66, 382, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				300,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[853, 534, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				301,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[709, 524, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				303,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[219, 396, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				599,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[397, 221, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				804,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[573, 400, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				805,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[433, 28, 0, 384, 191, 0, 0, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				408,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[47, 495, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				410,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				395,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[854, 261.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				268,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[854, 262.0393676757813, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				600,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-14, 27, 0, 372, 188, 0, 0, 1, 0.5, 0.5053191781044006, 0, 0, []],
				10,
				1207,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[900, 27, 0, 372, 188, 0, 0, 1, 0.5, 0.5053191781044006, 0, 0, []],
				10,
				1267,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[176.3999938964844, 462.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				438,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[147.3999938964844, 462.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				530,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[176.3999938964844, 516.4000244140625, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				568,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[147.3999938964844, 516.4000244140625, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				569,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[161.7007293701172, 487.3999938964844, 0, 61, 110, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				570,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[350.75, 551.375, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1583,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[357.75, 656.375, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1584,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[288.75, 701.375, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1585,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[508.75, 698.375, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1586,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[426.75, 563.375, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1587,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[425.75, 660.375, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1588,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[219.75, 750.375, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1589,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[573.75, 754.375, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1590,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[784, 626, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1591,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[640, 616, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1592,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[630, 515, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1593,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				254,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-201, 258, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1821,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-139, 169, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1822,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-199, 374, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1823,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[-177, 470, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1824,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[-196, 583, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1825,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[989, 292, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1826,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[-69, 256, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				265,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-47, 411, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1827,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-86, 526, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1828,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[38, 747, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1829,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[-71, 667, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1830,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1113, 19, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1831,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1185, 155, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1832,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1203, 299, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1833,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1103, 348, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1834,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1163, 516, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1835,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1139, 651, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1836,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1204, 698, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1837,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[788, 759, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1838,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[664, 722, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1839,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1113, 800, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1840,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[200, 45, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1841,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[659, 36, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1842,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[163, 424, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				529,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[190, 577, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				878,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[148, 580, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				879,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[107, 579, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				899,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[55.6666259765625, 579.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				903,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[13.6666259765625, 582.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				904,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-27.3333740234375, 581.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				905,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			7996309432305061,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[475, 354, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1485,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level8",
		960,
		700,
		true,
		"Levels",
		1870103451982424,
		[
		[
			"Layer 0",
			0,
			9361430892583461,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				575,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				577,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				578,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				586,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				587,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[106, 89, 0, 78, 95, 0, 0, 1, 0.5, 0.5052631497383118, 0, 0, []],
				10,
				615,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[171, 67, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				616,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[813, 474, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				622,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[650, 507, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				623,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[455, 459, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				624,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[442, 195, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				625,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[439, 547, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				626,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[301, 503, 0, 75, 46, 0, 0, 1, 0.5066666603088379, 0.5, 0, 0, []],
				10,
				801,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[169, 432, 0, 73, 46, 0, 0, 1, 0.5068492889404297, 0.5, 0, 0, []],
				10,
				802,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					28,
					1
				]
			]
,			[
				[180, 582, 0, 75, 45, 0, 0, 1, 0.5066666603088379, 0.5111111402511597, 0, 0, []],
				10,
				803,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[756, 77, 0, 384, 191, 0, 0, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				588,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[313, 585, 0, 75, 45, 0, 0, 1, 0.5066666603088379, 0.5111111402511597, 0, 0, []],
				10,
				806,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[755, 257, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				617,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[692, 154, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				619,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[763, 155, 0, 35, 65, 0, 0, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				620,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[823, 148, 0, 35, 66, 0, 0, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				621,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[539, 501.9606323242188, 0, 62, 129, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				590,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[539, 502.0393676757813, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				598,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[393, 77, 0, 372, 188, 0, 0, 1, 0.5, 0.5053191781044006, 0, 0, []],
				10,
				1300,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				481,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[188.3987884521484, 306.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				244,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[188.3987884521484, 277.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				304,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[134.3987884521484, 306.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				305,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[134.3987884521484, 277.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				306,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[161.4048309326172, 291.9574890136719, 0, 61, 110, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				307,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[323.1428833007813, 275.526611328125, 0, 446, 42, 0, 0, 1, 0, 0, 0, 0, []],
				35,
				1495,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ123456789 ",
					"PARK IN REVERSE",
					1,
					0,
					1,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde2356789\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[460, 683, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1594,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[313, 647, 0, 75, 46, 0, 0, 1, 0.5066666603088379, 0.5, 0, 0, []],
				10,
				1595,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[190, 683, 0, 75, 45, 0, 0, 1, 0.5066666603088379, 0.5111111402511597, 0, 0, []],
				10,
				1596,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				585,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-125.7894897460938, 269.4210510253906, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1843,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[836, 698, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1844,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-187.7894897460938, 479.4210510253906, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1845,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[32.21051025390625, 456.4210510253906, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1846,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-191.7894897460938, 222.4210510253906, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1847,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[27.21051025390625, 228.4210510253906, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1848,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-49.78948974609375, 281.4210510253906, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1849,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-50.78948974609375, 418.4210510253906, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1850,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-256.7894897460938, 308.4210510253906, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1851,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[-78.78948974609375, 133.4210510253906, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1852,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[97.21051025390625, 312.4210510253906, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1853,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[-125.0394897460938, 563.7960205078125, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1854,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-118.0394897460938, 718.7960205078125, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1855,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-187.0394897460938, 693.7960205078125, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1856,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[32.96051025390625, 760.7960205078125, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1857,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-49.03948974609375, 575.7960205078125, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1858,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-50.03948974609375, 722.7960205078125, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1859,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-256.0394897460938, 662.7960205078125, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1860,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[97.96051025390625, 666.7960205078125, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1861,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[950, 616, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1862,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[949, 304, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1863,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1145, 167, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1864,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1163, 311, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1865,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1063, 360, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1866,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1123, 528, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1867,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1099, 663, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1868,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1164, 710, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1869,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1073, 812, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1870,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[551, 789, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				807,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[344, 738, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1871,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[554, 665, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1872,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[218, 760, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1873,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[737, 703, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1874,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1148, -77, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1875,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1166, 67, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1876,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1066, 116, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1877,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[-56, 72, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1878,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-191, -89, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1879,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-100, -77, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1880,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[-184, 72, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1881,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[229, 292, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				539,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			8260278976355169,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[436, 339, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1486,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level9",
		960,
		700,
		true,
		"Levels",
		7589749092743183,
		[
		[
			"Layer 0",
			0,
			2864733370895933,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				314,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				347,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				492,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				591,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				592,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[990, 414, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				596,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[128, 58, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				601,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[208, 60, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				602,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[438, 254, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				603,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[248, -86, 0, 35, 66, 0, 0, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				606,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[682, 96, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				607,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[708, 391, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				608,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[365, 407, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				609,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[280, 487, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				610,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[474, 481, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				611,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[27, 9, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				612,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[432, 105, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				613,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[39, 431, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				593,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[789, 96, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				618,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[894, 96, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				810,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[145, 509, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				811,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[-358, 206, 0, 48.16949081420898, 115.9453125, 0, 1.570796370506287, 1, 0.508474588394165, 0.5, 0, 0, []],
				15,
				19,
				[
				],
				[
				[
					3,
					0,
					0,
					"1200,206",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				574,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[598, 489.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				594,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[598, 490.0393676757813, 0, 60, 107, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				595,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[833.4000244140625, 394.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				571,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[806.4000244140625, 394.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				627,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[833.4000244140625, 448.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				629,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[806.4000244140625, 448.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				630,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[820.4000244140625, 419.3999938964844, 0, 55, 105, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				808,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[40, 739, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1597,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[988, 719, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1598,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[708, 709, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1599,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[252.6666259765625, 591, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1600,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[359.6666259765625, 591, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1601,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[464.6666259765625, 591, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1602,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				589,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-173.3333435058594, -3, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				614,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[-161.3333435058594, 419, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1882,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[-160.3333435058594, 727, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1883,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1010, -60, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1884,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1171, 410.3333129882813, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1885,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1169, 715.3333129882813, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1886,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1191, -63.66668701171875, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1887,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[359, -110, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1888,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[466, -110, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1889,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[571, -110, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1890,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[656, -70, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1891,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[763, -70, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1892,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[868, -70, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1893,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[154, 746, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1894,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[261, 746, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1895,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[366, 746, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1896,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[403, 800, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1897,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[510, 800, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1898,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[615, 800, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1899,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[823, 358, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1463,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[934, 144, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				926,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[873, 669, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				930,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[831, 672, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				931,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[790, 671, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				932,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[78.6666259765625, 236.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				956,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-15, 190, 0, 127, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2120,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			7840379273317557,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[467, 334, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1487,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[972, 178, 0, 127, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2121,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level10",
		960,
		700,
		true,
		"Levels",
		4020714813179133,
		[
		[
			"Layer 0",
			0,
			6705783370240763,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				631,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				633,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				634,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				641,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				642,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[496, 209, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				648,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[697, 193, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				649,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[529, 294, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				650,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[116, 133, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				651,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[38, 142, 0, 35, 65, 0, 0, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				652,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[85, 60, 0, 35, 66, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				653,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[292, 171, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				655,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[420, 216, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				656,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[480, -79, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				657,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[661, 93, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				658,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[970, 154, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				659,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1290, 425, 0, 62, 106, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				646,
				[
				],
				[
				[
					3,
					0,
					0,
					"-200,425",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[36, 244, 0, 35, 65, 0, 0, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				812,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[310, 635, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				813,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[553, 486, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				814,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[641, 215, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				815,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[422, 107, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				816,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[782, 518, 0, 35, 66, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				817,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1126, 730, 0, 35, 66, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				818,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[210, -200, 0, 58, 126, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				597,
				[
				],
				[
				[
					3,
					0,
					0,
					"210,1200",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				584,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[108, 238.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				644,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[108, 239.0393676757813, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				645,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[790.6000366210938, 169.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				660,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[817.6000366210938, 169.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				661,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[790.6000366210938, 115.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				662,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[817.6000366210938, 115.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				663,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[803.6000366210938, 140.3999938964844, 0, 55, 105, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				9,
				664,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[612, 675, 0, 36, 80, 0, 0.004269126802682877, 1, 0.5, 0.5, 0, 0, []],
				10,
				1603,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[499, 757, 0, 35, 79, 0, 0.004269126802682877, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1604,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[672, 543, 0, 64, 66, 0, 0.004269126802682877, 1, 0.5, 0.5, 0, 0, []],
				10,
				1605,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[463, 649, 0, 66, 65, 0, 0.004269126802682877, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1606,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[688, 767, 0, 64, 65, 0, 0.004269126802682877, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1607,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[567, 544, 0, 66, 65, 0, 0.004269126802682877, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1608,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[428.7142333984375, 551.8571166992188, 0, 64, 66, 0, 0.004269126802682877, 1, 0.5, 0.5, 0, 0, []],
				10,
				1609,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1036, 772, 0, 36, 80, 0, 0.004269126802682877, 1, 0.5, 0.5, 0, 0, []],
				10,
				1610,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[819, 735, 0, 35, 79, 0, 0.004269126802682877, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1611,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[747.5, 606, 0, 66, 65, 0, 0.004269126802682877, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1612,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1102, 587, 0, 64, 65, 0, 0.004269126802682877, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1613,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				640,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-85, 143, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1900,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[-67, 607, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1901,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[-233, 138, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1902,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[-215, 602, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1903,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[604, 10, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1904,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[878, -30, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1905,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[673, -95, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1906,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[727, 5, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1907,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[842, -130, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1908,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[822, -8, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1909,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[314, -39, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1910,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[938, 649, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1911,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[54, 684, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1912,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1135, 34, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1913,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[803, 206, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1407,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[940, 446, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				950,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[941, 335, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				958,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[42, 304, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				654,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[136, 683, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				983,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[95, 682, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				987,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[969, 391, 0, 127, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2122,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-15, 390, 0, 127, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2123,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[186, 713, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2124,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[167, -4, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2125,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			8307397495685718,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[468, 343, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1488,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level11",
		960,
		700,
		true,
		"Levels",
		8287880744295807,
		[
		[
			"Layer 0",
			0,
			6569866907982567,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				665,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				667,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				668,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				675,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				676,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[336, 457, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				684,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[606, 340, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				688,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[304, 347, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				690,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[473, 320, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				691,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[-50, 46, 0, 384, 191, 0, 0, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				693,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[693, 23, 0, 384, 191, 0, 0, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				647,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[606, 412, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				677,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1001, 309, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				680,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[31, 293, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				819,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[856, 497, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				421,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[671, 374, 0, 35, 65, 0, 0, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				439,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[734, 368, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				440,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[792, 513, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				441,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[237, 357, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				442,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[854, 301, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				451,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[553, 324, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				686,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[480, 415.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				678,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, 416.0393676757813, 0, 60, 107, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				679,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[318, 28, 0, 372, 188, 0, 0, 1, 0.5, 0.5053191781044006, 0, 0, []],
				10,
				506,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				639,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[387.5645141601563, 543.650146484375, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				694,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[387.5645141601563, 510.6501770019531, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				695,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[329.5645141601563, 543.650146484375, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				696,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[329.5645141601563, 510.6501770019531, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				697,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[356.570556640625, 528.0970458984375, 0, 60, 110, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				698,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[307, 595, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				548,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[720, 595, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				553,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[30, 599, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1614,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1001, 612, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				1615,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[294.5, 272, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				685,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[227.5, 282, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1616,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[481, 262, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				1617,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[561, 266, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1618,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[180, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1619,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[312, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1620,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[447, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1621,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[557, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1622,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[670, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1623,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[809, 650, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1624,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				674,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1049, 52, 0, 372, 188, 0, 0, 1, 0.5, 0.5053191781044006, 0, 0, []],
				10,
				1914,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					42,
					1
				]
			]
,			[
				[182.1666564941406, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1915,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[314.1666564941406, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1916,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[449.1666259765625, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1917,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[559.1666259765625, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1918,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[672.1666259765625, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1919,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[811.1666259765625, 780, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1920,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1198, 573, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1921,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1118, 454, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1922,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1129, 757, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1923,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[1184, 314, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1924,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-137, 508, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1925,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-217, 389, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1926,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-206, 692, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1927,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-151, 249, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1928,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-117, 707, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1929,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[425, 525, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1408,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6376488672340298,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[484, 341, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1489,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level12",
		960,
		700,
		true,
		"Levels",
		3410184937876404,
		[
		[
			"Layer 0",
			0,
			8572792352653063,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				699,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				701,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				702,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				709,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				710,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[128, 261, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				717,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[122, 515, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				719,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[183, 491, 0, 35, 65, 0, 0.7853981852531433, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				720,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[226, 528, 0, 35, 66, 0, 0, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				721,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[775, 208, 0, 66, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				725,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[791, 55, 0, 64, 65, 0, 0, 1, 0.5, 0.5076923370361328, 0, 0, []],
				10,
				726,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[952, 196, 0, 384, 191, 0, -1.570796489715576, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				727,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[-89, 561, 0, 35, 66, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				714,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[65, 220, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				820,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[18, 303, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				821,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[12, 443, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				822,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[189, 264, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				823,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[171, 389, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				824,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[469, 186, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				825,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[765, 537, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				826,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[672, 562, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				827,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[685, 479, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				828,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[588, 944, 0, 45, 94, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				711,
				[
				],
				[
				[
					3,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[342, -231, 0, 52, 97, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				724,
				[
				],
				[
				[
					3,
					0,
					0,
					"342,800",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				673,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[637, 115, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1095,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[689, 161.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				712,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[689, 162.0393676757813, 0, 60, 107, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				713,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[952, 576, 0, 384, 191, 0, -1.570796489715576, 1, 0.5026041865348816, 0.5026177763938904, 0, 0, []],
				10,
				1117,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					30,
					1
				]
			]
,			[
				[32, 71, 0, 34, 68, 0, 0.5899385809898377, 1, 0.5, 0.5, 0, 0, []],
				10,
				722,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-54, 91, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1150,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[158.7567443847656, 144.3751220703125, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				728,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[158.7567443847656, 111.3751220703125, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				729,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[100.7567443847656, 144.3751220703125, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				730,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[100.7567443847656, 111.3751220703125, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				731,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[127.7627868652344, 128.8219604492188, 0, 60, 105, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				732,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[469, 628, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				554,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[663, 76, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1520,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[705, 75, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1528,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[797.6666259765625, 638, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1625,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[703, 699, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1626,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[717.6666259765625, 580, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1627,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[83, 606, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				723,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[172, 623, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1628,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-134, 88, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1930,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-214, 505, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1931,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-205, 724, 0, 35, 65, 0, 0.7853981852531433, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				1932,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[-53, 718, 0, 35, 66, 0, 0, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1933,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[-111, 266, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1934,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[7, 157, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1935,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-93, 408, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1936,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[757, 771, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1937,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				708,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-24, -28, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1938,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[760, -98, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1939,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-153, -65, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1940,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[45, -138, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1941,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1171, 96, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1942,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1091, 93, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1943,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1114, 271, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1944,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1212, 192, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1945,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1072, -60, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1946,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1184, 578, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1947,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[1104, 575, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1948,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[1127, 753, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1949,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1225, 674, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1950,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[1085, 422, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1951,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[191, 130, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1464,
				[
				],
				[
				[
					1,
					5,
					23,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[123, 24, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				957,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[108, 694, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				718,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[631, 626, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				988,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[452, 1, 0, 339, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2126,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[444, 711, 0, 339, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2127,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			5532749824382585,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[460, 343, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1490,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level13",
		960,
		700,
		true,
		"Levels",
		4312253974492479,
		[
		[
			"Layer 0",
			0,
			1515140182052062,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				733,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				735,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				736,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				743,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				744,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[37, 343, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				750,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[40, 273, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				751,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[650, 225.5, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				752,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[36, 206, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				753,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[942, 238, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				757,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[158, 507, 0, 64, 66, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				758,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[426, 399, 0, 35, 65, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				759,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[785, -20, 0, 157, 349, 0, -1.570796489715576, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				761,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[480, -20, 0, 157, 349, 0, -1.570796489715576, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				745,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[172, -19, 0, 157, 349, 0, -1.570796489715576, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				748,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[374, 385, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				830,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[36, 159, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				831,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[36, 110, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				832,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[64, 485, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				833,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[47, 415, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				834,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[138, 164, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				835,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[594, 194, 0, 35, 65, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				687,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[427, 261, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				689,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[602, 355, 0, 35, 65, 0, -1.570796489715576, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				692,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[506, 498, 0, 35, 66, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				715,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[329, 196, 0, 34, 68, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				716,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[811, 303, 0, 35, 65, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5076923370361328, 0, 0, []],
				10,
				749,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[686, 400, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				754,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[325, 332, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				755,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				741,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[245, 411.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				746,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[245, 412.0393676757813, 0, 60, 107, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				747,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[719.6000366210938, 190.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				762,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[752.6000366210938, 190.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				763,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[719.6000366210938, 132.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				764,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[752.6000366210938, 132.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				765,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[735.6000366210938, 161.3999938964844, 0, 57.04899978637695, 115, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				9,
				766,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[374, 704, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1629,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[650, 722, 0, 356, 16, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1630,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[305, 546, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1631,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[196, 625, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1632,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[465, 576, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1633,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[574, 621, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1634,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[756, 616, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1635,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[946, 571, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				756,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				742,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-210, 184, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1952,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-113, 276, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1953,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-245, 75, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1954,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-114, 136, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1955,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-134, 15, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1956,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-215, 531, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1957,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-150, 692, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1958,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-225, 331, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1959,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-138, 594, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1960,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-40, 563, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1961,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-166, 424, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1962,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-50, 354, 0, 34, 68, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1963,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[-185, 797, 0, 36, 80, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1964,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-9, 790, 0, 35, 79, 0, 1.570796370506287, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1965,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[287, 736, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1966,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[142, 779, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1967,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[509, 734, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1968,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[744, 730, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1969,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[853, 699, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1970,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1106, 94, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1971,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1110, 427, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1972,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1103, 686, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1973,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[738, 234, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1409,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			4982048331175757,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[505, 337, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1491,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level14",
		960,
		700,
		true,
		"Levels",
		9391372623310348,
		[
		[
			"Layer 0",
			0,
			90775401004922,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[480, 350, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				51,
				239,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				769,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				770,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				777,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				778,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[990, 484, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				782,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[4, 337, 0, 78, 95, 0, 0, 1, 0.5, 0.5052631497383118, 0, 0, []],
				10,
				783,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[12, 466, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				784,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[81, 493, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				785,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[917, 8, 0, 356, 16, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				786,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[20, 96, 0, 34, 68, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				787,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[38, 6, 0, 35, 66, 0, 0, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				789,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[569, -28, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				791,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[200, 1040, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				829,
				[
				],
				[
				[
					3,
					0,
					0,
					"200,-100",
					0,
					3,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[412, -270, 0, 58, 126, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				836,
				[
				],
				[
				[
					3,
					0,
					0,
					"412,800",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[731, 989, 0, 91.86206817626953, 170.3035736083984, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				837,
				[
				],
				[
				[
					3,
					0,
					0,
					"731,-100",
					0,
					4,
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[581, 412, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				838,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[306, 135, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				839,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[314, 631, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				840,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[989, 174, 0, 157, 349, 0, 0, 1, 0.5095541477203369, 0.5014326572418213, 0, 0, []],
				10,
				779,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				707,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[800, 268.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				780,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[800, 269.0393676757813, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				781,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[104.3987884521484, 228.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				796,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[104.3987884521484, 195.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				797,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[46.39878845214844, 228.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				798,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[46.39878845214844, 195.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				799,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[76.40483093261719, 211.9574890136719, 0, 56.9640007019043, 110, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				800,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[765, 164, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1404,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[799, 164, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1509,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[835, 164, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1510,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[584, 732, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1636,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[104, 598, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1637,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[828, 659, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1638,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				776,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-101, -22, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1974,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[-181, -25, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1975,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-158, 153, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1976,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-60, 74, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1977,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-88, 460, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1978,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[-168, 457, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1979,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[-145, 635, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1980,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-47, 556, 0, 36, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1981,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[-147, 313, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1982,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[1151, 257, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1983,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1153, 652, 0, 128, 311, 0, 0, 1, 0.5, 0.5016077160835266, 0, 0, []],
				10,
				1984,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1103, -68, 0, 35, 66, 0, 2.16073489189148, 1, 0.5142857432365418, 0.5, 0, 0, []],
				10,
				1985,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[923, -84, 0, 35, 79, 0, 0, 1, 0.5142857432365418, 0.5063291192054749, 0, 0, []],
				10,
				1986,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[845, 75, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1987,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[-33, 745, 0, 117, 143, 0, 0, 1, 0.504273533821106, 0.503496527671814, 0, 0, []],
				10,
				1988,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[137, 210, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1410,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[389.5, 706, 0, 726, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2128,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[393, 2, 0, 726, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2129,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-17, 349, 0, 726, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2130,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			9189591997569708,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[431, 354, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1492,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level15",
		960,
		700,
		true,
		"Levels",
		4999121648905655,
		[
		[
			"Layer 0",
			0,
			4903967069877255,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				760,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				790,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				845,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				882,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				883,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				775,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[259, 41, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				889,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[748, 51, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				890,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[-190, -9, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				912,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[381, 327, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				880,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[727, 291, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				886,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[242, 760, 0, 373, 173, 0, 0, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				887,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1261, 143, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				896,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[558, 206, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				628,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[634, 231.3385925292969, 0, 57.23077011108398, 154.4090881347656, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				884,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[634, 231.0157165527344, 0, 60, 113, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				885,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[183.3999938964844, 405.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				809,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150.3999938964844, 405.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				891,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[183.3999938964844, 493.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				892,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150.3999938964844, 493.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				893,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[167.3999938964844, 452.3999938964844, 0, 62.9508171081543, 170.9734497070313, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				894,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[-108, 467, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1639,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[419, 463, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1640,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1084, 702, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1641,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[726, 535, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1642,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				881,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[945, 227, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1989,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[-15, 210, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1990,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[950, 489, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1991,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[424, 623, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1993,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-12, 711, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1994,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[170, 356, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1411,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[475, 560, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				989,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[522, 583, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1014,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[577, 560, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1018,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[619, 583, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1019,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[659, 560, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1020,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[528, 71, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1046,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[590, 73, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1050,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[105, 671, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1051,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[210, 674, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1052,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[335, 671, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1077,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[27, 572, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1081,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[33, 335, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1082,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[33, 413, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1083,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[704, 418, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1121,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[777, 755, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1125,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[792, 159, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1126,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[825, 362, 0, 132, 80, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1127,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			2789013355701621,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[477, 335, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1493,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level16",
		960,
		700,
		true,
		"Levels",
		3729772965018577,
		[
		[
			"Layer 0",
			0,
			2867093919451359,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				767,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 500, 0, 80, 100, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				900,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 630, 0, 80, 100, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				901,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 600, 0, -100, 80, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				907,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 600, 0, 100, 80, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				909,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[402, 248, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				918,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[-380, 415, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				897,
				[
				],
				[
				[
					3,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[465, 30, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				924,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[783, 930, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				923,
				[
				],
				[
				[
					3,
					0,
					0,
					"783,-1200",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1264, 312, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				908,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1265, 701, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				913,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[519.4251098632813, 206.9606323242188, 0, 57, 177, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				910,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[523.3284912109375, 206.1797180175781, 0, 59.76922988891602, 143.2679290771484, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				911,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[526, 537, 0, 38, 198, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1430,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[524, 373, 0, 38, 198, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1431,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[530, 282, 0, 38, 198, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1432,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[180.5999755859375, 240, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				895,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[213.5999755859375, 240, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				914,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[180.5999755859375, 162, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				916,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[213.5999755859375, 162, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				919,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[197.5999755859375, 194, 0, 60.9523811340332, 162.3529357910156, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				9,
				920,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				915,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[379, 876, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1643,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				906,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-135, 667, 0, 371, 346, 0, -1.570796489715576, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1995,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-73, 23, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				1997,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[228, 653, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1998,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[572, 650, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1999,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1065, 41, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				922,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[971, 244, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2000,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[981, 608, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2001,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[28, 252, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2002,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[198, 293, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1412,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[765.5, -1, 0, 121, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2131,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[799.5, 661, 0, 128, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2132,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-11.00000190734863, 471.5, 0, 281, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2133,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			3992015953191563,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[459, 348, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1515,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[968, 404, 0, 155, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2134,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level17",
		960,
		700,
		true,
		"Levels",
		6207199896493561,
		[
		[
			"Layer 0",
			0,
			8053162506630588,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				898,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				927,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				928,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				934,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				935,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				938,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[256, 275, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				940,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[562, 359, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				941,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[806, 41, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				948,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[719, 764, 0, 373, 173, 0, 0, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				951,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[159, 51, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				952,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[966, 295, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				939,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-12, 146, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				947,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[310, -270, 0, 60, 113, 0, 3.141592741012573, 1, 0.5, 0.5044247508049011, 0, 0, []],
				15,
				1107,
				[
				],
				[
				[
					3,
					0,
					0,
					"320, 800",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[733, 307, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1108,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[749, 261, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1110,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[754, 460, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1111,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[799, 460, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1112,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[843, 460, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1113,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[818, 364.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				936,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[818, 364.8257446289063, 0, 60, 95, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				937,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[815, 252, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				917,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[861, 273, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1433,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[425, 976, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1434,
				[
				],
				[
				[
					3,
					0,
					0,
					"425, -100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[154.6000366210938, 284.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				921,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[187.6000366210938, 284.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				942,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[154.6000366210938, 226.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				943,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[187.6000366210938, 226.3999938964844, 0, 10, 21, 0, 3.141592741012573, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				944,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[170.6000366210938, 255.3999938964844, 0, 60, 110, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				9,
				945,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[-16, 568, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1645,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[253, 624, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1646,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[560, 432, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1647,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[649, 502, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1648,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				933,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[903, 632, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				2003,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[563, 579, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2007,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-235, 140, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2008,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[-229, 658, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2009,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[-200, 399, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2010,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-201, 282, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2011,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-30, 353, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2012,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-196, 530, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2013,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[174, 617, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2004,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1264, 161, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1996,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1117, 566, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1109,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[166, 321, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1413,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[57, 684, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1152,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[112, 678, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1156,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[480.5, 667, 0, 375, 72, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				1157,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1263, 600, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1158,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[384, -15, 0, 321, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2180,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			7593780702141126,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[460, 377, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1644,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level18",
		960,
		700,
		true,
		"Levels",
		9723015019545857,
		[
		[
			"Layer 0",
			0,
			7942219400531457,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				925,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				953,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				954,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				960,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				961,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[304, 237, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				965,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[887, 295, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				966,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-100, 1, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				972,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[491, 29, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				974,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[428.5, 350, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				975,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[982, 22, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				967,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[305, 21, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				978,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[780, 263.0854187011719, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				979,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[780, 206.3522644042969, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				980,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[780, 157.9812622070313, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				981,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-392, 426, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1114,
				[
				],
				[
				[
					3,
					0,
					0,
					"1100,426",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[190, 763, 0, 373, 173, 0, 0, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				973,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[689, 112.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				962,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[689, 113.7134399414063, 0, 60, 102.8587951660156, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				963,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[615, 922, 0, 59, 112, 0, 0, 1, 0.508474588394165, 0.5, 0, 0, []],
				15,
				1428,
				[
				],
				[
				[
					3,
					0,
					0,
					"615,-100",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[690, 324, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1429,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[225.4000244140625, 92.39999389648438, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				946,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[192.4000244140625, 92.39999389648438, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				968,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[225.4000244140625, 150.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				970,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[192.4000244140625, 150.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				971,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[209.4000244140625, 120.3999938964844, 0, 60, 110, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				976,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[525, 185, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1519,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				964,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[419, 621, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1649,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[877, 645, 0, 328, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1650,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				959,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1142, 627, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				2005,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-112, 677, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				2006,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[213, 200, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1414,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[189, 36, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1184,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[243, 34, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1185,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-16.00000762939453, 217, 0, 248, 72, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				1186,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[792, 674, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1213,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[707, 674, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1217,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[95, 667, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1218,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-5.000003814697266, 508, 0, 271, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2135,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[967, 366, 0, 453, 25, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2136,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[644, 6, 0, 21, 160, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2141,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[184, 655, 0, 127, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2181,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[651, 721, 0, 453, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2137,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-5, 508, 0, 302, 100, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				10,
				2138,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[654.5, -2, 0, 21, 160, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2139,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6802305680992392,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[454, 336, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1699,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level19",
		960,
		700,
		true,
		"Levels",
		6365005606721677,
		[
		[
			"Layer 0",
			0,
			8918198145202719,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				949,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1015,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1016,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1022,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1023,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1026,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[247, 469, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1027,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[935, 71, 0, 371, 346, 0, 0, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1028,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[446, 283, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1030,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-42, 313, 0, 493, 208, 0, 1.570796370506287, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				1031,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[522, 386, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1038,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[269, -40, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1029,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[731, 124, 0, 36, 119, 0, 0, 1, 0.5, 0.5042017102241516, 0, 0, []],
				10,
				1042,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					34,
					1
				]
			]
,			[
				[760, 416, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1043,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[904, 674, 0, 371, 346, 0, -3.141364097595215, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1044,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[273, 221, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1033,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[175, 313, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1115,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[431, 454.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1024,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[431, 455.0393676757813, 0, 60, 107, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1025,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[327, 443, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1439,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[644, 827, 0, 58, 112, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1440,
				[
				],
				[
				[
					3,
					0,
					0,
					"644,-100",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[847.4000244140625, 191.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1008,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[814.4000244140625, 191.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1032,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[847.4000244140625, 249.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1034,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[814.4000244140625, 249.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1035,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[830.4000244140625, 218.3999938964844, 0, 62.9508171081543, 125.3097381591797, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1036,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[526, 574, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1040,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[431, 591, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1041,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[324, 515, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1651,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[222, 695, 0, 371, 346, 0, 1.570796370506287, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1652,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[520, 347, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1653,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[890, 420, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1039,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1021,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[497, -45, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2014,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[-241, 112, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2015,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-240, 602, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2016,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-69, 716, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2017,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[-34, -58, 0, 373, 173, 0, 3.141592741012573, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				2018,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[813, 145, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1415,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[943, 355, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1219,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[941, 276, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1247,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[102, 66, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1251,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[104, 464, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1252,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[154, 500, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1253,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[717.5, -7.000003814697266, 0, 21, 267, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2142,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[649.5, 711, 0, 21, 142, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2143,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			1922128765654951,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[461, 339, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1702,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level20",
		960,
		700,
		true,
		"Levels",
		2880804075431521,
		[
		[
			"Layer 0",
			0,
			9359492742969372,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				982,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 500, 0, 80, 100, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				984,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 630, 0, 80, 100, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				985,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 600, 0, -100, 80, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				991,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 600, 0, 100, 80, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				992,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				995,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[906, 302, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				997,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[384, 4, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1000,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[390, 273, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1001,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[960, 55, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				1002,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[362, 396, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1010,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[362, 329, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1011,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[100, 941, 0, 58, 126, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				998,
				[
				],
				[
				[
					3,
					0,
					0,
					"100,-800",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[648, -240, 0, 58, 112, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1009,
				[
				],
				[
				[
					3,
					0,
					0,
					"648,1100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[-360, 151, 0, 60, 113, 0, 1.570796370506287, 1, 0.5, 0.5044247508049011, 0, 0, []],
				15,
				1012,
				[
				],
				[
				[
					3,
					0,
					0,
					"1100,151",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[457, 383.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				993,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[457, 384.0393676757813, 0, 60, 107, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				994,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[179, 276, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1435,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[408, 209, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1436,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[592, 275, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1437,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[713, 426, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1438,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[284.4000244140625, 418.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				977,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[251.4000244140625, 418.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1003,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[284.4000244140625, 476.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1005,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[251.4000244140625, 476.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1006,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[268.4000244140625, 445.3999938964844, 0, 62.9508171081543, 125.3097381591797, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1007,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[713, 275, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1521,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[369, 583, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				996,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[508, 340, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1308,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[508, 386, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1654,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[510, 433, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1655,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[512, 479, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1656,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-4, 766, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1657,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-6, 375, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1658,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[827, 493, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1659,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[493, 629, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1660,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[363, 364, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1661,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				990,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[449, 766, 0, 373, 173, 0, 0, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				999,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[-27, 12, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2019,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[1074, 416, 0, 371, 346, 0, 1.570796370506287, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				2020,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[913, 664, 0, 371, 346, 0, 1.570796370506287, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				2021,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-182, 769, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2022,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-184, 378, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2023,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-205, -79, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2024,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[268, 371, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1416,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[175.5, 705, 0, 21, 292, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2144,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-9, 158.5, 0, 21, 116, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2145,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[161.5, -1.999996185302734, 0, 21, 192, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2146,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[594, -9.000003814697266, 0, 21, 205, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2147,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[648, 703, 0, 39, 267, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2149,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[974, 248.5, 0, 23, 214, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2148,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6478722014932885,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[462, 351, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1748,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level21",
		960,
		700,
		true,
		"Levels",
		5939514446185789,
		[
		[
			"Layer 0",
			0,
			3953616077251524,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1045,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1047,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1048,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1054,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1055,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1058,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[313, 441, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1059,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1261, 185, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1060,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[456, 313, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1061,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[522, 379, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1070,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[39, 614, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1072,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[523, 539, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1073,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[561, 173, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1074,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[760, 216, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1075,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[421, 676, 0, 371, 346, 0, 1.570796370506287, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1076,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[40, 117, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1062,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[285, 136, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1068,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[973, -21, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				1069,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[389, 444, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1116,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[445.6299438476563, 202.9606323242188, 0, 57.23077011108398, 156.3636322021484, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1056,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[445.6299438476563, 203.5393676757813, 0, 51, 140, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1057,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[661, 921, 0, 60, 113, 0, 0, 1, 0.5, 0.5044247508049011, 0, 0, []],
				15,
				1441,
				[
				],
				[
				[
					3,
					0,
					0,
					"661,-100",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[169, -267, 0, 59, 112, 0, 3.141592741012573, 1, 0.508474588394165, 0.5, 0, 0, []],
				15,
				1442,
				[
				],
				[
				[
					3,
					0,
					0,
					"169,800",
					0,
					8,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[670.3988037109375, 132.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1037,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[670.3988037109375, 99.51065063476563, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1063,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[612.3988037109375, 132.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1064,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[612.3988037109375, 99.51065063476563, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1065,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[645.4048461914063, 114.9574890136719, 0, 55, 133.8053131103516, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				1066,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[39, 357, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1662,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[547, 564, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1663,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[1261, 608, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				2025,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[913, 613, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				2026,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1053,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-259, 92, 0, 373, 173, 0, 1.570796370506287, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				2027,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[-266, 628, 0, 373, 173, 0, 1.570796370506287, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				2028,
				[
				],
				[
				[
					0,
					0,
					0,
					"588,-100",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[717, 121, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1417,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[1018, 197, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1278,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[1017, 406, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1283,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[916, 109, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1284,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[549, 44, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1315,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[758, 668, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1316,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[708, 668, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1317,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[99, 524, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1342,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[94, 468, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1346,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[94, 264, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1347,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[88, 209, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1348,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[518, 104, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1471,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[463, 102, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1472,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[405, 102, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1473,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[359, 113, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1474,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[914, 308, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1475,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[222, 19, 0, 21, 213, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2150,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[207, 694, 0, 21, 205, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2151,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[644, 704, 0, 21, 205, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2152,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[618, -7, 0, 21, 205, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				1285,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			9772496352525421,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[461, 364, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1992,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level22",
		960,
		700,
		true,
		"Levels",
		1753847628497369,
		[
		[
			"Layer 0",
			0,
			7290941789578469,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1071,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1078,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1079,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1085,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1086,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[331.0708312988281, 418, 0, 57.23077011108398, 141.7045440673828, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1087,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[339.6061706542969, 418, 0, 48.1889762878418, 127.7938385009766, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1088,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1089,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[666, 1018, 0, 59, 112, 0, 0, 1, 0.508474588394165, 0.5, 0, 0, []],
				15,
				1091,
				[
				],
				[
				[
					3,
					0,
					0,
					"666,-100",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[446, 323, 0, 328, 72, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1092,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[470, -13, 0, 239, 247, 0, 0, 1, 0.5020920634269714, 0.5020242929458618, 0, 0, []],
				10,
				1094,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					31,
					1
				]
			]
,			[
				[442, 430, 0, 38, 198, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1096,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					33,
					1
				]
			]
,			[
				[427, 770, 0, 371, 346, 0, 1.570796370506287, 1, 0.5040431022644043, 0.5, 0, 0, []],
				15,
				1098,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[-141, 0, 0, 493, 208, 0, 0, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				1106,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[1263, 169, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1090,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[133, 1067, 0, 58, 126, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1093,
				[
				],
				[
				[
					3,
					0,
					0,
					"133,-100",
					0,
					9,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[750, -240.5, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1099,
				[
				],
				[
				[
					3,
					0,
					0,
					"750,800",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[220, -321.5, 0, 60, 113, 0, 3.141592741012573, 1, 0.5, 0.5044247508049011, 0, 0, []],
				15,
				1105,
				[
				],
				[
				[
					3,
					0,
					0,
					"220,800",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[394, 550, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1118,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[339, 550, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1119,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[553, 180, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1443,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[425, 278, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1444,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[314, 146, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1445,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[541.1987915039063, 461.7106323242188, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1067,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[541.1987915039063, 428.7106323242188, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1100,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[481.1987915039063, 461.7106323242188, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1101,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[481.1987915039063, 428.7106323242188, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1102,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[516.204833984375, 445.157470703125, 0, 55, 133.8053131103516, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				1103,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[-258, 289, 0, 373, 173, 0, 1.570796370506287, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1522,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1264, 605, 0, 373, 173, 0, -1.570796489715576, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				1664,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[429, 542, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1665,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-256, 676, 0, 373, 173, 0, 1.570796370506287, 1, 0.5013405084609985, 0.5028901696205139, 0, 0, []],
				15,
				2029,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[967, 77, 0, 493, 208, 0, 1.570796370506287, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				2030,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[968, 611, 0, 493, 208, 0, 1.570796370506287, 1, 0.5010141730308533, 0.504807710647583, 0, 0, []],
				10,
				2031,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					32,
					1
				]
			]
,			[
				[-101, 467, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2032,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[10, 179, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2033,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[21, 276, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2034,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[3, 371, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2035,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[9, 617, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2036,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1084,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[-27, 784, 0, 132, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				2037,
				[
				],
				[
				[
					0,
					0,
					0,
					"1100,415",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[581, 451, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1418,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
,			[
				[38, 121, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1476,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[14, 451, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1477,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[19, 516, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1478,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[495.5, -16.49999237060547, 0, 32, 764, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				1311,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[439.5, 715, 0, 21, 880, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2153,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			3419789827498881,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[475, 327, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2108,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level23",
		960,
		700,
		false,
		"Levels",
		6833492996844035,
		[
		[
			"Layer 0",
			0,
			5552323999087884,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1120,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[905, 115, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1135,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[470, 117, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1134,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[52, 112, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1136,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[470, 500, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1137,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[905, 360, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1138,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[104, 500, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1139,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[454, 340, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1145,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[495, 340, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1146,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[202.3987884521484, 361.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1104,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[202.3987884521484, 328.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1140,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[124.3987884521484, 361.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1141,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[124.3987884521484, 328.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1142,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[161.4048309326172, 343.9574890136719, 0, 62.85714340209961, 158.5840759277344, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				1143,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[681, 126.0174865722656, 0, 62.18716430664063, 150.6996765136719, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1132,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[681, 125.0174865722656, 0, 59.31698608398438, 147.2746887207031, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1131,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[557, 820, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1666,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[905, 622, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1667,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[191, 820, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1668,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-230, 373, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1128,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[-265, 837, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2039,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[1128, -104, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2040,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-215, -104, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2041,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1156, 804, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2042,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1297, 151, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2043,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[1291, 569, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2044,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[431, -137, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2045,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[457, -10.00000762939453, 0, 21, 597, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2154,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-22, 664.5, 0, 102, 47, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2155,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			5597671537863678,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1133,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1123,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1129,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1130,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1122,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[681, 131.4527587890625, 0, 100, 189, 0, 0, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1340,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				2038,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[262, 345, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1419,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			9769855339544497,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[421, 328, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2109,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level24",
		960,
		700,
		true,
		"Levels",
		7954545017672842,
		[
		[
			"Layer 0",
			0,
			2670620470207276,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1151,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[672, -260, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1171,
				[
				],
				[
				[
					3,
					0,
					0,
					"672,700",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[240, -260, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1172,
				[
				],
				[
				[
					3,
					0,
					0,
					"240,700",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[925, 115, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1173,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[490, 197, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1174,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[52, 112, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1175,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[490, 580, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1176,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[905, 490, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1177,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[52, 500, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1178,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[390, 332, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1179,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[485, 450, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1180,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[585, 330, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1181,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[844.0236206054688, 269, 0, 59.13846206665039, 146.5909118652344, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1162,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[153.3987884521484, 357.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1144,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[153.3987884521484, 324.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1165,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[75.39878845214844, 357.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1166,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[75.39878845214844, 324.5106506347656, 0, 10, 21, 0, 1.570796370506287, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1167,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[114.4048309326172, 340.9574890136719, 0, 62.85714340209961, 158.5840759277344, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				9,
				1168,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[846, 268, 0, 62, 150, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1497,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[389.5, 37, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1523,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[584.5, 35, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1524,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-168, 835, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2046,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-272, -36, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2047,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[-300, 369, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2048,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[1275, -124, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2049,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[1255, 251, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2050,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[1222, 782, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2051,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[500, 859, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2052,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[479, -186, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2053,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[494, -10.00000762939453, 0, 21, 555, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2156,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[481.5, 700, 0, 21, 960, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2158,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-15, 647, 0, 74, 30, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2159,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[979, 645, 0, 74, 30, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2160,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			7769027288457772,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1154,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1160,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1161,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1153,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1164,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[240, -235, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1446,
				[
				],
				[
				[
					3,
					0,
					0,
					"240,725",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[672, -235, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1447,
				[
				],
				[
				[
					3,
					0,
					0,
					"672,725",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[836.9187622070313, 269, 0, 100, 191, 0, 1.570796370506287, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1163,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1159,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[220, 333, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1420,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			4520731863017302,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[478, 346, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2110,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[560.5, 710, 0, 21, 780, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2157,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level25",
		960,
		700,
		true,
		"Levels",
		954148773349776,
		[
		[
			"Layer 0",
			0,
			2666366226098621,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1147,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[945, -105, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1201,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[500, -103, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1202,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[42, -108, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1203,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[500, 280, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1204,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[955, 280, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1205,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[32, 300, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1206,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[570, 469, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1208,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[570, 410, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1209,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[162, 501.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1198,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[162, 442.3333129882813, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1199,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[232, 32, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1200,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[232, 504, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1210,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[203, 88, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1211,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[455.0787353515625, 439.9606323242188, 0, 57.23077011108398, 143.6590881347656, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1190,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[452.7655029296875, 440.1788024902344, 0, 60, 135, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1191,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[150, 52, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				969,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[150, 123, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1004,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[569, 530, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1197,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[234, 428, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1097,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[798.6799926757813, 67.51998901367188, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1169,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[798.6799926757813, 100.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1170,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[876.6799926757813, 67.51998901367188, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1193,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[876.6799926757813, 100.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1194,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[839.280029296875, 83.91998291015625, 0, 57.14285659790039, 159.3277282714844, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				9,
				1195,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[290, -310, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1498,
				[
				],
				[
				[
					3,
					0,
					0,
					"290,700",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[512.3333129882813, 677.3333129882813, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1669,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[967.3333129882813, 677.3333129882813, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1670,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[44.33331298828125, 697.3333129882813, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1671,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-187, 95, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2054,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-195, 514, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2055,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1202, 77, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2056,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1194, 496, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2057,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[488, -15.5, 0, 27, 600, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2161,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[501, 718, 0, 27, 600, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2164,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[975.553955078125, 279.0366516113281, 0, 549, 31, 0, 1.565901279449463, 0, 0.5, 0.5, 0, 0, []],
				10,
				2165,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			1344134442780448,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1192,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1182,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1188,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1189,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1149,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[450, 438.4700012207031, 0, 95, 187, 0, 1.570796370506287, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1456,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[290, -285, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1499,
				[
				],
				[
				[
					3,
					0,
					0,
					"290,725",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1187,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[750, 81, 0, 95, 33, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				33,
				1421,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			2013089545753166,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[453, 353, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2111,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[972, 295, 0, 545, 22, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2162,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[507, 712, 0, 23, 850, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2163,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level26",
		960,
		700,
		true,
		"Levels",
		5149383555169891,
		[
		[
			"Layer 0",
			0,
			8279545860826957,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1212,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1085, -35, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1226,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[520, -13, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1227,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[2, -18, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1228,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[544, 335, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1229,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[1065, 320, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1230,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-18, 340, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1231,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[450, 169, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1233,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[450, 130, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1234,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[136, 520, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1242,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[222, 110, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1243,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[272, 110, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1244,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[325, 110, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1245,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[553.0787353515625, 136.9606323242188, 0, 57.23077011108398, 143.6590881347656, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1223,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[553.0787353515625, 137.0393676757813, 0, 60, 127, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1224,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[79.67999267578125, 172.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1196,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[79.67999267578125, 205.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1235,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[157.6799926757813, 172.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1236,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[157.6799926757813, 205.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1237,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[120.280029296875, 188.9199829101563, 0, 57.14285659790039, 159.3277282714844, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				9,
				1238,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[1073.333251953125, 681, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1673,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-9.66668701171875, 701, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1674,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[556, 729, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1672,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[229, 646, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2058,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[820, 614, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2059,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[919, 507, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2060,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[942, 147, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2061,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[855, 48, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2062,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[733, 43, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2063,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-12, 343, 0, 475, 20, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2166,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[528.5, 721, 0, 774, 36, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2167,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			5043529044269047,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1225,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1215,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1221,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1222,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1214,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[547.625, 134, 0, 100, 180, 0, 1.570796370506287, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1457,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1220,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[207, 191, 0, 95, 33, 0, 1.570796370506287, 1, 0.5, 0.5, 0, 0, []],
				33,
				1422,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			6214915508603794,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[437, 345, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2112,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level27",
		960,
		700,
		true,
		"Levels",
		3327375545203553,
		[
		[
			"Layer 0",
			0,
			9686051864165683,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1246,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[52, 0, 0, 296, 232, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1265,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[369, 250, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1279,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[50, 414, 0, 296, 232, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1260,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[476, 32, 0, 350, 236, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1261,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					40,
					1
				]
			]
,			[
				[1001, 386, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1262,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[996, -28, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1263,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[480, 380, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1264,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[670, 795, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1272,
				[
				],
				[
				[
					3,
					0,
					0,
					"670,-125",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[266, -100, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1273,
				[
				],
				[
				[
					3,
					0,
					0,
					"266,700",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[827, 170, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1274,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[784, 150, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1275,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[625, 169, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1276,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[820, 412.5747985839844, 0, 57.23077011108398, 142.6818237304688, 0, 3.141592741012573, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1257,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[820, 412.5747985839844, 0, 60, 126, 0, 3.141592741012573, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1258,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[225.3999938964844, 369.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1239,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[192.3999938964844, 369.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1266,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[225.3999938964844, 457.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1268,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[192.3999938964844, 457.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1269,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[209.3999938964844, 406.3999938964844, 0, 62.95082092285156, 170.9734497070313, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1270,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[479, 674, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1675,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[371, 528, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1676,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[593, 528, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1677,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[1011, 700, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1678,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[43, 726, 0, 296, 232, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1679,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[798, 320, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1680,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-211, 62, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2064,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-227, 343, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2065,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-220, 556, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2066,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-149, 825, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2067,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1222, 157, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2068,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1201, 526, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2069,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1205, 819, 0, 101, 124, 0, -1.570796489715576, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2070,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[521, -15, 0, 27, 704, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2168,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[523, 719, 0, 27, 704, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2169,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-9.5, 206, 0, 119, 37, 0, 1.570796370506287, 0, 0.5, 0.5, 0, 0, []],
				10,
				2170,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			3773661607298011,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1259,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1249,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1255,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1256,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1248,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[817, 418.9312438964844, 0, 100, 183, 0, 0, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1458,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[670, 786, 0, 111, 187, 0, 0, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1449,
				[
				],
				[
				[
					3,
					0,
					0,
					"670,-120",
					0,
					5,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[266, -75, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1448,
				[
				],
				[
				[
					3,
					0,
					0,
					"266,725",
					0,
					7,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1254,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[216, 307, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1423,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			5944785798521952,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[488, 339, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2113,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level28",
		960,
		700,
		true,
		"Levels",
		6461429675381309,
		[
		[
			"Layer 0",
			0,
			6040949422359276,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1500, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1277,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[500, 309, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1292,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[30, 364, 0, 350, 236, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1294,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					40,
					1
				]
			]
,			[
				[586, -48, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1295,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[981, 426, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1296,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[817, 240, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1307,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[575, 449, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1293,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[909, 28, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1298,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[97, 16, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1305,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[575, 492, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1306,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[575, 537, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1309,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[453.5984497070313, 462.9606323242188, 0, 57.23077011108398, 148.5454559326172, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1289,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[453.5984497070313, 463.0393676757813, 0, 60, 132, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1290,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[816.4000244140625, 353.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1271,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[783.4000244140625, 353.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1299,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[816.4000244140625, 441.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1301,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[783.4000244140625, 441.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1302,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[800.4000244140625, 390.3999938964844, 0, 62.95082092285156, 170.9734497070313, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1303,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1385, 110, 0, 62, 106, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1297,
				[
				],
				[
				[
					3,
					0,
					0,
					"-100,110",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[311, 342, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1501,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[226, 596, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1502,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[264, -24, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1503,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[20, 699, 0, 296, 235, 0, 1.570796370506287, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1681,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[534, 686, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1682,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[833, 656, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1683,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1138, 790, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2071,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[1101, -95, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2072,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[-256, 336, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				2073,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[-291, 687, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2074,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[-170, -67, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				2075,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[977, 143, 0, 29, 278, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2171,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-20, 99.5, 0, 29, 187, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2172,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			3938324557448227,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1291,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1281,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1287,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1288,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1280,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[449.8208618164063, 461.9984130859375, 0, 91.52975463867188, 183.4175720214844, 0, 1.570796370506287, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1459,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1360, 110, 0, 111, 187, 0, -1.570796489715576, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1500,
				[
				],
				[
				[
					3,
					0,
					0,
					"-125,110",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1286,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[793, 302, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1424,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			1322041171243774,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[456, 351, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2114,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level29",
		960,
		700,
		true,
		"Levels",
		3941960322843626,
		[
		[
			"Layer 0",
			0,
			5593219243925745,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1310,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1020, -90, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1326,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[397, 266, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1327,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[712, 241, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1338,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[1007, 364, 0, 440, 230, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1324,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[270, 405, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1325,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[270, 446, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1328,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[398, 586, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1337,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[704, 587, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				16,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[21, 528, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1335,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[202, 990, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1336,
				[
				],
				[
				[
					3,
					0,
					0,
					"202,-350",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1380, 111, 0, 62, 106, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				15,
				1339,
				[
				],
				[
				[
					3,
					0,
					0,
					"-100,111",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[797, 258, 0, 57.23077011108398, 137.7954559326172, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1321,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[797, 258, 0, 60, 121, 0, 0, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1322,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[156.4000244140625, 265.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1304,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[123.4000244140625, 265.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1329,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[156.4000244140625, 353.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1331,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[123.4000244140625, 353.3999938964844, 0, 10, 21, 0, 0, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1332,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[141.4000244140625, 302.3999938964844, 0, 71.80328369140625, 165.6637115478516, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				1333,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[846, 165, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1512,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[797, 165, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1517,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[755, 164, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1518,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[516, 405.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1531,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[516, 446.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1533,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[-58, 303, 0, 296, 235, 0, -1.570796489715576, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1534,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[-122, -68, 0, 440, 230, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1535,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[18, 663, 0, 101, 124, 0, 0, 1, 0.5049505233764648, 0.5, 0, 0, []],
				10,
				1684,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					37,
					1
				]
			]
,			[
				[-193, 589, 0, 296, 232, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2076,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[388, -67, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2077,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[771, -1, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2078,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[662, 1, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2079,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[560, -9, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2080,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[975, 80, 0, 29, 120, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2173,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[160.5, -6.5, 0, 168, 25, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2174,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[-27, 103, 0, 32, 99, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2175,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[158, 707.5, 0, 176, 22, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2176,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			3373534244918452,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1323,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 550, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1313,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1319,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 520, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1320,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 420, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1312,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[794, 269, 0, 94, 179, 0, 0, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1460,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[1355, 111, 0, 111, 187, 0, -1.570796489715576, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1450,
				[
				],
				[
				[
					3,
					0,
					0,
					"-125,111",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[202, 965, 0, 111, 187, 0, 0, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1451,
				[
				],
				[
				[
					3,
					0,
					0,
					"202,-375",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1318,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[131, 200, 0, 95, 33, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				33,
				1425,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			820708423982229,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[473, 340, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2115,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Level30",
		960,
		700,
		true,
		"Levels",
		5199979867656695,
		[
		[
			"Layer 0",
			0,
			4985805114482556,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[499, 355, 0, 1700, 1000, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				50,
				1341,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[22, 112, 0, 440, 230, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1355,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[458, 253.5, 0, 296, 232, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1356,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					39,
					1
				]
			]
,			[
				[907, 485, 0, 440, 230, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1364,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[600, 405, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1365,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[602, 446, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				1366,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[473, 607, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1368,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[662, 1010, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1370,
				[
				],
				[
				[
					3,
					0,
					0,
					"662,-125",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[747, -290, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1371,
				[
				],
				[
				[
					3,
					0,
					0,
					"749,700",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[272, -290, 0, 62, 106, 0, 3.141592741012573, 1, 0.5, 0.5, 0, 0, []],
				15,
				1372,
				[
				],
				[
				[
					3,
					0,
					0,
					"272,700",
					0,
					8,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[180, 1000, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1357,
				[
				],
				[
				[
					3,
					0,
					0,
					"180, -100",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[936, 63, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1363,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[475, -100, 0, 296, 235, 0, 0, 1, 0.5, 0.5021276473999023, 0, 0, []],
				10,
				1367,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					38,
					1
				]
			]
,			[
				[869, 214.9606323242188, 0, 57.23077011108398, 124.113639831543, 0, 1.570796370506287, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				1352,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[869, 215.0393676757813, 0, 60, 107, 0, 1.570796370506287, 0.05000000074505806, 0.5, 0.4960629940032959, 0, 0, []],
				18,
				1353,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[400.6799926757813, 396.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				28,
				1334,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[400.6799926757813, 429.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				29,
				1358,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[488.6799926757813, 396.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				30,
				1359,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.5,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[488.6799926757813, 429.5199890136719, 0, 10, 21, 0, -1.570796489715576, 1, 0.5, 0.523809552192688, 0, 0, []],
				31,
				1360,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					0.1,
					0.2,
					0,
					0,
					0,
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[441.280029296875, 412.9199829101563, 0, 69.52381134033203, 157.3109283447266, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				9,
				1361,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					15,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[13, 573, 0, 440, 230, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				1685,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					41,
					1
				]
			]
,			[
				[-258, 103, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2081,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[-270, 561, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2082,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1177, 650, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2083,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1075, 358, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2084,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[1179, 78, 0, 328, 72, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				10,
				2085,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					36,
					1
				]
			]
,			[
				[382, 765.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2086,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[384, 806.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2087,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[587, 759.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2088,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[589, 800.5, 0, 28, 40, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				2089,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[455, -11, 0, 662, 29, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2177,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
,			[
				[456, 713, 0, 660, 17, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				10,
				2178,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					43,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			5414377928573067,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			0.949999988079071,
			true,
			1,
			0,
			0,
			[
			[
				[450, 50, 0, 234, 69, 0, 0, 1, 0.5, 0.5072463750839233, 0, 0, []],
				16,
				1354,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					14,
					1
				]
			]
,			[
				[54, 540, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				1,
				1344,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					5,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[768, 510, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				2,
				1350,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[893, 510, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				3,
				1351,
				[
				],
				[
				[
					1,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[54, 410, 0, 120, 120, 0, 0, 0.550000011920929, 0.5, 0.5, 0, 0, []],
				0,
				1343,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					1
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[865.40625, 214, 0, 100, 165, 0, 1.570796370506287, 0.5, 0.4699999988079071, 0.518750011920929, 8, 0, []],
				6,
				1461,
				[
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[272, -265, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1452,
				[
				],
				[
				[
					3,
					0,
					0,
					"272,725",
					0,
					8,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[747, -265, 0, 111, 187, 0, 3.141592741012573, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1453,
				[
				],
				[
				[
					3,
					0,
					0,
					"747,725",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[180, 975, 0, 111, 187, 0, 0, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1454,
				[
				],
				[
				[
					3,
					0,
					0,
					"180,-125",
					0,
					6,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[662, 985, 0, 111, 187, 0, 0, 0.4000000059604645, 0.5045045018196106, 0.5026738047599793, 8, 0, []],
				15,
				1455,
				[
				],
				[
				[
					3,
					0,
					0,
					"662,-125",
					0,
					10,
					0
				]
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[480, 50, 0, 128, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				24,
				1514,
				[
				],
				[
				[
					0,
					0,
					14,
					"1000,0",
					1,
					0.5,
					0
				],
				[
					0,
					0,
					0,
					0,
					1
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[341, 420, 0, 95, 33, 0, -1.570796489715576, 1, 0.5, 0.5, 0, 0, []],
				33,
				1426,
				[
				],
				[
				[
					0,
					5,
					0,
					"0,0",
					0,
					0.3,
					0
				]
				],
				[
					30,
					31,
					"STARJOUENCMZÇIИГРАТЬL开始BŞ",
					"START",
					0.85,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,9,1],\"\"data\"\":[[[10],[18],[19],[20],[21],[22],[23],[26],[28]],[[\"\"I\"\"],[\"\"JEГL\"\"],[\"\"Р\"\"],[\"\"SUNИЬBŞ\"\"],[\"\"TRCZÇТ\"\"],[\"\"O\"\"],[\"\"AMА\"\"],[\"\"开\"\"],[\"\"始\"\"]]]}",
					-1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			3570664020102906,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[443, 336, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				2116,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Loading",
		960,
		700,
		true,
		"Loading",
		1743797486817184,
		[
		[
			"Layer 0",
			0,
			8309299024002163,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[475, 334, 0, 1738, 1349, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				36,
				2,
				[
				],
				[
				],
				[
					0,
					1
				]
			]
,			[
				[485.300048828125, 333.0000305175781, 0, 1600, 950, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				52,
				1468,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[257.5775146484375, 518, 0, 308, 45, 0, 0, 1, 0.5015197396278381, 0.5081967115402222, 0, 0, []],
				54,
				1470,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[533.5, 521.5, 0, 227, 88, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				20,
				681,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[268, 518, 0, 199, 64, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				46,
				793,
				[
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"ENGLISH",
					0.75,
					0,
					1,
					1,
					1,
					0,
					1,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[150, 517, 0, 50, 35, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				48,
				1700,
				[
					[100]
				],
				[
				[
					0,
					1,
					0,
					0,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[492, 290, 0, 625, 505, 0, 0, 1, 0.5008000135421753, 0.500990092754364, 0, 0, []],
				53,
				605,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1540, 512, 0, 280, 80, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				16,
				683,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[1539.5, 511, 0, 252, 57, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				42,
				1701,
				[
				],
				[
				[
					0,
					0,
					17,
					"635,600",
					0,
					1,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			9597898153601135,
			true,
			[255, 255, 255],
			true,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[482, 317.5, 0, 1548, 489, 0, 0, 0.5, 0.5, 0.5, 0, 0, []],
				45,
				45,
				[
					[100]
				],
				[
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[300, 310, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				17,
				[
					[6]
				],
				[
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[570, 460, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				28,
				[
					[12]
				],
				[
				],
				[
					0,
					"Default",
					12,
					1
				]
			]
,			[
				[475, 160, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1686,
				[
					[2]
				],
				[
				],
				[
					0,
					"Default",
					2,
					1
				]
			]
,			[
				[650, 160, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1688,
				[
					[3]
				],
				[
				],
				[
					0,
					"Default",
					3,
					1
				]
			]
,			[
				[825, 160, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1690,
				[
					[4]
				],
				[
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[390, 460, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1689,
				[
					[11]
				],
				[
				],
				[
					0,
					"Default",
					11,
					1
				]
			]
,			[
				[475, 310, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1691,
				[
					[7]
				],
				[
				],
				[
					0,
					"Default",
					7,
					1
				]
			]
,			[
				[825, 310, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1692,
				[
					[9]
				],
				[
				],
				[
					0,
					"Default",
					9,
					1
				]
			]
,			[
				[215, 460, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1693,
				[
					[10]
				],
				[
				],
				[
					0,
					"Default",
					10,
					1
				]
			]
,			[
				[125, 310, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1694,
				[
					[5]
				],
				[
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[650, 310, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1695,
				[
					[8]
				],
				[
				],
				[
					0,
					"Default",
					8,
					1
				]
			]
,			[
				[745, 460, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1696,
				[
					[13]
				],
				[
				],
				[
					0,
					"Default",
					13,
					1
				]
			]
,			[
				[300, 160, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1697,
				[
					[1]
				],
				[
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[125, 160, 0, 150, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				45,
				1698,
				[
					[0]
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			2245376016067822,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[496, 338, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1427,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[500, 455, 0, 84, 53, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				20,
				5,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"Dump",
		960,
		540,
		false,
		null,
		9859942612920124,
		[
		[
			"Layer 0",
			0,
			600453868861025,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[174.8166046142578, 130.9983520507813, 0, 39.10769271850586, 85.02272796630859, 0, 0, 1, 0.5, 0.4961240291595459, 0, 0, []],
				6,
				14,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[586, 181, 0, 84, 82, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				11,
				[
					[1],
					[0]
				],
				[
				[
					1,
					0,
					23,
					"100,100",
					0,
					0.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[442, -198, 0, 72.95774841308594, 44.21186447143555, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				10,
				46,
				[
				],
				[
				[
					1,
					0,
					1,
					1,
					0.5,
					0.2,
					0,
					0.01,
					0,
					1
				],
				[
					1
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[118, 125, 0, 50, 100, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				9,
				59,
				[
				],
				[
				[
					0,
					0,
					0,
					1,
					1,
					0,
					1,
					1,
					0,
					1
				],
				[
					20,
					5.5,
					3,
					4,
					2,
					"",
					0,
					0,
					0,
					0,
					"",
					"",
					"",
					"",
					"",
					""
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[448, 136, 0, 62, 106, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				15,
				1,
				[
				],
				[
				[
					3,
					0,
					0,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[757, 246, 0, 189.2991333007813, 216.5354156494141, 0, 0, 1, 0.5054545402526856, 0.5163636207580566, 0, 0, []],
				16,
				23,
				[
					[0]
				],
				[
				[
					0,
					0,
					0,
					0,
					0
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[870, 427, 0, 40, 40, 0, 0, 0.4000000059604645, 0.5045045018196106, 0.9587628841400147, 8, 0, []],
				22,
				27,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					0
				]
			]
,			[
				[782, 405, 0, 49, 70, 0, 0, 0.4000000059604645, 0.5135135054588318, 0.5026738047599793, 8, 0, []],
				32,
				1362,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[570, 405, 0, 263, 198, 0, 0, 1, 0.5019011497497559, 0.5, 0, 0, []],
				39,
				1525,
				[
				],
				[
				[
					1,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[658, 89, 0, 128, 128, 0, 0, 1, 0, 0.5, 0, 0, []],
				40,
				1526,
				[
				],
				[
				],
				[
					30,
					360,
					1,
					200,
					50,
					100,
					0,
					50,
					50,
					100,
					0,
					0,
					-150,
					0,
					0,
					1000,
					0,
					0,
					1
				]
			]
,			[
				[104.5, 72, 0, 199, 150, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				49,
				51,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[312, 169, 0, 10, 10, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				57,
				2117,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[877, 105, 0, 596, 97, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				58,
				2118,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"",
					1.5,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					7
				]
			]
			],
			[			]
		]
		],
		[
			[
				null,
				19,
				604,
				[
				],
				[
				],
				[
					0
				]
			]
		],
		[]
	]
,	[
		"IntroWinLoose",
		960,
		700,
		true,
		"IntroWinLoose",
		3157379580389095,
		[
		[
			"Layer 0",
			0,
			2377714517075991,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[507, 312, 0, 1738, 1349, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				36,
				3,
				[
				],
				[
				],
				[
					0,
					1
				]
			]
,			[
				[485.2999877929688, 333, 0, 1600, 950, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				52,
				15,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[250, -450, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				24,
				[
					[1],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					1,
					1
				]
			]
,			[
				[365, -450, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				25,
				[
					[2],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, -450, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				36,
				[
					[3],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[595, -450, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				194,
				[
					[4],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[710, -450, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				399,
				[
					[5],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[250, -320, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				225,
				[
					[6],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[365, -320, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				227,
				[
					[7],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, -320, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				228,
				[
					[8],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[595, -320, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				232,
				[
					[9],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[710, -320, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				234,
				[
					[10],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[250, -190, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				22,
				[
					[11],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[365, -190, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				125,
				[
					[12],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[480, -190, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				236,
				[
					[13],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[595, -190, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				841,
				[
					[14],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[710, -190, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				843,
				[
					[15],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1250, 240, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				847,
				[
					[16],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1365, 240, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				848,
				[
					[17],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1480, 240, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				849,
				[
					[18],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1595, 240, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				853,
				[
					[19],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1710, 240, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				855,
				[
					[20],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1250, 370, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				857,
				[
					[21],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1365, 370, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				858,
				[
					[22],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1480, 370, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				859,
				[
					[23],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1595, 370, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				863,
				[
					[24],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1710, 370, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				865,
				[
					[25],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1250, 500, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				867,
				[
					[26],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1365, 500, 0, 83, 92, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				868,
				[
					[27],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1480, 500, 0, 82.01190185546875, 94.52054595947266, 0, 0, 1, 0.5060241222381592, 0.5, 0, 0, []],
				8,
				869,
				[
					[28],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[1594.90478515625, 499.8847045898438, 0, 99, 104, 0, 0, 1, 0.5, 0.5049505233764648, 0, 0, []],
				8,
				873,
				[
					[29],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					5,
					1
				]
			]
,			[
				[1710, 500, 0, 98.80951690673828, 103.7671203613281, 0, 0, 1, 0.5, 0.5049505233764648, 0, 0, []],
				8,
				875,
				[
					[30],
					[0]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					6,
					1
				]
			]
,			[
				[255, -455, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1402,
				[
					[1]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[370, -455, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1232,
				[
					[2]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					15,
					1
				]
			]
,			[
				[490, -455, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1369,
				[
					[3]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[605, -455, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1373,
				[
					[4]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					16,
					1
				]
			]
,			[
				[720, -455, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1374,
				[
					[5]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[255, -325, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1375,
				[
					[6]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					17,
					1
				]
			]
,			[
				[370, -325, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1376,
				[
					[7]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[490, -325, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1377,
				[
					[8]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					18,
					1
				]
			]
,			[
				[605, -325, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1378,
				[
					[9]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[720, -325, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1379,
				[
					[10]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					19,
					1
				]
			]
,			[
				[257, -195, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1380,
				[
					[11]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[372, -195, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1381,
				[
					[12]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					20,
					1
				]
			]
,			[
				[492, -195, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1382,
				[
					[13]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[607, -195, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1383,
				[
					[14]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					21,
					1
				]
			]
,			[
				[722, -195, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1384,
				[
					[15]
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1255.333251953125, 238, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1385,
				[
					[16]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					22,
					1
				]
			]
,			[
				[1370.333251953125, 238, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1386,
				[
					[17]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1490.333251953125, 238, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1387,
				[
					[18]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					23,
					1
				]
			]
,			[
				[1605.333251953125, 238, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1388,
				[
					[19]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1720.333251953125, 238, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1389,
				[
					[20]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					24,
					1
				]
			]
,			[
				[1255.333251953125, 368, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1390,
				[
					[21]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1370.333251953125, 368, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1391,
				[
					[22]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					25,
					1
				]
			]
,			[
				[1490.333251953125, 368, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1392,
				[
					[23]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1605.333251953125, 368, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1393,
				[
					[24]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					26,
					1
				]
			]
,			[
				[1720.333251953125, 368, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1394,
				[
					[25]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1257.333251953125, 498, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1395,
				[
					[26]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					27,
					1
				]
			]
,			[
				[1372.333251953125, 498, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1396,
				[
					[27]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					28,
					1
				]
			]
,			[
				[1492.333251953125, 498, 0, 24, 48, 0, 0.7853981852531433, 1, 0.5, 0.5, 0, 0, []],
				23,
				1397,
				[
					[28]
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				]
				],
				[
					0,
					"Default",
					28,
					1
				]
			]
,			[
				[1607.333251953125, 498, 0, 24, 48, 0, 0.7853981852531433, 0, 0.5, 0.5, 0, 0, []],
				23,
				1398,
				[
					[29]
				],
				[
				[
					1,
					0,
					17,
					"-1000,0",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[1722.333251953125, 498, 0, 24, 48, 0, 0.7853981852531433, 0, 0.5, 0.5, 0, 0, []],
				23,
				1399,
				[
					[30]
				],
				[
				[
					1,
					0,
					17,
					"-1000,0",
					0,
					1,
					0
				]
				],
				[
					0,
					"Default",
					29,
					1
				]
			]
,			[
				[125, -398, 0, 286, 122, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				25,
				1405,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"TRY AGAIN",
					1.3,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[959, -425, 0, 431, 91, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				26,
				682,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"00",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[950, -467, 0, 412, 36, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				27,
				1406,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"LEVEL 1",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[480, 130, 0, 512, 44, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				34,
				1532,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"LEVEL COMPLETED",
					1,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[349.1950073242188, 209.1852111816406, 0, 45.19043350219727, 35.57456588745117, 0, -0.4363327026367188, 0, 0.5, 0.5, 0, 0, []],
				41,
				579,
				[
					[11]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"60",
					0.85,
					0,
					1,
					1,
					1,
					1,
					-10,
					0,
					"",
					-1
				]
			]
,			[
				[354.98681640625, 224.48095703125, 0, 85, 34, 0, -0.4363327026367188, 0, 0.5, 0.5, 0, 0, []],
				41,
				792,
				[
					[1]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"SEC",
					0.6,
					0,
					1,
					1,
					1,
					1,
					-7,
					0,
					"",
					-1
				]
			]
,			[
				[475.2973022460938, 195.4125671386719, 0, 45.19043350219727, 35.57456588745117, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				41,
				850,
				[
					[22]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"40",
					0.85,
					0,
					1,
					1,
					1,
					1,
					-10,
					0,
					"",
					-1
				]
			]
,			[
				[475.8846130371094, 212.2826232910156, 0, 85, 34, 0, 0, 0, 0.5, 0.5, 0, 0, []],
				41,
				1462,
				[
					[2]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"SEC",
					0.6,
					0,
					1,
					1,
					1,
					1,
					-7,
					0,
					"",
					-1
				]
			]
,			[
				[592.7274780273438, 212.5236968994141, 0, 45.19043350219727, 35.57456588745117, 0, 0.4363323152065277, 0, 0.5, 0.5, 0, 0, []],
				41,
				1494,
				[
					[33]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"20",
					0.85,
					0,
					1,
					1,
					1,
					1,
					-10,
					0,
					"",
					-1
				]
			]
,			[
				[582.9805297851563, 226.8194274902344, 0, 85, 34, 0, 0.4363323152065277, 0, 0.5, 0.5, 0, 0, []],
				41,
				1496,
				[
					[3]
				],
				[
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					29,
					28,
					"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
					"SEC",
					0.6,
					0,
					1,
					1,
					1,
					1,
					-7,
					0,
					"",
					-1
				]
			]
,			[
				[220, -488, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				39,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"1",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[335, -488, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				40,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"2",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[450, -488, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				41,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"3",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[565, -488, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				195,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"4",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[680, -488, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				229,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"5",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[220, -358, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				230,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"6",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[333.215087890625, -358, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				231,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"7",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[448.215087890625, -358, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				233,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"8",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[563.215087890625, -358, 0, 32, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				235,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"9",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[678.215087890625, -358, 0, 48.98663330078125, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				238,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"10",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[216, -228.19677734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				400,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"11",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[330.8773193359375, -228.19677734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				567,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"12",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[446.8773193359375, -228.19677734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				795,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"13",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[561.8773193359375, -228.19677734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				842,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"14",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[675.8773193359375, -228.19677734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				844,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,700",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"15",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1214.935546875, 197.9452514648438, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				851,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"16",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1329.812866210938, 197.9452514648438, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				852,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"17",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1445.812866210938, 197.9452514648438, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				854,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"18",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1560.812866210938, 197.9452514648438, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				856,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"19",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1673.812866210938, 197.9452514648438, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				860,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"20",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1213.766723632813, 330.1141357421875, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				861,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"21",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1328.64404296875, 330.1141357421875, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				862,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"22",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1444.64404296875, 330.1141357421875, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				864,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"23",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1559.64404296875, 330.1141357421875, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				866,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"24",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1673.66015625, 330.1141357421875, 0, 65, 40, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				870,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"25",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1214.597778320313, 460.63427734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				871,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"26",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1329.47509765625, 460.63427734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				872,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"27",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1445.47509765625, 460.63427734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				874,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"28",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1560.47509765625, 460.63427734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				876,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"29",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1674.47509765625, 460.63427734375, 0, 65.03199768066406, 42, 0, 0, 1, 0, 0, 0, 0, []],
				24,
				1400,
				[
				],
				[
				[
					1,
					0,
					17,
					"0,0",
					1,
					1,
					0
				],
				[
					0,
					0,
					0,
					0,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"30",
					0.8,
					0,
					0,
					0,
					0,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[650, 858, 0, 202, 38, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				42,
				1527,
				[
				],
				[
				[
					0,
					0,
					17,
					"635,530",
					0,
					1,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"",
					0.7,
					0,
					1,
					1,
					1,
					0,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1595.984008789063, 500, 0, 110.8041152954102, 69.17613220214844, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				47,
				1703,
				[
				],
				[
				[
					1,
					0,
					17,
					"0.0",
					1,
					1,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"ALL LEVELS",
					0.55,
					0,
					1,
					1,
					1,
					0,
					0,
					-5,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[1708.14404296875, 500, 0, 110.8040008544922, 69.17600250244141, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				47,
				1349,
				[
				],
				[
				[
					1,
					0,
					17,
					"0.0",
					1,
					1,
					0
				]
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890",
					"ALL LEVELS",
					0.55,
					0,
					1,
					1,
					1,
					0,
					0,
					-5,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					10
				]
			]
,			[
				[322, 576, 0, 0, 0, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				20,
				114,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[476, 98, 0, 596, 97, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				58,
				2119,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"",
					1.3,
					0,
					1,
					1,
					1,
					1,
					0,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					7
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			6689638722460698,
			true,
			[0, 0, 0],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			],
			[			]
		]
,		[
			"Layer 2",
			2,
			37912551567436,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[485, 351, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				1466,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[-123, -246, 0, 50, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				56,
				1469,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
,	[
		"LoaderLayout",
		960,
		700,
		true,
		"LoaderLayout",
		6215661711340995,
		[
		[
			"Layer 0",
			0,
			9950401650201179,
			true,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[472, 370, 0, 1738, 1349, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				36,
				1504,
				[
				],
				[
				],
				[
					0,
					1
				]
			]
,			[
				[480, 325, 0, 356, 50, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				26,
				1505,
				[
				],
				[
				],
				[
					31,
					35,
					"MOREGASPKINVTCLDYHUWÈJÉXÜÄBÁZ.-ÇÍFÅÖĘŁŃsÓДРУГИЕЫПАКЙСЯЗНМХОТЬВсекЩШdetik更多游戏倒车入位开始秒通关再试一次所有卡完成正在载İĞŞ1234567890 ",
					"LOADING",
					1,
					0,
					1,
					1,
					1,
					0,
					1,
					0,
					"{\"\"c2array\"\":true,\"\"size\"\":[2,19,1],\"\"data\"\":[[[2],[10],[11],[12],[13],[14],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29]],[[\"\" \"\"],[\"\"I.iİ\"\"],[\"\"Í\"\"],[\"\"-\"\"],[\"\"t\"\"],[\"\"1\"\"],[\"\"Fs\"\"],[\"\"ELÈJÉĘГЕсеde23567890\"\"],[\"\"PРЗкk\"\"],[\"\"SNDHUÜBŁŃУИПКЙНЬВŞ4\"\"],[\"\"RTCZÇСЯТ\"\"],[\"\"OGKÖÓОĞ\"\"],[\"\"MAVYXÄÁÅАМХ\"\"],[\"\"Д\"\"],[\"\"关\"\"],[\"\"Ы更戏车入开再试一卡完正载\"\"],[\"\"Ш游倒位有成在\"\"],[\"\"W多始秒通次所\"\"],[\"\"Щ\"\"]]]}",
					-1
				]
			]
,			[
				[568, -529, 0, 275, 275, 0, 0, 1, 0.5054545402526856, 0.5163636207580566, 0, 0, []],
				16,
				1529,
				[
					[0]
				],
				[
				[
					1,
					1,
					0,
					0,
					0
				],
				[
					0,
					0,
					23,
					"100,100",
					0,
					2.5,
					0
				]
				],
				[
					0,
					"Default",
					4,
					1
				]
			]
,			[
				[473.6690063476563, 374, 0, 371.3330078125, 45, 0, 0, 1, 0.5027624368667603, 0.5111111402511597, 0, 0, []],
				43,
				1530,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[324, 372, 0, 300, 17, 0, 0, 1, 0, 0.529411792755127, 0, 0, []],
				37,
				1506,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
,			[
				[492, 477, 0, 227, 88, 0, 0, 1, 0.5, 0.5, 0, 0, []],
				20,
				1013,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
,		[
			"Layer 1",
			1,
			1116601534648692,
			false,
			[255, 255, 255],
			false,
			1,
			1,
			1,
			false,
			1,
			0,
			0,
			[
			[
				[488, 347, 0, 200, 201, 0, 0, 1, 0.5049999952316284, 0.5024875402450562, 0, 0, []],
				55,
				4,
				[
				],
				[
				],
				[
					0,
					"Default",
					0,
					1
				]
			]
			],
			[			]
		]
		],
		[
		],
		[]
	]
	],
	[
	[
		"Levels",
		[
		[
			1,
			"IsSoundAlreadyPlaying",
			0,
			0,
false,false,9573023820202731,false
		]
,		[
			1,
			"IsStartTextDone",
			0,
			0,
false,false,9050015279902492,false
		]
,		[
			1,
			"IsGamePaused",
			0,
			0,
false,false,1207097479915843,false
		]
,		[
			1,
			"ShowedBang",
			0,
			0,
false,false,6415914154393048,false
		]
,		[
			1,
			"LevelTime",
			0,
			0,
false,false,2382290917260795,false
		]
,		[
			1,
			"Timer",
			0,
			0,
false,false,9265718521454241,false
		]
,		[
			0,
			null,
			false,
			null,
			2013190714591112,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				6809403512314923,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				4773567835109395,
				false
			]
,			[
				9,
				cr.behaviors.Physics.prototype.acts.SetSteppingMode,
				"Physics",
				5777534092419324,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2994223866440047,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				5567199841307686,
				false
				,[
				[
					0,
					[
						1,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7125351409020087,
				false
				,[
				[
					11,
					"Timer"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2062044760863599,
				false
				,[
				[
					11,
					"IsStartTextDone"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3572234407629896,
				false
				,[
				[
					11,
					"IsSoundAlreadyPlaying"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1363177970003048,
				false
				,[
				[
					11,
					"ShowedBang"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				391998418691403,
				false
				,[
				[
					11,
					"LevelTime"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
				null,
				3076146367177153,
				false
				,[
				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				5556206138090035,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3563315999269626,
				false
				,[
				[
					11,
					"IsGamePaused"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				2711115122119897,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								22
							]
						]
						,[
							0,
							1
						]
						,[
							0,
							0
						]
					]
				]
,				[
					0,
					[
						0,
						170
					]
				]
,				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1422771779376115,
				false
				,[
				[
					0,
					[
						0,
						3
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				414502140732851,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				8425172484826189,
				false
				,[
				[
					0,
					[
						1,
						0.8
					]
				]
				]
			]
,			[
				24,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				7972673171738067,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				59,
				cr.plugins_.pix_spilgames.prototype.acts.requestGameBreak,
				null,
				1090563731204704,
				false
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				1994142848871343,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1008539799278761,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					846414922469135,
					false
					,[
					[
						7,
						[
							2,
							"START"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					7417649618512855,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5470866030784313,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1839308052565942,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9509567665350473,
					false
					,[
					[
						7,
						[
							2,
							"START"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					5062583298292525,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3326441582231974,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6684058725559515,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9936841286496167,
					false
					,[
					[
						7,
						[
							2,
							"START"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					5681136591199713,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				95280173572315,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					715060190718708,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4948531167039733,
					false
					,[
					[
						7,
						[
							2,
							"JOUER"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					3447304145105575,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9338673512874574,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6821271866029063,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5597226823589172,
					false
					,[
					[
						7,
						[
							2,
							"STARTEN"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					4426054473917102,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8148204684161522,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1305426693895366,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					267965305647522,
					false
					,[
					[
						7,
						[
							2,
							"COMENZAR"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					4852978163125108,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9016262551807025,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9842721793005014,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9538074582798322,
					false
					,[
					[
						7,
						[
							2,
							"COMEÇAR"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					5565636832722388,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6596013638711227,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6856293440299567,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3662528496451987,
					false
					,[
					[
						7,
						[
							2,
							"INIZIA"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					5567489262243475,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7097208439100302,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5062855609160652,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3470312234741886,
					false
					,[
					[
						7,
						[
							2,
							"STARTA"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					8520816944658273,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6812240497796985,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4647528040493289,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9159329317389686,
					false
					,[
					[
						7,
						[
							2,
							"START"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					4169033301061366,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7825440895415804,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2766570746046209,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1717550431194393,
					false
					,[
					[
						7,
						[
							2,
							"ИГРАТЬ"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					579932657642636,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1507366920776744,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8501218576496277,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3473921257426429,
					false
					,[
					[
						7,
						[
							2,
							"MULAI"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					4614703072213254,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8574710451689415,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6549324056303933,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8732609874124826,
					false
					,[
					[
						7,
						[
							2,
							"开始"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					7939316223089579,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2376521472141918,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8540875326631063,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
				],
				[
				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5932880265585294,
					false
					,[
					[
						7,
						[
							2,
							"BAŞLA"
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetWidth,
					null,
					1332029707669545,
					false
					,[
					[
						0,
						[
							0,
							130
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5339083729898541,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					6443355047766606,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							14
						]
					]
					]
				]
				],
				[
				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					2222899653690013,
					false
					,[
					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6458914992558867,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					1159267136238162,
					false
					,[
					[
						1,
						[
							2,
							"IsTutorialDone"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1183500513626093,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					9142115955306556,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					7925397743885594,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					3855541649206871,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					6197398371697845,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					5610219979634721,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					9995178329030375,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					1518989843925854,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					7960276921610365,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4454491966222547,
				[
				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.cnds.IsActive,
					"LiteTween",
					0,
					false,
					true,
					false,
					2698653934171516,
					false
				]
				],
				[
				[
					33,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					2639863079897782,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.4
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					33,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					2594038791216126,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3653078969317048,
				[
				[
					-1,
					cr.system_object.prototype.cnds.IsMobile,
					null,
					0,
					false,
					true,
					false,
					3946643609811031,
					false
				]
				],
				[
				[
					3,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					2501129485895435,
					false
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					9125482209894032,
					false
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7836877118951833,
					false
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7652710599281434,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7429508983806797,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2377819861867978,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							8
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7417987171680147,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4269135400529189,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"eng"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6981465602929273,
						false
						,[
						[
							7,
							[
								2,
								"PARK IN REVERSE"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5183706269111623,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9353175791531193,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"uk"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						4916336267827256,
						false
						,[
						[
							7,
							[
								2,
								"REVERSE PARK"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2591961876236255,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						954944112868268,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"du"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6061360126557112,
						false
						,[
						[
							7,
							[
								2,
								"PARKEER ACHTERUIT"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5991464012844346,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7794226004281235,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"fr"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						564380346331634,
						false
						,[
						[
							7,
							[
								2,
								"GARE-TOI EN MARCHE ARRIÈRE"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5362198533925496,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4636883835742067,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ger"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						108063736565262,
						false
						,[
						[
							7,
							[
								2,
								"RÜCKWÄRTS EINPARKEN"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2858150511470006,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4214132363844518,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"spa"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						2048551722719712,
						false
						,[
						[
							7,
							[
								2,
								"ESTACIONAR EN REVERSA"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6816273309288599,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9329756958294983,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"br"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						359265218053765,
						false
						,[
						[
							7,
							[
								2,
								"ESTACIONAR DE MARCHA-A-RÉ"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					227079595174201,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2239887213819501,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ita"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						8894897019827193,
						false
						,[
						[
							7,
							[
								2,
								"PARCHEGGIA IN RETROMARCIA"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8273503872209116,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3306989560331827,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"swe"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						58141875670858,
						false
						,[
						[
							7,
							[
								2,
								"BACKPARKERA"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1668234906493318,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7729405885716028,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"pol"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						8453273883722606,
						false
						,[
						[
							7,
							[
								2,
								"ZAPARKUJ TYŁEM"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5026140398215449,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7549356639878716,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"rus"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						1788230927995691,
						false
						,[
						[
							7,
							[
								2,
								"ПРИПАРКУЙСЯ ЗАДНИМ ХОДОМ"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4901943383196048,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6066833856148117,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ind"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						966825158568469,
						false
						,[
						[
							7,
							[
								2,
								"PARKIR MUNDUR"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5448903919572145,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2489807037671278,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"chn"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9557505406960286,
						false
						,[
						[
							7,
							[
								2,
								"倒车入位"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1451977068147595,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7032208632881099,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"tur"
							]
						]
						]
					]
					],
					[
					[
						35,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						7375635884211795,
						false
						,[
						[
							7,
							[
								2,
								"GERİ GERİ PARK ET"
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8755400035548063,
			[
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				9194852837110624,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8338921814806974,
				false
				,[
				[
					11,
					"IsGamePaused"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			124366890483178,
			[
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				1000125810500847,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				7617511073011186,
				false
				,[
				[
					11,
					"IsGamePaused"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2783192895695221,
			[
			[
				-1,
				cr.system_object.prototype.cnds.Else,
				null,
				0,
				false,
				false,
				false,
				548547026130847,
				false
			]
			],
			[
			[
				3,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				5850813090838388,
				false
				,[
				[
					0,
					[
						0,
						893
					]
				]
,				[
					0,
					[
						0,
						470
					]
				]
				]
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				4277961550625793,
				false
				,[
				[
					0,
					[
						0,
						768
					]
				]
,				[
					0,
					[
						0,
						470
					]
				]
				]
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				5440201898505489,
				false
				,[
				[
					0,
					[
						0,
						54
					]
				]
,				[
					0,
					[
						0,
						370
					]
				]
				]
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				3531932285584403,
				false
				,[
				[
					0,
					[
						0,
						54
					]
				]
,				[
					0,
					[
						0,
						500
					]
				]
				]
			]
,			[
				1,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				465584035969269,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				2,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				5732374301586846,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				3,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				8686368992834988,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				0,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				3605875309264538,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				4305942598635309,
				false
				,[
				[
					0,
					[
						1,
						1.2
					]
				]
				]
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				5802702970167623,
				false
				,[
				[
					0,
					[
						1,
						1.2
					]
				]
				]
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				9083954131097894,
				false
				,[
				[
					0,
					[
						1,
						1.2
					]
				]
				]
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				1701153662552422,
				false
				,[
				[
					0,
					[
						1,
						1.2
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6329776796228385,
			[
			[
				-1,
				cr.system_object.prototype.cnds.Every,
				null,
				0,
				false,
				false,
				false,
				2734854489433195,
				false
				,[
				[
					0,
					[
						1,
						1
					]
				]
				]
			]
			],
			[
			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
				null,
				6420714803995741,
				false
				,[
				[
					7,
					[
						18,
						[
							14,
							[
								23,
								"Timer"
							]
							,[
								0,
								10
							]
						]
						,[
							10,
							[
								2,
								"0"
							]
							,[
								23,
								"Timer"
							]
						]
						,[
							23,
							"Timer"
						]
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.AddVar,
				null,
				8383993497734255,
				false
				,[
				[
					11,
					"Timer"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9402486172434193,
			[
			[
				31,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				3523438997316865,
				false
				,[
				[
					4,
					18
				]
				]
			]
,			[
				29,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				8699751347998501,
				false
				,[
				[
					4,
					18
				]
				]
			]
,			[
				30,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				5718977552752595,
				false
				,[
				[
					4,
					18
				]
				]
			]
,			[
				28,
				cr.plugins_.Sprite.prototype.cnds.IsOverlapping,
				null,
				0,
				false,
				false,
				false,
				9697465558178558,
				false
				,[
				[
					4,
					18
				]
				]
			]
,			[
				9,
				cr.behaviors.Physics.prototype.cnds.CompareVelocity,
				"Physics",
				0,
				false,
				false,
				false,
				4694466179999014,
				false
				,[
				[
					3,
					2
				]
,				[
					8,
					3
				]
,				[
					0,
					[
						0,
						5
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.cnds.IsBetweenAngles,
				null,
				0,
				false,
				false,
				false,
				5079492233530383,
				false
				,[
				[
					0,
					[
						5,
						[
							20,
							6,
							cr.plugins_.Sprite.prototype.exps.Angle,
							false,
							null
						]
						,[
							0,
							10
						]
					]
				]
,				[
					0,
					[
						4,
						[
							20,
							6,
							cr.plugins_.Sprite.prototype.exps.Angle,
							false,
							null
						]
						,[
							0,
							10
						]
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9744300389525581,
				false
				,[
				[
					11,
					"NextEvent"
				]
,				[
					7,
					[
						2,
						"WinEvent"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4212881836168378,
				false
				,[
				[
					11,
					"LevelTime"
				]
,				[
					7,
					[
						23,
						"Timer"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				761227711270557,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				44,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				3132888362845993,
				false
			]
,			[
				10,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				1148092933456571,
				false
			]
,			[
				21,
				cr.plugins_.WebStorage.prototype.acts.StoreLocal,
				null,
				8389155524484027,
				false
				,[
				[
					1,
					[
						10,
						[
							2,
							"StarsAtLevel"
						]
						,[
							23,
							"LevelNumber"
						]
					]
				]
,				[
					7,
					[
						18,
						[
							16,
							[
								23,
								"LevelTime"
							]
							,[
								0,
								40
							]
						]
						,[
							0,
							2
						]
						,[
							18,
							[
								16,
								[
									23,
									"LevelTime"
								]
								,[
									0,
									20
								]
							]
							,[
								0,
								3
							]
							,[
								0,
								4
							]
						]
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				2796085963251331,
				false
				,[
				[
					6,
					"IntroWinLoose"
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				1124842025866403,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					6511323528648722,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"StarsAtLevel"
							]
							,[
								4,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									1
								]
							]
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5559019443888541,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"StarsAtLevel"
							]
							,[
								4,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									1
								]
							]
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			3668883670377709,
			[
			[
				9,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				3371538549442322,
				false
				,[
				[
					4,
					10
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.cnds.OnCollision,
				null,
				0,
				false,
				false,
				true,
				7497537489337089,
				false
				,[
				[
					4,
					15
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8930934224331713,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4982219630005244,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2541874515392175,
					false
					,[
					[
						2,
						["traffic collision",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2711657665897448,
				[
				],
				[
				[
					9,
					cr.behaviors.Physics.prototype.acts.SetImmovable,
					"Physics",
					3204296667696887,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					19,
					cr.plugins_.Rex_Function.prototype.acts.CallFunction,
					null,
					3485191772863709,
					false
					,[
					[
						1,
						[
							2,
							"ShowBang"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8884109928000277,
					false
					,[
					[
						0,
						[
							1,
							0.75
						]
					]
					]
				]
,				[
					44,
					cr.plugins_.Audio.prototype.acts.StopAll,
					null,
					893811676290401,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8219755361865612,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						7,
						[
							2,
							"LoseEvent"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					7099748301245744,
					false
					,[
					[
						6,
						"IntroWinLoose"
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9411551881618783,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				4174523445974383,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						6
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				125594537040519,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9874082560520567,
				false
			]
,			[
				12,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9689186529860708,
				false
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				4892855173164469,
				false
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				3408779704541251,
				false
			]
,			[
				9,
				cr.behaviors.mn2dCarPhysics.prototype.acts.CreateTopDownCarPhysicsInstance,
				"CarPhysics",
				763305100331486,
				false
				,[
				[
					4,
					29
				]
,				[
					4,
					28
				]
,				[
					4,
					31
				]
,				[
					4,
					30
				]
,				[
					0,
					[
						1,
						200
					]
				]
				]
			]
,			[
				9,
				cr.behaviors.Physics.prototype.acts.SetWorldGravity,
				"Physics",
				6122058872775484,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				744164672246258,
				false
			]
,			[
				15,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				706860380695544,
				false
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2651043920378834,
				false
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				1198908908531491,
				false
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				5476862852797839,
				false
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6175138958771708,
				false
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				7113399374030487,
				false
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				5775087874938194,
				false
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				3822165824314702,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8112681737946672,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					8994593406626986,
					false
					,[
					[
						1,
						[
							2,
							"IsTutorialDone"
						]
					]
					]
				]
				],
				[
				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					8866744913400493,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					6333899125290985,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					7541006001450961,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					3277518230611935,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					4492433965151675,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					321197599298931,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					1213147982119596,
					false
					,[
					[
						3,
						5
					]
,					[
						3,
						0
					]
,					[
						1,
						[
							2,
							"0"
						]
					]
,					[
						0,
						[
							1,
							0.2
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					8998036318954761,
					false
					,[
					[
						3,
						2
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9970328769079311,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				757390791837675,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						7
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				2822654642294489,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						14
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				1105679286264376,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				4142986627136574,
				false
			]
,			[
				12,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6786219378969885,
				false
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2580440763913761,
				false
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				8657318811916219,
				false
			]
,			[
				9,
				cr.behaviors.mn2dCarPhysics.prototype.acts.CreateTopDownCarPhysicsInstance,
				"CarPhysics",
				8985006285050035,
				false
				,[
				[
					4,
					29
				]
,				[
					4,
					28
				]
,				[
					4,
					31
				]
,				[
					4,
					30
				]
,				[
					0,
					[
						1,
						200
					]
				]
				]
			]
,			[
				9,
				cr.behaviors.Physics.prototype.acts.SetWorldGravity,
				"Physics",
				617559532144629,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				3486893277570731,
				false
			]
,			[
				15,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				7964908525871007,
				false
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				7318533632974314,
				false
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				1843082612549945,
				false
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9879973699312254,
				false
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				8337433571616464,
				false
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				3452055175054315,
				false
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9979124557500235,
				false
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				1349172035465079,
				[
				[
					10,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3598389599456487,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							21
						]
					]
					]
				]
				],
				[
				[
					10,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					1889604249914603,
					false
				]
,				[
					2,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					5229548101598216,
					false
				]
,				[
					3,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					2323259692877615,
					false
				]
,				[
					0,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					4599565664607035,
					false
				]
,				[
					1,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					4497235056338678,
					false
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2530541828014718,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				7111210114210868,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						15
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				8052486566144568,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					3
				]
,				[
					7,
					[
						0,
						22
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				8186061531446596,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6721896762533609,
				false
			]
,			[
				12,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				8622250766363177,
				false
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				4831441709244301,
				false
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				801936937620241,
				false
			]
,			[
				9,
				cr.behaviors.mn2dCarPhysics.prototype.acts.CreateTopDownCarPhysicsInstance,
				"CarPhysics",
				1724930193330701,
				false
				,[
				[
					4,
					29
				]
,				[
					4,
					28
				]
,				[
					4,
					31
				]
,				[
					4,
					30
				]
,				[
					0,
					[
						1,
						200
					]
				]
				]
			]
,			[
				9,
				cr.behaviors.Physics.prototype.acts.SetWorldGravity,
				"Physics",
				2668187192817429,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				7210248252422346,
				false
			]
,			[
				15,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				195229231602879,
				false
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				4058186358252713,
				false
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				7717094019861576,
				false
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6331698532538308,
				false
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				3145231976224671,
				false
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6622175500406819,
				false
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2821965705139303,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8220813573897392,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1577052562934874,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						23
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				5336785477835094,
				false
			]
			],
			[
			[
				11,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9005527891392652,
				false
			]
,			[
				12,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9310155607816804,
				false
			]
,			[
				13,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2384685900082253,
				false
			]
,			[
				14,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				1922632843795953,
				false
			]
,			[
				9,
				cr.behaviors.mn2dCarPhysics.prototype.acts.CreateTopDownCarPhysicsInstance,
				"CarPhysics",
				6572476936236576,
				false
				,[
				[
					4,
					29
				]
,				[
					4,
					28
				]
,				[
					4,
					31
				]
,				[
					4,
					30
				]
,				[
					0,
					[
						1,
						200
					]
				]
				]
			]
,			[
				9,
				cr.behaviors.Physics.prototype.acts.SetWorldGravity,
				"Physics",
				7705474157240264,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				9,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				9725720202870631,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				1003979139247379,
				false
				,[
				[
					4,
					32
				]
,				[
					5,
					[
						0,
						1
					]
				]
,				[
					0,
					[
						0,
						-80
					]
				]
,				[
					0,
					[
						0,
						-80
					]
				]
				]
			]
,			[
				32,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				8654597256560859,
				false
				,[
				[
					0,
					[
						1,
						1.6
					]
				]
				]
			]
,			[
				15,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2764625117184521,
				false
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				842735311781725,
				false
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				5073273213162669,
				false
			]
,			[
				2,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				8542895870703379,
				false
			]
,			[
				3,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				8142495770561945,
				false
			]
,			[
				0,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				6783355183953409,
				false
			]
,			[
				1,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				5915561007886645,
				false
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6127656513356733,
			[
			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				8091783243135749,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				8927004387520143,
				false
				,[
				[
					4,
					0
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6864756124268166,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7072730628677037,
					false
					,[
					[
						11,
						"IsGamePaused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					9,
					cr.behaviors.mn2dCarPhysics.prototype.acts.AccelerateCarPhysicsInstance,
					"CarPhysics",
					4952408226433092,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				196578664602666,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4245795117313241,
					false
					,[
					[
						11,
						"IsStartTextDone"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1948067123957299,
					false
					,[
					[
						11,
						"IsStartTextDone"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.Destroy,
					null,
					9715769769614807,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3953677343700297,
				[
				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.cnds.IsActive,
					"LiteTween",
					0,
					false,
					false,
					false,
					3992490724634391,
					false
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7335297760777343,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					6250028424694487,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					1295557843912756,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					7814956221734072,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					3637077054421719,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					1602325508501516,
					false
					,[
					[
						1,
						[
							2,
							"IsTutorialDone"
						]
					]
,					[
						7,
						[
							2,
							"Yes"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			8090244699484548,
			[
			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				9370648456792556,
				false
				,[
				[
					9,
					40
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				1468638486142172,
				false
				,[
				[
					4,
					1
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				1738005585919001,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1859994526933236,
					false
					,[
					[
						11,
						"IsGamePaused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					9,
					cr.behaviors.mn2dCarPhysics.prototype.acts.BrakeReverseCarPhysicsInstance,
					"CarPhysics",
					6903742640486669,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				46743468003126,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1672224429293972,
					false
					,[
					[
						11,
						"IsStartTextDone"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3257802644606217,
					false
					,[
					[
						11,
						"IsStartTextDone"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					33,
					cr.plugins_.SpriteFontPlus.prototype.acts.Destroy,
					null,
					9801151630047971,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6333343994391516,
				[
				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.cnds.IsActive,
					"LiteTween",
					0,
					false,
					false,
					false,
					3941214241355374,
					false
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					239381013771082,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					0,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					5208399680580028,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					1,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					2075422755304601,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					2,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					85675522177833,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					3,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					8072739352391738,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					3159327649353901,
					false
					,[
					[
						1,
						[
							2,
							"IsTutorialDone"
						]
					]
,					[
						7,
						[
							2,
							"Yes"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			9621236335710628,
			[
			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				4679712957631395,
				false
				,[
				[
					4,
					2
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				2232690638083352,
				false
				,[
				[
					9,
					37
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2633341614009797,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6624951252793855,
					false
					,[
					[
						11,
						"IsGamePaused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					9,
					cr.behaviors.mn2dCarPhysics.prototype.acts.TurnLeftCarPhysicsInstance,
					"CarPhysics",
					2579120891229313,
					false
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			3512034415462875,
			[
			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				7366684387943604,
				false
				,[
				[
					4,
					3
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				9504923368399975,
				false
				,[
				[
					9,
					39
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9577163356262173,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5639891894488693,
					false
					,[
					[
						11,
						"IsGamePaused"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					9,
					cr.behaviors.mn2dCarPhysics.prototype.acts.TurnRightCarPhysicsInstance,
					"CarPhysics",
					9769583973531182,
					false
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6237307892210179,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				610171709565437,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					16
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				5078122175065116,
				false
				,[
				[
					4,
					16
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				5960768731277729,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1758076368142329,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					3121562509025572,
					false
					,[
					[
						2,
						["click on the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				2875510181778797,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					7256370959026795,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3503143823533258,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							21
						]
					]
					]
				]
				],
				[
				[
					19,
					cr.plugins_.Rex_Function.prototype.acts.CallFunction,
					null,
					1963966066035013,
					false
					,[
					[
						1,
						[
							2,
							"DestroyAllButtons"
						]
					]
					]
				]
,				[
					57,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					4628082623032655,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					9286720363257607,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					306397526691272,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetTimeout,
					null,
					5819806653928134,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1226966917158747,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2359742203313734,
					false
					,[
					[
						11,
						"IsGamePaused"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8177134966391871,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							18,
							[
								16,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									22
								]
							]
							,[
								0,
								1
							]
							,[
								0,
								0
							]
						]
					]
,					[
						0,
						[
							0,
							170
						]
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetScale,
					null,
					9076259204777379,
					false
					,[
					[
						0,
						[
							1,
							0.8
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3171748697184122,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					8255863569336184,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					9576205854179797,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							18,
							[
								16,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									22
								]
							]
							,[
								0,
								1
							]
							,[
								0,
								0
							]
						]
					]
,					[
						0,
						[
							0,
							450
						]
					]
,					[
						0,
						[
							0,
							50
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					364730081152284,
					false
					,[
					[
						0,
						[
							0,
							14
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					6262040202664344,
					false
				]
,				[
					24,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetVisible,
					null,
					563959366317958,
					false
					,[
					[
						3,
						1
					]
					]
				]
,				[
					24,
					cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
					null,
					5506463111697361,
					false
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				4787896974895247,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					5170146629989783,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9235621749910967,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							22
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					217162548428259,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1364384257190492,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetTimeout,
					null,
					4292708927612999,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					267761062067928,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					6324710320697573,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"Level"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				8397420056975453,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					4612740100125866,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9622687661105504,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							17
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetTimescale,
					null,
					6116236330440383,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6440762469118236,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetTimeout,
					null,
					2288332777439586,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1905345213908861,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					812938038446107,
					false
					,[
					[
						6,
						"IntroWinLoose"
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					15931596296477,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						7,
						[
							2,
							"Intro"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				3851077022916008,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					452334658915139,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							3
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					832381338616687,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							20
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					931848960328594,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6915343860546781,
						false
						,[
						[
							11,
							"IsGamePaused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						19,
						cr.plugins_.Rex_Function.prototype.acts.CallFunction,
						null,
						8690073763361221,
						false
						,[
						[
							1,
							[
								2,
								"DestroyAllButtons"
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetTimescale,
						null,
						5059821802489906,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						1035035958607631,
						false
						,[
						[
							11,
							"IsGamePaused"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8652882184768152,
						false
						,[
						[
							4,
							57
						]
,						[
							5,
							[
								18,
								[
									16,
									[
										23,
										"LevelNumber"
									]
									,[
										0,
										22
									]
								]
								,[
									0,
									1
								]
								,[
									0,
									0
								]
							]
						]
,						[
							0,
							[
								0,
								480
							]
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
,					[
						57,
						cr.plugins_.Sprite.prototype.acts.SetSize,
						null,
						587441851089289,
						false
						,[
						[
							0,
							[
								0,
								1700
							]
						]
,						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						57,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						2470408291602497,
						false
						,[
						[
							0,
							[
								0,
								50
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8787080814035563,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8966613908431836,
						false
						,[
						[
							11,
							"IsGamePaused"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						8861365821724046,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								18,
								[
									16,
									[
										23,
										"LevelNumber"
									]
									,[
										0,
										22
									]
								]
								,[
									0,
									1
								]
								,[
									0,
									0
								]
							]
						]
,						[
							0,
							[
								0,
								480
							]
						]
,						[
							0,
							[
								0,
								300
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						9776507560905686,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						1740621080222042,
						false
						,[
						[
							0,
							[
								0,
								4
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetSize,
						null,
						2958420448709169,
						false
						,[
						[
							0,
							[
								0,
								150
							]
						]
,						[
							0,
							[
								0,
								150
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						1309455008634071,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								18,
								[
									16,
									[
										23,
										"LevelNumber"
									]
									,[
										0,
										22
									]
								]
								,[
									0,
									1
								]
								,[
									0,
									0
								]
							]
						]
,						[
							0,
							[
								0,
								575
							]
						]
,						[
							0,
							[
								0,
								420
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						864047085216323,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6678040102905213,
						false
						,[
						[
							0,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						6367374484302457,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								18,
								[
									16,
									[
										23,
										"LevelNumber"
									]
									,[
										0,
										22
									]
								]
								,[
									0,
									1
								]
								,[
									0,
									0
								]
							]
						]
,						[
							0,
							[
								0,
								385
							]
						]
,						[
							0,
							[
								0,
								420
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						3363000892925128,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						8301813779598979,
						false
						,[
						[
							0,
							[
								0,
								5
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6725680323255887,
			[
			[
				19,
				cr.plugins_.Rex_Function.prototype.cnds.OnFunctionCalled,
				null,
				1,
				false,
				false,
				false,
				6401838606152479,
				false
				,[
				[
					1,
					[
						2,
						"DestroyAllButtons"
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				9431531100792116,
				false
			]
,			[
				24,
				cr.plugins_.SpriteFontPlus.prototype.acts.SetVisible,
				null,
				2904375967034847,
				false
				,[
				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2342853255286979,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				4533803147980867,
				false
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				1174108316641926,
				false
				,[
				[
					11,
					"LevelNumber"
				]
,				[
					8,
					5
				]
,				[
					7,
					[
						0,
						23
					]
				]
				]
			]
			],
			[
			[
				32,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				1218012216460764,
				false
				,[
				[
					0,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.ImagePointX,
						false,
						null
						,[
[
							0,
							0
						]
						]
					]
				]
,				[
					0,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.ImagePointY,
						false,
						null
						,[
[
							0,
							0
						]
						]
					]
				]
				]
			]
,			[
				32,
				cr.plugins_.Sprite.prototype.acts.SetAngle,
				null,
				2475139384352513,
				false
				,[
				[
					0,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.Angle,
						false,
						null
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2580499044026856,
			[
			[
				19,
				cr.plugins_.Rex_Function.prototype.cnds.OnFunctionCalled,
				null,
				1,
				false,
				false,
				false,
				7051978743614581,
				false
				,[
				[
					1,
					[
						2,
						"ShowBang"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3630796901923434,
				false
				,[
				[
					11,
					"ShowedBang"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1928637971425188,
				false
				,[
				[
					11,
					"ShowedBang"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				6151181541910652,
				false
				,[
				[
					4,
					39
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
,				[
					0,
					[
						20,
						9,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
,			[
				39,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				2514126787518091,
				false
			]
,			[
				39,
				cr.plugins_.Sprite.prototype.acts.SetSize,
				null,
				696428993070803,
				false
				,[
				[
					0,
					[
						0,
						10
					]
				]
,				[
					0,
					[
						0,
						10
					]
				]
				]
			]
,			[
				39,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
				"LiteTween",
				3300912210445246,
				false
				,[
				[
					3,
					1
				]
,				[
					3,
					14
				]
,				[
					1,
					[
						2,
						"220,130"
					]
				]
,				[
					0,
					[
						1,
						0.3
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				39,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				7979094151715061,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6929791956335983,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				false,
				false,
				2840018281704925,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				4758068540721599,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						0,
						17
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				193095464601534,
				false
				,[
				[
					0,
					[
						4,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4710486534242671,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2735686598961011,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9382887278051859,
					false
					,[
					[
						2,
						["the mouse point to the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			261237388484787,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				true,
				false,
				4256888259490304,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				8519476930163363,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						16
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				3109240279199334,
				false
				,[
				[
					0,
					[
						5,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			6963261176246291,
			[
			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				3662628595569162,
				false
				,[
				[
					4,
					0
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				2206266083529446,
				false
				,[
				[
					9,
					38
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8065747324570185,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					618547948076976,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5219903708209014,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3068959821325998,
						false
						,[
						[
							11,
							"IsSoundAlreadyPlaying"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						1720340955675924,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							6274916018063473,
							false
							,[
							[
								11,
								"LevelNumber"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							44,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							3055812098708925,
							false
							,[
							[
								2,
								["the car driving_loop",false]
							]
,							[
								3,
								1
							]
,							[
								0,
								[
									0,
									0
								]
							]
,							[
								1,
								[
									2,
									"Sound1"
								]
							]
							]
						]
,						[
							44,
							cr.plugins_.Audio.prototype.acts.Stop,
							null,
							1219946888614518,
							false
							,[
							[
								1,
								[
									2,
									"Sound2"
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4403611374033821,
							false
							,[
							[
								11,
								"IsSoundAlreadyPlaying"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						3490945440957069,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							7327574855734892,
							false
						]
						],
						[
						[
							44,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							6523919889177827,
							false
							,[
							[
								2,
								["the cart running_loop",false]
							]
,							[
								3,
								1
							]
,							[
								0,
								[
									0,
									0
								]
							]
,							[
								1,
								[
									2,
									"Sound1"
								]
							]
							]
						]
,						[
							44,
							cr.plugins_.Audio.prototype.acts.Stop,
							null,
							8562120883187258,
							false
							,[
							[
								1,
								[
									2,
									"Sound2"
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							4790796979344512,
							false
							,[
							[
								11,
								"IsSoundAlreadyPlaying"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			9025052363725291,
			[
			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				3029886621046886,
				false
				,[
				[
					4,
					1
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				false,
				false,
				7172052637324112,
				false
				,[
				[
					9,
					40
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6700781402292479,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5259340956126627,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					6340151916580563,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5357637297173042,
						false
						,[
						[
							11,
							"IsSoundAlreadyPlaying"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						6397393162658785,
						[
						[
							-1,
							cr.system_object.prototype.cnds.CompareVar,
							null,
							0,
							false,
							false,
							false,
							9636777880124138,
							false
							,[
							[
								11,
								"LevelNumber"
							]
,							[
								8,
								0
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						],
						[
						[
							44,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							1187601236285741,
							false
							,[
							[
								2,
								["the cart running_loop_reverse",false]
							]
,							[
								3,
								1
							]
,							[
								0,
								[
									0,
									0
								]
							]
,							[
								1,
								[
									2,
									"Sound1"
								]
							]
							]
						]
,						[
							44,
							cr.plugins_.Audio.prototype.acts.Stop,
							null,
							8236745933977569,
							false
							,[
							[
								1,
								[
									2,
									"Sound2"
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							9852669339001041,
							false
							,[
							[
								11,
								"IsSoundAlreadyPlaying"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						5579440593847787,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							6232963866864244,
							false
						]
						],
						[
						[
							44,
							cr.plugins_.Audio.prototype.acts.Play,
							null,
							1495411648101873,
							false
							,[
							[
								2,
								["the cart running_loop_reverse",false]
							]
,							[
								3,
								1
							]
,							[
								0,
								[
									0,
									0
								]
							]
,							[
								1,
								[
									2,
									"Sound1"
								]
							]
							]
						]
,						[
							44,
							cr.plugins_.Audio.prototype.acts.Stop,
							null,
							6970495800876588,
							false
							,[
							[
								1,
								[
									2,
									"Sound2"
								]
							]
							]
						]
,						[
							-1,
							cr.system_object.prototype.acts.SetVar,
							null,
							6013477227841001,
							false
							,[
							[
								11,
								"IsSoundAlreadyPlaying"
							]
,							[
								7,
								[
									0,
									1
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7566850207913423,
			[
			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				true,
				false,
				4610917753870006,
				false
				,[
				[
					9,
					38
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.IsKeyDown,
				null,
				0,
				false,
				true,
				false,
				6144400452854744,
				false
				,[
				[
					9,
					40
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				true,
				false,
				6407946711111254,
				false
				,[
				[
					4,
					0
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				true,
				false,
				1339441693995173,
				false
				,[
				[
					4,
					1
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				9165506409469561,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9513499677049283,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3431623168697042,
					false
					,[
					[
						11,
						"IsSoundAlreadyPlaying"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Stop,
					null,
					8512127515183287,
					false
					,[
					[
						1,
						[
							2,
							"Sound1"
						]
					]
					]
				]
,				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9544891939415825,
					false
					,[
					[
						2,
						["thecar static_loop",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"Sound2"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6967593642891028,
					false
					,[
					[
						11,
						"IsSoundAlreadyPlaying"
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1544437879476691,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageHidden,
				null,
				1,
				false,
				false,
				false,
				9726163641548157,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				1769011390913629,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8900966392256692,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageVisible,
				null,
				1,
				false,
				false,
				false,
				4829613171131627,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				3266963473539389,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9116877241069544,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				false,
				false,
				1748136146222823,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				7941234545436897,
				false
				,[
				[
					5,
					[
						18,
						[
							17,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								23
							]
						]
						,[
							0,
							2
						]
						,[
							0,
							1
						]
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				55,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				3600759066869517,
				false
				,[
				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			845406011481847,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				true,
				false,
				7331008524332802,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2094318222686596,
				false
				,[
				[
					5,
					[
						18,
						[
							17,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								23
							]
						]
						,[
							0,
							2
						]
						,[
							0,
							1
						]
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6669195215257578,
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.cnds.pauseGame,
				null,
				1,
				false,
				false,
				false,
				9237163638132057,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				8339163136083043,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				19,
				cr.plugins_.Rex_Function.prototype.acts.CallFunction,
				null,
				7053624123513089,
				false
				,[
				[
					1,
					[
						2,
						"DestroyAllButtons"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				3658454414920603,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				3318374974096093,
				false
				,[
				[
					11,
					"IsGamePaused"
				]
,				[
					7,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				7502643720565626,
				false
				,[
				[
					4,
					57
				]
,				[
					5,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								22
							]
						]
						,[
							0,
							1
						]
						,[
							0,
							0
						]
					]
				]
,				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
,			[
				57,
				cr.plugins_.Sprite.prototype.acts.SetSize,
				null,
				6806632094950753,
				false
				,[
				[
					0,
					[
						0,
						1700
					]
				]
,				[
					0,
					[
						0,
						1000
					]
				]
				]
			]
,			[
				57,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				5735824713052701,
				false
				,[
				[
					0,
					[
						0,
						50
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				7816803024305726,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								22
							]
						]
						,[
							0,
							1
						]
						,[
							0,
							0
						]
					]
				]
,				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						300
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				1126158046192048,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				3574831083320021,
				false
				,[
				[
					0,
					[
						0,
						4
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetSize,
				null,
				1217708127354023,
				false
				,[
				[
					0,
					[
						0,
						150
					]
				]
,				[
					0,
					[
						0,
						150
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				8754534532210482,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								22
							]
						]
						,[
							0,
							1
						]
						,[
							0,
							0
						]
					]
				]
,				[
					0,
					[
						0,
						575
					]
				]
,				[
					0,
					[
						0,
						420
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				3393155834990015,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1221046246524966,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				5207513587960299,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								22
							]
						]
						,[
							0,
							1
						]
						,[
							0,
							0
						]
					]
				]
,				[
					0,
					[
						0,
						385
					]
				]
,				[
					0,
					[
						0,
						420
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				516818774106447,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				4208120562918858,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
				]
			]
,			[
				44,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				1796992127835824,
				false
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6456921227568489,
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.cnds.resumeGame,
				null,
				1,
				false,
				false,
				false,
				3311750200618117,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				3124130766692335,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				44,
				cr.plugins_.Audio.prototype.acts.SetSilent,
				null,
				338568834487266,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9140984205617936,
				false
				,[
				[
					11,
					"Timer"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				6159315501094911,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3577623661264065,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						3
					]
,					[
						7,
						[
							0,
							6
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2788403884989991,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					9549240726265738,
					false
					,[
					[
						2,
						["music_1",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"LevelSound"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5515500313834478,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4164702077544511,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							7
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9164902307525614,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						3
					]
,					[
						7,
						[
							0,
							14
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6741281843043856,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					3847895534991645,
					false
					,[
					[
						2,
						["music_2",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"LevelSound"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1050073063646881,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					723518587862477,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							15
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					32832089515453,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						3
					]
,					[
						7,
						[
							0,
							22
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7721737518182845,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					799193898801622,
					false
					,[
					[
						2,
						["music_1",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"LevelSound"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8681948044106752,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1079993158244756,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							23
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6776681369751299,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					1915086827921758,
					false
					,[
					[
						2,
						["music_2",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"LevelSound"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			3169152097132167,
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.cnds.isPaused,
				null,
				0,
				false,
				false,
				false,
				3445479190099952,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.StopAll,
				null,
				2174223369683389,
				false
			]
			]
		]
		]
	]
,	[
		"Loading",
		[
		[
			1,
			"CurrentLanguage",
			1,
			"",
false,false,9580630967137072,false
		]
,		[
			1,
			"IsSoundEnabled",
			0,
			1,
false,false,2931377028001474,false
		]
,		[
			1,
			"IsEffectEnabled",
			0,
			1,
false,false,5574177014755591,false
		]
,		[
			1,
			"CanChange",
			0,
			0,
false,false,3476990800730956,false
		]
,		[
			1,
			"CanChange2",
			0,
			0,
false,false,8352282684430467,false
		]
,		[
			1,
			"NextEvent",
			1,
			"",
false,false,5555927320740217,false
		]
,		[
			1,
			"LevelNumber",
			0,
			1,
false,false,4295496258890542,false
		]
,		[
			0,
			null,
			false,
			null,
			7700001330367218,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				1698089875273845,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				2444728829423926,
				false
				,[
				[
					11,
					"CanChange"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				5143262858272131,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				9947631186001012,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				3324620058349703,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				9812130679075608,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						-740
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				8836534800905416,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				6216938687862142,
				false
				,[
				[
					3,
					17
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				6856393136477336,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				843612073151931,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				7581544242038818,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						-740
					]
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				3888626854315768,
				false
				,[
				[
					3,
					17
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				425967792782957,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				3398055552432941,
				false
				,[
				[
					0,
					[
						1,
						0.4
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				9173991115977151,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						1300
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				7300563089928511,
				false
				,[
				[
					0,
					[
						1,
						0.6
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				9698648858780966,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				2275259333922441,
				false
				,[
				[
					0,
					[
						0,
						4
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				6785562547002793,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				4571592112942958,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						-450
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				1750694694195552,
				false
				,[
				[
					3,
					17
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				4312679548663516,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				6676686573445259,
				false
				,[
				[
					0,
					[
						1,
						0.4
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				4113670492365381,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						811
					]
				]
,				[
					0,
					[
						0,
						-100
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				1284913928228361,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				7338378415046678,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				4022909664462975,
				false
				,[
				[
					0,
					[
						0,
						6
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				2473583542037696,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				7242613751225939,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						811
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				2515081191815896,
				false
				,[
				[
					3,
					1
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						100
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				1625041790963014,
				false
				,[
				[
					3,
					17
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				2057918076312362,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				3550920055332259,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						811
					]
				]
,				[
					0,
					[
						0,
						-100
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				754183661219323,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				8962677592133194,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1167214845495241,
				false
				,[
				[
					0,
					[
						0,
						15
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				3453686452578844,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				4453210570221559,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						811
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				7854391846573538,
				false
				,[
				[
					3,
					1
				]
,				[
					3,
					0
				]
,				[
					0,
					[
						0,
						200
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				2204220327926528,
				false
				,[
				[
					3,
					17
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				6240457579733336,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				9896991233001701,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					5417513266471883,
					false
					,[
					[
						1,
						[
							2,
							"StarsAtLevel1"
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9337642393478794,
					false
					,[
					[
						1,
						[
							2,
							"StarsAtLevel1"
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4937699609544322,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					1877758267360638,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					674125312880103,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1321305348360206,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					294709959058168,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8650315571374413,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						7,
						[
							20,
							21,
							cr.plugins_.WebStorage.prototype.exps.LocalValue,
							true,
							null
							,[
[
								2,
								"IsSoundEnabled"
							]
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9317106888860929,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					true,
					false,
					8557797215565798,
					false
					,[
					[
						1,
						[
							2,
							"IsSoundEnabled"
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					5526495726060298,
					false
					,[
					[
						1,
						[
							2,
							"IsSoundEnabled"
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					703219982224318,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5382137597063365,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7310390822897361,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					6644261819841987,
					false
					,[
					[
						2,
						["mainmenu",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"Menu"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			1461146875907942,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				9600154086069834,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					16
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				1029385447576903,
				false
				,[
				[
					4,
					16
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				8588253085822116,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4690623199587838,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					4267762897726544,
					false
					,[
					[
						2,
						["click on the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				681896235669473,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					1038297051651948,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							4
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2471810291009625,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							21
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					2137558933504855,
					[
					[
						-1,
						cr.system_object.prototype.cnds.LayerVisible,
						null,
						0,
						false,
						true,
						false,
						3403683986903031,
						false
						,[
						[
							5,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						9705633565578041,
						false
						,[
						[
							4,
							40
						]
,						[
							5,
							[
								0,
								0
							]
						]
,						[
							0,
							[
								20,
								16,
								cr.plugins_.Sprite.prototype.exps.X,
								false,
								null
							]
						]
,						[
							0,
							[
								20,
								16,
								cr.plugins_.Sprite.prototype.exps.Y,
								false,
								null
							]
						]
						]
					]
,					[
						40,
						cr.plugins_.Particles.prototype.acts.SetTimeout,
						null,
						4566972887979088,
						false
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						436714397429458,
						false
						,[
						[
							0,
							[
								1,
								0.6
							]
						]
						]
					]
,					[
						19,
						cr.plugins_.Rex_Function.prototype.acts.CallFunction,
						null,
						5157656030442389,
						false
						,[
						[
							1,
							[
								2,
								"ButtonClicked"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				7475094906945175,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					654948985234939,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							6
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					6699750348095516,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							23
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					7466467356354026,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2982017150038516,
						false
						,[
						[
							11,
							"CanChange"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						9412769338105341,
						false
						,[
						[
							0,
							[
								0,
								7
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2661812446371541,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						3474878236384489,
						false
						,[
						[
							11,
							"CanChange"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				6710277075189391,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8761909265856781,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							7
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8794278777369827,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							24
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					9361603792064405,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3392901150834459,
						false
						,[
						[
							11,
							"CanChange"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6346942651103665,
						false
						,[
						[
							0,
							[
								0,
								6
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						2245678727041264,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8408852563841056,
						false
						,[
						[
							11,
							"CanChange"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				4200380168369894,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8990486941212386,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							15
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					4859280019181571,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							32
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					821464918691803,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5465936519279176,
						false
						,[
						[
							11,
							"CanChange2"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						7076025946153284,
						false
						,[
						[
							0,
							[
								0,
								16
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8824964639178285,
						false
						,[
						[
							11,
							"IsSoundEnabled"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						592548058842159,
						false
						,[
						[
							11,
							"CanChange2"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						44,
						cr.plugins_.Audio.prototype.acts.Stop,
						null,
						4323762994183093,
						false
						,[
						[
							1,
							[
								2,
								"Menu"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				1325014657020911,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2760097778719578,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							16
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					7306675588795628,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							33
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					1924205942996483,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						138285128525136,
						false
						,[
						[
							11,
							"CanChange2"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						518765717804659,
						false
						,[
						[
							0,
							[
								0,
								15
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8125776800877993,
						false
						,[
						[
							11,
							"IsSoundEnabled"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5119288356887796,
						false
						,[
						[
							11,
							"CanChange2"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						164618609539905,
						false
						,[
						[
							2,
							["mainmenu",false]
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								"Menu"
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				5413190230180881,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2803954970428282,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							13
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					5398718317693289,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							30
						]
					]
					]
				]
				],
				[
				[
					59,
					cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
					null,
					959729192104884,
					false
					,[
					[
						1,
						[
							2,
							"more_games"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			8391005817196589,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				2225594150369435,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					20
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				1080574998194879,
				false
				,[
				[
					4,
					20
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				6948423777003364,
				[
				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					true,
					false,
					7925363629101285,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					59,
					cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
					null,
					9297228222815083,
					false
					,[
					[
						1,
						[
							2,
							"logo"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			2262547834146527,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				7511978540732438,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					54
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				86448695187065,
				false
				,[
				[
					4,
					54
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				1936561599586275,
				[
				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					true,
					false,
					9363011070061172,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5737043363122157,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			1310008281761712,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				8641375800993242,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					45
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				9020745785066377,
				false
				,[
				[
					4,
					45
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				2533864111039595,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9267556346906641,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					6569138441306936,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					581537260750728,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					760356836096506,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9193765475544596,
					false
					,[
					[
						7,
						[
							2,
							"ENGLISH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					9480942955851839,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3656627893050726,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1031492981661788,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4604351255312263,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					2725416515987161,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					157223545542322,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					546685392295883,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					854933752200542,
					false
					,[
					[
						7,
						[
							2,
							"ENGLISH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					1147356128432462,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					439141499580309,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1308666574925748,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					8985596838062684,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					2546318550102016,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1031417813876385,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6649978255587857,
					false
					,[
					[
						7,
						[
							2,
							"MEER SPELLEN"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8943894801834064,
					false
					,[
					[
						7,
						[
							2,
							"DUTCH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					9046152783614029,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7102183682523881,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				92611625851194,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					5531259063176635,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					8015864057742461,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1709780750121251,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5141547744291854,
					false
					,[
					[
						7,
						[
							2,
							"PLUS DE JEUX"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1412799434909098,
					false
					,[
					[
						7,
						[
							2,
							"FRENCH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					4308971012967939,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3249287429122305,
					false
					,[
					[
						0,
						[
							0,
							3
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				736957454718966,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1814745572927184,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							4
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					6196667484450201,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					5465427961803615,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9353260686049736,
					false
					,[
					[
						7,
						[
							2,
							"MEHR SPIELE"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5939760619255684,
					false
					,[
					[
						7,
						[
							2,
							"GERMAN"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					2918815509847342,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					9035502483403846,
					false
					,[
					[
						0,
						[
							0,
							4
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6172900221720405,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9550890804006789,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					4492448598500545,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4722981614241358,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9881945001733594,
					false
					,[
					[
						7,
						[
							2,
							"MÁS JUEGOS"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5870493385626546,
					false
					,[
					[
						7,
						[
							2,
							"SPANISH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5190076136865058,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1795873966793568,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8596621447229871,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					161603913423506,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							6
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					2351096797767449,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					527827157180786,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3938145510453397,
					false
					,[
					[
						7,
						[
							2,
							"MAIS JOGOS"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					34874432089364,
					false
					,[
					[
						7,
						[
							2,
							"BRAZIL"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					3933536505998295,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3891573392438652,
					false
					,[
					[
						0,
						[
							0,
							6
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				178344784805163,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1030321398941001,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							7
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					5048327928889093,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2936359100200986,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6744310055074404,
					false
					,[
					[
						7,
						[
							2,
							"ALTRI GIOCHI"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8744085523081594,
					false
					,[
					[
						7,
						[
							2,
							"ITALIAN"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					1220813158546886,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1922075343554802,
					false
					,[
					[
						0,
						[
							0,
							7
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5117749155738872,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					4682687805663928,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							8
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					9645882668762044,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8619516832552873,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1268898494312168,
					false
					,[
					[
						7,
						[
							2,
							"FLER SPEL"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5186643778726838,
					false
					,[
					[
						7,
						[
							2,
							"SWEDISH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					136378717208515,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7456288965648677,
					false
					,[
					[
						0,
						[
							0,
							8
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1787324976951993,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9795959606137969,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							9
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					5175483739707733,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					9955093267240212,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4038500067545079,
					false
					,[
					[
						7,
						[
							2,
							"WIĘCEJ GIER"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8711338777523181,
					false
					,[
					[
						7,
						[
							2,
							"POLISH"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					9366426313315305,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					811531600397998,
					false
					,[
					[
						0,
						[
							0,
							9
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2493282735395188,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1544399929315759,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							10
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					5597575080139048,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4145551395887491,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6678566110035912,
					false
					,[
					[
						7,
						[
							2,
							"ДРУГИЕ ИГРЫ"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5903723270995391,
					false
					,[
					[
						7,
						[
							2,
							"RUSSIAN"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5018796354947152,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5395644847800803,
					false
					,[
					[
						0,
						[
							0,
							10
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7628029136330097,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9582001716467383,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							11
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					6183536888490065,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7497334174914028,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5640682447426537,
					false
					,[
					[
						7,
						[
							2,
							"GAME LAIN"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3566988898109105,
					false
					,[
					[
						7,
						[
							2,
							"INDONESIAN"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					226593726783023,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1027194191831927,
					false
					,[
					[
						0,
						[
							0,
							11
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				490227924337424,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1839564625730052,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							12
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					4404338032461487,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3321014948278906,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					522009592919624,
					false
					,[
					[
						7,
						[
							2,
							"更多游戏"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5445547633580215,
					false
					,[
					[
						7,
						[
							2,
							"CHINESE"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					3255976768997126,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1277522558499696,
					false
					,[
					[
						0,
						[
							0,
							12
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2936123790494823,
				[
				[
					45,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					2781974882778362,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							13
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					4357554316697586,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4214720107178723,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3689083173390282,
					false
					,[
					[
						7,
						[
							2,
							"DİĞER OYUNLAR"
						]
					]
					]
				]
,				[
					46,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3715530116820287,
					false
					,[
					[
						7,
						[
							2,
							"TURKEY"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					7868014224202415,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					48,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					38656148269941,
					false
					,[
					[
						0,
						[
							0,
							13
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4752260891966421,
			[
			[
				19,
				cr.plugins_.Rex_Function.prototype.cnds.OnFunctionCalled,
				null,
				1,
				false,
				false,
				false,
				2231759427430489,
				false
				,[
				[
					1,
					[
						2,
						"ButtonClicked"
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				9204358690315341,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				7927402651354736,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						650
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				7884762091224925,
				false
				,[
				[
					3,
					16
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				9033960999518893,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				710170395328277,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
				"LiteTween",
				7191480003359102,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
,				[
					0,
					[
						0,
						650
					]
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetEasing,
				"LiteTween",
				7214341699370904,
				false
				,[
				[
					3,
					16
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				473202026743794,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				1800966634938929,
				false
				,[
				[
					0,
					[
						1,
						0.8
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1900310161945018,
				false
				,[
				[
					11,
					"NextEvent"
				]
,				[
					7,
					[
						2,
						"Intro"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				2530286132683903,
				false
				,[
				[
					6,
					"IntroWinLoose"
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6433257962555381,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				false,
				false,
				7370758283050669,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				6712190132579325,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						0,
						17
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.LayerVisible,
				null,
				0,
				false,
				true,
				false,
				2019958158920169,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				796618194244788,
				false
				,[
				[
					0,
					[
						4,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				7523363758554883,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1876281885731158,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					8129704682794552,
					false
					,[
					[
						2,
						["the mouse point to the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4312284154709505,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				true,
				false,
				1232716886906817,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				7207252671506682,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						16
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1502618235801101,
				false
				,[
				[
					0,
					[
						5,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6872871322995928,
				false
				,[
				[
					11,
					"CanChange"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1352855112464856,
				false
				,[
				[
					11,
					"CanChange2"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6638757456567056,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				false,
				false,
				776277369379092,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				3107651122871803,
				false
				,[
				[
					5,
					[
						0,
						2
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1824902270762316,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				true,
				false,
				1760548915258278,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				5084957748290783,
				false
				,[
				[
					5,
					[
						0,
						2
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7049808620591869,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageHidden,
				null,
				1,
				false,
				false,
				false,
				8050993667661616,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				5688525467061677,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			706608835138291,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageVisible,
				null,
				1,
				false,
				false,
				false,
				2951826995203041,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				356839739684339,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			8947453429000961,
			[
			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				true,
				false,
				8671123054114623,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.LayerVisible,
				null,
				0,
				false,
				true,
				false,
				9676982463485115,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				6487259860093583,
				false
				,[
				[
					11,
					"CanChange"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				4991165244417828,
				false
				,[
				[
					11,
					"CanChange2"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
		]
		]
	]
,	[
		"IntroWinLoose",
		[
		[
			1,
			"TotalStars",
			0,
			0,
false,false,7950315915132703,false
		]
,		[
			1,
			"CurrentPage",
			0,
			0,
false,false,4451045176351802,false
		]
,		[
			1,
			"Is29LevelOpen",
			0,
			0,
false,false,9426084117740923,false
		]
,		[
			1,
			"tmpStars",
			0,
			0,
false,false,7875844879836223,false
		]
,		[
			1,
			"tmp",
			0,
			0,
false,false,7735688048972031,false
		]
,		[
			0,
			null,
			false,
			null,
			5506216910590057,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				6633941759695272,
				false
				,[
				[
					11,
					"NextEvent"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"Intro"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				3987444542579209,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8477917156558373,
				false
				,[
				[
					11,
					"tmp"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				9606340173467841,
				false
				,[
				[
					11,
					"CurrentPage"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetTimescale,
				null,
				4306237227312893,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				7173836069227629,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						150
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				9040998439557656,
				false
				,[
				[
					0,
					[
						0,
						11
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				1017017636654224,
				false
				,[
				[
					0,
					[
						1,
						0.85
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				6430746024743668,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						11
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				1432336825159039,
				false
				,[
				[
					0,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								15
							]
						]
						,[
							0,
							100
						]
						,[
							0,
							50
						]
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				3592394494071011,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1373472294315842,
				false
				,[
				[
					11,
					"TotalStars"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				7282409481016265,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						810
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				5462490607955461,
				false
				,[
				[
					0,
					[
						0,
						12
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
				null,
				2814189967455113,
				false
				,[
				[
					10,
					0
				]
,				[
					7,
					[
						0,
						12
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				8705686548625977,
				false
				,[
				[
					0,
					[
						1,
						0.85
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				6622819537460585,
				false
				,[
				[
					0,
					[
						18,
						[
							16,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								15
							]
						]
						,[
							0,
							50
						]
						,[
							0,
							100
						]
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				1959828493737895,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				8693880536988124,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				5747095446115543,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				4692858507673014,
				false
				,[
				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						576
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				8819519404290155,
				false
				,[
				[
					11,
					"tmpStars"
				]
,				[
					7,
					[
						0,
						0
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				8727947165207989,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1178776656591959,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					44,
					cr.plugins_.Audio.prototype.cnds.IsTagPlaying,
					null,
					0,
					false,
					true,
					false,
					8328215199455974,
					false
					,[
					[
						1,
						[
							2,
							"Menu"
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					250873752588217,
					false
					,[
					[
						2,
						["mainmenu",false]
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							"Menu"
						]
					]
					]
				]
,				[
					44,
					cr.plugins_.Audio.prototype.acts.Stop,
					null,
					2158925692623324,
					false
					,[
					[
						1,
						[
							2,
							"LevelSound"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3259710037848531,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7776635694617961,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6401523576317782,
					false
					,[
					[
						7,
						[
							2,
							"ALL LEVELS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3592502359446953,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6399308145487205,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2380361351179411,
					false
					,[
					[
						7,
						[
							2,
							"ALL LEVELS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2221801475000846,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8576510456173816,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9309274474379828,
					false
					,[
					[
						7,
						[
							2,
							"ALLE LEVELS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8409507718828889,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5774564927089025,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1357807264691947,
					false
					,[
					[
						7,
						[
							2,
							"TOUS LES NIVEAUX"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1024908623987845,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					557190500119358,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2140044595979251,
					false
					,[
					[
						7,
						[
							2,
							"ALLE LEVEL"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2563125303613086,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4773601534353847,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					657708315457462,
					false
					,[
					[
						7,
						[
							2,
							"TODOS LOS NIVELES"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2901201435477318,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7224716951691997,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5744578383694477,
					false
					,[
					[
						7,
						[
							2,
							"TODOS OS NÍVEIS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7888705824230643,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1330745790129592,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					394184453378365,
					false
					,[
					[
						7,
						[
							2,
							"TUTTI I LIVELLI"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6816593429366492,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3960787872370395,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8965298857094148,
					false
					,[
					[
						7,
						[
							2,
							"ALLA NIVÅER"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4944948923070312,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7030801781329294,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2482627547929263,
					false
					,[
					[
						7,
						[
							2,
							"WSZYSTKIE POZIOMY"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2597198975363346,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8099841368849506,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7948005742856353,
					false
					,[
					[
						7,
						[
							2,
							"ВСЕ УРОВНИ"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3525231308508421,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					234253117464298,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6406600832750025,
					false
					,[
					[
						7,
						[
							2,
							"SEMUA LEVEL"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1330257355740729,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8274304053479116,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1087186833785848,
					false
					,[
					[
						7,
						[
							2,
							"所有关卡"
						]
					]
					]
				]
,				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetScale,
					null,
					6406627632052727,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9283426825167624,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3592908348267543,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
				],
				[
				[
					47,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4502190425997074,
					false
					,[
					[
						7,
						[
							2,
							"TÜM SEVİYELER"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5518134208349269,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7265709986720722,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						8,
						4
					]
,					[
						7,
						[
							0,
							15
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.TriggerOnce,
					null,
					0,
					false,
					false,
					false,
					2451893282492315,
					false
				]
				],
				[
				[
					8,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					5862658649502473,
					false
					,[
					[
						3,
						2
					]
					]
				]
,				[
					23,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					262156873948879,
					false
					,[
					[
						3,
						2
					]
					]
				]
,				[
					24,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
					"LiteTween",
					8447926392859146,
					false
					,[
					[
						3,
						2
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7054247809031433,
					false
					,[
					[
						11,
						"CurrentPage"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					8,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
					"LiteTween",
					4775780875132033,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					8,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					2776349870735789,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					23,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
					"LiteTween",
					268414313713411,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					23,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					2009434205722347,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					24,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
					"LiteTween",
					232028158093184,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					24,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					1874979241496797,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					47,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
					"LiteTween",
					647574207887614,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						1
					]
,					[
						0,
						[
							0,
							-1000
						]
					]
					]
				]
,				[
					47,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					445242562551562,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6951311806082576,
				[
				[
					-1,
					cr.system_object.prototype.cnds.ForEach,
					null,
					0,
					true,
					false,
					false,
					1728222577698702,
					false
					,[
					[
						4,
						8
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.AddVar,
					null,
					9009486246727206,
					false
					,[
					[
						11,
						"TotalStars"
					]
,					[
						7,
						[
							19,
							cr.system_object.prototype.exps["int"]
							,[
[
								20,
								21,
								cr.plugins_.WebStorage.prototype.exps.LocalValue,
								true,
								null
								,[
[
									10,
									[
										2,
										"StarsAtLevel"
									]
									,[
										21,
										8,
										false,
										null
										,0
									]
								]
								]
							]
							]
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5217193284720736,
					false
					,[
					[
						0,
						[
							19,
							cr.system_object.prototype.exps["int"]
							,[
[
								20,
								21,
								cr.plugins_.WebStorage.prototype.exps.LocalValue,
								true,
								null
								,[
[
									10,
									[
										2,
										"StarsAtLevel"
									]
									,[
										21,
										8,
										false,
										null
										,0
									]
								]
								]
							]
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					7475571041161421,
					[
					[
						8,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						5407916627641059,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								29
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						7147522087409818,
						[
						[
							21,
							cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
							null,
							0,
							false,
							true,
							false,
							1790257090286147,
							false
							,[
							[
								1,
								[
									2,
									"StarsAtLevel29"
								]
							]
							]
						]
						],
						[
						[
							8,
							cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
							null,
							8069125499857874,
							false
							,[
							[
								0,
								[
									0,
									5
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						5553313691073588,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							8298935908567163,
							false
						]
						],
						[
						[
							8,
							cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
							null,
							5136082748095679,
							false
							,[
							[
								0,
								[
									19,
									cr.system_object.prototype.exps["int"]
									,[
[
										20,
										21,
										cr.plugins_.WebStorage.prototype.exps.LocalValue,
										true,
										null
										,[
[
											10,
											[
												2,
												"StarsAtLevel"
											]
											,[
												21,
												8,
												false,
												null
												,0
											]
										]
										]
									]
									]
								]
							]
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6209009158226715,
					[
					[
						8,
						cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						2074073739153568,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								30
							]
						]
						]
					]
					],
					[
					]
					,[
					[
						0,
						null,
						false,
						null,
						469671733923036,
						[
						[
							21,
							cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
							null,
							0,
							false,
							true,
							false,
							6248674727020338,
							false
							,[
							[
								1,
								[
									2,
									"StarsAtLevel30"
								]
							]
							]
						]
						],
						[
						[
							8,
							cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
							null,
							7465689658711629,
							false
							,[
							[
								0,
								[
									0,
									6
								]
							]
							]
						]
						]
					]
,					[
						0,
						null,
						false,
						null,
						4572365442446861,
						[
						[
							-1,
							cr.system_object.prototype.cnds.Else,
							null,
							0,
							false,
							false,
							false,
							6394218514012464,
							false
						]
						],
						[
						[
							8,
							cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
							null,
							8961453008316571,
							false
							,[
							[
								0,
								[
									19,
									cr.system_object.prototype.exps["int"]
									,[
[
										20,
										21,
										cr.plugins_.WebStorage.prototype.exps.LocalValue,
										true,
										null
										,[
[
											10,
											[
												2,
												"StarsAtLevel"
											]
											,[
												21,
												8,
												false,
												null
												,0
											]
										]
										]
									]
									]
								]
							]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9136553036700216,
				[
				[
					-1,
					cr.system_object.prototype.cnds.ForEach,
					null,
					0,
					true,
					false,
					false,
					2091288974583968,
					false
					,[
					[
						4,
						23
					]
					]
				]
				],
				[
				[
					23,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5023112656043606,
					false
					,[
					[
						0,
						[
							18,
							[
								16,
								[
									19,
									cr.system_object.prototype.exps["int"]
									,[
[
										20,
										21,
										cr.plugins_.WebStorage.prototype.exps.LocalValue,
										true,
										null
										,[
[
											10,
											[
												2,
												"StarsAtLevel"
											]
											,[
												21,
												23,
												false,
												null
												,0
											]
										]
										]
									]
									]
								]
								,[
									0,
									0
								]
							]
							,[
								5,
								[
									20,
									23,
									cr.plugins_.Sprite.prototype.exps.AnimationFrame,
									false,
									null
								]
								,[
									0,
									15
								]
							]
							,[
								20,
								23,
								cr.plugins_.Sprite.prototype.exps.AnimationFrame,
								false,
								null
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8681935154302222,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2812096256410483,
					false
					,[
					[
						11,
						"TotalStars"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							90
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					1024209059004034,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
,					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					5576719217466212,
					false
					,[
					[
						4,
						49
					]
,					[
						5,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							480
						]
					]
,					[
						0,
						[
							0,
							350
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8976851092799358,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					5803791715093676,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						1
					]
					]
				]
,				[
					49,
					cr.plugins_.Sprite.prototype.acts.SetScale,
					null,
					7766204725128999,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					6961315965381854,
					false
					,[
					[
						4,
						58
					]
,					[
						5,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							475
						]
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					58,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetScale,
					null,
					9631977888298871,
					false
					,[
					[
						0,
						[
							1,
							1.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8394877394848729,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							259
						]
					]
,					[
						0,
						[
							0,
							627
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7978710212345112,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					54628187256314,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetSize,
					null,
					404572890967834,
					false
					,[
					[
						0,
						[
							0,
							85
						]
					]
,					[
						0,
						[
							0,
							85
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					3889724255805546,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4879861576663727,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							731
						]
					]
,					[
						0,
						[
							0,
							627
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					3426194279350025,
					false
					,[
					[
						0,
						[
							0,
							13
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
					null,
					4877694997924594,
					false
					,[
					[
						10,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetSize,
					null,
					2811954244961738,
					false
					,[
					[
						0,
						[
							0,
							214
						]
					]
,					[
						0,
						[
							0,
							54
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					6229520641641437,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					3690770251750111,
					false
					,[
					[
						4,
						42
					]
,					[
						5,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							730
						]
					]
,					[
						0,
						[
							0,
							628
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetScale,
					null,
					4679724332605448,
					false
					,[
					[
						0,
						[
							1,
							0.7
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					2776473085391557,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6157720947735686,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"eng"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						8778598833782641,
						false
						,[
						[
							7,
							[
								2,
								"GAME  COMPLETED"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						7612599106153058,
						false
						,[
						[
							7,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2660906569427032,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3420244027256555,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"uk"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9228119396925143,
						false
						,[
						[
							7,
							[
								2,
								"GAME  COMPLETED"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						4220267638227747,
						false
						,[
						[
							7,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3463462678917627,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3378833348079247,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"du"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9682927331189952,
						false
						,[
						[
							7,
							[
								2,
								"SPEL  VOLTOOID"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						8884830543059447,
						false
						,[
						[
							7,
							[
								2,
								"MEER SPELLEN"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2966094336820722,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						6597900766618791,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"fr"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9722521003681269,
						false
						,[
						[
							7,
							[
								2,
								"JEU  TERMINÉ"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6023915382113677,
						false
						,[
						[
							7,
							[
								2,
								"PLUS DE JEUX"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3443055239238663,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8526872973748933,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ger"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						1346018879563739,
						false
						,[
						[
							7,
							[
								2,
								"SPIEL ABGESCHLOSSEN"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						4649593773210676,
						false
						,[
						[
							7,
							[
								2,
								"MEHR SPIELE"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					7068421742991525,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4384612010575908,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"spa"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6671086941774466,
						false
						,[
						[
							7,
							[
								2,
								"JUEGO COMPLETADO"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9714283244743499,
						false
						,[
						[
							7,
							[
								2,
								"MÁS JUEGOS"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6604214879538668,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2242766480919987,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"br"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						1287093012643126,
						false
						,[
						[
							7,
							[
								2,
								"JOGO CONCLUÍDO"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						5159898021833106,
						false
						,[
						[
							7,
							[
								2,
								"MAIS JOGOS"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4485562690383826,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1538154742803301,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ita"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						235863943061645,
						false
						,[
						[
							7,
							[
								2,
								"GIOCO COMPLETATO"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						5018894402961671,
						false
						,[
						[
							7,
							[
								2,
								"ALTRI GIOCHI"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					9287713909520359,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7113536688527446,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"swe"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						5705858948818316,
						false
						,[
						[
							7,
							[
								2,
								"SPELET ÄR AVKLARAT"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						9664266685576238,
						false
						,[
						[
							7,
							[
								2,
								"FLER SPEL"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					8180461792603597,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9948278251222403,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"pol"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						5808615966640021,
						false
						,[
						[
							7,
							[
								2,
								"GRA UKOŃCZONA"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						3381302949072331,
						false
						,[
						[
							7,
							[
								2,
								"WIĘCEJ GIER"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					5144365318885801,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8941581126051246,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"rus"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6850281786329796,
						false
						,[
						[
							7,
							[
								2,
								"ИГРА ЗАВЕРШЕНА"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						3745648230099699,
						false
						,[
						[
							7,
							[
								2,
								"ДРУГИЕ ИГРЫ"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					879346104646023,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7254743657735039,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"ind"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						1247737088540124,
						false
						,[
						[
							7,
							[
								2,
								"GAME SELESAI"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						381136909508978,
						false
						,[
						[
							7,
							[
								2,
								"GAME LAIN"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					4403774162846899,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5149731443859525,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"chn"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						7252886989380935,
						false
						,[
						[
							7,
							[
								2,
								"游戏完成"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						3000051586780107,
						false
						,[
						[
							7,
							[
								2,
								"更多游戏"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3455868140554989,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1963009063011916,
						false
						,[
						[
							11,
							"CurrentLanguage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								2,
								"tur"
							]
						]
						]
					]
					],
					[
					[
						58,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						6289440964826151,
						false
						,[
						[
							7,
							[
								2,
								"OYUN TAMAMLANDI"
							]
						]
						]
					]
,					[
						42,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						238418397792203,
						false
						,[
						[
							7,
							[
								2,
								"DİĞER OYUNLAR"
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			1205440917550097,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				7767681344269775,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					8
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				1797546676838647,
				false
				,[
				[
					4,
					8
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				5946928626758725,
				false
				,[
				[
					4,
					40
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						20,
						8,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
,				[
					0,
					[
						20,
						8,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
,			[
				40,
				cr.plugins_.Particles.prototype.acts.SetTimeout,
				null,
				7786282782667037,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				6006740234922697,
				[
				[
					8,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3463333261093754,
					false
					,[
					[
						8,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					8,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					945034623435923,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						2
					]
,					[
						7,
						[
							0,
							29
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					8397156345504501,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					4264322491776135,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						7,
						[
							21,
							8,
							false,
							null
							,0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					2222028506218837,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"Level"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7666481819943451,
				[
				[
					-1,
					cr.system_object.prototype.cnds.For,
					null,
					0,
					true,
					false,
					false,
					2313492825152401,
					false
					,[
					[
						1,
						[
							2,
							"i"
						]
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						0,
						[
							0,
							29
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2965332838563517,
					false
					,[
					[
						11,
						"Is29LevelOpen"
					]
,					[
						7,
						[
							18,
							[
								16,
								[
									19,
									cr.system_object.prototype.exps["int"]
									,[
[
										20,
										21,
										cr.plugins_.WebStorage.prototype.exps.LocalValue,
										true,
										null
										,[
[
											10,
											[
												2,
												"StarsAtLevel"
											]
											,[
												2,
												"i"
											]
										]
										]
									]
									]
								]
								,[
									0,
									2
								]
							]
							,[
								0,
								1
							]
							,[
								0,
								0
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					428120372209135,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5530540702125823,
						false
						,[
						[
							11,
							"Is29LevelOpen"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						7336343143085102,
						false
						,[
						[
							0,
							[
								1,
								0.5
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						5944698261375511,
						false
						,[
						[
							11,
							"LevelNumber"
						]
,						[
							7,
							[
								21,
								8,
								false,
								null
								,0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.GoToLayoutByName,
						null,
						9242739172171409,
						false
						,[
						[
							1,
							[
								10,
								[
									2,
									"Level"
								]
								,[
									23,
									"LevelNumber"
								]
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				450030320141263,
				[
				[
					8,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2664733926589281,
					false
					,[
					[
						8,
						1
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3125275646916646,
					false
					,[
					[
						11,
						"TotalStars"
					]
,					[
						8,
						5
					]
,					[
						7,
						[
							0,
							87
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					829369537682259,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					3085287708387954,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						7,
						[
							21,
							8,
							false,
							null
							,0
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					8509734836983816,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"Level"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9414964818299347,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9756140131224741,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					6436375623215569,
					false
					,[
					[
						2,
						["select level",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9828966434488209,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				3989116509311278,
				false
				,[
				[
					11,
					"NextEvent"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"WinEvent"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				1245789566286925,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				8541724840236244,
				false
				,[
				[
					4,
					56
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						470
					]
				]
,				[
					0,
					[
						0,
						210
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				6640494843559991,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				3056198171411121,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				297961722695445,
				false
				,[
				[
					4,
					56
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						470
					]
				]
,				[
					0,
					[
						0,
						265
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				2284259409965535,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				6251093277401689,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				8,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				2902801895512136,
				false
			]
,			[
				8,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				2365643725575796,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				23,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				899168045601241,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				24,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				1514922260626494,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				7953666435430009,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				4839498337403353,
				false
				,[
				[
					0,
					[
						0,
						430
					]
				]
,				[
					0,
					[
						0,
						530
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				555152639886952,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3040251573334739,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					3472035257819688,
					false
					,[
					[
						2,
						["level_complete",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4542009939753082,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9648008900814329,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6730340268730262,
					false
					,[
					[
						7,
						[
							2,
							"LEVEL COMPLETED"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1663641979581714,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SECONDS"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9135089655418776,
					false
					,[
					[
						7,
						[
							2,
							"SEC"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5536342008229449,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				632583243586463,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					906069916756696,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9987987478806339,
					false
					,[
					[
						7,
						[
							2,
							"LEVEL COMPLETED"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1441149465520376,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SECONDS"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8993873737297754,
					false
					,[
					[
						7,
						[
							2,
							"SEC"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2691180607463861,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3105559130661831,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8651691772077429,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1426761333897013,
					false
					,[
					[
						7,
						[
							2,
							"LEVEL VOLTOOID"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9403246773760867,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SECONDEN"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7445492646066109,
					false
					,[
					[
						7,
						[
							2,
							"SEC"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6473896187656749,
					false
					,[
					[
						7,
						[
							2,
							"MEER SPELLEN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8139377597564131,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3665560010567378,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1368149870911949,
					false
					,[
					[
						7,
						[
							2,
							"NIVEAU TERMINÉ"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2457708387636033,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SECONDES"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					101216192858021,
					false
					,[
					[
						7,
						[
							2,
							"SEC"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7255614424029755,
					false
					,[
					[
						7,
						[
							2,
							"PLUS DE JEUX"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				241509523909886,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5342434426456307,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5410178089518096,
					false
					,[
					[
						7,
						[
							2,
							"LEVEL ABGESCHLOSSEN"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1059167966840372,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SEKUNDEN"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3327538522628268,
					false
					,[
					[
						7,
						[
							2,
							"SEK"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4013270893705314,
					false
					,[
					[
						7,
						[
							2,
							"MEHR SPIELE"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8940842617723298,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9500915982415076,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5613830615854892,
					false
					,[
					[
						7,
						[
							2,
							"NIVEL COMPLETADO"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9366705244448641,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SEGUNDOS"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9965898764740621,
					false
					,[
					[
						7,
						[
							2,
							"SEG"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3592110318106494,
					false
					,[
					[
						7,
						[
							2,
							"MÁS JUEGOS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4750965683767672,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9773209560995298,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2249211778726019,
					false
					,[
					[
						7,
						[
							2,
							"NÍVEL CONCLUÍDO"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					439533046634005,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SEGUNDOS"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1321570462080814,
					false
					,[
					[
						7,
						[
							2,
							"S"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1949812565468191,
					false
					,[
					[
						7,
						[
							2,
							"MAIS JOGOS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3869840799571619,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9874416151912667,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1928879076331786,
					false
					,[
					[
						7,
						[
							2,
							"LIVELLO COMPLETATO"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9755047164798567,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SECONDI"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					168029518438503,
					false
					,[
					[
						7,
						[
							2,
							"SEC"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6367167414724482,
					false
					,[
					[
						7,
						[
							2,
							"ALTRI GIOCHI"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2453295884414001,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9888132923449398,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8714361761730545,
					false
					,[
					[
						7,
						[
							2,
							"NIVÅN ÄR AVKLARAD"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4952953215046988,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SEKUNDER"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8713553202272731,
					false
					,[
					[
						7,
						[
							2,
							"SEK"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					357572100897961,
					false
					,[
					[
						7,
						[
							2,
							"FLER SPEL"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2909565781423247,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1904395454904401,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8924658925126393,
					false
					,[
					[
						7,
						[
							2,
							"POZIOM UKOŃCZONY"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2440220793849665,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" S"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1877470077281141,
					false
					,[
					[
						7,
						[
							2,
							"S"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					454208590224074,
					false
					,[
					[
						7,
						[
							2,
							"WIĘCEJ GIER"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2242972297394551,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					987651303807917,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3445998301286961,
					false
					,[
					[
						7,
						[
							2,
							"УРОВЕНЬ ПРОЙДЕН"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6685466184014397,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" сек"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5520684354600051,
					false
					,[
					[
						7,
						[
							2,
							"СЕК"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1932359723921323,
					false
					,[
					[
						7,
						[
							2,
							"ДРУГИЕ ИГРЫ"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4815911405765634,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9992524003226209,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7075710006493356,
					false
					,[
					[
						7,
						[
							2,
							"LEVEL SELESAI"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7462324647760817,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" detik"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2129000131833931,
					false
					,[
					[
						7,
						[
							2,
							"DTK"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2714086855814459,
					false
					,[
					[
						7,
						[
							2,
							"GAME LAIN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1752906997804867,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3022306396589339,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8436018259426033,
					false
					,[
					[
						7,
						[
							2,
							"通关"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7837356938477521,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" 秒"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7656928424536475,
					false
					,[
					[
						7,
						[
							2,
							"秒"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9636705652637828,
					false
					,[
					[
						7,
						[
							2,
							"更多游戏"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5267760556208815,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4455795963714891,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2897702812614107,
					false
					,[
					[
						7,
						[
							2,
							"SEVİYE TAMAMLANDI"
						]
					]
					]
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5260034696687121,
					false
					,[
					[
						7,
						[
							10,
							[
								23,
								"LevelTime"
							]
							,[
								2,
								" SANIYE"
							]
						]
					]
					]
				]
,				[
					41,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					757363311738322,
					false
					,[
					[
						7,
						[
							2,
							"SN"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6004735144069604,
					false
					,[
					[
						7,
						[
							2,
							"DİĞER OYUNLAR"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7588920697682423,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					2747524041910969,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"StarsAtLevel"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
,					[
						8,
						5
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1166663577508797,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							350
						]
					]
,					[
						0,
						[
							0,
							221
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					922519386441752,
					false
					,[
					[
						0,
						[
							0,
							8
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					6256520974502968,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					12146593287106,
					false
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetScale,
					null,
					8241663434440449,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					4530639008086716,
					false
					,[
					[
						3,
						9
					]
,					[
						3,
						14
					]
,					[
						1,
						[
							2,
							"0.2"
						]
					]
,					[
						0,
						[
							1,
							0.25
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					5214026444467232,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1153697408563671,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							350
						]
					]
,					[
						0,
						[
							0,
							221
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetInitSpeed,
					null,
					8985342836793514,
					false
					,[
					[
						0,
						[
							0,
							250
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					1303665707705597,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7664389697295536,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						5982448231247307,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						5427783971440464,
						false
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2655582990207814,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3641881961611634,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						1514414598973877,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						6997202473630194,
						false
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						726163482678315,
						false
						,[
						[
							7,
							[
								2,
								"60"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					3233665359503404,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						7717098560893556,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8569809503677416,
						false
						,[
						[
							2,
							["star1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9056059586450793,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					9894541220727253,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"StarsAtLevel"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
,					[
						8,
						5
					]
,					[
						0,
						[
							0,
							3
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9096745611961984,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7782806671033059,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							474
						]
					]
,					[
						0,
						[
							0,
							205
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					606914013126436,
					false
					,[
					[
						0,
						[
							0,
							9
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					692910296206788,
					false
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					7223975017581416,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetScale,
					null,
					7856654205599516,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					8238637446967125,
					false
					,[
					[
						3,
						9
					]
,					[
						3,
						14
					]
,					[
						1,
						[
							2,
							"0.2"
						]
					]
,					[
						0,
						[
							1,
							0.25
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					6110591150489231,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2328186461283479,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							474
						]
					]
,					[
						0,
						[
							0,
							205
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetInitSpeed,
					null,
					917984107290767,
					false
					,[
					[
						0,
						[
							0,
							250
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					4523076218448073,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						7005477892122769,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								2
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						595851633898622,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						209640622256709,
						false
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					2611319402788251,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						3996254062358578,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								22
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						6730352352568356,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						342306200011093,
						false
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						7252313619728434,
						false
						,[
						[
							7,
							[
								2,
								"40"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1740733887698085,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8008567482841145,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9795305250831434,
						false
						,[
						[
							2,
							["star1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6690115125546764,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.CompareKeyNumber,
					null,
					0,
					false,
					false,
					false,
					1920221286815606,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"StarsAtLevel"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
,					[
						8,
						5
					]
,					[
						0,
						[
							0,
							4
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					9754020271930509,
					false
					,[
					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2716338422936366,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							589
						]
					]
,					[
						0,
						[
							0,
							221
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					2893774762781325,
					false
					,[
					[
						0,
						[
							0,
							10
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					1814722071947511,
					false
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					1835605389608436,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetScale,
					null,
					4360161566129163,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					4160711934318583,
					false
					,[
					[
						3,
						9
					]
,					[
						3,
						14
					]
,					[
						1,
						[
							2,
							"0.2"
						]
					]
,					[
						0,
						[
							1,
							0.25
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					4076995032854499,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetInitSpeed,
					null,
					9857208476604517,
					false
					,[
					[
						0,
						[
							0,
							250
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8167822916688961,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							589
						]
					]
,					[
						0,
						[
							0,
							221
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					9437261188279166,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4843698179222342,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								3
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						5524981252809646,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						3452253435304631,
						false
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					6502444218460713,
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.cnds.CompareInstanceVar,
						null,
						0,
						false,
						false,
						false,
						4011923935637274,
						false
						,[
						[
							10,
							0
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								33
							]
						]
						]
					]
					],
					[
					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
						null,
						4121661122992166,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
						null,
						4999183009765976,
						false
					]
,					[
						41,
						cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
						null,
						1512163875118689,
						false
						,[
						[
							7,
							[
								2,
								"20"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					1844013487187981,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						9141439000132985,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5520056068933842,
						false
						,[
						[
							2,
							["star1",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6770244127696487,
				[
				],
				[
				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
					null,
					2485480357582845,
					false
					,[
					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					34,
					cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
					null,
					9738993936003845,
					false
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetPos,
					null,
					2825988451189832,
					false
					,[
					[
						0,
						[
							0,
							470
						]
					]
,					[
						0,
						[
							0,
							335
						]
					]
					]
				]
,				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
					null,
					2104557091875623,
					false
					,[
					[
						0,
						[
							0,
							100
						]
					]
					]
				]
,				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
					null,
					1444708958846271,
					false
				]
,				[
					26,
					cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
					null,
					87537160685784,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					7353811892257813,
					false
					,[
					[
						0,
						[
							1,
							1.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					7779387843825604,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							380
						]
					]
,					[
						0,
						[
							0,
							800
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					8827457099539176,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					5812090928418637,
					false
					,[
					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					8941751559564547,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						17
					]
,					[
						1,
						[
							2,
							"380,450"
						]
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
					"LiteTween",
					8025144931650405,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					2934340933065074,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					7457579684831464,
					false
					,[
					[
						0,
						[
							1,
							0.3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					2921079932440651,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							480
						]
					]
,					[
						0,
						[
							0,
							800
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					9486244054440454,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1529855037548935,
					false
					,[
					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					1484382560637737,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						17
					]
,					[
						1,
						[
							2,
							"480,450"
						]
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
					"LiteTween",
					2847579936162171,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					8226954765587791,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					741228570409634,
					false
					,[
					[
						0,
						[
							1,
							0.3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					4953247540979406,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							580
						]
					]
,					[
						0,
						[
							0,
							800
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					6994361678461452,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					7196998681519168,
					false
					,[
					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					4521334225049046,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						17
					]
,					[
						1,
						[
							2,
							"580,450"
						]
					]
,					[
						0,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
					"LiteTween",
					8458263488752313,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					9683771160734966,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.MoveToTop,
					null,
					1101792903504789,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					2115300034442445,
					false
					,[
					[
						0,
						[
							1,
							0.3
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					8425870391664257,
					false
					,[
					[
						4,
						16
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							0,
							650
						]
					]
,					[
						0,
						[
							0,
							858
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.Anchor.prototype.acts.SetEnabled,
					"Anchor",
					9920468714097362,
					false
					,[
					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
					null,
					1274699249128031,
					false
					,[
					[
						0,
						[
							0,
							13
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.SetSize,
					null,
					4264595046700764,
					false
					,[
					[
						0,
						[
							0,
							214
						]
					]
,					[
						0,
						[
							0,
							54
						]
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					4072486054958708,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						17
					]
,					[
						1,
						[
							2,
							"635,530"
						]
					]
,					[
						0,
						[
							1,
							0.3
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					3134577204551778,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						0
					]
					]
				]
,				[
					19,
					cr.plugins_.Rex_Function.prototype.acts.CallFunction,
					null,
					9917278278900429,
					false
					,[
					[
						1,
						[
							2,
							"ChangeMoreGames"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
					null,
					5118085851363443,
					false
				]
,				[
					42,
					cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
					"LiteTween",
					5648357312185177,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						17
					]
,					[
						1,
						[
							2,
							"635,500"
						]
					]
,					[
						0,
						[
							1,
							0.3
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					42,
					cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
					"LiteTween",
					551332688703573,
					false
					,[
					[
						3,
						0
					]
,					[
						3,
						1
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5748904150702407,
			[
			[
				-1,
				cr.system_object.prototype.cnds.CompareVar,
				null,
				0,
				false,
				false,
				false,
				8706655233723018,
				false
				,[
				[
					11,
					"NextEvent"
				]
,				[
					8,
					0
				]
,				[
					7,
					[
						2,
						"LoseEvent"
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.cnds.TriggerOnce,
				null,
				0,
				false,
				false,
				false,
				6950384908489359,
				false
			]
			],
			[
			[
				8,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				239239208456117,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				23,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				9354441725259538,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				24,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Stop,
				"LiteTween",
				9358374922500893,
				false
				,[
				[
					3,
					1
				]
				]
			]
,			[
				8,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				600519911074076,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				4243938215921599,
				false
				,[
				[
					4,
					56
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						470
					]
				]
,				[
					0,
					[
						0,
						210
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				2438082265117523,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				396910514776526,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				8628329322764417,
				false
				,[
				[
					4,
					56
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						250
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				7316903875572848,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				7578831467561008,
				false
				,[
				[
					0,
					[
						0,
						2
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetSize,
				null,
				9339210242960134,
				false
				,[
				[
					0,
					[
						0,
						370
					]
				]
,				[
					0,
					[
						0,
						220
					]
				]
				]
			]
,			[
				56,
				cr.plugins_.Sprite.prototype.acts.SetOpacity,
				null,
				2671772435894815,
				false
				,[
				[
					0,
					[
						0,
						80
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				6382367653795462,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						420
					]
				]
,				[
					0,
					[
						0,
						740
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				9791464322441533,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				2746153741719895,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
				"LiteTween",
				7251906862961653,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					17
				]
,				[
					1,
					[
						2,
						"420,450"
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				3451583651130646,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				2707379864801794,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				766735643125311,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						540
					]
				]
,				[
					0,
					[
						0,
						740
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				3301472842464752,
				false
				,[
				[
					0,
					[
						0,
						5
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				4497299819944381,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
				"LiteTween",
				5732661826545705,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					17
				]
,				[
					1,
					[
						2,
						"540,450"
					]
				]
,				[
					0,
					[
						0,
						1
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetDuration,
				"LiteTween",
				7855094330506942,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				9207006227382138,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
,			[
				25,
				cr.plugins_.SpriteFontPlus.prototype.acts.SetPos,
				null,
				8652311020855678,
				false
				,[
				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						125
					]
				]
				]
			]
,			[
				25,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				6987015188765106,
				false
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.MoveToTop,
				null,
				4814880646275371,
				false
			]
,			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				9466152927414836,
				false
				,[
				[
					4,
					16
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						0,
						650
					]
				]
,				[
					0,
					[
						0,
						878
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.Anchor.prototype.acts.SetEnabled,
				"Anchor",
				8259123444391389,
				false
				,[
				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				304953264863344,
				false
				,[
				[
					0,
					[
						0,
						13
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetSize,
				null,
				616511757737207,
				false
				,[
				[
					0,
					[
						0,
						214
					]
				]
,				[
					0,
					[
						0,
						54
					]
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
				"LiteTween",
				6485231399651464,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					17
				]
,				[
					1,
					[
						2,
						"635,530"
					]
				]
,				[
					0,
					[
						1,
						0.3
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				16,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				8014035894985586,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
				]
			]
,			[
				19,
				cr.plugins_.Rex_Function.prototype.acts.CallFunction,
				null,
				6999909500805752,
				false
				,[
				[
					1,
					[
						2,
						"ChangeMoreGames"
					]
				]
				]
			]
,			[
				42,
				cr.plugins_.SpriteFontPlus.prototype.acts.MoveToTop,
				null,
				2399229160216122,
				false
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.SetParameter,
				"LiteTween",
				706741752465302,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					17
				]
,				[
					1,
					[
						2,
						"635,400"
					]
				]
,				[
					0,
					[
						1,
						0.3
					]
				]
,				[
					3,
					0
				]
				]
			]
,			[
				42,
				cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
				"LiteTween",
				5292235784803182,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					1
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				8806248358433834,
				false
				,[
				[
					0,
					[
						0,
						430
					]
				]
,				[
					0,
					[
						0,
						530
					]
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				4252356945002062,
				false
				,[
				[
					0,
					[
						0,
						1
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				9934883722154859,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2893884750872296,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9933033535660897,
					false
					,[
					[
						7,
						[
							2,
							"TRY AGAIN"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1067963986614278,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2553767796768452,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6467392547268529,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7141361788542941,
					false
					,[
					[
						7,
						[
							2,
							"TRY AGAIN"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1519791440848355,
					false
					,[
					[
						7,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6274423694670715,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1835261567997188,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1815381037412003,
					false
					,[
					[
						7,
						[
							2,
							"OPNIEUW"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5726469942206937,
					false
					,[
					[
						7,
						[
							2,
							"MEER SPELLEN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2847768336894454,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2174642292581104,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7443117290410285,
					false
					,[
					[
						7,
						[
							2,
							"RÉESSAYER"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2824691877851351,
					false
					,[
					[
						7,
						[
							2,
							"PLUS DE JEUX"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7750134677472587,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1261640670279078,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8632848891341636,
					false
					,[
					[
						7,
						[
							2,
							"NOCH MAL"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9851190036527282,
					false
					,[
					[
						7,
						[
							2,
							"MEHR SPIELE"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3836455592302008,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					420151945254168,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1462464920063092,
					false
					,[
					[
						7,
						[
							2,
							"OTRA VEZ"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4881033237685012,
					false
					,[
					[
						7,
						[
							2,
							"MÁS JUEGOS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8735617790024872,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					286769087105117,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4095206329933072,
					false
					,[
					[
						7,
						[
							2,
							"REPETIR"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8299956242087296,
					false
					,[
					[
						7,
						[
							2,
							"MAIS JOGOS"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8974789281297283,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8809961317222814,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					706320588375425,
					false
					,[
					[
						7,
						[
							2,
							"RIPROVA"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8547510212491217,
					false
					,[
					[
						7,
						[
							2,
							"ALTRI GIOCHI"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9987028945202892,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8447259389207859,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4710072568174846,
					false
					,[
					[
						7,
						[
							2,
							"FÖRSÖK IGEN"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5703649002518831,
					false
					,[
					[
						7,
						[
							2,
							"FLER SPEL"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3715755877366893,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7100655737107822,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7205652123697869,
					false
					,[
					[
						7,
						[
							2,
							"SPRÓBUJ PONOWNIE"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3727705990360325,
					false
					,[
					[
						7,
						[
							2,
							"WIĘCEJ GIER"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2965966425311983,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1943798641222262,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9034610734879403,
					false
					,[
					[
						7,
						[
							2,
							"ЕЩЕ РАЗ"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2773602669738573,
					false
					,[
					[
						7,
						[
							2,
							"ДРУГИЕ ИГРЫ"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2782145311233314,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1717266839838831,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2183366931106182,
					false
					,[
					[
						7,
						[
							2,
							"COBA LAGI"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4455653723025827,
					false
					,[
					[
						7,
						[
							2,
							"GAME LAIN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				2158267245515672,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8100166082804078,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5889383042201239,
					false
					,[
					[
						7,
						[
							2,
							"再试一次"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7571976287825341,
					false
					,[
					[
						7,
						[
							2,
							"更多游戏"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7558117866696583,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4058523761450691,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					245396752781887,
					false
					,[
					[
						7,
						[
							2,
							"TEKRAR DENE"
						]
					]
					]
				]
,				[
					42,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					7268360774287418,
					false
					,[
					[
						7,
						[
							2,
							"DİĞER OYUNLAR"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				1956333545214931,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7261833176207085,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					2074710170598131,
					false
					,[
					[
						2,
						["level_failed",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			3801103720539996,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				9197968260799274,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					16
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				8662354779381445,
				false
				,[
				[
					4,
					16
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				true,
				null,
				2004179121947581,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2614470973313986,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					2624914296718611,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							17
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					3784360365015999,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1726617997596685,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						7,
						[
							2,
							"Intro"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					7518936580807743,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					9555447368379247,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					728575236920784,
					false
					,[
					[
						6,
						"IntroWinLoose"
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					2590426322976816,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						5881791769586348,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						7752245335729227,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				7731017790771743,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					1073378544735752,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							2
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					8842684933635756,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							19
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					5190866198782695,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8229250241281949,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						7,
						[
							18,
							[
								12,
								[
									23,
									"NextEvent"
								]
								,[
									2,
									"WinEvent"
								]
							]
							,[
								4,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									1
								]
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					6555123720686654,
					false
					,[
					[
						1,
						[
							18,
							[
								14,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									31
								]
							]
							,[
								10,
								[
									2,
									"Level"
								]
								,[
									23,
									"LevelNumber"
								]
							]
							,[
								2,
								"IntroWinLoose"
							]
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					3617492118978654,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2954751150026385,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						7,
						[
							2,
							"Intro"
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					5434354544720328,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						8971547720411664,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						5402152874614359,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				2898550149067449,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					7235080209607611,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							13
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					7005537507961989,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							30
						]
					]
					]
				]
				],
				[
				[
					59,
					cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
					null,
					6524089322933382,
					false
					,[
					[
						1,
						[
							2,
							"more_games"
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					827562935875225,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						932961344007975,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						8923088460046086,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				2414344797172527,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					6850256109366249,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							5
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9881391489567519,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							22
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.Wait,
					null,
					1840281463284195,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					1162557010302098,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"Level"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					7686862729871458,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						4358441776391233,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						9164496861151619,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				3796542592850118,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					9114879924836754,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							11
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					4807336710923321,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							28
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					9932026613068048,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						2532641689561189,
						false
						,[
						[
							11,
							"CurrentPage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						4675266589556621,
						false
						,[
						[
							11,
							"CurrentPage"
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						3306496619544429,
						false
						,[
						[
							0,
							[
								1,
								0.2
							]
						]
						]
					]
,					[
						19,
						cr.plugins_.Rex_Function.prototype.acts.CallFunction,
						null,
						1984892068396422,
						false
						,[
						[
							1,
							[
								2,
								"DestroyButtons"
							]
						]
						]
					]
,					[
						8,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						9946070870025258,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						8,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						1778042228812672,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						23,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						2444893023531158,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						23,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						6716601455095468,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						24,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						8340330347651567,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						24,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						9752081929982099,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						47,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						5424132897605936,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								1000
							]
						]
						]
					]
,					[
						47,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						2100351251652164,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						6931060227866537,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								0,
								0
							]
						]
,						[
							0,
							[
								0,
								150
							]
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						3585899791359644,
						false
						,[
						[
							0,
							[
								0,
								11
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetScale,
						null,
						4514997892526315,
						false
						,[
						[
							0,
							[
								1,
								0.85
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6146530939878853,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						2740553323025468,
						false
						,[
						[
							0,
							[
								0,
								35
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						1093225394160419,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						2875289787318516,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								0,
								0
							]
						]
,						[
							0,
							[
								0,
								810
							]
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						6369191619450264,
						false
						,[
						[
							0,
							[
								0,
								12
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetScale,
						null,
						50942995840374,
						false
						,[
						[
							0,
							[
								1,
								0.85
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						6241422830440351,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								12
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						4027053439180994,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						1455235495270376,
						false
						,[
						[
							3,
							0
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				7377886408701725,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					5029529722856796,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							12
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					5620547533424844,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							29
						]
					]
					]
				]
				],
				[
				]
				,[
				[
					0,
					null,
					false,
					null,
					5188576511101981,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						3042424559271903,
						false
						,[
						[
							11,
							"CurrentPage"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								0
							]
						]
						]
					]
					],
					[
					[
						-1,
						cr.system_object.prototype.acts.SetVar,
						null,
						8677737788538608,
						false
						,[
						[
							11,
							"CurrentPage"
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.Wait,
						null,
						6933468998751322,
						false
						,[
						[
							0,
							[
								1,
								0.2
							]
						]
						]
					]
,					[
						19,
						cr.plugins_.Rex_Function.prototype.acts.CallFunction,
						null,
						9502660985687389,
						false
						,[
						[
							1,
							[
								2,
								"DestroyButtons"
							]
						]
						]
					]
,					[
						8,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						4816990359034731,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						8,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						7477609965030023,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						23,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						2840118644533481,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						23,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						8649240565726092,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						24,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						5403019514740499,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						24,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						2652081076281877,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						47,
						cr.behaviors.lunarray_LiteTween.prototype.acts.SetTarget,
						"LiteTween",
						1053106702615565,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							1
						]
,						[
							0,
							[
								0,
								-1000
							]
						]
						]
					]
,					[
						47,
						cr.behaviors.lunarray_LiteTween.prototype.acts.Start,
						"LiteTween",
						1291437216384979,
						false
						,[
						[
							3,
							0
						]
,						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						4738348527639074,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								0,
								0
							]
						]
,						[
							0,
							[
								0,
								150
							]
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						1807189653691381,
						false
						,[
						[
							0,
							[
								0,
								11
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetScale,
						null,
						6760030248490878,
						false
						,[
						[
							0,
							[
								1,
								0.85
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						29188175958669,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								11
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						113270706962176,
						false
						,[
						[
							0,
							[
								0,
								100
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						5640949710002536,
						false
						,[
						[
							3,
							0
						]
						]
					]
,					[
						-1,
						cr.system_object.prototype.acts.CreateObject,
						null,
						128515944484414,
						false
						,[
						[
							4,
							16
						]
,						[
							5,
							[
								0,
								0
							]
						]
,						[
							0,
							[
								0,
								810
							]
						]
,						[
							0,
							[
								0,
								350
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
						null,
						3018941669332807,
						false
						,[
						[
							0,
							[
								0,
								12
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetScale,
						null,
						2327419560921706,
						false
						,[
						[
							0,
							[
								1,
								0.85
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetInstanceVar,
						null,
						172096580603376,
						false
						,[
						[
							10,
							0
						]
,						[
							7,
							[
								0,
								12
							]
						]
						]
					]
,					[
						16,
						cr.plugins_.Sprite.prototype.acts.SetOpacity,
						null,
						1101049237515437,
						false
						,[
						[
							0,
							[
								0,
								35
							]
						]
						]
					]
,					[
						16,
						cr.behaviors.Anchor.prototype.acts.SetEnabled,
						"Anchor",
						6798420182899128,
						false
						,[
						[
							3,
							0
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				true,
				null,
				1390591534741676,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					3419284830859015,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							1
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareFrame,
					null,
					0,
					false,
					false,
					false,
					187127272578928,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							18
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetLayerVisible,
					null,
					3523342554944308,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
,					[
						3,
						0
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					8052214703305388,
					false
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					7319992350472178,
					[
					],
					[
					[
						21,
						cr.plugins_.WebStorage.prototype.acts.StoreLocal,
						null,
						2248798161811572,
						false
						,[
						[
							1,
							[
								2,
								"IsGameCompleteShown"
							]
						]
,						[
							7,
							[
								2,
								"1"
							]
						]
						]
					]
					]
				]
,				[
					0,
					null,
					false,
					null,
					168295492782064,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						1242001444605575,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						4973893230097273,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4781623689437349,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					9391990262216951,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					8380522603114402,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					8293916117605821,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
,					[
						7,
						[
							2,
							"1"
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayout,
					null,
					8540526281299763,
					false
					,[
					[
						6,
						"IntroWinLoose"
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				297951490374554,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar,
					null,
					0,
					false,
					false,
					false,
					1356967696524861,
					false
					,[
					[
						10,
						0
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							2
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.cnds.LayerVisible,
					null,
					0,
					false,
					false,
					false,
					3914630406794569,
					false
					,[
					[
						5,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					6274990198564651,
					false
					,[
					[
						1,
						[
							2,
							"IsGameCompleteShown"
						]
					]
,					[
						7,
						[
							2,
							"1"
						]
					]
					]
				]
,				[
					59,
					cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
					null,
					7147716688173913,
					false
					,[
					[
						1,
						[
							2,
							"more_games"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5410207216731172,
				[
				[
					16,
					cr.plugins_.Sprite.prototype.cnds.CompareOpacity,
					null,
					0,
					false,
					false,
					false,
					3123157218310667,
					false
					,[
					[
						8,
						0
					]
,					[
						0,
						[
							0,
							100
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.CreateObject,
					null,
					1467465554186222,
					false
					,[
					[
						4,
						40
					]
,					[
						5,
						[
							0,
							0
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.X,
							false,
							null
						]
					]
,					[
						0,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.Y,
							false,
							null
						]
					]
					]
				]
,				[
					40,
					cr.plugins_.Particles.prototype.acts.SetTimeout,
					null,
					8152704940732244,
					false
					,[
					[
						0,
						[
							1,
							0.5
						]
					]
					]
				]
				]
				,[
				[
					0,
					null,
					false,
					null,
					310628963256957,
					[
					[
						-1,
						cr.system_object.prototype.cnds.CompareVar,
						null,
						0,
						false,
						false,
						false,
						472118482619941,
						false
						,[
						[
							11,
							"IsEffectEnabled"
						]
,						[
							8,
							0
						]
,						[
							7,
							[
								0,
								1
							]
						]
						]
					]
					],
					[
					[
						44,
						cr.plugins_.Audio.prototype.acts.Play,
						null,
						6804514511084914,
						false
						,[
						[
							2,
							["click on the button",false]
						]
,						[
							3,
							0
						]
,						[
							0,
							[
								0,
								0
							]
						]
,						[
							1,
							[
								2,
								""
							]
						]
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5078041071499721,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				false,
				false,
				8050764641312547,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				2801705299108921,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						0,
						17
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				8103117137806266,
				false
				,[
				[
					0,
					[
						4,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				1742997730594739,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9035346344454395,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					539559566498632,
					false
					,[
					[
						2,
						["the mouse point to the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2647301103964463,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				true,
				false,
				8388363128852313,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				766299947057984,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						16
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1331163150171082,
				false
				,[
				[
					0,
					[
						5,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			4325843526372872,
			[
			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				4132635226055243,
				false
				,[
				[
					9,
					32
				]
				]
			]
,			[
				7,
				cr.plugins_.Keyboard.prototype.cnds.OnKey,
				null,
				1,
				false,
				false,
				false,
				6180799948679114,
				false
				,[
				[
					9,
					13
				]
				]
			]
			],
			[
			]
			,[
			[
				0,
				null,
				false,
				null,
				7410727870176761,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5763897127595537,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"LoseEvent"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					4721718054226506,
					false
					,[
					[
						1,
						[
							10,
							[
								2,
								"Level"
							]
							,[
								23,
								"LevelNumber"
							]
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7313213300102728,
					false
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6925285474319274,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					6227656616168801,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"WinEvent"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					1478866248141677,
					false
					,[
					[
						11,
						"LevelNumber"
					]
,					[
						7,
						[
							4,
							[
								23,
								"LevelNumber"
							]
							,[
								0,
								1
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.GoToLayoutByName,
					null,
					638146081767202,
					false
					,[
					[
						1,
						[
							18,
							[
								14,
								[
									23,
									"LevelNumber"
								]
								,[
									0,
									31
								]
							]
							,[
								10,
								[
									2,
									"Level"
								]
								,[
									23,
									"LevelNumber"
								]
							]
							,[
								2,
								"IntroWinLoose"
							]
						]
					]
					]
				]
,				[
					16,
					cr.plugins_.Sprite.prototype.acts.Destroy,
					null,
					7323126084860889,
					false
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2624404512700973,
					false
					,[
					[
						11,
						"NextEvent"
					]
,					[
						7,
						[
							2,
							"Intro"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2805257126246527,
			[
			[
				19,
				cr.plugins_.Rex_Function.prototype.cnds.OnFunctionCalled,
				null,
				1,
				false,
				false,
				false,
				3022845566433834,
				false
				,[
				[
					1,
					[
						2,
						"DestroyButtons"
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				7062301460826748,
				false
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			2153743590015352,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				5164649414595685,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					20
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.IsTouchingObject,
				null,
				0,
				false,
				false,
				false,
				3792024498229644,
				false
				,[
				[
					4,
					20
				]
				]
			]
			],
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
				null,
				2220656526406942,
				false
				,[
				[
					1,
					[
						2,
						"logo"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			2913011345162206,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				false,
				false,
				5092094886298645,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				309381491184249,
				false
				,[
				[
					5,
					[
						0,
						2
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			563331554988802,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				true,
				false,
				5280764424887439,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				7927681264976832,
				false
				,[
				[
					5,
					[
						0,
						2
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			589323951196998,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageHidden,
				null,
				1,
				false,
				false,
				false,
				2922995253141327,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				8062258023861024,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			9426330028319071,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageVisible,
				null,
				1,
				false,
				false,
				false,
				3221684612543066,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				1048406618633219,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
		]
	]
,	[
		"LoaderLayout",
		[
		[
			0,
			null,
			false,
			null,
			5322127601984043,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLayoutStart,
				null,
				1,
				false,
				false,
				false,
				9644685529178738,
				false
			]
,			[
				59,
				cr.plugins_.pix_spilgames.prototype.cnds.apiLoaded,
				null,
				0,
				false,
				false,
				false,
				3194444080786128,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetVar,
				null,
				1260774693281548,
				false
				,[
				[
					11,
					"CurrentLanguage"
				]
,				[
					7,
					[
						2,
						"eng"
					]
				]
				]
			]
,			[
				37,
				cr.plugins_.Sprite.prototype.acts.SetWidth,
				null,
				6628725429059641,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				38,
				cr.plugins_.Browser.prototype.acts.RequestFullScreen,
				null,
				659555341875872,
				false
				,[
				[
					3,
					2
				]
				]
			]
,			[
				20,
				cr.plugins_.Sprite.prototype.acts.LoadURL,
				null,
				9707568590783284,
				false
				,[
				[
					1,
					[
						20,
						59,
						cr.plugins_.pix_spilgames.prototype.exps.logoImage,
						true,
						null
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				6632581300783986,
				[
				[
					21,
					cr.plugins_.WebStorage.prototype.cnds.LocalStorageExists,
					null,
					0,
					false,
					false,
					false,
					1185995862667274,
					false
					,[
					[
						1,
						[
							2,
							"IsSoundEnabled"
						]
					]
					]
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					2403005392458764,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						7,
						[
							20,
							21,
							cr.plugins_.WebStorage.prototype.exps.LocalValue,
							true,
							null
							,[
[
								2,
								"IsSoundEnabled"
							]
							]
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					6378030703265738,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						7,
						[
							20,
							21,
							cr.plugins_.WebStorage.prototype.exps.LocalValue,
							true,
							null
							,[
[
								2,
								"IsEffectsEnabled"
							]
							]
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5034799831087028,
				[
				[
					-1,
					cr.system_object.prototype.cnds.Else,
					null,
					0,
					false,
					false,
					false,
					1002880224451984,
					false
				]
				],
				[
				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					7075602139444873,
					false
					,[
					[
						11,
						"IsSoundEnabled"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					-1,
					cr.system_object.prototype.acts.SetVar,
					null,
					8690378152260041,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					9887116348653302,
					false
					,[
					[
						1,
						[
							2,
							"IsSoundEnabled"
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
,				[
					21,
					cr.plugins_.WebStorage.prototype.acts.StoreLocal,
					null,
					383414992270112,
					false
					,[
					[
						1,
						[
							2,
							"IsEffectsEnabled"
						]
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				4974501227867111,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					64921543156177,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"eng"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2135219894073956,
					false
					,[
					[
						7,
						[
							2,
							"LOADING"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				6537741989834014,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					8602893938085745,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"uk"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					1683280449669787,
					false
					,[
					[
						7,
						[
							2,
							"LOADING"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9617094722022501,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9593554459968836,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"du"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					5399820496386368,
					false
					,[
					[
						7,
						[
							2,
							"LADEN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5753896948725466,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3188245556478309,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"fr"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9959018806025987,
					false
					,[
					[
						7,
						[
							2,
							"CHARGEMENT"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7993203470026127,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9365981488382385,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ger"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					3278732529835351,
					false
					,[
					[
						7,
						[
							2,
							"LADEN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7692542436846073,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					1489522465866156,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"spa"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2969355602887598,
					false
					,[
					[
						7,
						[
							2,
							"CARGANDO"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7903248079839292,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2332825471188091,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"br"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9530048974668214,
					false
					,[
					[
						7,
						[
							2,
							"CARREGANDO"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				7589976010674287,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4073662100441954,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ita"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					2669144237170917,
					false
					,[
					[
						7,
						[
							2,
							"CARICAMENTO"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9255708601884979,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3387064413602703,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"swe"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					9355194711111705,
					false
					,[
					[
						7,
						[
							2,
							"LÄSER IN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9944995144670837,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					5781742755150041,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"pol"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8221289009060568,
					false
					,[
					[
						7,
						[
							2,
							"WCZYTYWANIE"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				9854293261401862,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					7136931081418957,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"rus"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					8205093124017059,
					false
					,[
					[
						7,
						[
							2,
							"ЗАГРУЗКА"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				8623345723902717,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					2641695799200505,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"ind"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					4047197631906539,
					false
					,[
					[
						7,
						[
							2,
							"MEMUATKAN"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3022594403927831,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					483153942006356,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"chn"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					690603342748624,
					false
					,[
					[
						7,
						[
							2,
							"正在载入"
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				5948726860468088,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					4025256343453343,
					false
					,[
					[
						11,
						"CurrentLanguage"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							2,
							"tur"
						]
					]
					]
				]
				],
				[
				[
					25,
					cr.plugins_.SpriteFontPlus.prototype.acts.SetText,
					null,
					6903020678858049,
					false
					,[
					[
						7,
						[
							2,
							"YÜKLENİYOR"
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			6098471728286154,
			[
			[
				-1,
				cr.system_object.prototype.cnds.EveryTick,
				null,
				0,
				false,
				false,
				false,
				4183451995515571,
				false
			]
			],
			[
			[
				37,
				cr.plugins_.Sprite.prototype.acts.SetWidth,
				null,
				2846170332871142,
				false
				,[
				[
					0,
					[
						6,
						[
							19,
							cr.system_object.prototype.exps.loadingprogress
						]
						,[
							0,
							300
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1887348136804055,
			[
			[
				-1,
				cr.system_object.prototype.cnds.OnLoadFinished,
				null,
				1,
				false,
				false,
				false,
				9244755907179761,
				false
			]
			],
			[
			[
				37,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				957155200294136,
				false
			]
,			[
				43,
				cr.plugins_.Sprite.prototype.acts.Destroy,
				null,
				8091330421154306,
				false
			]
,			[
				26,
				cr.plugins_.SpriteFontPlus.prototype.acts.SetOpacity,
				null,
				7674997883943511,
				false
				,[
				[
					0,
					[
						0,
						0
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetPos,
				null,
				6637001025567571,
				false
				,[
				[
					0,
					[
						0,
						480
					]
				]
,				[
					0,
					[
						0,
						350
					]
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetScale,
				null,
				3147788999776774,
				false
				,[
				[
					0,
					[
						1,
						0.7
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			9392033419527013,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				1125976461776932,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					16
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				1273076557752007,
				false
				,[
				[
					4,
					16
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.CreateObject,
				null,
				4199032715068009,
				false
				,[
				[
					4,
					40
				]
,				[
					5,
					[
						0,
						0
					]
				]
,				[
					0,
					[
						20,
						16,
						cr.plugins_.Sprite.prototype.exps.X,
						false,
						null
					]
				]
,				[
					0,
					[
						20,
						16,
						cr.plugins_.Sprite.prototype.exps.Y,
						false,
						null
					]
				]
				]
			]
,			[
				40,
				cr.plugins_.Particles.prototype.acts.SetTimeout,
				null,
				7124863966392808,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.Wait,
				null,
				199266744365045,
				false
				,[
				[
					0,
					[
						1,
						0.5
					]
				]
				]
			]
,			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				6824140737290369,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
,				[
					3,
					1
				]
				]
			]
,			[
				59,
				cr.plugins_.pix_spilgames.prototype.acts.showSplash,
				null,
				6966616238330746,
				false
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				4425552821401292,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					9459554742240997,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					845022906264237,
					false
					,[
					[
						2,
						["click on the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
,			[
				0,
				null,
				false,
				null,
				3803367599869897,
				[
				],
				[
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5976812647431255,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				false,
				false,
				6827662098266695,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				3459130118277704,
				false
				,[
				[
					8,
					2
				]
,				[
					0,
					[
						0,
						17
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				6969405321706207,
				false
				,[
				[
					0,
					[
						4,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
			,[
			[
				0,
				null,
				false,
				null,
				5979778257276712,
				[
				[
					-1,
					cr.system_object.prototype.cnds.CompareVar,
					null,
					0,
					false,
					false,
					false,
					3002210832580013,
					false
					,[
					[
						11,
						"IsEffectEnabled"
					]
,					[
						8,
						0
					]
,					[
						7,
						[
							0,
							1
						]
					]
					]
				]
				],
				[
				[
					44,
					cr.plugins_.Audio.prototype.acts.Play,
					null,
					74904258636043,
					false
					,[
					[
						2,
						["the mouse point to the button",false]
					]
,					[
						3,
						0
					]
,					[
						0,
						[
							0,
							0
						]
					]
,					[
						1,
						[
							2,
							""
						]
					]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7352296505072756,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.IsOverObject,
				null,
				0,
				false,
				true,
				false,
				8802837168385406,
				false
				,[
				[
					4,
					16
				]
				]
			]
,			[
				16,
				cr.plugins_.Sprite.prototype.cnds.CompareFrame,
				null,
				0,
				false,
				false,
				false,
				7879222661898872,
				false
				,[
				[
					8,
					4
				]
,				[
					0,
					[
						0,
						16
					]
				]
				]
			]
			],
			[
			[
				16,
				cr.plugins_.Sprite.prototype.acts.SetAnimFrame,
				null,
				1467682431157506,
				false
				,[
				[
					0,
					[
						5,
						[
							20,
							16,
							cr.plugins_.Sprite.prototype.exps.AnimationFrame,
							false,
							null
						]
						,[
							0,
							17
						]
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			true,
			null,
			8961522818524038,
			[
			[
				5,
				cr.plugins_.Mouse.prototype.cnds.OnObjectClicked,
				null,
				1,
				false,
				false,
				false,
				235068403448364,
				false
				,[
				[
					3,
					0
				]
,				[
					3,
					0
				]
,				[
					4,
					20
				]
				]
			]
,			[
				4,
				cr.plugins_.Touch.prototype.cnds.OnTouchObject,
				null,
				1,
				false,
				false,
				false,
				3312162410016574,
				false
				,[
				[
					4,
					20
				]
				]
			]
			],
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.acts.openOutgoingLink,
				null,
				9240320704868547,
				false
				,[
				[
					1,
					[
						2,
						"logo"
					]
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			7683646152775748,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				false,
				false,
				9836143036861668,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				9139588804101856,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			170960471698325,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.IsPortraitLandscape,
				null,
				0,
				false,
				true,
				false,
				5545110381608925,
				false
				,[
				[
					3,
					0
				]
				]
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.SetLayerVisible,
				null,
				2470861425594534,
				false
				,[
				[
					5,
					[
						0,
						1
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			4193191183756483,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageHidden,
				null,
				1,
				false,
				false,
				false,
				6531412617097296,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				1682675827872046,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					0
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			1019852222670904,
			[
			[
				38,
				cr.plugins_.Browser.prototype.cnds.OnPageVisible,
				null,
				1,
				false,
				false,
				false,
				4621460420001103,
				false
			]
			],
			[
			[
				44,
				cr.plugins_.Audio.prototype.acts.SetPaused,
				null,
				9453492771361104,
				false
				,[
				[
					1,
					[
						2,
						""
					]
				]
,				[
					3,
					1
				]
				]
			]
			]
		]
,		[
			0,
			null,
			false,
			null,
			5397410110281005,
			[
			[
				59,
				cr.plugins_.pix_spilgames.prototype.cnds.startGame,
				null,
				1,
				false,
				false,
				false,
				4944425477127793,
				false
			]
			],
			[
			[
				-1,
				cr.system_object.prototype.acts.GoToLayout,
				null,
				5528562061908423,
				false
				,[
				[
					6,
					"Loading"
				]
				]
			]
			]
		]
		]
	]
	],
	"media/",
	false,
	960,
	700,
	3,
	true,
	true,
	false,
	"1.0.0.0",
	true,
	true,
	1,
	2,
	2182,
	true,
	true,
	[
	]
];};
